[
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "app.getdialer/dialer",
      "description": "An MCP server that provides your you make outbound phone calls using your own phone number",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://getdialer.app/mcp"
        },
        {
          "type": "sse",
          "url": "https://getdialer.app/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-08T23:47:09.452138Z",
        "updatedAt": "2025-09-09T00:16:49.16262Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "app.getdialer/dialer",
      "description": "An MCP server that provides lets you make outbound phone calls using your own phone number",
      "repository": {},
      "version": "1.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://getdialer.app/mcp"
        },
        {
          "type": "sse",
          "url": "https://getdialer.app/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T00:16:49.107843Z",
        "updatedAt": "2025-09-09T00:16:49.107843Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.pulsemcp.servers/pulse-fetch",
      "description": "MCP server that extracts clean, structured content from web pages with anti-bot bypass capabilities.",
      "repository": {
        "url": "https://github.com/pulsemcp/mcp-servers",
        "source": "github",
        "subfolder": "productionized/pulse-fetch"
      },
      "version": "0.2.14",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@pulsemcp/pulse-fetch",
          "version": "0.2.14",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "API key for Firecrawl service to bypass anti-bot measures",
              "isSecret": true,
              "name": "FIRECRAWL_API_KEY"
            },
            {
              "description": "Bearer token for BrightData Web Unlocker service",
              "isSecret": true,
              "name": "BRIGHTDATA_API_KEY"
            },
            {
              "description": "Path to markdown file containing scraping strategy configuration",
              "default": "/tmp/pulse-fetch/strategy.md",
              "name": "STRATEGY_CONFIG_PATH"
            },
            {
              "description": "Optimization strategy for scraping: cost or speed",
              "default": "cost",
              "choices": [
                "cost",
                "speed"
              ],
              "name": "OPTIMIZE_FOR"
            },
            {
              "description": "Storage backend for saved resources: memory or filesystem",
              "default": "memory",
              "choices": [
                "memory",
                "filesystem"
              ],
              "name": "MCP_RESOURCE_STORAGE"
            },
            {
              "description": "Directory for filesystem storage (only used with filesystem type)",
              "default": "/tmp/pulse-fetch/resources",
              "name": "MCP_RESOURCE_FILESYSTEM_ROOT"
            },
            {
              "description": "Skip API authentication health checks at startup",
              "format": "boolean",
              "default": "false",
              "name": "SKIP_HEALTH_CHECKS"
            },
            {
              "description": "LLM provider for extract feature: anthropic, openai, openai-compatible",
              "choices": [
                "anthropic",
                "openai",
                "openai-compatible"
              ],
              "name": "LLM_PROVIDER"
            },
            {
              "description": "API key for the chosen LLM provider",
              "isSecret": true,
              "name": "LLM_API_KEY"
            },
            {
              "description": "Base URL for OpenAI-compatible providers",
              "name": "LLM_API_BASE_URL"
            },
            {
              "description": "Specific model to use for extraction",
              "name": "LLM_MODEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T00:19:19.119118Z",
        "updatedAt": "2025-09-09T00:19:19.119118Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ycjcl868/mcp-server-fear-greed",
      "description": "An MCP server for mcp-server-fear-greed",
      "repository": {
        "url": "https://github.com/ycjcl868/mcp-server-fear-greed",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-server-fear-greed",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T03:01:43.052528Z",
        "updatedAt": "2025-09-09T04:08:35.763105Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.king-of-the-grackles/reddit-research-mcp",
      "description": "Turn Reddit's chaos into structured insights with full citations - MCP server for Reddit research",
      "repository": {
        "url": "https://github.com/king-of-the-grackles/reddit-research-mcp",
        "source": "github"
      },
      "version": "0.1.1",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "reddit-research-mcp",
          "version": "0.1.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T03:30:11.72135Z",
        "updatedAt": "2025-09-09T03:30:11.72135Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.savhascelik/meta-api-mcp-server",
      "description": "A configuration-driven Meta API Gateway server for the Model Context Protocol (MCP).",
      "repository": {
        "url": "https://github.com/savhascelik/meta-api-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "meta-api-mcp-server",
          "version": "1.0.4",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "If the api you are connecting to requires api_key, you can use this variable and you can also define different variables",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T04:02:19.493256Z",
        "updatedAt": "2025-09-09T04:14:51.989316Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ycjcl868/mcp-server-fear-greed",
      "description": "An MCP server for mcp-server-fear-greed",
      "repository": {
        "url": "https://github.com/ycjcl868/mcp-server-fear-greed",
        "source": "github"
      },
      "version": "1.0.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-server-fear-greed",
          "version": "latest",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-server-fear-greed",
          "version": "latest",
          "runtimeHint": "npx",
          "transport": {
            "type": "sse",
            "url": "http://127.0.0.1:{port}/sse"
          },
          "packageArguments": [
            {
              "description": "Server port number",
              "isRequired": true,
              "format": "number",
              "default": "8089",
              "type": "named",
              "name": "port"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-server-fear-greed",
          "version": "latest",
          "runtimeHint": "npx",
          "transport": {
            "type": "streamable-http",
            "url": "http://127.0.0.1:{port}/mcp"
          },
          "packageArguments": [
            {
              "description": "Server port number",
              "isRequired": true,
              "format": "number",
              "default": "8089",
              "type": "named",
              "name": "port"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T04:08:35.601638Z",
        "updatedAt": "2025-09-09T04:08:35.601638Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.savhascelik/meta-api-mcp-server",
      "description": "You can connect any API to LLMs. This enables AI to interact directly with APIs",
      "repository": {
        "url": "https://github.com/savhascelik/meta-api-mcp-server",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "meta-api-mcp-server",
          "version": "1.0.4",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "If the api you are connecting to requires api_key, you can use this variable and you can also define different variables",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T04:14:51.983728Z",
        "updatedAt": "2025-09-09T04:14:51.983728Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.domdomegg/airtable-mcp-server",
      "description": "Read and write access to Airtable database schemas, tables, and records.",
      "repository": {
        "url": "https://github.com/domdomegg/airtable-mcp-server.git",
        "source": "github"
      },
      "version": "1.7.2",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "airtable-mcp-server",
          "version": "1.7.2",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Airtable personal access token (e.g., pat123.abc123). Create at https://airtable.com/create/tokens/new with scopes: schema.bases:read, data.records:read, and optionally schema.bases:write and data.records:write.",
              "isRequired": true,
              "isSecret": true,
              "name": "AIRTABLE_API_KEY"
            }
          ]
        },
        {
          "registryType": "oci",
          "identifier": "docker.io/domdomegg/airtable-mcp-server:1.7.2",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Airtable personal access token (e.g., pat123.abc123). Create at https://airtable.com/create/tokens/new with scopes: schema.bases:read, data.records:read, and optionally schema.bases:write and data.records:write.",
              "isRequired": true,
              "isSecret": true,
              "name": "AIRTABLE_API_KEY"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/domdomegg/airtable-mcp-server/releases/download/v1.7.2/airtable-mcp-server.mcpb",
          "fileSha256": "8220de07a08ebe908f04da139ea03dbfe29758141347e945da60535fb7bcca20",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T04:31:18.38771Z",
        "updatedAt": "2025-09-12T03:19:04.504087Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.formulahendry/code-runner",
      "description": "Code Runner MCP Server which can run code in various programming languages.",
      "repository": {
        "url": "https://github.com/formulahendry/mcp-server-code-runner",
        "source": "github"
      },
      "version": "0.1.8",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-server-code-runner",
          "version": "0.1.8",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T04:42:11.802682Z",
        "updatedAt": "2025-09-09T04:42:11.802682Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.tuannvm/mcp-trino",
      "description": "MCP server for Trino distributed SQL query engine access",
      "repository": {
        "url": "https://github.com/tuannvm/mcp-trino",
        "source": "github"
      },
      "version": "2.2.1",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/tuannvm/mcp-trino/releases/download/v2.2.1/mcp-trino_2.2.1_darwin_arm64.tar.gz",
          "fileSha256": "1a18882ab43243e17420f3562118a4c3e7fff12bc6b145066ae64b90b2dc0159",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Trino server hostname",
              "isRequired": true,
              "format": "string",
              "name": "TRINO_HOST"
            },
            {
              "description": "Trino server port",
              "format": "string",
              "name": "TRINO_PORT"
            },
            {
              "description": "Trino username",
              "isRequired": true,
              "format": "string",
              "name": "TRINO_USER"
            },
            {
              "description": "Trino password",
              "format": "string",
              "isSecret": true,
              "name": "TRINO_PASSWORD"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T05:26:17.749412Z",
        "updatedAt": "2025-09-09T05:26:17.749412Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.marianfoo/mcp-sap-docs",
      "description": "Fast MCP server for unified SAP docs search (SAPUI5, CAP, OpenUI5, wdi5) with BM25 full-text search",
      "repository": {
        "url": "https://github.com/marianfoo/mcp-sap-docs",
        "source": "github"
      },
      "version": "0.3.9",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-sap-docs",
          "version": "0.3.9",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T05:59:06.222569Z",
        "updatedAt": "2025-09-09T05:59:06.222569Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.surendranb/google-analytics-mcp",
      "description": "An MCP server that provides [describe what your server does]",
      "repository": {
        "url": "https://github.com/surendranb/google-analytics-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "google-analytics-mcp",
          "version": "1.2.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T06:10:41.490268Z",
        "updatedAt": "2025-09-09T06:10:41.490268Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.bytedance/mcp-server-browser",
      "description": "MCP server for browser use access",
      "repository": {
        "url": "https://github.com/bytedance/UI-TARS-desktop",
        "source": "github",
        "subfolder": "packages/agent-infra/mcp-servers/browser"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@agent-infra/mcp-server-browser",
          "version": "latest",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "description": "browser or chrome channel to use, possible values: chrome, edge, firefox.",
              "format": "string",
              "type": "named",
              "name": "browser"
            },
            {
              "description": "Chrome DevTools Protocol endpoint URL",
              "format": "string",
              "type": "named",
              "name": "cdp-endpoint"
            },
            {
              "description": "WebSocket endpoint to connect to, for example",
              "format": "string",
              "type": "named",
              "name": "ws-endpoint"
            },
            {
              "description": "Path to the browser executable",
              "format": "string",
              "type": "named",
              "name": "executable-path"
            },
            {
              "description": "Path to the output directory",
              "format": "string",
              "type": "named",
              "name": "output-dir"
            },
            {
              "description": "Comma-separated list of patterns to bypass the proxy",
              "format": "string",
              "type": "named",
              "name": "proxy-bypass"
            },
            {
              "description": "Proxy server address",
              "format": "string",
              "type": "named",
              "name": "proxy-server"
            },
            {
              "description": "Run server that uses screenshots (Aria snapshots are used by default)",
              "format": "boolean",
              "type": "named",
              "name": "vision"
            }
          ],
          "environmentVariables": [
            {
              "description": "DISPLAY environment variable for browser rendering",
              "format": "string",
              "name": "DISPLAY"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@agent-infra/mcp-server-browser",
          "version": "latest",
          "runtimeHint": "npx",
          "transport": {
            "type": "sse",
            "url": "http://127.0.0.1:{port}/sse"
          },
          "packageArguments": [
            {
              "description": "Server port number",
              "isRequired": true,
              "format": "number",
              "default": "8089",
              "type": "named",
              "name": "port"
            },
            {
              "description": "browser or chrome channel to use, possible values: chrome, edge, firefox.",
              "format": "string",
              "type": "named",
              "name": "browser"
            },
            {
              "description": "Chrome DevTools Protocol endpoint URL",
              "format": "string",
              "type": "named",
              "name": "cdp-endpoint"
            },
            {
              "description": "WebSocket endpoint to connect to, for example",
              "format": "string",
              "type": "named",
              "name": "ws-endpoint"
            },
            {
              "description": "Path to the browser executable",
              "format": "string",
              "type": "named",
              "name": "executable-path"
            },
            {
              "description": "Path to the output directory",
              "format": "string",
              "type": "named",
              "name": "output-dir"
            },
            {
              "description": "Comma-separated list of patterns to bypass the proxy",
              "format": "string",
              "type": "named",
              "name": "proxy-bypass"
            },
            {
              "description": "Proxy server address",
              "format": "string",
              "type": "named",
              "name": "proxy-server"
            },
            {
              "description": "Run server that uses screenshots (Aria snapshots are used by default)",
              "format": "boolean",
              "type": "named",
              "name": "vision"
            }
          ],
          "environmentVariables": [
            {
              "description": "DISPLAY environment variable for browser rendering",
              "format": "string",
              "name": "DISPLAY"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@agent-infra/mcp-server-browser",
          "version": "latest",
          "runtimeHint": "npx",
          "transport": {
            "type": "streamable-http",
            "url": "http://127.0.0.1:{port}/mcp"
          },
          "packageArguments": [
            {
              "description": "Server port number",
              "isRequired": true,
              "format": "number",
              "default": "8089",
              "type": "named",
              "name": "port"
            },
            {
              "description": "browser or chrome channel to use, possible values: chrome, edge, firefox.",
              "format": "string",
              "type": "named",
              "name": "browser"
            },
            {
              "description": "Chrome DevTools Protocol endpoint URL",
              "format": "string",
              "type": "named",
              "name": "cdp-endpoint"
            },
            {
              "description": "WebSocket endpoint to connect to, for example",
              "format": "string",
              "type": "named",
              "name": "ws-endpoint"
            },
            {
              "description": "Path to the browser executable",
              "format": "string",
              "type": "named",
              "name": "executable-path"
            },
            {
              "description": "Path to the output directory",
              "format": "string",
              "type": "named",
              "name": "output-dir"
            },
            {
              "description": "Comma-separated list of patterns to bypass the proxy",
              "format": "string",
              "type": "named",
              "name": "proxy-bypass"
            },
            {
              "description": "Proxy server address",
              "format": "string",
              "type": "named",
              "name": "proxy-server"
            },
            {
              "description": "Run server that uses screenshots (Aria snapshots are used by default)",
              "format": "boolean",
              "type": "named",
              "name": "vision"
            }
          ],
          "environmentVariables": [
            {
              "description": "DISPLAY environment variable for browser rendering",
              "format": "string",
              "name": "DISPLAY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T06:16:24.728253Z",
        "updatedAt": "2025-09-09T06:16:24.728253Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.bytedance/mcp-server-commands",
      "description": "An MCP server to run arbitrary commands",
      "repository": {
        "url": "https://github.com/bytedance/UI-TARS-desktop",
        "source": "github",
        "subfolder": "packages/agent-infra/mcp-servers/commands"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@agent-infra/mcp-server-commands",
          "version": "latest",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "description": "current working directory",
              "format": "string",
              "type": "named",
              "name": "cwd"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@agent-infra/mcp-server-commands",
          "version": "latest",
          "runtimeHint": "npx",
          "transport": {
            "type": "sse",
            "url": "http://127.0.0.1:{port}/sse"
          },
          "packageArguments": [
            {
              "description": "current working directory",
              "format": "string",
              "type": "named",
              "name": "cwd"
            },
            {
              "description": "Server port number",
              "isRequired": true,
              "format": "number",
              "default": "8089",
              "type": "named",
              "name": "port"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@agent-infra/mcp-server-commands",
          "version": "latest",
          "runtimeHint": "npx",
          "transport": {
            "type": "streamable-http",
            "url": "http://127.0.0.1:{port}/mcp"
          },
          "runtimeArguments": [
            {
              "description": "current working directory",
              "format": "string",
              "type": "named",
              "name": "cwd"
            }
          ],
          "packageArguments": [
            {
              "description": "Server port number",
              "isRequired": true,
              "format": "number",
              "default": "8089",
              "type": "named",
              "name": "port"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T06:16:30.413724Z",
        "updatedAt": "2025-09-09T06:16:30.413724Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.bytedance/mcp-server-filesystem",
      "description": "MCP server for filesystem access",
      "repository": {
        "url": "https://github.com/bytedance/UI-TARS-desktop",
        "source": "github",
        "subfolder": "packages/agent-infra/mcp-servers/filesystem"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@agent-infra/mcp-server-filesystem",
          "version": "latest",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "description": "Comma-separated list of allowed directories for file operations",
              "isRequired": true,
              "format": "string",
              "type": "named",
              "name": "allowed-directories"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@agent-infra/mcp-server-filesystem",
          "version": "latest",
          "runtimeHint": "npx",
          "transport": {
            "type": "sse",
            "url": "http://127.0.0.1:{port}/sse"
          },
          "packageArguments": [
            {
              "description": "Comma-separated list of allowed directories for file operations",
              "isRequired": true,
              "format": "string",
              "type": "named",
              "name": "allowed-directories"
            },
            {
              "description": "Server port number",
              "isRequired": true,
              "format": "number",
              "default": "8089",
              "type": "named",
              "name": "port"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@agent-infra/mcp-server-filesystem",
          "version": "latest",
          "runtimeHint": "npx",
          "transport": {
            "type": "streamable-http",
            "url": "http://127.0.0.1:{port}/mcp"
          },
          "packageArguments": [
            {
              "description": "Comma-separated list of allowed directories for file operations",
              "isRequired": true,
              "format": "string",
              "type": "named",
              "name": "allowed-directories"
            },
            {
              "description": "Server port number",
              "isRequired": true,
              "format": "number",
              "default": "8089",
              "type": "named",
              "name": "port"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T06:16:36.369748Z",
        "updatedAt": "2025-09-09T06:16:36.369748Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.bytedance/mcp-server-search",
      "description": "MCP server for web search operations",
      "repository": {
        "url": "https://github.com/bytedance/UI-TARS-desktop",
        "source": "github",
        "subfolder": "packages/agent-infra/mcp-servers/search"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@agent-infra/mcp-server-search",
          "version": "latest",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "description": "Search engine to use for browser search (default: google)",
              "format": "string",
              "default": "google",
              "type": "named",
              "name": "engine"
            },
            {
              "description": "API key for the search provider",
              "format": "string",
              "type": "named",
              "name": "api-key"
            },
            {
              "description": "Base URL for the search provider",
              "format": "string",
              "type": "named",
              "name": "base-url"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@agent-infra/mcp-server-search",
          "version": "latest",
          "runtimeHint": "npx",
          "transport": {
            "type": "sse",
            "url": "http://127.0.0.1:{port}/sse"
          },
          "packageArguments": [
            {
              "description": "Search engine to use for browser search (default: google)",
              "format": "string",
              "default": "google",
              "type": "named",
              "name": "engine"
            },
            {
              "description": "API key for the search provider",
              "format": "string",
              "type": "named",
              "name": "api-key"
            },
            {
              "description": "Base URL for the search provider",
              "format": "string",
              "type": "named",
              "name": "base-url"
            },
            {
              "description": "Server port number",
              "isRequired": true,
              "format": "number",
              "default": "8089",
              "type": "named",
              "name": "port"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@agent-infra/mcp-server-search",
          "version": "latest",
          "runtimeHint": "npx",
          "transport": {
            "type": "streamable-http",
            "url": "http://127.0.0.1:{port}/mcp"
          },
          "packageArguments": [
            {
              "description": "Search engine to use for browser search (default: google)",
              "format": "string",
              "default": "google",
              "type": "named",
              "name": "engine"
            },
            {
              "description": "API key for the search provider",
              "format": "string",
              "type": "named",
              "name": "api-key"
            },
            {
              "description": "Base URL for the search provider",
              "format": "string",
              "type": "named",
              "name": "base-url"
            },
            {
              "description": "Server port number",
              "isRequired": true,
              "format": "number",
              "default": "8089",
              "type": "named",
              "name": "port"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T06:16:40.975101Z",
        "updatedAt": "2025-09-09T06:16:40.975101Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.letta/memory-mcp",
      "description": "MCP server for AI memory management using Letta - Standard MCP format",
      "repository": {
        "url": "https://github.com/letta-ai/memory-mcp",
        "source": "github"
      },
      "version": "2.0.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@letta-ai/memory-mcp",
          "version": "2.0.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Letta API key for memory operations",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "LETTA_API_KEY"
            },
            {
              "description": "Unique user identifier for associated memories",
              "format": "string",
              "name": "LETTA_USER_ID"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T06:28:26.340373Z",
        "updatedAt": "2025-09-09T06:28:26.340373Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.mobile-next/mobile-mcp",
      "description": "MCP server for iOS and Android Mobile Development, Automation and Testing",
      "repository": {
        "url": "https://github.com/mobile-next/mobile-mcp",
        "source": "github"
      },
      "version": "0.0.26",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@mobilenext/mobile-mcp",
          "version": "0.0.26",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "name": ""
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T06:51:49.988573Z",
        "updatedAt": "2025-09-09T06:51:49.988573Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "md.install/try",
      "description": "Create guides to instruct coding agents to use your software (SDK, library, framework, API, etc).",
      "repository": {},
      "version": "0.1.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://install.md/mcp/try"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T07:04:48.602632Z",
        "updatedAt": "2025-09-09T07:10:11.210376Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.stefanoamorelli/sec-edgar-mcp",
      "description": "SEC EDGAR MCP server that provides access to the US public filings through the US SEC EDGAR API",
      "repository": {
        "url": "https://github.com/stefanoamorelli/sec-edgar-mcp",
        "source": "github"
      },
      "version": "1.0.5",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "sec-edgar-mcp",
          "version": "1.0.5",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "The user agent to access the SEC EDGAR API",
              "isRequired": true,
              "format": "string",
              "name": "SEC_EDGAR_USER_AGENT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T07:06:26.344648Z",
        "updatedAt": "2025-09-09T07:06:26.344648Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "md.install/try",
      "description": "Create guides as MCP servers to instruct coding agents to use your software (library, API, etc).",
      "repository": {},
      "version": "0.1.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://install.md/mcp/try"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T07:10:11.15668Z",
        "updatedAt": "2025-09-09T07:10:11.15668Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.LinuxSuRen/atest-mcp-server",
      "description": "Auto-download & launch https://github.com/LinuxSuRen/atest-mcp-server",
      "repository": {
        "url": "https://github.com/LinuxSuRen/atest-mcp-server",
        "source": "github"
      },
      "version": "1.0.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "atest-mcp-server-launcher",
          "version": "1.0.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T07:37:00.342794Z",
        "updatedAt": "2025-09-09T07:37:00.342794Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.priyankark/lighthouse-mcp",
      "description": "MCP server for Google Lighthouse performance metrics",
      "repository": {
        "url": "https://github.com/priyankark/lighthouse-mcp",
        "source": "github"
      },
      "version": "0.1.7",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "lighthouse-mcp",
          "version": "0.1.7",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T08:43:00.133474Z",
        "updatedAt": "2025-09-09T10:02:57.251229Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.priyankark/lighthouse-mcp",
      "description": "MCP server for Google Lighthouse performance metrics",
      "repository": {
        "url": "https://github.com/priyankark/lighthouse-mcp",
        "source": "github"
      },
      "version": "0.1.9",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "lighthouse-mcp",
          "version": "0.1.9",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T10:02:57.08666Z",
        "updatedAt": "2025-09-09T10:02:57.08666Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.shawndurrani/mcp-merchant",
      "description": "Search-only commerce MCP server backed by Stripe (test)",
      "repository": {},
      "version": "0.1.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-merchant",
          "version": "0.1.0",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Stripe secret key (test mode)",
              "isRequired": true,
              "isSecret": true,
              "name": "STRIPE_SECRET_KEY"
            },
            {
              "description": "Max products to cache",
              "default": "100",
              "name": "PRODUCT_LIMIT"
            },
            {
              "description": "Catalog refresh interval in seconds",
              "default": "600",
              "name": "REFRESH_INTERVAL_SEC"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T10:36:46.54185Z",
        "updatedAt": "2025-09-14T02:22:00.597355Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.remote-mcp/registry-mcp",
      "description": "An MCP server that serves informtaion from the official MCP registry",
      "repository": {
        "url": "https://github.com/jaw9c/mcp-registry-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://registry-mcp.remote-mcp.com"
        },
        {
          "type": "sse",
          "url": "https://registry-mcp.remote-mcp.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T11:30:24.582713Z",
        "updatedAt": "2025-09-09T11:30:24.582713Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Flightradar24/fr24api-mcp",
      "description": "MCP server providing access to the Flightradar24 API for real-time and historical flight data",
      "repository": {
        "url": "https://github.com/Flightradar24/fr24api-mcp",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@flightradar24/fr24api-mcp",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for Flightradar24 API",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "FR24_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T11:42:51.309275Z",
        "updatedAt": "2025-09-09T11:42:51.309275Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.waystation/mcp",
      "description": "Ultimate toolbox to connect your LLM to popular productivity tools such as Monday, AirTable, Slack",
      "repository": {
        "url": "https://github.com/waystation-ai/mcp",
        "source": "github"
      },
      "version": "0.3.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://waystation.ai/mcp"
        },
        {
          "type": "sse",
          "url": "https://waystation.ai/mcp/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T12:10:02.48793Z",
        "updatedAt": "2025-09-09T12:10:02.48793Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.DeanWard/HAL",
      "description": "HAL (HTTP API Layer) - An MCP server that provides HTTP API capabilities to Large Language Models",
      "repository": {
        "url": "https://github.com/DeanWard/HAL",
        "source": "github"
      },
      "version": "1.0.14",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "hal-mcp",
          "version": "1.0.14",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T13:04:11.86093Z",
        "updatedAt": "2025-09-09T13:04:11.86093Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.variflight/variflight-mcp",
      "description": "Variflight MCP Server",
      "repository": {
        "url": "https://github.com/variflight/variflight-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@variflight-ai/variflight-mcp",
          "version": "1.0.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "VARIFLIGHT_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T13:30:29.381064Z",
        "updatedAt": "2025-09-09T13:43:56.537304Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.variflight/variflight-mcp",
      "description": "Variflight MCP Server",
      "repository": {
        "url": "https://github.com/variflight/variflight-mcp",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@variflight-ai/variflight-mcp",
          "version": "1.0.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "VARIFLIGHT_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T13:43:56.480561Z",
        "updatedAt": "2025-09-12T07:06:18.91111Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.zhongweili/nanobanana-mcp-server",
      "description": "An MCP server that provides image generation and editing capabilities",
      "repository": {
        "url": "https://github.com/zhongweili/nanobanana-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "nanobanana-mcp-server",
          "version": "1.0.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your Gemini API key",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "GEMINI_API_KEY"
            },
            {
              "description": "The image output directory",
              "format": "string",
              "name": "IMAGE_OUTPUT_DIR"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T13:45:29.896269Z",
        "updatedAt": "2025-09-09T13:45:29.896269Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.pshivapr/selenium-mcp",
      "description": "Selenium Tools for MCP",
      "repository": {
        "url": "https://github.com/pshivapr/selenium-mcp",
        "source": "github"
      },
      "version": "0.3.8",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "selenium-webdriver-mcp",
          "version": "0.3.8",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "format": "string",
              "isSecret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T13:53:12.051952Z",
        "updatedAt": "2025-09-09T19:08:26.438447Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.waystation/monday",
      "description": "Access and manage your Monday.com boards, items, and updates seamlessly",
      "repository": {
        "url": "https://github.com/waystation-ai/mcp",
        "source": "github"
      },
      "version": "0.3.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://waystation.ai/monday/mcp"
        },
        {
          "type": "sse",
          "url": "https://waystation.ai/monday/mcp/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T14:20:40.836347Z",
        "updatedAt": "2025-09-09T14:20:40.836347Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.waystation/airtable",
      "description": "Access and manage your Airtable bases, tables, and records seamlessly",
      "repository": {
        "url": "https://github.com/waystation-ai/mcp",
        "source": "github"
      },
      "version": "0.3.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://waystation.ai/airtable/mcp"
        },
        {
          "type": "sse",
          "url": "https://waystation.ai/airtable/mcp/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T14:23:23.086629Z",
        "updatedAt": "2025-09-09T14:23:23.086629Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.waystation/slack",
      "description": "Send messages, access channels, and manage files in your Slack workspace.",
      "repository": {
        "url": "https://github.com/waystation-ai/mcp",
        "source": "github"
      },
      "version": "0.3.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://waystation.ai/slack/mcp"
        },
        {
          "type": "sse",
          "url": "https://waystation.ai/slack/mcp/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T14:32:49.571767Z",
        "updatedAt": "2025-09-09T14:32:49.571767Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.waystation/miro",
      "description": "Collaborate on visual boards with your team using Miro integration.",
      "repository": {
        "url": "https://github.com/waystation-ai/mcp",
        "source": "github"
      },
      "version": "0.3.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://waystation.ai/miro/mcp"
        },
        {
          "type": "sse",
          "url": "https://waystation.ai/miro/mcp/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T14:32:52.805916Z",
        "updatedAt": "2025-09-09T14:32:52.805916Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.waystation/office",
      "description": "Create, edit, and collaborate on Office documents and spreadsheets.",
      "repository": {
        "url": "https://github.com/waystation-ai/mcp",
        "source": "github"
      },
      "version": "0.3.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://waystation.ai/office/mcp"
        },
        {
          "type": "sse",
          "url": "https://waystation.ai/office/mcp/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T14:32:54.334202Z",
        "updatedAt": "2025-09-09T14:32:54.334202Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.waystation/wrike",
      "description": "Manage projects, tasks, and workflows with Wrike project management.",
      "repository": {
        "url": "https://github.com/waystation-ai/mcp",
        "source": "github"
      },
      "version": "0.3.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://waystation.ai/wrike/mcp"
        },
        {
          "type": "sse",
          "url": "https://waystation.ai/wrike/mcp/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T14:37:01.216779Z",
        "updatedAt": "2025-09-09T14:37:01.216779Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Selenium39/mcp-server-tempmail",
      "description": "MCP server for temporary email management using ChatTempMail API",
      "repository": {
        "url": "https://github.com/Selenium39/mcp-server-tempmail",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-server-tempmail",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "API key for ChatTempMail service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "TEMPMAIL_API_KEY"
            },
            {
              "description": "Base URL for ChatTempMail API (optional, defaults to https://chat-tempmail.com)",
              "format": "string",
              "name": "TEMPMAIL_BASE_URL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T14:44:19.17038Z",
        "updatedAt": "2025-09-09T14:44:19.17038Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.waystation/jira",
      "description": "Track issues, manage projects, and streamline workflows in Jira.",
      "repository": {
        "url": "https://github.com/waystation-ai/mcp",
        "source": "github"
      },
      "version": "0.3.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://waystation.ai/jira/mcp"
        },
        {
          "type": "sse",
          "url": "https://waystation.ai/jira/mcp/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T14:46:07.210891Z",
        "updatedAt": "2025-09-09T14:46:07.210891Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.waystation/gmail",
      "description": "Read emails, send messages, and manage labels in your Gmail account.",
      "repository": {
        "url": "https://github.com/waystation-ai/mcp",
        "source": "github"
      },
      "version": "0.3.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://waystation.ai/gmail/mcp"
        },
        {
          "type": "sse",
          "url": "https://waystation.ai/gmail/mcp/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T14:46:07.96981Z",
        "updatedAt": "2025-09-09T14:46:07.96981Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.waystation/teams",
      "description": "Collaborate, chat, and manage meetings in Microsoft Teams.",
      "repository": {
        "url": "https://github.com/waystation-ai/mcp",
        "source": "github"
      },
      "version": "0.3.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://waystation.ai/teams/mcp"
        },
        {
          "type": "sse",
          "url": "https://waystation.ai/teams/mcp/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T14:46:08.709922Z",
        "updatedAt": "2025-09-09T14:46:08.709922Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.waystation/postgres",
      "description": "Connect to your PostgreSQL database to query data and schemas.",
      "repository": {
        "url": "https://github.com/waystation-ai/mcp",
        "source": "github"
      },
      "version": "0.3.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://waystation.ai/postgres/mcp"
        },
        {
          "type": "sse",
          "url": "https://waystation.ai/postgres/mcp/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T14:46:09.489652Z",
        "updatedAt": "2025-09-09T14:46:09.489652Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.waystation/supabase",
      "description": "Connect to your Supabase database to query data and schemas.",
      "repository": {
        "url": "https://github.com/waystation-ai/mcp",
        "source": "github"
      },
      "version": "0.3.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://waystation.ai/supabase/mcp"
        },
        {
          "type": "sse",
          "url": "https://waystation.ai/supabase/mcp/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T14:46:10.221625Z",
        "updatedAt": "2025-09-09T14:46:10.221625Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.rbonestell/ap-mcp-server",
      "description": "Model Context Protocol (MCP) server for the Associated Press Media API",
      "repository": {
        "url": "https://github.com/rbonestell/ap-mcp-server",
        "source": "github"
      },
      "version": "1.2.6",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "ap-mcp-server",
          "version": "1.2.6",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T14:57:28.79471Z",
        "updatedAt": "2025-09-09T14:57:28.79471Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.huoshuiai42/huoshui-file-search",
      "description": "An MCP server that provides fast Spotlight file search capabilities for macOS",
      "repository": {
        "url": "https://github.com/huoshuiai42/huoshui-file-search",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "huoshui-file-search",
          "version": "1.0.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T15:19:22.241727Z",
        "updatedAt": "2025-09-09T15:19:22.241727Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.globalping/mcp",
      "description": "Interact with a global network measurement platform.Run network commands from any point in the world",
      "repository": {
        "url": "https://github.com/jsdelivr/globalping-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.globalping.io/sse"
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.globalping.io/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T15:58:08.139459Z",
        "updatedAt": "2025-09-09T15:58:08.139459Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.GLips/Figma-Context-MCP",
      "description": "Give your coding agent access to your Figma data. Implement designs in any framework in one-shot.",
      "repository": {
        "url": "https://github.com/GLips/Figma-Context-MCP",
        "source": "github"
      },
      "version": "0.6.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "figma-developer-mcp",
          "version": "0.6.0",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "--stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Your Figma Personal Access Token, learn more here: https://www.figma.com/developers/api#access-tokens",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "FIGMA_API_KEY"
            },
            {
              "description": "Start the server in stdio mode, keep as CLI",
              "default": "cli",
              "name": "NODE_ENV"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T16:40:36.136529Z",
        "updatedAt": "2025-09-09T16:40:36.136529Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.onkernel/kernel-mcp-server",
      "description": "Access Kernel's cloud-based browsers and app actions via MCP (remote HTTP + OAuth).",
      "repository": {
        "url": "https://github.com/onkernel/kernel-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.onkernel.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T18:04:37.617707Z",
        "updatedAt": "2025-09-09T18:04:37.617707Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.close/close-mcp",
      "description": "Close CRM to manage your sales pipeline. Learn more at https://close.com or https://mcp.close.com",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.close.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T18:15:23.108331Z",
        "updatedAt": "2025-09-22T21:07:57.610561Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cameroncooke/XcodeBuildMCP",
      "description": "XcodeBuildMCP provides tools for Xcode project management, simulator management, and app utilities.",
      "repository": {
        "url": "https://github.com/cameroncooke/XcodeBuildMCP",
        "source": "github"
      },
      "version": "1.12.7",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "xcodebuildmcp",
          "version": "1.12.7",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T19:05:37.138311Z",
        "updatedAt": "2025-09-09T19:54:23.231289Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.pshivapr/selenium-mcp",
      "description": "Selenium Tools for MCP",
      "repository": {
        "url": "https://github.com/pshivapr/selenium-mcp",
        "source": "github"
      },
      "version": "0.3.9",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "selenium-webdriver-mcp",
          "version": "0.3.9",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "format": "string",
              "isSecret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T19:08:26.435101Z",
        "updatedAt": "2025-09-11T13:43:51.36733Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.mintmcp/gmail",
      "description": "A MintMCP server for Gmail that lets you search, read, and draft emails and replies.",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://gmail.mintmcp.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T19:20:31.78888Z",
        "updatedAt": "2025-09-09T19:25:39.937486Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.mintmcp/gmail",
      "description": "A MintMCP server for Gmail that lets you search, read, and draft emails and replies.",
      "repository": {
        "url": "https://github.com/mintmcp/mcp",
        "source": "github"
      },
      "version": "1.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://gmail.mintmcp.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T19:25:39.933995Z",
        "updatedAt": "2025-09-09T19:44:30.666452Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.mintmcp/gcal",
      "description": "A MintMCP server that works with Google Calendar to manage event listing, reading, and updates.",
      "repository": {
        "url": "https://github.com/mintmcp/mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://gcal.mintmcp.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T19:28:43.154377Z",
        "updatedAt": "2025-09-09T19:35:28.12606Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.mintmcp/gcal",
      "description": "A MintMCP server that works with Google Calendar to manage event listing, reading, and updates.",
      "repository": {
        "url": "https://github.com/mintmcp/mcp",
        "source": "github"
      },
      "version": "1.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://gcal.mintmcp.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T19:35:28.121702Z",
        "updatedAt": "2025-09-09T19:36:28.010861Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.mintmcp/gcal",
      "description": "A MCP server that works with Google Calendar to manage event listing, reading, and updates.",
      "repository": {
        "url": "https://github.com/mintmcp/mcp",
        "source": "github"
      },
      "version": "1.0.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://gcal.mintmcp.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T19:36:27.962359Z",
        "updatedAt": "2025-09-09T19:42:00.46811Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.mintmcp/gcal",
      "description": "A MCP server that works with Google Calendar to manage event listing, reading, and updates.",
      "repository": {
        "url": "https://github.com/mintmcp/servers",
        "source": "github"
      },
      "version": "1.0.3",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://gcal.mintmcp.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T19:42:00.464296Z",
        "updatedAt": "2025-09-09T19:49:54.017385Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.mintmcp/gmail",
      "description": "A MCP server server for Gmail that lets you search, read, and draft emails and replies.",
      "repository": {
        "url": "https://github.com/mintmcp/servers",
        "source": "github"
      },
      "version": "1.0.3",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://gmail.mintmcp.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T19:44:30.662665Z",
        "updatedAt": "2025-09-09T19:49:24.17985Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.mintmcp/gmail",
      "description": "A MCP server for Gmail that lets you search, read, and draft emails and replies.",
      "repository": {
        "url": "https://github.com/mintmcp/servers",
        "source": "github"
      },
      "version": "1.0.4",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://gmail.mintmcp.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T19:49:24.175898Z",
        "updatedAt": "2025-09-09T19:53:13.489799Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.mintmcp/gcal",
      "description": "A MCP server that works with Google Calendar to manage event listing, reading, and updates.",
      "repository": {
        "url": "https://github.com/mintmcp/servers",
        "source": "github"
      },
      "version": "1.0.4",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://gcal.mintmcp.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T19:49:54.013255Z",
        "updatedAt": "2025-09-09T19:49:54.013255Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.mintmcp/gmail",
      "description": "A MCP server for Gmail that lets you search, read, and draft emails and replies.",
      "repository": {
        "url": "https://github.com/mintmcp/servers",
        "source": "github"
      },
      "version": "1.0.5",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://gmail.mintmcp.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T19:53:13.486381Z",
        "updatedAt": "2025-09-09T19:53:13.486381Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cameroncooke/XcodeBuildMCP",
      "description": "XcodeBuildMCP provides tools for Xcode project management, simulator management, and app utilities.",
      "repository": {
        "url": "https://github.com/cameroncooke/XcodeBuildMCP",
        "source": "github"
      },
      "version": "1.12.8",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "xcodebuildmcp",
          "version": "1.12.8",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T19:54:23.228607Z",
        "updatedAt": "2025-09-09T19:54:23.228607Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.mintmcp/outlook-email",
      "description": "A MCP server for Outlook email that lets you search, read, and draft emails and replies.",
      "repository": {
        "url": "https://github.com/mintmcp/servers",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://outlook-email.mintmcp.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T19:59:31.832251Z",
        "updatedAt": "2025-09-09T20:02:38.02914Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.kevint-cerebras/cerebras-code-mcp",
      "description": "Model Context Protocol (MCP) server for Cerebras to make coding faster in AI-first IDEs",
      "repository": {
        "url": "https://github.com/kevint-cerebras/cerebras-code-mcp",
        "source": "github"
      },
      "version": "1.3.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "cerebras-code-mcp",
          "version": "1.3.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your Cerebras API key from cloud.cerebras.ai",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CEREBRAS_API_KEY"
            },
            {
              "description": "Optional OpenRouter API key for fallback when Cerebras rate limits are hit",
              "format": "string",
              "isSecret": true,
              "name": "OPENROUTER_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T19:59:53.50211Z",
        "updatedAt": "2025-09-09T19:59:53.50211Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.mintmcp/outlook-email",
      "description": "A MCP server for Outlook email that lets you search, read, and draft emails and replies.",
      "repository": {
        "url": "https://github.com/mintmcp/servers",
        "source": "github"
      },
      "version": "1.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://outlook-email.mintmcp.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T20:02:38.025522Z",
        "updatedAt": "2025-09-09T20:02:38.025522Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.mintmcp/outlook-calendar",
      "description": "A MCP server that works with Outlook Calendar to manage event listing, reading, and updates.",
      "repository": {
        "url": "https://github.com/mintmcp/servers",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://outlook-calendar.mintmcp.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T20:03:56.94066Z",
        "updatedAt": "2025-09-09T20:03:56.94066Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ref-tools/ref-tools-mcp",
      "description": "Token efficient search for coding agents over public and private documentation.",
      "repository": {
        "url": "https://github.com/ref-tools/ref-tools-mcp",
        "source": "github"
      },
      "version": "3.0.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "ref-tools-mcp",
          "version": "3.0.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for Ref",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "REF_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T20:04:16.022585Z",
        "updatedAt": "2025-09-09T20:04:16.022585Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.zine/mcp",
      "description": "Your memory, everywhere AI goes. Build knowledge once, access it via MCP anywhere.",
      "repository": {
        "url": "https://github.com/graphlit/graphlit-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://www.zine.ai/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-09T20:16:56.788716Z",
        "updatedAt": "2025-09-10T18:02:28.779912Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.zenml-io/mcp-zenml",
      "description": "MCP server for ZenML - browse stacks, pipelines, runs, artifacts & trigger pipeline runs via API",
      "repository": {
        "url": "https://github.com/zenml-io/mcp-zenml",
        "source": "github"
      },
      "version": "1.0.3",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/zenmldocker/mcp-zenml:1.0.3",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Base URL of your ZenML server (e.g., https://<workspace-id>-zenml.cloudinfra.zenml.io).",
              "isRequired": true,
              "format": "string",
              "name": "ZENML_STORE_URL"
            },
            {
              "description": "API key used to authenticate with your ZenML server (ideally a service account key).",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "ZENML_STORE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T13:56:29.446727Z",
        "updatedAt": "2025-09-18T20:48:56.233589Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.burningion/video-editing-mcp",
      "description": "An MCP server that provides [describe what your server does]",
      "repository": {
        "url": "https://github.com/burningion/video-editing-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "video-editor-mcp",
          "version": "1.0.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Video Jungle API Key (found at https://www.video-jungle.com/user/settings)",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "VJ_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T13:57:16.410606Z",
        "updatedAt": "2025-09-12T12:58:23.995884Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.alpic.test/test-mcp-server",
      "description": "Alpic Test MCP Server - great server!",
      "repository": {},
      "version": "0.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://test.alpic.ai/"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T13:57:43.256739Z",
        "updatedAt": "2025-09-10T13:57:43.256739Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/arjunkmrm-perplexity-search",
      "description": "Enable AI assistants to perform web searches using Perplexity's Sonar Pro.",
      "repository": {
        "url": "https://github.com/arjunkmrm/perplexity-search",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@arjunkmrm/perplexity-search/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T13:59:26.758557Z",
        "updatedAt": "2025-09-10T13:59:26.758557Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "app.zenable/zenable",
      "description": "Zenable cleans up sloppy AI code and prevents vulnerabilities with deterministic guardrails",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.www.zenable.app/"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T14:04:47.647566Z",
        "updatedAt": "2025-09-28T22:41:40.003484Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.overstarry/qweather-mcp",
      "description": "a qweather mcp server",
      "repository": {
        "url": "https://github.com/overstarry/qweather-mcp",
        "source": "github"
      },
      "version": "1.0.12",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "qweather-mcp",
          "version": "1.0.12",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your qweather api host",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "QWEATHER_API_BASE"
            },
            {
              "description": "Your qweather api key",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "QWEATHER_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T14:28:10.307698Z",
        "updatedAt": "2025-09-10T14:28:10.307698Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.florentine-ai/mcp",
      "description": "MCP server for Florentine.ai - Natural language to MongoDB aggregations",
      "repository": {
        "url": "https://github.com/florentine-ai/mcp",
        "source": "github"
      },
      "version": "0.1.4",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@florentine-ai/mcp",
          "version": "0.1.4",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "isRequired": true,
              "value": "@florentine-ai/mcp@latest",
              "type": "named",
              "name": "-y"
            }
          ],
          "packageArguments": [
            {
              "description": "The mode to run the MCP server in ('static' or 'dynamic')",
              "isRequired": true,
              "value": "static",
              "type": "named",
              "name": "--mode"
            },
            {
              "description": "Set to true to enable debug logging",
              "format": "boolean",
              "type": "named",
              "name": "--debug"
            },
            {
              "description": "The path to the log file, must be provided if debug is true",
              "format": "filepath",
              "type": "named",
              "name": "--logpath"
            }
          ],
          "environmentVariables": [
            {
              "description": "Your Florentine.ai API key, get it from https://florentine.ai/dashboard",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "FLORENTINE_TOKEN"
            },
            {
              "description": "The LLM service to use, one of 'openai', 'anthropic', 'google' or 'deepseek' (must only be provided if you did not set it in your Florentine.ai account)",
              "format": "string",
              "name": "LLM_SERVICE"
            },
            {
              "description": "Your API key for the LLM service (must only be provided if you did not set it in your Florentine.ai account)",
              "format": "string",
              "isSecret": true,
              "name": "LLM_KEY"
            },
            {
              "description": "Session ID for maintaining server-side context across requests",
              "format": "string",
              "name": "SESSION_ID"
            },
            {
              "description": "Stringified JSON array of return types for the response",
              "format": "string",
              "name": "RETURN_TYPES"
            },
            {
              "description": "Stringified JSON array of values for required inputs keys",
              "format": "string",
              "name": "REQUIRED_INPUTS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T14:43:00.78696Z",
        "updatedAt": "2025-09-19T10:37:43.039349Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.xcodebuildmcp/XcodeBuildMCP",
      "description": "XcodeBuildMCP provides tools for Xcode project management, simulator management, and app utilities.",
      "repository": {
        "url": "https://github.com/cameroncooke/XcodeBuildMCP",
        "source": "github",
        "id": "945551361"
      },
      "version": "1.12.10",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "xcodebuildmcp",
          "version": "1.12.10",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Enable experimental xcodemake incremental builds (true/false or 1/0).",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false",
                "1",
                "0"
              ],
              "name": "INCREMENTAL_BUILDS_ENABLED"
            },
            {
              "description": "Enable AI-powered dynamic tool discovery to load only relevant workflows.",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "XCODEBUILDMCP_DYNAMIC_TOOLS"
            },
            {
              "description": "Comma-separated list of workflows to load in Static Mode (e.g., 'simulator,device,project-discovery').",
              "format": "string",
              "name": "XCODEBUILDMCP_ENABLED_WORKFLOWS"
            },
            {
              "description": "Disable Sentry error reporting (preferred flag).",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "XCODEBUILDMCP_SENTRY_DISABLED"
            },
            {
              "description": "Enable verbose debug logging from the server.",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "XCODEBUILDMCP_DEBUG"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T14:44:46.398092Z",
        "updatedAt": "2025-09-22T20:19:27.62763Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ryaker/appstore-connect-mcp",
      "description": "MCP server for Apple Store Connect API integration with OAuth authentication support",
      "repository": {
        "url": "https://github.com/ryaker/appstore-connect-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@ryaker/appstore-connect-mcp",
          "version": "1.0.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Apple App Store Connect API Key ID",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "APPLE_KEY_ID"
            },
            {
              "description": "Apple App Store Connect Issuer ID",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "APPLE_ISSUER_ID"
            },
            {
              "description": "Apple App Store Connect Private Key (base64 encoded or raw)",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "APPLE_PRIVATE_KEY"
            },
            {
              "description": "Optional: Specific Bundle ID to filter apps",
              "format": "string",
              "name": "APPLE_BUNDLE_ID"
            },
            {
              "description": "Optional: Specific App Store ID",
              "format": "string",
              "name": "APPLE_APP_STORE_ID"
            },
            {
              "description": "Enable OAuth authentication (true/false)",
              "format": "string",
              "name": "OAUTH_ENABLED"
            },
            {
              "description": "OAuth issuer URL (e.g., https://your-tenant.auth0.com)",
              "format": "string",
              "name": "OAUTH_ISSUER"
            },
            {
              "description": "OAuth audience URL",
              "format": "string",
              "name": "OAUTH_AUDIENCE"
            },
            {
              "description": "OAuth JWKS URI for token validation",
              "format": "string",
              "name": "OAUTH_JWKS_URI"
            },
            {
              "description": "Server URL for OAuth deployment",
              "format": "string",
              "name": "SERVER_URL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T14:59:09.119883Z",
        "updatedAt": "2025-09-10T14:59:09.119883Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.shalevshalit/image-recongnition-mcp",
      "description": "MCP server for AI-powered image recognition and description using OpenAI vision models.",
      "repository": {
        "url": "https://github.com/mcp-s-ai/image-recongnition-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "image-recongnition-mcp",
          "version": "1.0.4",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your OpenAI API key for image recognition and description services",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "OPENAI_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T15:01:36.626716Z",
        "updatedAt": "2025-09-10T15:01:36.626716Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.MasonChow/source-map-parser-mcp",
      "description": "Parse JavaScript error stack traces back to original source code using source maps",
      "repository": {
        "url": "https://github.com/MasonChow/source-map-parser-mcp",
        "source": "github"
      },
      "version": "1.3.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "source-map-parser-mcp",
          "version": "1.3.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Context lines around error locations in source code",
              "format": "string",
              "name": "SOURCE_MAP_PARSER_CONTEXT_OFFSET_LINE"
            },
            {
              "description": "Maximum memory cache size in MB for source maps",
              "format": "string",
              "name": "SOURCE_MAP_PARSER_RESOURCE_CACHE_MAX_SIZE"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T15:03:12.048715Z",
        "updatedAt": "2025-09-10T15:03:12.048715Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.indragiek/uniprof",
      "description": "Universal CPU profiler designed for humans and AI agents",
      "repository": {
        "url": "https://github.com/indragiek/uniprof",
        "source": "github"
      },
      "version": "0.3.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "uniprof",
          "version": "0.3.3",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "mcp",
              "type": "positional"
            },
            {
              "value": "run",
              "type": "positional"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T15:16:37.815857Z",
        "updatedAt": "2025-09-11T00:59:36.881548Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.shalevshalit/image-recognition-mcp",
      "description": "MCP server for AI-powered image recognition and description using OpenAI vision models.",
      "repository": {
        "url": "https://github.com/mcp-s-ai/image-recognition-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "image-recognition-mcp",
          "version": "1.0.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your OpenAI API key for image recognition and description services",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "OPENAI_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T15:18:06.737563Z",
        "updatedAt": "2025-09-10T15:18:06.737563Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.JustasMonkev/mcp-accessibility-scanner",
      "description": "MCP server for automated web accessibility scanning with Playwright and Axe-core.",
      "repository": {
        "url": "https://github.com/JustasMonkev/mcp-accessibility-scanner",
        "source": "github"
      },
      "version": "1.1.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-accessibility-scanner",
          "version": "1.1.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T15:19:19.721715Z",
        "updatedAt": "2025-09-10T15:19:19.721715Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.dockersamples/mcp-docker-release-information",
      "description": "MCP server providing Docker Desktop release notes and security information.",
      "repository": {
        "url": "https://github.com/dockersamples/mcp-docker-release-information",
        "source": "github"
      },
      "version": "0.2.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/dockersamples/mcp-docker-release-information:0.2.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T15:23:14.335333Z",
        "updatedAt": "2025-09-10T18:54:52.777674Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.timheuer/sampledotnetmcpserver",
      "description": "Sample .NET MCP Server",
      "repository": {
        "url": "https://github.com/timheuer/sampledotnetmcpserver",
        "source": "github"
      },
      "version": "0.1.18-beta",
      "packages": [
        {
          "registryType": "nuget",
          "identifier": "TimHeuer.SampleDotnetMcpServer",
          "version": "0.1.18-beta",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T15:31:23.614864Z",
        "updatedAt": "2025-09-10T16:00:22.194854Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.motherduckdb/mcp-server-motherduck",
      "description": "Fast analytics and data processing with DuckDB and MotherDuck",
      "repository": {
        "url": "https://github.com/motherduckdb/mcp-server-motherduck",
        "source": "github"
      },
      "version": "0.6.4",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-server-motherduck",
          "version": "0.6.4",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "description": "Transport type for MCP server",
              "default": "stdio",
              "choices": [
                "stdio",
                "sse",
                "stream"
              ],
              "type": "named",
              "name": "--transport"
            },
            {
              "description": "Port to listen on for sse and stream transport mode",
              "format": "number",
              "default": "8000",
              "type": "named",
              "name": "--port"
            },
            {
              "description": "Path to local DuckDB database file or MotherDuck database",
              "default": "md:",
              "type": "named",
              "name": "--db-path"
            },
            {
              "description": "Access token to use for MotherDuck database connections",
              "isSecret": true,
              "type": "named",
              "name": "--motherduck-token"
            },
            {
              "description": "Flag for connecting to DuckDB or MotherDuck in read-only mode",
              "type": "named",
              "name": "--read-only"
            },
            {
              "description": "Home directory for DuckDB",
              "type": "named",
              "name": "--home-dir"
            },
            {
              "description": "Flag for connecting to MotherDuck in SaaS mode (disables filesystem and write permissions for local DuckDB)",
              "type": "named",
              "name": "--saas-mode"
            },
            {
              "description": "Enable JSON responses for HTTP stream (only supported for stream transport)",
              "type": "named",
              "name": "--json-response"
            }
          ],
          "environmentVariables": [
            {
              "description": "Access token to use for MotherDuck database connections",
              "isSecret": true,
              "name": "motherduck_token"
            },
            {
              "description": "Home directory for DuckDB (used as default if --home-dir not specified)",
              "name": "HOME"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T15:38:28.952825Z",
        "updatedAt": "2025-09-10T15:38:28.952825Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.minnas/mcp",
      "description": "Share prompts and context with your team and discover community collections.",
      "repository": {
        "url": "https://github.com/sensoris/minnas-service",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://api.minnas.io/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T15:43:19.145095Z",
        "updatedAt": "2025-09-18T16:40:24.246591Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.pga/pga-golf",
      "description": "PGA's official MCP Server for all things golf-related. Find a coach, play golf, improve your game.",
      "repository": {},
      "version": "0.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.pga.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T15:44:45.139319Z",
        "updatedAt": "2025-09-10T15:44:45.139319Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.agentailor/slimcontext-mcp-server",
      "description": "MCP Server for SlimContext - AI chat history compression tools",
      "repository": {
        "url": "https://github.com/agentailor/slimcontext-mcp-server",
        "source": "github"
      },
      "version": "0.1.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "slimcontext-mcp-server",
          "version": "0.1.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T15:57:56.189104Z",
        "updatedAt": "2025-09-16T07:56:23.189925Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.timheuer/sampledotnetmcpserver",
      "description": "Sample .NET MCP Server",
      "repository": {
        "url": "https://github.com/timheuer/sampledotnetmcpserver",
        "source": "github"
      },
      "version": "0.1.19-beta",
      "packages": [
        {
          "registryType": "nuget",
          "identifier": "TimHeuer.SampleDotnetMcpServer",
          "version": "0.1.19-beta",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T16:00:22.183689Z",
        "updatedAt": "2025-09-16T22:11:37.318047Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/smithery-ai-cookbook-python-quickstart",
      "description": "A simple MCP server built with FastMCP and python",
      "repository": {
        "url": "https://github.com/smithery-ai/smithery-cookbook",
        "source": "github",
        "subfolder": "servers/python/quickstart"
      },
      "version": "1.13.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@smithery-ai/cookbook-python-quickstart/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T16:07:02.461935Z",
        "updatedAt": "2025-09-10T16:07:02.461935Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.coupler/remote-mcp-server",
      "description": "Coupler.io remote MCP server",
      "repository": {},
      "version": "0.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.coupler.io/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T16:12:03.417416Z",
        "updatedAt": "2025-09-10T16:12:03.417416Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "",
      "name": "io.github.ruvnet/claude-flow",
      "description": "AI orchestration with hive-mind swarms, neural networks, and 87 MCP tools for enterprise dev.",
      "repository": {},
      "version": "2.0.0-alpha.104",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "claude-flow",
          "version": "2.0.0-alpha.104",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T16:20:48.985188Z",
        "updatedAt": "2025-09-10T16:46:39.972612Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ruvnet/flow-nexus",
      "description": "Cloud-powered AI platform with multi-agent swarms, sandboxes, and workflow automation",
      "repository": {
        "url": "https://github.com/ruvnet/flow-nexus",
        "source": "github"
      },
      "version": "0.1.121",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "flow-nexus",
          "version": "0.1.121",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "API key for Flow Nexus authentication",
              "format": "string",
              "isSecret": true,
              "name": "FLOW_NEXUS_API_KEY"
            },
            {
              "description": "Base URL for Flow Nexus API",
              "format": "string",
              "name": "FLOW_NEXUS_BASE_URL"
            },
            {
              "description": "E2B API key for sandbox creation",
              "format": "string",
              "isSecret": true,
              "name": "E2B_API_KEY"
            },
            {
              "description": "Anthropic API key for Claude integration",
              "format": "string",
              "isSecret": true,
              "name": "ANTHROPIC_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T16:22:10.934866Z",
        "updatedAt": "2025-09-10T16:22:10.934866Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.rfdez/pvpc-mcp-server",
      "description": "Fetch the Voluntary Price for the Small Consumer (PVPC) published daily by Red Eléctrica.",
      "repository": {
        "url": "https://github.com/rfdez/pvpc-mcp-server",
        "source": "github"
      },
      "version": "3.2.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@rfdez/pvpc-mcp-server",
          "version": "3.2.2",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "description": "Use stdio transport type for MCP server",
              "value": "stdio",
              "type": "named",
              "name": "--transport"
            },
            {
              "description": "ESIOS API key for authentication",
              "isRequired": true,
              "isSecret": true,
              "type": "named",
              "name": "--api-key"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@rfdez/pvpc-mcp-server",
          "version": "3.2.2",
          "runtimeHint": "npx",
          "transport": {
            "type": "streamable-http",
            "url": "http://127.0.0.1:8080/mcp",
            "headers": [
              {
                "description": "ESIOS API key for authentication",
                "isRequired": true,
                "isSecret": true,
                "name": "X-API-Key"
              }
            ]
          },
          "packageArguments": [
            {
              "description": "Use HTTP transport type for MCP server",
              "value": "http",
              "type": "named",
              "name": "--transport"
            },
            {
              "description": "Port for HTTP transport",
              "default": "8080",
              "type": "named",
              "name": "--port"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T16:28:04.867936Z",
        "updatedAt": "2025-09-10T16:53:23.925846Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "dev.rostro/rostro",
      "description": "Turn any LLM multimodal; generate images, voices, videos, 3D models, music, and more.",
      "repository": {
        "url": "https://github.com/francis-ros/rostro-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://proto.rostro.dev/mcp"
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/publisher-provided": {
          "build_info": {
            "commit": "f7e8d9c2b1a0",
            "deployment_id": "remote-fs-deploy-456",
            "region": "us-west-2",
            "timestamp": "2023-12-05T08:45:00Z"
          },
          "tool": "cloud-deployer",
          "version": "2.4.0"
        }
      }
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T16:44:28.573989Z",
        "updatedAt": "2025-09-10T16:44:28.573989Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "",
      "name": "io.github.ruvnet/claude-flow",
      "description": "AI orchestration with hive-mind swarms, neural networks, and 87 MCP tools for enterprise dev.",
      "repository": {},
      "version": "2.0.0-alpha.105",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "claude-flow",
          "version": "2.0.0-alpha.105",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T16:46:39.966381Z",
        "updatedAt": "2025-09-10T16:55:33.075243Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.ignission/mcp",
      "description": "TikTok video data analytics and content strategy tools",
      "repository": {
        "url": "https://github.com/ignission-io/mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.ignission.io/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T16:49:33.97858Z",
        "updatedAt": "2025-09-10T16:49:33.97858Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.rfdez/pvpc-mcp-server",
      "description": "Retrieve daily PVPC electricity tariffs for 2.0 TD consumers, published by Red Eléctrica.",
      "repository": {
        "url": "https://github.com/rfdez/pvpc-mcp-server",
        "source": "github"
      },
      "version": "3.2.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@rfdez/pvpc-mcp-server",
          "version": "3.2.3",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "description": "Use stdio transport type for MCP server",
              "value": "stdio",
              "type": "named",
              "name": "--transport"
            },
            {
              "description": "ESIOS API key for authentication",
              "isRequired": true,
              "isSecret": true,
              "type": "named",
              "name": "--api-key"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@rfdez/pvpc-mcp-server",
          "version": "3.2.3",
          "runtimeHint": "npx",
          "transport": {
            "type": "streamable-http",
            "url": "http://127.0.0.1:8080/mcp",
            "headers": [
              {
                "description": "ESIOS API key for authentication",
                "isRequired": true,
                "isSecret": true,
                "name": "X-API-Key"
              }
            ]
          },
          "packageArguments": [
            {
              "description": "Use HTTP transport type for MCP server",
              "value": "http",
              "type": "named",
              "name": "--transport"
            },
            {
              "description": "Port for HTTP transport",
              "default": "8080",
              "type": "named",
              "name": "--port"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T16:53:23.880648Z",
        "updatedAt": "2025-09-10T16:53:23.880648Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ruvnet/claude-flow",
      "description": "AI orchestration with hive-mind swarms, neural networks, and 87 MCP tools for enterprise dev.",
      "repository": {
        "url": "https://github.com/ruvnet/claude-flow",
        "source": "github"
      },
      "version": "2.0.0-alpha.106",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "claude-flow",
          "version": "2.0.0-alpha.106",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Anthropic API key for Claude AI models",
              "format": "string",
              "isSecret": true,
              "name": "ANTHROPIC_API_KEY"
            },
            {
              "description": "Operation mode: development, production, or test",
              "format": "string",
              "name": "CLAUDE_FLOW_MODE"
            },
            {
              "description": "Path for persistent memory storage",
              "format": "string",
              "name": "CLAUDE_FLOW_MEMORY_PATH"
            },
            {
              "description": "Maximum number of concurrent agents",
              "format": "string",
              "name": "CLAUDE_FLOW_MAX_AGENTS"
            },
            {
              "description": "MCP server port",
              "format": "string",
              "name": "CLAUDE_FLOW_PORT"
            },
            {
              "description": "GitHub personal access token for repository operations",
              "format": "string",
              "isSecret": true,
              "name": "GITHUB_TOKEN"
            },
            {
              "description": "Flow Nexus cloud platform API key",
              "format": "string",
              "isSecret": true,
              "name": "FLOW_NEXUS_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T16:55:33.070739Z",
        "updatedAt": "2025-09-10T16:59:34.223138Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/rfdez-pvpc-mcp-server",
      "description": "Retrieve daily PVPC electricity tariffs for 2.0 TD consumers, published by Red Eléctrica.",
      "repository": {
        "url": "https://github.com/rfdez/pvpc-mcp-server",
        "source": "github"
      },
      "version": "3.2.3",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@rfdez/pvpc-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T16:57:17.590562Z",
        "updatedAt": "2025-09-10T16:57:17.590562Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ruvnet/claude-flow",
      "description": "AI orchestration with hive-mind swarms, neural networks, and 87 MCP tools for enterprise dev.",
      "repository": {
        "url": "https://github.com/ruvnet/claude-flow",
        "source": "github",
        "id": "854513237"
      },
      "version": "2.0.0-alpha.107",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "claude-flow",
          "version": "2.0.0-alpha.107",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Anthropic API key for Claude AI models",
              "format": "string",
              "isSecret": true,
              "name": "ANTHROPIC_API_KEY"
            },
            {
              "description": "Operation mode: development, production, or test",
              "format": "string",
              "name": "CLAUDE_FLOW_MODE"
            },
            {
              "description": "Path for persistent memory storage",
              "format": "string",
              "name": "CLAUDE_FLOW_MEMORY_PATH"
            },
            {
              "description": "Maximum number of concurrent agents",
              "format": "string",
              "name": "CLAUDE_FLOW_MAX_AGENTS"
            },
            {
              "description": "MCP server port",
              "format": "string",
              "name": "CLAUDE_FLOW_PORT"
            },
            {
              "description": "GitHub personal access token for repository operations",
              "format": "string",
              "isSecret": true,
              "name": "GITHUB_TOKEN"
            },
            {
              "description": "Flow Nexus cloud platform API key",
              "format": "string",
              "isSecret": true,
              "name": "FLOW_NEXUS_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T16:59:34.218266Z",
        "updatedAt": "2025-09-10T16:59:34.218266Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/kwp-lab-rss-reader-mcp",
      "description": "Track and browse RSS feeds with ease. Fetch the latest entries from any feed URL and extract full…",
      "repository": {
        "url": "https://github.com/kwp-lab/rss-reader-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@kwp-lab/rss-reader-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T17:02:25.896522Z",
        "updatedAt": "2025-09-10T17:02:25.896522Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/CollectiveSpend-collectivespend-smithery-mcp",
      "description": "Connect CollectiveSpend with Xero to manage contacts. Retrieve, create, and update contact records…",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@CollectiveSpend/collectivespend-smithery-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T17:03:02.996325Z",
        "updatedAt": "2025-09-10T17:03:02.996325Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "",
      "name": "io.github.ruvnet/ruv-swarm",
      "description": "Neural network swarm orchestration with WebAssembly acceleration and MCP integration",
      "repository": {},
      "version": "1.0.18"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T17:15:32.696904Z",
        "updatedAt": "2025-09-10T17:21:34.92137Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "",
      "name": "io.github.ruvnet/ruv-swarm",
      "description": "Neural network swarm orchestration with WebAssembly acceleration and MCP integration",
      "repository": {
        "url": "https://github.com/ruvnet/ruv-FANN",
        "source": "github",
        "subfolder": "ruv-swarm"
      },
      "version": "1.0.19",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "ruv-swarm",
          "version": "1.0.19",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Log level for ruv-swarm operations",
              "format": "string",
              "default": "info",
              "choices": [
                "debug",
                "info",
                "warn",
                "error"
              ],
              "name": "RUV_SWARM_LOG_LEVEL"
            },
            {
              "description": "Database path for persistence storage",
              "format": "string",
              "name": "RUV_SWARM_DB_PATH"
            },
            {
              "description": "Enable WebAssembly SIMD optimizations",
              "format": "boolean",
              "default": "true",
              "choices": [
                "true",
                "false"
              ],
              "name": "RUV_SWARM_ENABLE_SIMD"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T17:21:34.916675Z",
        "updatedAt": "2025-09-10T17:21:34.916675Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/kesslerio-attio-mcp-server",
      "description": "Enable AI assistants to interact directly with your Attio CRM data through natural language querie…",
      "repository": {
        "url": "https://github.com/kesslerio/attio-mcp-server",
        "source": "github"
      },
      "version": "0.2.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@kesslerio/attio-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T17:52:23.110358Z",
        "updatedAt": "2025-09-10T17:52:23.110358Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ryanbaumann/platform-ai",
      "description": "Google Maps Platform Code Assist MCP",
      "repository": {
        "url": "https://github.com/googlemaps/platform-ai",
        "source": "github"
      },
      "version": "0.2.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@googlemaps/code-assist-mcp",
          "version": "0.2.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T17:56:34.808006Z",
        "updatedAt": "2025-09-10T17:56:34.808006Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.zine/mcp",
      "description": "Your memory, everywhere AI goes. Build knowledge once, access it via MCP anywhere.",
      "repository": {},
      "version": "1.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://www.zine.ai/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T18:02:28.773522Z",
        "updatedAt": "2025-09-10T18:02:28.773522Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/PabloLec-keyprobe-mcp",
      "description": "Audit certificates and keystores to surface expiry risks, weak algorithms, and misconfigurations.…",
      "repository": {
        "url": "https://github.com/PabloLec/KeyProbe-MCP",
        "source": "github"
      },
      "version": "1.13.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@PabloLec/keyprobe-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T18:08:11.479456Z",
        "updatedAt": "2025-09-10T18:08:11.479456Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "info.mosaique/mcp",
      "description": "Search and list latest international news (sources, comments, knowledge graph).",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.mosaique.info",
          "headers": [
            {
              "description": "API key for authentication",
              "isRequired": true,
              "isSecret": true,
              "name": "X-API-Key"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T18:15:03.198217Z",
        "updatedAt": "2025-09-10T18:15:03.198217Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/sachicali-discordmcp-suite",
      "description": "Control your Discord community: send/read messages, manage channels and forums, and handle webhook…",
      "repository": {},
      "version": "1.2.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@sachicali/discordmcp-suite/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T18:19:06.201517Z",
        "updatedAt": "2025-09-10T18:19:06.201517Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.peek/mcp",
      "description": "Build travel itineraries with Peek's 300k+ experiences. Search, details, and availability.",
      "repository": {},
      "version": "0.1.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.peek.com"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T18:22:01.353358Z",
        "updatedAt": "2025-09-10T18:22:01.353358Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/smithery-ai-github",
      "description": "Access the GitHub API, enabling file operations, repository management, search functionality, and…",
      "repository": {
        "url": "https://github.com/smithery-ai/mcp-servers",
        "source": "github",
        "subfolder": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@smithery-ai/github/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T18:22:12.930528Z",
        "updatedAt": "2025-09-10T18:22:12.930528Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/smithery-notion",
      "description": "A Notion workspace is a collaborative environment where teams can organize work, manage projects,…",
      "repository": {
        "url": "https://github.com/smithery-ai/mcp-servers",
        "source": "github",
        "subfolder": "notion"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@smithery/notion/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T18:26:59.341637Z",
        "updatedAt": "2025-09-10T18:26:59.341637Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.dockersamples/mcp-docker-release-information",
      "description": "MCP server providing Docker Desktop release notes and security information.",
      "repository": {
        "url": "https://github.com/dockersamples/mcp-docker-release-information",
        "source": "github"
      },
      "version": "0.3.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/dockersamples/mcp-docker-release-information:0.3.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T18:54:52.764339Z",
        "updatedAt": "2025-09-10T18:54:52.764339Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.spences10/mcp-sqlite-tools",
      "description": "MCP server for local SQLite database operations",
      "repository": {
        "url": "https://github.com/spences10/mcp-sqlite-tools",
        "source": "github"
      },
      "version": "0.0.11",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-sqlite-tools",
          "version": "0.0.11",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T19:01:31.903923Z",
        "updatedAt": "2025-09-10T19:01:31.903923Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.xorrkaz/cml-mcp",
      "description": "An MCP server that provides access to common Cisco Modeling Labs (CML) operations.",
      "repository": {
        "url": "https://github.com/xorrkaz/cml-mcp",
        "source": "github"
      },
      "version": "0.8.3",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "cml-mcp",
          "version": "0.8.3",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "URL for the CML Server",
              "isRequired": true,
              "format": "string",
              "name": "CML_URL"
            },
            {
              "description": "Username for CML authentication",
              "isRequired": true,
              "format": "string",
              "name": "CML_USERNAME"
            },
            {
              "description": "Password for CML authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CML_PASSWORD"
            },
            {
              "description": "Username for authentication to devices running in CML",
              "format": "string",
              "name": "PYATS_USERNAME"
            },
            {
              "description": "Password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_PASSWORD"
            },
            {
              "description": "Enable password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_AUTH_PASS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T19:14:35.862875Z",
        "updatedAt": "2025-09-14T14:57:56.312035Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.enigma/enigma-mcp-server",
      "description": "An MCP server that provides access to trusted data about business identity and activity",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.enigma.com/http"
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.enigma.com/http-token",
          "headers": [
            {
              "description": "Bearer token of Enigma API key. Used to enable authentication without presenting the user with an oAuth login.",
              "isRequired": true,
              "isSecret": true,
              "name": "X-API-Key"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://mcp.enigma.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T19:14:36.362564Z",
        "updatedAt": "2025-09-10T19:14:36.362564Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.enigma/enigma-mcp-server",
      "description": "An MCP server that provides access to trusted data about business identity and activity",
      "repository": {},
      "version": "1.0.0-build1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.enigma.com/http"
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.enigma.com/http-key",
          "headers": [
            {
              "description": "Token of Enigma API key. Used to enable authentication without presenting the user with an oAuth login.",
              "isRequired": true,
              "isSecret": true,
              "name": "x-api-key"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://mcp.enigma.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T19:23:14.035831Z",
        "updatedAt": "2025-09-10T19:23:14.035831Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "1.3.7",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T19:25:38.948772Z",
        "updatedAt": "2025-09-12T14:23:41.796187Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.spences10/mcp-omnisearch",
      "description": "MCP server for integrating Omnisearch with LLMs",
      "repository": {
        "url": "https://github.com/spences10/mcp-omnisearch",
        "source": "github"
      },
      "version": "0.0.15",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-omnisearch",
          "version": "0.0.15",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T19:32:04.459621Z",
        "updatedAt": "2025-09-10T19:32:04.459621Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.railwayapp/mcp-server",
      "description": "Official Railway MCP server",
      "repository": {
        "url": "https://github.com/railwayapp/railway-mcp-server",
        "source": "github"
      },
      "version": "0.1.5",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@railway/mcp-server",
          "version": "0.1.5",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T20:31:27.71445Z",
        "updatedAt": "2025-09-10T20:31:27.71445Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/smithery-toolbox",
      "description": "Toolbox dynamically routes to all MCPs in the Smithery registry based on your agent's need. When a…",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@smithery/toolbox/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T20:39:40.188723Z",
        "updatedAt": "2025-09-10T20:39:40.188723Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/smithery-ai-slack",
      "description": "Enable interaction with Slack workspaces. Supports subscribing to Slack events through Resources.",
      "repository": {
        "url": "https://github.com/smithery-ai/mcp-servers",
        "source": "github",
        "subfolder": "slack"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@smithery-ai/slack/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T20:56:36.64385Z",
        "updatedAt": "2025-09-10T20:56:36.64385Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/docfork-mcp",
      "description": "@latest documentation and code examples to 9000+ libraries for LLMs and AI code editors in a singl…",
      "repository": {
        "url": "https://github.com/docfork/docfork-mcp",
        "source": "github"
      },
      "version": "0.6.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@docfork/mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T21:06:07.509501Z",
        "updatedAt": "2025-09-12T18:25:16.14187Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "",
      "name": "travel.kismet/mcp-server",
      "description": "Semantic hotel search with real-time availability and price comparison for Kismet Travel",
      "repository": {
        "url": "https://github.com/kismet-tech/kismet-travel-mcp-v2",
        "source": "github"
      },
      "version": "0.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.kismet.travel/mcp"
        },
        {
          "type": "sse",
          "url": "https://mcp.kismet.travel/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T22:00:17.761143Z",
        "updatedAt": "2025-09-10T22:00:17.761143Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.toolprint/hypertool-mcp",
      "description": "Dynamically expose tools from proxied servers based on an Agent Persona",
      "repository": {
        "url": "https://github.com/toolprint/hypertool-mcp",
        "source": "github"
      },
      "version": "0.0.42",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@toolprint/hypertool-mcp",
          "version": "0.0.42",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-10T22:05:20.65584Z",
        "updatedAt": "2025-09-10T22:05:20.65584Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.koki-develop/esa-mcp-server",
      "description": "A Model Context Protocol (MCP) server for esa.io",
      "repository": {
        "url": "https://github.com/koki-develop/esa-mcp-server.git",
        "source": "github"
      },
      "version": "0.3.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@koki-develop/esa-mcp-server",
          "version": "0.3.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your esa team",
              "isRequired": true,
              "format": "string",
              "name": "ESA_TEAM"
            },
            {
              "description": "Your esa personal access token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "ESA_ACCESS_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T00:37:16.035463Z",
        "updatedAt": "2025-09-11T00:37:16.035463Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/CryptoCultCurt-appfolio-mcp-server",
      "description": "Provide seamless access to Appfolio Property Manager Reporting API through a standardized MCP serv…",
      "repository": {
        "url": "https://github.com/CryptoCultCurt/appfolio-mcp-server",
        "source": "github"
      },
      "version": "1.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@CryptoCultCurt/appfolio-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T00:42:54.555978Z",
        "updatedAt": "2025-09-11T00:42:54.555978Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.indragiek/uniprof",
      "description": "Universal CPU profiler designed for humans and AI agents",
      "repository": {
        "url": "https://github.com/indragiek/uniprof",
        "source": "github"
      },
      "version": "0.3.4",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "uniprof",
          "version": "0.3.4",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "mcp",
              "type": "positional"
            },
            {
              "value": "run",
              "type": "positional"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T00:59:36.873368Z",
        "updatedAt": "2025-09-11T00:59:36.873368Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.mcpcap/mcpcap",
      "description": "An MCP server for analyzing PCAP files.",
      "repository": {
        "url": "https://github.com/mcpcap/mcpcap",
        "source": "github"
      },
      "version": "0.4.3",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcpcap",
          "version": "0.4.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T01:00:19.713725Z",
        "updatedAt": "2025-09-11T01:06:15.729223Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.mcpcap/mcpcap",
      "description": "An MCP server for analyzing PCAP files.",
      "repository": {
        "url": "https://github.com/mcpcap/mcpcap",
        "source": "github"
      },
      "version": "0.4.4",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcpcap",
          "version": "0.4.4",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T01:06:15.722886Z",
        "updatedAt": "2025-09-12T01:41:27.484537Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.huoshuiai42/huoshui-pdf-translator",
      "description": "An MCP server that provides PDF translation service",
      "repository": {
        "url": "https://github.com/huoshuiai42/huoshui-pdf-translator",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "huoshui-pdf-translator",
          "version": "1.0.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T01:31:51.354566Z",
        "updatedAt": "2025-09-11T01:31:51.354566Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.huoshuiai42/huoshui-fetch",
      "description": "An MCP server that provides tools for fetching, converting, and extracting data from web pages.",
      "repository": {
        "url": "https://github.com/huoshuiai42/huoshui-fetch",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "huoshui-fetch",
          "version": "1.0.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T01:33:53.944849Z",
        "updatedAt": "2025-09-11T01:33:53.944849Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.huoshuiai42/huoshui-file-converter",
      "description": "An MCP server that provides document format conversion",
      "repository": {
        "url": "https://github.com/huoshuiai42/huoshui-file-converter",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "huoshui-file-converter",
          "version": "1.0.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your workding directory",
              "format": "string",
              "name": "HUOSHUI_WORKING_DIR"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T01:34:28.334413Z",
        "updatedAt": "2025-09-11T01:34:28.334413Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.huoshuiai42/huoshui-pdf-converter",
      "description": "An MCP server that provides PDF file conversion",
      "repository": {
        "url": "https://github.com/huoshuiai42/huoshui-pdf-converter",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "huoshui-pdf-converter",
          "version": "1.0.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T01:34:53.404761Z",
        "updatedAt": "2025-09-11T01:34:53.404761Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/smithery-ai-national-weather-service",
      "description": "Provide real-time and forecast weather information for locations in the United States using natura…",
      "repository": {
        "url": "https://github.com/smithery-ai/mcp-servers",
        "source": "github",
        "subfolder": "weather"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@smithery-ai/national-weather-service/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T02:29:56.928105Z",
        "updatedAt": "2025-09-11T02:29:56.928105Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cr7258/elasticsearch-mcp-server",
      "description": "MCP server for interacting with Elasticsearch",
      "repository": {
        "url": "https://github.com/cr7258/elasticsearch-mcp-server",
        "source": "github"
      },
      "version": "2.0.12",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "elasticsearch-mcp-server",
          "version": "2.0.12",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Comma-separated list of Elasticsearch hosts (e.g., https://localhost:9200)",
              "format": "string",
              "default": "https://localhost:9200",
              "name": "ELASTICSEARCH_HOSTS"
            },
            {
              "description": "API key for Elasticsearch or Elastic Cloud authentication (recommended)",
              "format": "string",
              "isSecret": true,
              "name": "ELASTICSEARCH_API_KEY"
            },
            {
              "description": "Username for basic authentication (alternative to API key)",
              "format": "string",
              "name": "ELASTICSEARCH_USERNAME"
            },
            {
              "description": "Password for basic authentication (used with ELASTICSEARCH_USERNAME)",
              "format": "string",
              "isSecret": true,
              "name": "ELASTICSEARCH_PASSWORD"
            },
            {
              "description": "Whether to verify SSL certificates (true/false)",
              "format": "boolean",
              "default": "false",
              "name": "ELASTICSEARCH_VERIFY_CERTS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T02:48:54.493071Z",
        "updatedAt": "2025-09-11T03:19:12.600103Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cr7258/elasticsearch-mcp-server",
      "description": "MCP server for interacting with Elasticsearch",
      "repository": {
        "url": "https://github.com/cr7258/elasticsearch-mcp-server",
        "source": "github"
      },
      "version": "2.0.14",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "elasticsearch-mcp-server",
          "version": "2.0.14",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Comma-separated list of Elasticsearch hosts (e.g., https://localhost:9200)",
              "format": "string",
              "default": "https://localhost:9200",
              "name": "ELASTICSEARCH_HOSTS"
            },
            {
              "description": "API key for Elasticsearch or Elastic Cloud authentication (recommended)",
              "format": "string",
              "isSecret": true,
              "name": "ELASTICSEARCH_API_KEY"
            },
            {
              "description": "Username for basic authentication (alternative to API key)",
              "format": "string",
              "name": "ELASTICSEARCH_USERNAME"
            },
            {
              "description": "Password for basic authentication (used with ELASTICSEARCH_USERNAME)",
              "format": "string",
              "isSecret": true,
              "name": "ELASTICSEARCH_PASSWORD"
            },
            {
              "description": "Whether to verify SSL certificates (true/false)",
              "format": "boolean",
              "default": "false",
              "name": "ELASTICSEARCH_VERIFY_CERTS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T03:19:12.57463Z",
        "updatedAt": "2025-09-15T14:34:34.785295Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/sasabasara-where_is_my_bus_mcp",
      "description": "Get real-time NYC bus arrivals, live vehicle locations, and service alerts. Plan trips between any…",
      "repository": {},
      "version": "2.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@sasabasara/where_is_my_bus_mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T03:53:53.151653Z",
        "updatedAt": "2025-09-11T03:53:53.151653Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.henilcalagiya/mcp-apple-notes",
      "description": "MCP server for Apple Notes integration using AppleScript with full CRUD operations",
      "repository": {
        "url": "https://github.com/henilcalagiya/mcp-apple-notes",
        "source": "github"
      },
      "version": "0.1.2",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-apple-notes",
          "version": "0.1.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T05:36:33.72631Z",
        "updatedAt": "2025-09-11T05:36:33.72631Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/hithereiamaliff-mcp-datagovmy",
      "description": "This MCP server provides seamless access to Malaysia's government open data, including datasets, w…",
      "repository": {
        "url": "https://github.com/hithereiamaliff/mcp-datagovmy",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@hithereiamaliff/mcp-datagovmy/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T05:56:30.06684Z",
        "updatedAt": "2025-09-11T05:56:30.06684Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.henilcalagiya/google-sheets-mcp",
      "description": "Powerful tools for automating Google Sheets using Model Context Protocol (MCP)",
      "repository": {
        "url": "https://github.com/henilcalagiya/google-sheets-mcp",
        "source": "github"
      },
      "version": "0.1.6",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "google-sheets-mcp",
          "version": "0.1.6",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T05:56:37.07375Z",
        "updatedAt": "2025-09-11T05:56:37.07375Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.falkordb/QueryWeaver",
      "description": "An MCP server for Text2SQL: transforms natural language into SQL using graph schema understanding.",
      "repository": {
        "url": "https://github.com/FalkorDB/QueryWeaver",
        "source": "github"
      },
      "version": "0.0.11",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/falkordb/queryweaver:0.0.11",
          "transport": {
            "type": "streamable-http",
            "url": "https://localhost:5000/mcp"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T06:54:10.01888Z",
        "updatedAt": "2025-09-11T06:54:10.01888Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.imbenrabi/financial-modeling-prep-mcp-server",
      "description": "MCP server for Financial Modeling Prep API with 250+ financial data tools",
      "repository": {
        "url": "https://github.com/imbenrabi/Financial-Modeling-Prep-MCP-Server",
        "source": "github",
        "id": "988409529"
      },
      "version": "2.4.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "financial-modeling-prep-mcp-server",
          "version": "2.4.0",
          "runtimeHint": "npx",
          "transport": {
            "type": "streamable-http",
            "url": "https://financial-modeling-prep-mcp-server-production.up.railway.app/mcp"
          },
          "packageArguments": [
            {
              "description": "Financial Modeling Prep API access token",
              "format": "string",
              "type": "named",
              "name": "--fmp-token"
            },
            {
              "description": "Port number for HTTP server mode",
              "format": "number",
              "type": "named",
              "name": "--port"
            },
            {
              "description": "Enable dynamic tool discovery mode",
              "format": "boolean",
              "type": "named",
              "name": "--dynamic-tool-discovery"
            },
            {
              "description": "Comma-separated list of tool sets to load",
              "format": "string",
              "type": "named",
              "name": "--fmp-tool-sets"
            }
          ],
          "environmentVariables": [
            {
              "description": "Financial Modeling Prep API access token",
              "format": "string",
              "isSecret": true,
              "name": "FMP_ACCESS_TOKEN"
            },
            {
              "description": "Port number for HTTP server mode",
              "format": "number",
              "name": "PORT"
            },
            {
              "description": "Enable dynamic tool discovery mode",
              "format": "boolean",
              "name": "DYNAMIC_TOOL_DISCOVERY"
            },
            {
              "description": "Comma-separated list of tool sets to load",
              "format": "string",
              "name": "FMP_TOOL_SETS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T08:26:14.672008Z",
        "updatedAt": "2025-09-11T12:44:51.220272Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.dubuqingfeng/gitlab-mcp-server",
      "description": "GitLab MCP (Model Context Protocol) server for AI agents",
      "repository": {
        "url": "https://github.com/dubuqingfeng/gitlab-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@dubuqingfeng/gitlab-mcp-server",
          "version": "2.0.12",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T09:34:47.415483Z",
        "updatedAt": "2025-09-11T09:41:43.917859Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.dubuqingfeng/gitlab-mcp-server",
      "description": "GitLab MCP (Model Context Protocol) server for AI agents",
      "repository": {
        "url": "https://github.com/dubuqingfeng/gitlab-mcp-server",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@dubuqingfeng/gitlab-mcp-server",
          "version": "2.0.12",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the gitlab",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "GITLAB_TOKEN"
            },
            {
              "description": "Gitlab URL",
              "format": "string",
              "name": "GITLAB_URL"
            },
            {
              "description": "Lark 机器人 Webhook URL",
              "format": "string",
              "isSecret": true,
              "name": "LARK_WEBHOOK_URL"
            },
            {
              "description": "可选：签名密钥（如果机器人启用了签名验证）",
              "format": "string",
              "isSecret": true,
              "name": "LARK_SECRET_KEY"
            },
            {
              "description": "可选：是否启用通知，默认为 true",
              "format": "boolean",
              "name": "LARK_ENABLE_NOTIFICATION"
            },
            {
              "description": "可选：通知模式 - gitlab_only(仅GitLab)、lark_only(仅Lark)、both(两者都发)，默认为 gitlab_only",
              "format": "string",
              "name": "GITLAB_NOTE_MODE"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T09:41:43.896888Z",
        "updatedAt": "2025-09-11T09:41:43.896888Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/jirispilka-actors-mcp-server",
      "description": "Greet anyone by name with friendly, personalized messages. Explore the origin of Hello, World thro…",
      "repository": {
        "url": "https://github.com/jirispilka/actors-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@jirispilka/actors-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T11:59:13.452963Z",
        "updatedAt": "2025-09-11T11:59:13.452963Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.arielbk/anki-mcp",
      "description": "MCP server for integrating with Anki flashcards through conversational AI",
      "repository": {
        "url": "https://github.com/arielbk/anki-mcp",
        "source": "github"
      },
      "version": "0.3.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@arielbk/anki-mcp",
          "version": "0.3.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T12:16:49.682389Z",
        "updatedAt": "2025-09-11T12:16:49.682389Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.mfukushim/map-traveler-mcp",
      "description": "Virtual traveler library for MCP",
      "repository": {
        "url": "https://github.com/mfukushim/map-traveler-mcp",
        "source": "github"
      },
      "version": "0.1.4",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@mfukushim/map-traveler-mcp",
          "version": "0.1.4",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "[Map] Google Map API key",
              "format": "string",
              "isSecret": true,
              "name": "MT_GOOGLE_MAP_KEY"
            },
            {
              "description": "[Image.gemini] Gemini Image Api key",
              "format": "string",
              "isSecret": true,
              "name": "MT_GEMINI_IMAGE_KEY"
            },
            {
              "description": "[Image.gemini] Number of retries when generating Gemini images Default: 0",
              "format": "string",
              "name": "MT_MAX_RETRY_GEMINI"
            },
            {
              "description": "[Image.gemini] Character reference image uri (file:// or https://) when generating Gemini image. Multiple settings can be made by separating them with the '|'. When multiple settings are made, they will be selected randomly.",
              "format": "string",
              "name": "MT_AVATAR_IMAGE_URI"
            },
            {
              "description": "[Map.etc] Optional: Map API custom endpoint. Example: direction=https://xxxx,places=https://yyyy ",
              "format": "string",
              "name": "MT_MAP_API_URL"
            },
            {
              "description": "[Map] Optional:Scale of travel time on real roads duration. default 4",
              "format": "string",
              "name": "MT_TIME_SCALE"
            },
            {
              "description": "[db.local] db save path: e.g. %USERPROFILE%/Desktop/traveler.sqlite ,$HOME/traveler.sqlite ",
              "format": "string",
              "name": "MT_SQLITE_PATH"
            },
            {
              "description": "[db.api] Turso sqlite API URL",
              "format": "string",
              "name": "MT_TURSO_URL"
            },
            {
              "description": "[db.api] Turso sqlite API access token",
              "format": "string",
              "isSecret": true,
              "name": "MT_TURSO_TOKEN"
            },
            {
              "description": "[rembg.local] absolute path of the installed rembg cli",
              "format": "string",
              "name": "MT_REMBG_PATH"
            },
            {
              "description": "[rembg.api] withoutbg.com rembg API URL",
              "format": "string",
              "name": "MT_REMBG_URL"
            },
            {
              "description": "[rembg.api] withoutbg.com rembg API key",
              "format": "string",
              "isSecret": true,
              "name": "MT_REMBG_WO_KEY"
            },
            {
              "description": "[Image.pixAi] pixAi API key",
              "format": "string",
              "isSecret": true,
              "name": "MT_PIXAI_KEY"
            },
            {
              "description": "[Image.sd] Stability.ai image generation API key",
              "format": "string",
              "isSecret": true,
              "name": "MT_SD_KEY"
            },
            {
              "description": "[Image.pixAi] Optional: pixAi ModelId, if not set use default model 1648918127446573124 ",
              "format": "string",
              "name": "MT_PIXAI_MODEL_ID"
            },
            {
              "description": "[Image.local.ComfyUi] Option: Generate image using ComfyUI API at specified URL. Example: http://192.168.1.100:8188",
              "format": "string",
              "name": "MT_COMFY_URL"
            },
            {
              "description": "[Image.local.ComfyUi] Optional: Path to API workflow file when using text to image with ComfyUI. If not specified: assets/comfy/t2i_sample.json",
              "format": "string",
              "name": "MT_COMFY_WORKFLOW_T2I"
            },
            {
              "description": "[Image.local.ComfyUi] Optional: Path of API workflow file when image to image in ComfyUI. If not specified: assets/comfy/i2i_sample.json",
              "format": "string",
              "name": "MT_COMFY_WORKFLOW_I2I"
            },
            {
              "description": "[Image.local.ComfyUi] Optional: Variable values to send to the workflow via comfyUI API",
              "format": "string",
              "name": "MT_COMFY_PARAMS"
            },
            {
              "description": "[Image] Optional: Fixed avatar generation prompt. You will no longer be able to change your avatar during conversations.",
              "format": "string",
              "name": "MT_FIXED_MODEL_PROMPT"
            },
            {
              "description": "[Image] Optional: Acceptable avatar image area ratio. default 0.042",
              "format": "string",
              "name": "MT_BODY_AREA_RATIO"
            },
            {
              "description": "[Image] Optional: Acceptable avatar image aspect ratios. default 1.5~2.3",
              "format": "string",
              "name": "MT_BODY_HW_RATIO"
            },
            {
              "description": "[Image] Optional: Avatar composite window horizontal ratio. default 0.5",
              "format": "string",
              "name": "MT_BODY_WINDOW_RATIO_W"
            },
            {
              "description": "[Image] Optional: Avatar composite window aspect ratio. default 0.75",
              "format": "string",
              "name": "MT_BODY_WINDOW_RATIO_H"
            },
            {
              "description": "[Sns.Bs] Bluesky sns registration address",
              "format": "string",
              "name": "MT_BS_ID"
            },
            {
              "description": "[Sns.Bs] bluesky sns password",
              "format": "string",
              "isSecret": true,
              "name": "MT_BS_PASS"
            },
            {
              "description": "[Sns.Bs] bluesky sns handle name: e.g. xxxxxxxx.bsky.social ",
              "format": "string",
              "name": "MT_BS_HANDLE"
            },
            {
              "description": "[etc] Optional: Directly filter the tools to be used. All are available if not specified. e.g. tips,set_traveler_location",
              "format": "string",
              "name": "MT_FILTER_TOOLS"
            },
            {
              "description": "[etc] Option: Specify whether the movement mode is 'realtime' or 'skip'. default realtime",
              "format": "string",
              "name": "MT_MOVE_MODE"
            },
            {
              "description": "[Image] Option: Output image width (pixels) Default is 512",
              "format": "string",
              "name": "MT_IMAGE_WIDTH"
            },
            {
              "description": "[Image] Options: 'true' = do not output image, not specified = output image if possible, default is not specified",
              "format": "string",
              "name": "MT_NO_IMAGE"
            },
            {
              "description": "[Image] Option: 'true' = Output StreetView image as is without avatar superimposition. Not specified = Superimpose avatar image. Default is not specified.",
              "format": "string",
              "name": "MT_NO_AVATAR"
            },
            {
              "description": "[Sns] Optional: Specify the feed tag when posting to SNS (#required, 15 characters or more) Default is #geo_less_traveler",
              "format": "string",
              "name": "MT_FEED_TAG"
            },
            {
              "description": "[Streamable-http] Maximum number of sessions when using Streamable-http",
              "format": "string",
              "name": "MT_MAX_SESSIONS"
            },
            {
              "description": "[Streamable-http] Session TTL when using Streamable-http",
              "format": "string",
              "name": "MT_SESSION_TTL_MS"
            },
            {
              "description": "[Streamable-http] Service TTL when using Streamable-http",
              "format": "string",
              "name": "MT_SERVICE_TTL_MS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T12:17:16.50839Z",
        "updatedAt": "2025-09-11T12:17:16.50839Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.imbenrabi/financial-modeling-prep-mcp-server",
      "description": "MCP server for Financial Modeling Prep API with 250+ financial data tools",
      "repository": {
        "url": "https://github.com/imbenrabi/Financial-Modeling-Prep-MCP-Server",
        "source": "github",
        "id": "988409529"
      },
      "version": "2.5.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "financial-modeling-prep-mcp-server",
          "version": "2.5.1",
          "runtimeHint": "npx",
          "transport": {
            "type": "streamable-http",
            "url": "https://financial-modeling-prep-mcp-server-production.up.railway.app/mcp"
          },
          "packageArguments": [
            {
              "description": "Financial Modeling Prep API access token",
              "format": "string",
              "type": "named",
              "name": "--fmp-token"
            },
            {
              "description": "Port number for HTTP server mode",
              "format": "number",
              "type": "named",
              "name": "--port"
            },
            {
              "description": "Enable dynamic tool discovery mode",
              "format": "boolean",
              "type": "named",
              "name": "--dynamic-tool-discovery"
            },
            {
              "description": "Comma-separated list of tool sets to load",
              "format": "string",
              "type": "named",
              "name": "--fmp-tool-sets"
            }
          ],
          "environmentVariables": [
            {
              "description": "Financial Modeling Prep API access token",
              "format": "string",
              "isSecret": true,
              "name": "FMP_ACCESS_TOKEN"
            },
            {
              "description": "Port number for HTTP server mode",
              "format": "number",
              "name": "PORT"
            },
            {
              "description": "Enable dynamic tool discovery mode",
              "format": "boolean",
              "name": "DYNAMIC_TOOL_DISCOVERY"
            },
            {
              "description": "Comma-separated list of tool sets to load",
              "format": "string",
              "name": "FMP_TOOL_SETS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T12:44:51.147376Z",
        "updatedAt": "2025-09-11T12:44:51.147376Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/pythondev-pro-egw_writings_mcp_server",
      "description": "Search Ellen G. White’s writings by keyword to surface relevant quotations. Retrieve exact passage…",
      "repository": {
        "url": "https://github.com/pythondev-pro/egw_writings_mcp_server",
        "source": "github"
      },
      "version": "1.12.4",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@pythondev-pro/egw_writings_mcp_server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T12:48:16.278544Z",
        "updatedAt": "2025-09-11T12:48:16.278544Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.pshivapr/selenium-mcp",
      "description": "Selenium Tools for MCP",
      "repository": {
        "url": "https://github.com/pshivapr/selenium-mcp",
        "source": "github"
      },
      "version": "0.4.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "selenium-webdriver-mcp",
          "version": "0.4.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "format": "string",
              "isSecret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T13:43:51.350538Z",
        "updatedAt": "2025-09-11T13:43:51.350538Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/DynamicEndpoints-powershell-exec-mcp-server",
      "description": "Execute PowerShell commands securely with controlled timeouts and input validation. Retrieve syste…",
      "repository": {
        "url": "https://github.com/DynamicEndpoints/PowerShell-Exec-MCP-Server",
        "source": "github"
      },
      "version": "1.13.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@DynamicEndpoints/powershell-exec-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T13:54:30.703395Z",
        "updatedAt": "2025-09-11T13:54:30.703395Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/DynamicEndpoints-autogen_mcp",
      "description": "Create and manage AI agents that collaborate and solve problems through natural language interacti…",
      "repository": {
        "url": "https://github.com/DynamicEndpoints/Autogen_MCP",
        "source": "github"
      },
      "version": "0.3.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@DynamicEndpoints/autogen_mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T13:57:38.18553Z",
        "updatedAt": "2025-09-11T13:57:38.18553Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/DynamicEndpoints-m365-core-mcp",
      "description": "*Updated June 17th 2025** Manage your Microsoft 365 services effortlessly. Create and manage distr…",
      "repository": {
        "url": "https://github.com/DynamicEndpoints/m365-core-mcp",
        "source": "github"
      },
      "version": "1.1.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@DynamicEndpoints/m365-core-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T13:58:16.278261Z",
        "updatedAt": "2025-09-11T13:58:16.278261Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "garden.stanislav.svelte-llm/svelte-llm-mcp",
      "description": "An MCP server that provides access to Svelte 5 and SvelteKit documentation",
      "repository": {
        "url": "https://github.com/khromov/svelte-llm-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://svelte-llm.stanislav.garden/mcp/mcp"
        },
        {
          "type": "sse",
          "url": "https://svelte-llm.stanislav.garden/mcp/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T15:24:28.061184Z",
        "updatedAt": "2025-09-11T15:24:28.061184Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.leshchenko1979/fast-mcp-telegram",
      "description": "Telegram MCP server with search and messaging capabilities",
      "repository": {},
      "version": "0.4.4"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T16:40:10.557651Z",
        "updatedAt": "2025-09-15T08:03:29.365893Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/arjunkmrm-lta-mcp",
      "description": "Provide real-time transportation data including bus arrivals, train service alerts, carpark availa…",
      "repository": {
        "url": "https://github.com/arjunkmrm/lta-mcp",
        "source": "github"
      },
      "version": "0.1.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@arjunkmrm/lta-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T16:52:48.059122Z",
        "updatedAt": "2025-09-11T16:52:48.059122Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.morinokami/astro-mcp",
      "description": "MCP server to support Astro project development",
      "repository": {
        "url": "https://github.com/morinokami/astro-mcp",
        "source": "github"
      },
      "version": "0.4.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "astro-mcp",
          "version": "0.4.2",
          "transport": {
            "type": "sse",
            "url": "http://localhost:4321/__mcp/sse"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T17:37:51.510706Z",
        "updatedAt": "2025-09-11T17:37:51.510706Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.jkakar/recipe-mcp",
      "description": "Generate and remix recipes using cookwith.co",
      "repository": {
        "url": "https://github.com/blaideinc/recipe-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cookwith/recipe-mcp",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T18:11:49.433941Z",
        "updatedAt": "2025-09-11T18:27:40.596727Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.timeslope/timeslope-mcp",
      "description": "Equip AI with tools for researching economic data from Federal Reserve Economic Data (FRED).",
      "repository": {},
      "version": "0.1.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.timeslope.com/mcp",
          "headers": [
            {
              "description": "Authorization Bearer header containing API key or OAuth token",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T18:16:25.262687Z",
        "updatedAt": "2025-09-11T18:16:25.262687Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.OpenCageData/opencage-geocoding-mcp",
      "description": "MCP server for OpenCage geocoding API",
      "repository": {
        "url": "https://github.com/OpenCageData/opencage-geocoding-mcp",
        "source": "github"
      },
      "version": "1.0.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@opencage/mcp-opencage-server",
          "version": "1.0.3",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T18:24:40.318381Z",
        "updatedAt": "2025-09-11T18:24:40.318381Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.jkakar/recipe-mcp",
      "description": "Generate and remix recipes using cookwith.co",
      "repository": {
        "url": "https://github.com/blaideinc/recipe-mcp",
        "source": "github"
      },
      "version": "1.0.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cookwith/recipe-mcp",
          "version": "1.0.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T18:27:40.577813Z",
        "updatedAt": "2025-09-11T18:30:58.534722Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.jkakar/recipe-mcp",
      "description": "Generate and remix recipes using cookwith.co",
      "repository": {
        "url": "https://github.com/blaideinc/recipe-mcp",
        "source": "github"
      },
      "version": "1.0.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cookwith/recipe-mcp",
          "version": "1.0.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T18:30:58.530201Z",
        "updatedAt": "2025-09-11T18:33:51.807884Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.jkakar/recipe-mcp",
      "description": "Generate and remix recipes using cookwith.co",
      "repository": {
        "url": "https://github.com/blaideinc/recipe-mcp",
        "source": "github"
      },
      "version": "1.0.4",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cookwith/recipe-mcp",
          "version": "1.0.4",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T18:33:51.803815Z",
        "updatedAt": "2025-09-11T18:33:51.803815Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/hithereiamaliff-mcp-nextcloud",
      "description": "A comprehensive Model Context Protocol (MCP) server that enables AI assistants to interact with yo…",
      "repository": {
        "url": "https://github.com/hithereiamaliff/mcp-nextcloud",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@hithereiamaliff/mcp-nextcloud/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T18:40:25.891252Z",
        "updatedAt": "2025-09-11T18:40:25.891252Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/zwldarren-akshare-one-mcp",
      "description": "Provide access to Chinese stock market data including historical prices, real-time data, news, and…",
      "repository": {
        "url": "https://github.com/zwldarren/akshare-one-mcp",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@zwldarren/akshare-one-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T19:15:39.84882Z",
        "updatedAt": "2025-09-11T19:15:39.84882Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.notion/mcp",
      "description": "Official Notion MCP server",
      "repository": {
        "url": "https://github.com/makenotion/notion-next",
        "source": "github",
        "subfolder": "src/cloudflare-mcp"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.notion.com/mcp"
        },
        {
          "type": "sse",
          "url": "https://mcp.notion.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T22:19:32.446787Z",
        "updatedAt": "2025-09-11T22:25:50.746839Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.notion/mcp",
      "description": "Official Notion MCP server",
      "repository": {},
      "version": "1.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.notion.com/mcp"
        },
        {
          "type": "sse",
          "url": "https://mcp.notion.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T22:25:50.737872Z",
        "updatedAt": "2025-09-11T22:25:50.737872Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "",
      "name": "io.github.jkakar/cookwith-mcp",
      "description": "AI-powered recipe generation and transformation tools by Cookwith",
      "repository": {
        "url": "https://github.com/blaideinc/cookwith-mcp",
        "source": "github"
      },
      "version": "1.0.0"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-11T23:27:56.196698Z",
        "updatedAt": "2025-09-12T19:23:45.415878Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.shinpr/mcp-image",
      "description": "AI image generation MCP server using Nano Banana with intelligent prompt enhancement",
      "repository": {
        "url": "https://github.com/shinpr/mcp-image",
        "source": "github"
      },
      "version": "0.2.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-image",
          "version": "0.2.3",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Google Gemini API key for image generation (get from https://aistudio.google.com/apikey)",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "GEMINI_API_KEY"
            },
            {
              "description": "Absolute path to directory where generated images will be saved (defaults to ./output)",
              "format": "string",
              "name": "IMAGE_OUTPUT_DIR"
            },
            {
              "description": "Set to 'true' to disable automatic prompt optimization and use direct prompts",
              "format": "boolean",
              "name": "SKIP_PROMPT_ENHANCEMENT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T00:28:17.174732Z",
        "updatedAt": "2025-09-12T00:28:17.174732Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/Aman-Amith-Shastry-scientific_computation_mcp",
      "description": "This MCP server enables users to perform scientific computations regarding linear algebra and vect…",
      "repository": {
        "url": "https://github.com/Aman-Amith-Shastry/scientific_computation_mcp",
        "source": "github"
      },
      "version": "1.13.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Aman-Amith-Shastry/scientific_computation_mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T01:14:07.07827Z",
        "updatedAt": "2025-09-12T01:14:07.07827Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.mickymultani/crypto-bytes",
      "description": "Crypto Bytes MCP Server",
      "repository": {},
      "version": "0.1.1",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "crypto_bytes_mcp_server",
          "version": "0.1.1",
          "runtimeHint": "python",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "value": "-m",
              "type": "positional"
            },
            {
              "value": "crypto_bytes_mcp_server",
              "type": "positional"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T01:24:42.862303Z",
        "updatedAt": "2025-09-12T01:24:42.862303Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.mcpcap/mcpcap",
      "description": "An MCP server for analyzing PCAP files.",
      "repository": {
        "url": "https://github.com/mcpcap/mcpcap",
        "source": "github"
      },
      "version": "0.5.2",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcpcap",
          "version": "0.4.4",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T01:41:27.474865Z",
        "updatedAt": "2025-09-12T01:50:59.068605Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.mcpcap/mcpcap",
      "description": "An MCP server for analyzing PCAP files.",
      "repository": {
        "url": "https://github.com/mcpcap/mcpcap",
        "source": "github"
      },
      "version": "0.5.3",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcpcap",
          "version": "0.4.4",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T01:50:59.054897Z",
        "updatedAt": "2025-09-12T01:53:51.978639Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.mcpcap/mcpcap",
      "description": "An MCP server for analyzing PCAP files.",
      "repository": {
        "url": "https://github.com/mcpcap/mcpcap",
        "source": "github"
      },
      "version": "0.5.4",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcpcap",
          "version": "0.4.4",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T01:53:51.972295Z",
        "updatedAt": "2025-09-12T01:55:40.789432Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.mcpcap/mcpcap",
      "description": "An MCP server for analyzing PCAP files.",
      "repository": {
        "url": "https://github.com/mcpcap/mcpcap",
        "source": "github"
      },
      "version": "0.5.5",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcpcap",
          "version": "0.4.4",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T01:55:40.782814Z",
        "updatedAt": "2025-09-12T02:03:43.967161Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.mcpcap/mcpcap",
      "description": "An MCP server for analyzing PCAP files.",
      "repository": {
        "url": "https://github.com/mcpcap/mcpcap",
        "source": "github"
      },
      "version": "0.5.6",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcpcap",
          "version": "0.4.4",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T02:03:43.941695Z",
        "updatedAt": "2025-09-12T04:24:04.029498Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.domdomegg/time-mcp-pypi",
      "description": "Get the current UTC time in RFC 3339 format.",
      "repository": {
        "url": "https://github.com/domdomegg/time-mcp-pypi.git",
        "source": "github"
      },
      "version": "1.0.6",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "time-mcp-pypi",
          "version": "1.0.6",
          "runtimeHint": "python",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T02:14:45.618238Z",
        "updatedAt": "2025-09-12T02:14:45.618238Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.domdomegg/time-mcp-nuget",
      "description": "Get the current UTC time in RFC 3339 format.",
      "repository": {
        "url": "https://github.com/domdomegg/time-mcp-nuget.git",
        "source": "github"
      },
      "version": "1.0.8",
      "packages": [
        {
          "registryType": "nuget",
          "identifier": "TimeMcpServer",
          "version": "1.0.8",
          "runtimeHint": "dnx",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T02:58:39.843958Z",
        "updatedAt": "2025-09-12T02:58:39.843958Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.domdomegg/airtable-mcp-server",
      "description": "Read and write access to Airtable database schemas, tables, and records.",
      "repository": {
        "url": "https://github.com/domdomegg/airtable-mcp-server.git",
        "source": "github"
      },
      "version": "1.7.3",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "airtable-mcp-server",
          "version": "1.7.3",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Airtable personal access token (e.g., pat123.abc123). Create at https://airtable.com/create/tokens/new with scopes: schema.bases:read, data.records:read, and optionally schema.bases:write and data.records:write.",
              "isRequired": true,
              "isSecret": true,
              "name": "AIRTABLE_API_KEY"
            }
          ]
        },
        {
          "registryType": "oci",
          "identifier": "docker.io/domdomegg/airtable-mcp-server:1.7.3",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Airtable personal access token (e.g., pat123.abc123). Create at https://airtable.com/create/tokens/new with scopes: schema.bases:read, data.records:read, and optionally schema.bases:write and data.records:write.",
              "isRequired": true,
              "isSecret": true,
              "name": "AIRTABLE_API_KEY"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/domdomegg/airtable-mcp-server/releases/download/v1.7.3/airtable-mcp-server.mcpb",
          "fileSha256": "0f28a9129cfebd262dfb77854c872355d21401bb3e056575b3027081f5d570ca",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T03:19:04.492113Z",
        "updatedAt": "2025-09-12T03:19:04.492113Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.scorecard/mcp",
      "description": "MCP server providing access to the Scorecard API to evaluate and optimize LLM systems.",
      "repository": {
        "url": "https://github.com/scorecard-ai/scorecard-node",
        "source": "github"
      },
      "version": "2.1.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "scorecard-ai-mcp",
          "version": "2.1.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Scorecard API key for authentication. Get your API key from https://app.scorecard.io/settings",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "SCORECARD_API_KEY"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.scorecard.io/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T04:07:55.578779Z",
        "updatedAt": "2025-09-12T04:07:55.578779Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.mcpcap/mcpcap",
      "description": "An MCP server for analyzing PCAP files.",
      "repository": {
        "url": "https://github.com/mcpcap/mcpcap",
        "source": "github"
      },
      "version": "0.5.7",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcpcap",
          "version": "0.4.4",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T04:24:04.024828Z",
        "updatedAt": "2025-09-12T04:28:40.563658Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.mcpcap/mcpcap",
      "description": "An MCP server for analyzing PCAP files.",
      "repository": {
        "url": "https://github.com/mcpcap/mcpcap",
        "source": "github"
      },
      "version": "0.5.8",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcpcap",
          "version": "0.4.4",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T04:28:40.558477Z",
        "updatedAt": "2025-09-12T04:48:10.705163Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.mcpcap/mcpcap",
      "description": "An MCP server for analyzing PCAP files.",
      "repository": {
        "url": "https://github.com/mcpcap/mcpcap",
        "source": "github"
      },
      "version": "0.5.9",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcpcap",
          "version": "0.4.4",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T04:48:10.687272Z",
        "updatedAt": "2025-09-12T05:10:59.819864Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.mcpcap/mcpcap",
      "description": "An MCP server for analyzing PCAP files.",
      "repository": {
        "url": "https://github.com/mcpcap/mcpcap",
        "source": "github"
      },
      "version": "0.5.10",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcpcap",
          "version": "0.4.4",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T05:10:59.806509Z",
        "updatedAt": "2025-09-18T00:54:49.018201Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.xkelxmc/uranium-mcp",
      "description": "MCP for Uranium NFT tools to mint, list, and manage digital assets on the permaweb.",
      "repository": {
        "url": "https://github.com/xkelxmc/uranium-mcp",
        "source": "github"
      },
      "version": "1.0.8",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "uranium-tools-mcp",
          "version": "1.0.8",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "You can generate an API key from your Uranium account settings: https://portal.uranium.pro/dashboard/profile/api-keys",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "URANIUM_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T06:37:08.76833Z",
        "updatedAt": "2025-09-12T06:40:04.1259Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.xkelxmc/uranium-mcp",
      "description": "MCP for Uranium NFT tools to mint, list, and manage digital assets on the permaweb.",
      "repository": {
        "url": "https://github.com/xkelxmc/uranium-mcp",
        "source": "github"
      },
      "version": "1.0.9",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "uranium-tools-mcp",
          "version": "1.0.9",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "You can generate an API key from your Uranium account settings: https://portal.uranium.pro/dashboard/profile/api-keys",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "URANIUM_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T06:40:04.121499Z",
        "updatedAt": "2025-09-12T06:40:04.121499Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.variflight/variflight-mcp",
      "description": "VariFlight's official MCP server provides tools to query flight, weather, comfort, and fare data.",
      "repository": {
        "url": "https://github.com/variflight/variflight-mcp",
        "source": "github"
      },
      "version": "1.0.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@variflight-ai/variflight-mcp",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "VARIFLIGHT_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T07:06:18.90408Z",
        "updatedAt": "2025-09-12T07:06:18.90408Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.tickettailor/mcp",
      "description": "Provides event organisers with tools to interact with a Ticket Tailor box office account.",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.tickettailor.ai/mcp"
        },
        {
          "type": "sse",
          "url": "https://mcp.tickettailor.ai/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T10:10:54.188764Z",
        "updatedAt": "2025-09-12T10:10:54.188764Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.IvanMurzak/Unity-MCP",
      "description": "Make 3D games in Unity Engine with AI. MCP Server + Plugin for Unity Editor and Unity games.",
      "repository": {
        "url": "https://github.com/IvanMurzak/Unity-MCP",
        "source": "github",
        "subfolder": "Unity-MCP-Server"
      },
      "version": "0.17.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/ivanmurzakdev/unity-mcp-server:0.17.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Client -> Server <- Plugin connection port (default: 8080)",
              "format": "number",
              "name": "UNITY_MCP_PORT"
            },
            {
              "description": "Plugin -> Server connection timeout (ms) (default: 10000)",
              "format": "number",
              "name": "UNITY_MCP_PLUGIN_TIMEOUT"
            },
            {
              "description": "Client -> Server transport type: stdio or http (default: http)",
              "format": "string",
              "default": "stdio",
              "name": "UNITY_MCP_CLIENT_TRANSPORT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T10:14:26.342755Z",
        "updatedAt": "2025-09-12T11:41:26.342442Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.IvanMurzak/Unity-MCP",
      "description": "Make 3D games in Unity Engine with AI. MCP Server + Plugin for Unity Editor and Unity games.",
      "repository": {
        "url": "https://github.com/IvanMurzak/Unity-MCP",
        "source": "github",
        "subfolder": "Unity-MCP-Server"
      },
      "version": "0.17.1",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/ivanmurzakdev/unity-mcp-server:0.17.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Client -> Server <- Plugin connection port (default: 8080)",
              "format": "number",
              "name": "UNITY_MCP_PORT"
            },
            {
              "description": "Plugin -> Server connection timeout (ms) (default: 10000)",
              "format": "number",
              "name": "UNITY_MCP_PLUGIN_TIMEOUT"
            },
            {
              "description": "Client -> Server transport type: stdio or http (default: http)",
              "format": "string",
              "default": "stdio",
              "name": "UNITY_MCP_CLIENT_TRANSPORT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T11:41:26.282067Z",
        "updatedAt": "2025-09-12T11:41:26.282067Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.burningion/video-editing-mcp",
      "description": "MCP Server for Video Jungle - Analyze, Search, Generate, and Edit Videos",
      "repository": {
        "url": "https://github.com/burningion/video-editing-mcp",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "video-editor-mcp",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Video Jungle API Key (found at https://www.video-jungle.com/user/settings)",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "VJ_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T12:58:23.949573Z",
        "updatedAt": "2025-09-12T12:58:23.949573Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/fengyinxia-jimeng-mcp",
      "description": "Create images and videos from prompts, with options for image mixing, reference images, and start/…",
      "repository": {
        "url": "https://github.com/fengyinxia/jimeng-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@fengyinxia/jimeng-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T13:13:51.711543Z",
        "updatedAt": "2025-09-12T13:13:51.711543Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.augee99/mcp-weather",
      "description": "An MCP server that provides [describe what your server does]",
      "repository": {
        "url": "https://github.com/augee99/mcp-weather",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-weather-augee99",
          "version": "0.1.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T13:24:44.527457Z",
        "updatedAt": "2025-09-12T13:24:44.527457Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ch.martinelli/jooq-mcp",
      "description": "An MCP server that provides access to the jOOQ documentation",
      "repository": {
        "url": "https://github.com/martinellich/jooq-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://jooq-mcp.martinelli.ch/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T13:41:08.407071Z",
        "updatedAt": "2025-09-12T13:41:08.407071Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T14:23:41.666712Z",
        "updatedAt": "2025-09-19T09:07:32.533724Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.teamwork/mcp",
      "description": "The Teamwork.com official MCP server helps teams efficiently manage client projects with AI.",
      "repository": {
        "url": "https://github.com/teamwork/mcp",
        "source": "github"
      },
      "version": "1.2.4",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/teamwork/mcp:v1.2.4",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "TW_MCP_BEARER_TOKEN"
            },
            {
              "description": "Choose log output format between 'text' or 'json'. Default is 'text'.",
              "format": "string",
              "name": "TW_MCP_LOG_FORMAT"
            },
            {
              "description": "Choose log level between 'debug', 'info', 'warn' or 'error'. Default is 'info'.",
              "format": "string",
              "name": "TW_MCP_LOG_LEVEL"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T15:06:41.256513Z",
        "updatedAt": "2025-09-15T12:27:37.741621Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.hellocoop/admin-mcp",
      "description": "Model Context Protocol (MCP) for Hellō Admin API.",
      "repository": {
        "url": "https://github.com/hellocoop/admin-mcp",
        "source": "github"
      },
      "version": "1.5.7",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@hellocoop/admin-mcp",
          "version": "1.5.7",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T15:07:41.224545Z",
        "updatedAt": "2025-09-12T15:07:41.224545Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.joelverhagen/Knapcode.SampleMcpServer",
      "description": "A sample MCP server using the MCP C# SDK. Generates random numbers and random weather.",
      "repository": {
        "url": "https://github.com/joelverhagen/Knapcode.SampleMcpServer.git",
        "source": "github"
      },
      "version": "0.7.0-beta",
      "packages": [
        {
          "registryType": "nuget",
          "registryBaseUrl": "https://api.nuget.org",
          "identifier": "Knapcode.SampleMcpServer",
          "version": "0.7.0-beta",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "mcp",
              "type": "positional",
              "valueHint": "mcp"
            },
            {
              "value": "start",
              "type": "positional",
              "valueHint": "start"
            }
          ],
          "environmentVariables": [
            {
              "value": "{weather_choices}",
              "variables": {
                "weather_choices": {
                  "description": "Comma separated list of weather descriptions to randomly select.",
                  "isRequired": true
                }
              },
              "name": "WEATHER_CHOICES"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T15:42:35.51239Z",
        "updatedAt": "2025-09-12T15:42:35.51239Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.joelverhagen.mcp/Knapcode.SampleMcpServer",
      "description": "A sample MCP server using the MCP C# SDK. Generates random numbers and random weather.",
      "repository": {
        "url": "https://github.com/joelverhagen/Knapcode.SampleMcpServer.git",
        "source": "github"
      },
      "version": "0.7.0-beta",
      "packages": [
        {
          "registryType": "nuget",
          "registryBaseUrl": "https://api.nuget.org",
          "identifier": "Knapcode.SampleMcpServer",
          "version": "0.7.0-beta",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "mcp",
              "type": "positional",
              "valueHint": "mcp"
            },
            {
              "value": "start",
              "type": "positional",
              "valueHint": "start"
            }
          ],
          "environmentVariables": [
            {
              "value": "{weather_choices}",
              "variables": {
                "weather_choices": {
                  "description": "Comma separated list of weather descriptions to randomly select.",
                  "isRequired": true
                }
              },
              "name": "WEATHER_CHOICES"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T15:58:51.492613Z",
        "updatedAt": "2025-09-12T15:58:51.492613Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.p1va/symbols",
      "description": "MCP server to read, inspect and troubleshoot codebase symbols",
      "repository": {
        "url": "https://github.com/p1va/symbols",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@p1va/symbols",
          "version": "0.0.10",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T16:29:27.100278Z",
        "updatedAt": "2025-09-12T16:29:27.100278Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.augmnt/augments-mcp-server",
      "description": "Augments MCP Server - A comprehensive framework documentation provider for Claude Code",
      "repository": {
        "url": "https://github.com/augmnt/augments-mcp-server",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "augments-mcp-server",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T16:36:52.743796Z",
        "updatedAt": "2025-09-12T16:52:50.97743Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.augmnt/augments-mcp-server",
      "description": "Augments MCP Server - A comprehensive framework documentation provider for Claude Code",
      "repository": {
        "url": "https://github.com/augmnt/augments-mcp-server",
        "source": "github"
      },
      "version": "1.0.2",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "augments-mcp-server",
          "version": "1.0.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T16:52:50.968512Z",
        "updatedAt": "2025-09-12T16:52:50.968512Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.kirbah/mcp-youtube",
      "description": "YouTube MCP server for token-optimized, structured data using the YouTube Data API v3.",
      "repository": {
        "url": "https://github.com/kirbah/mcp-youtube",
        "source": "github"
      },
      "version": "0.2.6",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@kirbah/mcp-youtube",
          "version": "0.2.6",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "YouTube Data API v3 key",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YOUTUBE_API_KEY"
            },
            {
              "description": "MongoDB connection string for caching",
              "format": "string",
              "isSecret": true,
              "name": "MDB_MCP_CONNECTION_STRING"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T17:28:32.23706Z",
        "updatedAt": "2025-09-12T17:28:32.23706Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/fitaf-ai-fitaf-ai-mcp",
      "description": "Manage workouts, nutrition, goals, and progress across the FitAF platform. Connect wearables, sync…",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@fitaf-ai/fitaf-ai-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T17:59:11.653728Z",
        "updatedAt": "2025-09-12T17:59:11.653728Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/docfork-mcp",
      "description": "@latest documentation and code examples to 9000+ libraries for LLMs and AI code editors in a singl…",
      "repository": {
        "url": "https://github.com/docfork/docfork-mcp",
        "source": "github"
      },
      "version": "0.7.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@docfork/mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T18:25:16.049647Z",
        "updatedAt": "2025-09-12T18:25:16.049647Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.wonderwhy-er/desktop-commander",
      "description": "MCP server for terminal commands, file operations, and process management",
      "repository": {
        "url": "https://github.com/wonderwhy-er/DesktopCommanderMCP",
        "source": "github"
      },
      "version": "0.2.14",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@wonderwhy-er/desktop-commander",
          "version": "0.2.14",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T19:05:34.28461Z",
        "updatedAt": "2025-09-18T13:15:52.412828Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "",
      "name": "io.github.jkakar/cookwith-mcp",
      "description": "AI-powered recipe generation and transformation tools by Cookwith",
      "repository": {
        "url": "https://github.com/blaideinc/cookwith-mcp",
        "source": "github"
      },
      "version": "1.0.1"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T19:23:45.409935Z",
        "updatedAt": "2025-09-12T19:27:49.346129Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "",
      "name": "io.github.jkakar/cookwith-mcp",
      "description": "AI-powered recipe generation and transformation tools by Cookwith",
      "repository": {
        "url": "https://github.com/blaideinc/cookwith-mcp",
        "source": "github"
      },
      "version": "1.0.2"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T19:27:49.340446Z",
        "updatedAt": "2025-09-12T19:27:49.340446Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/fitaf-ai-fitaf-mcp",
      "description": "Track workouts, nutrition, body metrics, habits, and SMART goals with insights and trends. Connect…",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@fitaf-ai/fitaf-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T20:09:50.974663Z",
        "updatedAt": "2025-09-12T20:09:50.974663Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.browserbase/mcp-server-browserbase",
      "description": "MCP server for AI web browser automation using Browserbase and Stagehand",
      "repository": {
        "url": "https://github.com/browserbase/mcp-server-browserbase",
        "source": "github"
      },
      "version": "2.1.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@browserbasehq/mcp-server-browserbase",
          "version": "2.1.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your Browserbase API key",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BROWSERBASE_API_KEY"
            },
            {
              "description": "Your Browserbase Project ID",
              "isRequired": true,
              "format": "string",
              "name": "BROWSERBASE_PROJECT_ID"
            },
            {
              "description": "Your Gemini API key (default model)",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "GEMINI_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T21:10:44.068065Z",
        "updatedAt": "2025-09-12T21:10:44.068065Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.isamu/mulmocast-vision",
      "description": "Easy and stylish presentation slide generator.",
      "repository": {
        "url": "https://github.com/receptron/mulmocast-vision",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mulmocast-vision",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T21:46:16.168898Z",
        "updatedAt": "2025-09-12T21:46:16.168898Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.saucelabs-sample-test-frameworks/sauce-api-mcp",
      "description": "An open-source MCP server that provides LLM access to the Sauce Labs API",
      "repository": {
        "url": "https://github.com/saucelabs/sauce-api-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "sauce-api-mcp",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "value": "<sauce-user-name>",
              "name": "SAUCE_USERNAME"
            },
            {
              "value": "<sauce-access-key>",
              "name": "SAUCE_ACCESS_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-12T22:36:40.555152Z",
        "updatedAt": "2025-09-12T22:36:40.555152Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "net.gepuro.mcp-company-lens-v1/company-lens-mcp-registry",
      "description": "Search Japanese company database",
      "repository": {
        "url": "https://github.com/gepuro/company-lens-mcp-registry",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp-company-lens-v1.gepuro.net/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T02:14:01.922166Z",
        "updatedAt": "2025-09-13T02:14:01.922166Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/hustcc-mcp-mermaid",
      "description": "Generate dynamic Mermaid diagrams and charts with AI assistance. Customize styles and export diagr…",
      "repository": {
        "url": "https://github.com/hustcc/mcp-mermaid",
        "source": "github"
      },
      "version": "0.1.3",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@hustcc/mcp-mermaid/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T06:08:16.370383Z",
        "updatedAt": "2025-09-13T06:08:16.370383Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.yuna0x0/anilist-mcp",
      "description": "AniList MCP server for accessing AniList API data",
      "repository": {
        "url": "https://github.com/yuna0x0/anilist-mcp",
        "source": "github"
      },
      "version": "1.3.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "anilist-mcp",
          "version": "1.3.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "AniList API token for authenticated requests",
              "format": "string",
              "isSecret": true,
              "name": "ANILIST_TOKEN"
            }
          ]
        },
        {
          "registryType": "oci",
          "identifier": "docker.io/yuna0x0/anilist-mcp:1.3.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "AniList API token for authenticated requests",
              "format": "string",
              "isSecret": true,
              "name": "ANILIST_TOKEN"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/yuna0x0/anilist-mcp/releases/download/v1.3.2/anilist-mcp-1.3.2.mcpb",
          "fileSha256": "5d6c9d0b6a420ccdb884ac982e9e1f8140be856012c157e85ab5bacb78a013c8",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "AniList API token for authenticated requests",
              "format": "string",
              "isSecret": true,
              "name": "ANILIST_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T07:42:46.258255Z",
        "updatedAt": "2025-09-13T07:58:52.384172Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.yuna0x0/anilist-mcp",
      "description": "AniList MCP server for accessing AniList API data",
      "repository": {
        "url": "https://github.com/yuna0x0/anilist-mcp",
        "source": "github"
      },
      "version": "1.3.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "anilist-mcp",
          "version": "1.3.3",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "AniList API token for authenticated requests",
              "format": "string",
              "isSecret": true,
              "name": "ANILIST_TOKEN"
            }
          ]
        },
        {
          "registryType": "oci",
          "identifier": "docker.io/yuna0x0/anilist-mcp:1.3.3",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "AniList API token for authenticated requests",
              "format": "string",
              "isSecret": true,
              "name": "ANILIST_TOKEN"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/yuna0x0/anilist-mcp/releases/download/v1.3.3/anilist-mcp-1.3.3.mcpb",
          "fileSha256": "17f509167680edc3923940b31853fe2b27bbae1d5ab9b071525a4260704006ec",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "AniList API token for authenticated requests",
              "format": "string",
              "isSecret": true,
              "name": "ANILIST_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T07:58:52.376058Z",
        "updatedAt": "2025-09-21T13:14:02.759136Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.yuna0x0/hackmd-mcp",
      "description": "A Model Context Protocol server for integrating HackMD's note-taking platform with AI assistants.",
      "repository": {
        "url": "https://github.com/yuna0x0/hackmd-mcp",
        "source": "github"
      },
      "version": "1.4.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "hackmd-mcp",
          "version": "1.4.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your HackMD API token for API authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "HACKMD_API_TOKEN"
            },
            {
              "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
              "format": "string",
              "default": "https://api.hackmd.io/v1",
              "name": "HACKMD_API_URL"
            }
          ]
        },
        {
          "registryType": "oci",
          "identifier": "docker.io/yuna0x0/hackmd-mcp:1.4.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your HackMD API token for API authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "HACKMD_API_TOKEN"
            },
            {
              "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
              "format": "string",
              "default": "https://api.hackmd.io/v1",
              "name": "HACKMD_API_URL"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/yuna0x0/hackmd-mcp/releases/download/v1.4.2/hackmd-mcp-1.4.2.mcpb",
          "fileSha256": "7b6ee105271d8595e3e5a0a3e4f9075ab3a2b7b373f529f4c3e99d1f93dead62",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your HackMD API token for API authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "HACKMD_API_TOKEN"
            },
            {
              "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
              "format": "string",
              "default": "https://api.hackmd.io/v1",
              "name": "HACKMD_API_URL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T08:20:45.650204Z",
        "updatedAt": "2025-09-15T03:10:53.114708Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/yuna0x0-anilist-mcp",
      "description": "Access and interact with anime and manga data seamlessly. Retrieve detailed information about your…",
      "repository": {
        "url": "https://github.com/yuna0x0/anilist-mcp",
        "source": "github"
      },
      "version": "1.3.3",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@yuna0x0/anilist-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T08:34:23.401483Z",
        "updatedAt": "2025-09-29T12:06:58.363545Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/yuna0x0-hackmd-mcp",
      "description": "Interact with your HackMD notes and teams seamlessly. Manage your notes, view reading history, and…",
      "repository": {
        "url": "https://github.com/yuna0x0/hackmd-mcp",
        "source": "github"
      },
      "version": "1.4.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@yuna0x0/hackmd-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T08:37:37.613855Z",
        "updatedAt": "2025-09-15T03:33:42.700252Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.vfarcic/dot-ai",
      "description": "AI-powered development platform for Kubernetes deployments and intelligent automation",
      "repository": {
        "url": "https://github.com/vfarcic/dot-ai",
        "source": "github"
      },
      "version": "0.90.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@vfarcic/dot-ai",
          "version": "0.90.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Anthropic API key for Claude AI integration (required for deployments)",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "ANTHROPIC_API_KEY"
            },
            {
              "description": "OpenAI API key for embeddings (patterns, policies, capabilities)",
              "format": "string",
              "isSecret": true,
              "name": "OPENAI_API_KEY"
            },
            {
              "description": "Qdrant Vector DB URL for patterns, policies, and capabilities storage",
              "format": "string",
              "default": "http://localhost:6333",
              "name": "QDRANT_URL"
            },
            {
              "description": "Qdrant API key for authentication",
              "format": "string",
              "isSecret": true,
              "name": "QDRANT_API_KEY"
            },
            {
              "description": "Path to kubeconfig file for Kubernetes access",
              "format": "string",
              "name": "KUBECONFIG"
            },
            {
              "description": "Session storage directory for workflow persistence",
              "format": "string",
              "name": "DOT_AI_SESSION_DIR"
            },
            {
              "description": "Enable debug logging",
              "format": "string",
              "name": "DEBUG_DOT_AI"
            },
            {
              "description": "Documentation file pattern for discovery",
              "format": "string",
              "name": "DOT_AI_DOC_PATTERN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T10:28:59.278155Z",
        "updatedAt": "2025-09-13T10:28:59.278155Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.b1ff/atlassian-dc-mcp-bitbucket",
      "description": "MCP server for Atlassian Bitbucket Data Center - interact with repositories and code",
      "repository": {
        "url": "https://github.com/b1ff/atlassian-dc-mcp",
        "source": "github"
      },
      "version": "0.9.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@atlassian-dc-mcp/bitbucket",
          "version": "0.9.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Bitbucket host domain (e.g. your-instance.atlassian.net)",
              "format": "string",
              "name": "BITBUCKET_HOST"
            },
            {
              "description": "Bitbucket API base path (alternative to BITBUCKET_HOST)",
              "format": "string",
              "name": "BITBUCKET_API_BASE_PATH"
            },
            {
              "description": "Bitbucket Personal Access Token or API token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BITBUCKET_API_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T11:37:20.709225Z",
        "updatedAt": "2025-09-13T13:17:33.583855Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.b1ff/atlassian-dc-mcp-confluence",
      "description": "MCP server for Atlassian Confluence Data Center - access and manage content",
      "repository": {
        "url": "https://github.com/b1ff/atlassian-dc-mcp",
        "source": "github"
      },
      "version": "0.9.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@atlassian-dc-mcp/confluence",
          "version": "0.9.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Confluence host domain (e.g. your-instance.atlassian.net)",
              "format": "string",
              "name": "CONFLUENCE_HOST"
            },
            {
              "description": "Confluence API base path (alternative to CONFLUENCE_HOST)",
              "format": "string",
              "name": "CONFLUENCE_API_BASE_PATH"
            },
            {
              "description": "Confluence Personal Access Token or API token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CONFLUENCE_API_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T11:40:42.156627Z",
        "updatedAt": "2025-09-13T13:17:33.205676Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.b1ff/atlassian-dc-mcp-jira",
      "description": "MCP server for Atlassian Jira Data Center - search, view, and create issues",
      "repository": {
        "url": "https://github.com/b1ff/atlassian-dc-mcp",
        "source": "github"
      },
      "version": "0.9.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@atlassian-dc-mcp/jira",
          "version": "0.9.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Jira host domain (e.g. your-instance.atlassian.net)",
              "format": "string",
              "name": "JIRA_HOST"
            },
            {
              "description": "Jira API base path (alternative to JIRA_HOST)",
              "format": "string",
              "name": "JIRA_API_BASE_PATH"
            },
            {
              "description": "Jira Personal Access Token or API token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "JIRA_API_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T11:40:51.735989Z",
        "updatedAt": "2025-09-13T13:17:32.833654Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/smithery-ai-cookbook-ts-smithery-cli",
      "description": "A simple Typescript MCP server built using the official MCP Typescript SDK and smithery/cli. This…",
      "repository": {
        "url": "https://github.com/smithery-ai/smithery-cookbook",
        "source": "github",
        "subfolder": "servers/typescript/migrate_stdio_to_http/server_with_smithery_cli"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@smithery-ai/cookbook-ts-smithery-cli/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T12:45:28.964188Z",
        "updatedAt": "2025-09-13T12:45:28.964188Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.b1ff/atlassian-dc-mcp-jira",
      "description": "MCP server for Atlassian Jira Data Center - search, view, and create issues",
      "repository": {
        "url": "https://github.com/b1ff/atlassian-dc-mcp",
        "source": "github"
      },
      "version": "0.9.7",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@atlassian-dc-mcp/jira",
          "version": "0.9.7",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Jira host domain (e.g. your-instance.atlassian.net)",
              "format": "string",
              "name": "JIRA_HOST"
            },
            {
              "description": "Jira API base path (alternative to JIRA_HOST)",
              "format": "string",
              "name": "JIRA_API_BASE_PATH"
            },
            {
              "description": "Jira Personal Access Token or API token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "JIRA_API_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T13:17:32.827443Z",
        "updatedAt": "2025-09-13T13:18:50.72143Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.b1ff/atlassian-dc-mcp-confluence",
      "description": "MCP server for Atlassian Confluence Data Center - access and manage content",
      "repository": {
        "url": "https://github.com/b1ff/atlassian-dc-mcp",
        "source": "github"
      },
      "version": "0.9.7",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@atlassian-dc-mcp/confluence",
          "version": "0.9.7",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Confluence host domain (e.g. your-instance.atlassian.net)",
              "format": "string",
              "name": "CONFLUENCE_HOST"
            },
            {
              "description": "Confluence API base path (alternative to CONFLUENCE_HOST)",
              "format": "string",
              "name": "CONFLUENCE_API_BASE_PATH"
            },
            {
              "description": "Confluence Personal Access Token or API token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CONFLUENCE_API_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T13:17:33.200472Z",
        "updatedAt": "2025-09-13T13:18:50.974155Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.b1ff/atlassian-dc-mcp-bitbucket",
      "description": "MCP server for Atlassian Bitbucket Data Center - interact with repositories and code",
      "repository": {
        "url": "https://github.com/b1ff/atlassian-dc-mcp",
        "source": "github"
      },
      "version": "0.9.7",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@atlassian-dc-mcp/bitbucket",
          "version": "0.9.7",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Bitbucket host domain (e.g. your-instance.atlassian.net)",
              "format": "string",
              "name": "BITBUCKET_HOST"
            },
            {
              "description": "Bitbucket API base path (alternative to BITBUCKET_HOST)",
              "format": "string",
              "name": "BITBUCKET_API_BASE_PATH"
            },
            {
              "description": "Bitbucket Personal Access Token or API token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BITBUCKET_API_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T13:17:33.579913Z",
        "updatedAt": "2025-09-13T13:18:51.365304Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.b1ff/atlassian-dc-mcp-jira",
      "description": "MCP server for Atlassian Jira Data Center - search, view, and create issues",
      "repository": {
        "url": "https://github.com/b1ff/atlassian-dc-mcp",
        "source": "github"
      },
      "version": "0.9.8",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@atlassian-dc-mcp/jira",
          "version": "0.9.8",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Jira host domain (e.g. your-instance.atlassian.net)",
              "format": "string",
              "name": "JIRA_HOST"
            },
            {
              "description": "Jira API base path (alternative to JIRA_HOST)",
              "format": "string",
              "name": "JIRA_API_BASE_PATH"
            },
            {
              "description": "Jira Personal Access Token or API token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "JIRA_API_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T13:18:50.716322Z",
        "updatedAt": "2025-09-13T13:29:18.034213Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.b1ff/atlassian-dc-mcp-confluence",
      "description": "MCP server for Atlassian Confluence Data Center - access and manage content",
      "repository": {
        "url": "https://github.com/b1ff/atlassian-dc-mcp",
        "source": "github"
      },
      "version": "0.9.8",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@atlassian-dc-mcp/confluence",
          "version": "0.9.8",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Confluence host domain (e.g. your-instance.atlassian.net)",
              "format": "string",
              "name": "CONFLUENCE_HOST"
            },
            {
              "description": "Confluence API base path (alternative to CONFLUENCE_HOST)",
              "format": "string",
              "name": "CONFLUENCE_API_BASE_PATH"
            },
            {
              "description": "Confluence Personal Access Token or API token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CONFLUENCE_API_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T13:18:50.968631Z",
        "updatedAt": "2025-09-13T13:29:18.545409Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.b1ff/atlassian-dc-mcp-bitbucket",
      "description": "MCP server for Atlassian Bitbucket Data Center - interact with repositories and code",
      "repository": {
        "url": "https://github.com/b1ff/atlassian-dc-mcp",
        "source": "github"
      },
      "version": "0.9.8",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@atlassian-dc-mcp/bitbucket",
          "version": "0.9.8",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Bitbucket host domain (e.g. your-instance.atlassian.net)",
              "format": "string",
              "name": "BITBUCKET_HOST"
            },
            {
              "description": "Bitbucket API base path (alternative to BITBUCKET_HOST)",
              "format": "string",
              "name": "BITBUCKET_API_BASE_PATH"
            },
            {
              "description": "Bitbucket Personal Access Token or API token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BITBUCKET_API_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T13:18:51.361263Z",
        "updatedAt": "2025-09-13T13:29:18.892466Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.b1ff/atlassian-dc-mcp-jira",
      "description": "MCP server for Atlassian Jira Data Center - search, view, and create issues",
      "repository": {
        "url": "https://github.com/b1ff/atlassian-dc-mcp",
        "source": "github"
      },
      "version": "0.9.9",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@atlassian-dc-mcp/jira",
          "version": "0.9.9",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Jira host domain (e.g. your-instance.atlassian.net)",
              "format": "string",
              "name": "JIRA_HOST"
            },
            {
              "description": "Jira API base path (alternative to JIRA_HOST)",
              "format": "string",
              "name": "JIRA_API_BASE_PATH"
            },
            {
              "description": "Jira Personal Access Token or API token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "JIRA_API_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T13:29:18.029023Z",
        "updatedAt": "2025-09-13T13:29:18.029023Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.b1ff/atlassian-dc-mcp-confluence",
      "description": "MCP server for Atlassian Confluence Data Center - access and manage content",
      "repository": {
        "url": "https://github.com/b1ff/atlassian-dc-mcp",
        "source": "github"
      },
      "version": "0.9.9",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@atlassian-dc-mcp/confluence",
          "version": "0.9.9",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Confluence host domain (e.g. your-instance.atlassian.net)",
              "format": "string",
              "name": "CONFLUENCE_HOST"
            },
            {
              "description": "Confluence API base path (alternative to CONFLUENCE_HOST)",
              "format": "string",
              "name": "CONFLUENCE_API_BASE_PATH"
            },
            {
              "description": "Confluence Personal Access Token or API token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CONFLUENCE_API_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T13:29:18.540359Z",
        "updatedAt": "2025-09-13T13:29:18.540359Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.b1ff/atlassian-dc-mcp-bitbucket",
      "description": "MCP server for Atlassian Bitbucket Data Center - interact with repositories and code",
      "repository": {
        "url": "https://github.com/b1ff/atlassian-dc-mcp",
        "source": "github"
      },
      "version": "0.9.9",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@atlassian-dc-mcp/bitbucket",
          "version": "0.9.9",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Bitbucket host domain (e.g. your-instance.atlassian.net)",
              "format": "string",
              "name": "BITBUCKET_HOST"
            },
            {
              "description": "Bitbucket API base path (alternative to BITBUCKET_HOST)",
              "format": "string",
              "name": "BITBUCKET_API_BASE_PATH"
            },
            {
              "description": "Bitbucket Personal Access Token or API token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BITBUCKET_API_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T13:29:18.888402Z",
        "updatedAt": "2025-09-13T13:29:18.888402Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.himorishige/hatago-mcp-hub",
      "description": "Unified MCP Hub for managing multiple Model Context Protocol servers",
      "repository": {
        "url": "https://github.com/himorishige/hatago-mcp-hub",
        "source": "github"
      },
      "version": "0.0.12",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@himorishige/hatago-mcp-hub",
          "version": "0.0.12",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T13:55:18.53163Z",
        "updatedAt": "2025-09-13T14:40:04.49403Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.himorishige/hatago-mcp-hub",
      "description": "Unified MCP Hub for managing multiple Model Context Protocol servers",
      "repository": {
        "url": "https://github.com/himorishige/hatago-mcp-hub",
        "source": "github"
      },
      "version": "0.0.13",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@himorishige/hatago-mcp-hub",
          "version": "0.0.13",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T14:40:04.386322Z",
        "updatedAt": "2025-09-14T07:53:18.7196Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.gradion-ai/ipybox",
      "description": "An MCP server for sandboxed Python code execution with IPython and Docker, and file transfer.",
      "repository": {
        "url": "https://github.com/gradion-ai/ipybox",
        "source": "github"
      },
      "version": "0.6.3",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "ipybox",
          "version": "0.6.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T14:43:00.869172Z",
        "updatedAt": "2025-09-14T09:27:10.094722Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cmpxchg16/mcp-ethical-hacking",
      "description": "An MCP server that provides LinkedIn & Reddit data",
      "repository": {
        "url": "https://github.com/cmpxchg16/mcp-ethical-hacking",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/cmpxchg16/mcp-ethical-hacking/releases/download/v1.0.0/server.mcpb",
          "fileSha256": "fe333e598595000ae021bd27117db32ec69af6987f507ba7a63c90638ff633ce",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T16:13:29.782164Z",
        "updatedAt": "2025-09-15T11:11:03.326686Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/morosss-sdfsdf",
      "description": "Find academic papers across major sources like arXiv, PubMed, bioRxiv, and more. Download PDFs whe…",
      "repository": {
        "url": "https://github.com/morosss/sdfsdf",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@morosss/sdfsdf/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T17:26:11.859Z",
        "updatedAt": "2025-09-13T17:26:11.859Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "dev.augments/mcp",
      "description": "Augments MCP Server - A comprehensive framework documentation provider for Claude Code",
      "repository": {
        "url": "https://github.com/augmnt/augments-mcp-server",
        "source": "github"
      },
      "version": "2.0.2",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "augments-mcp-server",
          "version": "2.0.2",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.augments.dev/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T19:11:59.363394Z",
        "updatedAt": "2025-09-13T19:11:59.363394Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/plainyogurt21-sec-edgar-mcp",
      "description": "Provide AI assistants with real-time access to official SEC EDGAR filings and financial data. Enab…",
      "repository": {
        "url": "https://github.com/plainyogurt21/sec-edgar-mcp",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@plainyogurt21/sec-edgar-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T21:20:44.610658Z",
        "updatedAt": "2025-09-13T21:20:44.610658Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/Danushkumar-V-mcp-discord",
      "description": "An MCP server that integrates with Discord to provide AI-powered features.",
      "repository": {
        "url": "https://github.com/Danushkumar-V/mcp-discord",
        "source": "github"
      },
      "version": "1.2.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Danushkumar-V/mcp-discord/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T22:54:39.805525Z",
        "updatedAt": "2025-09-13T22:54:39.805525Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/mjucius-cozi_mcp",
      "description": "Manage your family's calendars and lists in Cozi. View, create, and update appointments; organize…",
      "repository": {
        "url": "https://github.com/mjucius/cozi_mcp",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@mjucius/cozi_mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T23:46:02.266315Z",
        "updatedAt": "2025-09-13T23:46:02.266315Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "net.nymbo/tools",
      "description": "Remote MCP server: fetch, search, Python, TTS, memory, image, video.",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.nymbo.net/gradio_api/mcp/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-13T23:56:21.830663Z",
        "updatedAt": "2025-09-13T23:56:21.830663Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.shawndurrani/mcp-merchant",
      "description": "Search-only commerce MCP server backed by Stripe (test)",
      "repository": {},
      "version": "0.1.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-merchant",
          "version": "0.1.1",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Stripe secret key (test mode)",
              "isRequired": true,
              "isSecret": true,
              "name": "STRIPE_SECRET_KEY"
            },
            {
              "description": "Max products to cache",
              "default": "100",
              "name": "PRODUCT_LIMIT"
            },
            {
              "description": "Catalog refresh interval in seconds",
              "default": "600",
              "name": "REFRESH_INTERVAL_SEC"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.shawndurrani.ai/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-14T02:22:00.475571Z",
        "updatedAt": "2025-09-16T22:54:28.465114Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/arjunkmrm-ahoy",
      "description": "Send friendly, personalized greetings by name. Switch to a playful pirate voice for themed salutat…",
      "repository": {
        "url": "https://github.com/arjunkmrm/ahoy",
        "source": "github"
      },
      "version": "1.13.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@arjunkmrm/ahoy/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-14T03:11:31.224722Z",
        "updatedAt": "2025-09-14T03:11:31.224722Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/demomagic-duckchain-mcp",
      "description": "Explore blockchain data across addresses, tokens, blocks, and transactions. Investigate any transa…",
      "repository": {
        "url": "https://github.com/demomagic/duckchain-mcp",
        "source": "github"
      },
      "version": "1.13.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@demomagic/duckchain-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-14T05:32:58.075994Z",
        "updatedAt": "2025-09-14T05:32:58.075994Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.formulahendry/mcp-server-mcp-registry",
      "description": "MCP Server for MCP Registry to discover and search for available MCP servers in the registry",
      "repository": {
        "url": "https://github.com/formulahendry/mcp-server-mcp-registry",
        "source": "github"
      },
      "version": "0.1.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-server-mcp-registry",
          "version": "0.1.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-14T07:16:07.571743Z",
        "updatedAt": "2025-09-14T07:16:07.571743Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.himorishige/hatago-mcp-hub",
      "description": "Unified MCP Hub for managing multiple Model Context Protocol servers",
      "repository": {
        "url": "https://github.com/himorishige/hatago-mcp-hub",
        "source": "github"
      },
      "version": "0.0.14",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@himorishige/hatago-mcp-hub",
          "version": "0.0.14",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-14T07:53:18.713901Z",
        "updatedAt": "2025-09-14T10:38:58.014142Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.gradion-ai/ipybox",
      "description": "An MCP server for sandboxed Python code execution with IPython and Docker, and file transfer.",
      "repository": {
        "url": "https://github.com/gradion-ai/ipybox",
        "source": "github"
      },
      "version": "0.6.3-p1",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "ipybox",
          "version": "0.6.3-p1",
          "runtimeHint": "uvx",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "description": "Required MCP server subcommand",
              "isRequired": true,
              "value": "mcp",
              "type": "positional"
            },
            {
              "description": "Directory allowed for host filesystem operations",
              "type": "named",
              "name": "--allowed-dir",
              "valueHint": "directory_path",
              "isRepeated": true
            },
            {
              "description": "Domain, IP address, or CIDR range allowed for outbound network access",
              "type": "named",
              "name": "--allowed-domain",
              "valueHint": "domain_or_ip",
              "isRepeated": true
            },
            {
              "description": "Docker image tag to use",
              "type": "named",
              "name": "--container-tag",
              "valueHint": "docker_image_tag"
            },
            {
              "description": "Environment variable for container (KEY=VALUE format)",
              "type": "named",
              "name": "--container-env-var",
              "valueHint": "env_var",
              "isRepeated": true
            },
            {
              "description": "Path to file containing container environment variables",
              "type": "named",
              "name": "--container-env-file",
              "valueHint": "file_path"
            },
            {
              "description": "Bind mount for container (host_path:container_path format)",
              "type": "named",
              "name": "--container-bind",
              "valueHint": "bind_mount",
              "isRepeated": true
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-14T08:06:30.959442Z",
        "updatedAt": "2025-09-14T08:06:30.959442Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.gradion-ai/ipybox",
      "description": "An MCP server for sandboxed Python code execution with IPython and Docker, and file transfer.",
      "repository": {
        "url": "https://github.com/gradion-ai/ipybox",
        "source": "github"
      },
      "version": "auto",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "ipybox",
          "version": "auto",
          "runtimeHint": "uvx",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "description": "Required MCP server subcommand",
              "isRequired": true,
              "value": "mcp",
              "type": "positional"
            },
            {
              "description": "Directory allowed for host filesystem operations",
              "type": "named",
              "name": "--allowed-dir",
              "valueHint": "directory_path",
              "isRepeated": true
            },
            {
              "description": "Domain, IP address, or CIDR range allowed for outbound network access",
              "type": "named",
              "name": "--allowed-domain",
              "valueHint": "domain_or_ip",
              "isRepeated": true
            },
            {
              "description": "Docker image tag to use",
              "type": "named",
              "name": "--container-tag",
              "valueHint": "docker_image_tag"
            },
            {
              "description": "Environment variable for container (KEY=VALUE format)",
              "type": "named",
              "name": "--container-env-var",
              "valueHint": "env_var",
              "isRepeated": true
            },
            {
              "description": "Path to file containing container environment variables",
              "type": "named",
              "name": "--container-env-file",
              "valueHint": "file_path"
            },
            {
              "description": "Bind mount for container (host_path:container_path format)",
              "type": "named",
              "name": "--container-bind",
              "valueHint": "bind_mount",
              "isRepeated": true
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-14T08:07:06.940203Z",
        "updatedAt": "2025-09-14T08:07:06.940203Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.gradion-ai/ipybox",
      "description": "An MCP server for sandboxed Python code execution with IPython and Docker, and file transfer.",
      "repository": {
        "url": "https://github.com/gradion-ai/ipybox",
        "source": "github"
      },
      "version": "0.6.3-p2",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "ipybox",
          "version": "0.6.3-p2",
          "runtimeHint": "uvx",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "description": "Required MCP server subcommand",
              "isRequired": true,
              "value": "mcp",
              "type": "positional"
            },
            {
              "description": "Directory allowed for host filesystem operations",
              "type": "named",
              "name": "--allowed-dir",
              "valueHint": "directory_path",
              "isRepeated": true
            },
            {
              "description": "Domain, IP address, or CIDR range allowed for outbound network access",
              "type": "named",
              "name": "--allowed-domain",
              "valueHint": "domain_or_ip",
              "isRepeated": true
            },
            {
              "description": "Docker image tag to use",
              "type": "named",
              "name": "--container-tag",
              "valueHint": "docker_image_tag"
            },
            {
              "description": "Environment variable for container (KEY=VALUE format)",
              "type": "named",
              "name": "--container-env-var",
              "valueHint": "env_var",
              "isRepeated": true
            },
            {
              "description": "Path to file containing container environment variables",
              "type": "named",
              "name": "--container-env-file",
              "valueHint": "file_path"
            },
            {
              "description": "Bind mount for container (host_path:container_path format)",
              "type": "named",
              "name": "--container-bind",
              "valueHint": "bind_mount",
              "isRepeated": true
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-14T08:12:36.178778Z",
        "updatedAt": "2025-09-14T08:12:36.178778Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.0.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.0.1",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.0.1",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-14T09:08:13.356523Z",
        "updatedAt": "2025-09-14T10:06:30.730167Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.gradion-ai/ipybox",
      "description": "An MCP server for sandboxed Python code execution with IPython and Docker, and file transfer.",
      "repository": {
        "url": "https://github.com/gradion-ai/ipybox",
        "source": "github"
      },
      "version": "0.6.5",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "ipybox",
          "version": "0.6.5",
          "runtimeHint": "uvx",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "description": "Required MCP server subcommand",
              "isRequired": true,
              "value": "mcp",
              "type": "positional"
            },
            {
              "description": "Directory allowed for host filesystem operations",
              "type": "named",
              "name": "--allowed-dir",
              "valueHint": "directory_path",
              "isRepeated": true
            },
            {
              "description": "Domain, IP address, or CIDR range allowed for outbound network access",
              "type": "named",
              "name": "--allowed-domain",
              "valueHint": "domain_or_ip",
              "isRepeated": true
            },
            {
              "description": "Docker image tag to use",
              "type": "named",
              "name": "--container-tag",
              "valueHint": "docker_image_tag"
            },
            {
              "description": "Environment variable for container (KEY=VALUE format)",
              "type": "named",
              "name": "--container-env-var",
              "valueHint": "env_var",
              "isRepeated": true
            },
            {
              "description": "Path to file containing container environment variables",
              "type": "named",
              "name": "--container-env-file",
              "valueHint": "file_path"
            },
            {
              "description": "Bind mount for container (host_path:container_path format)",
              "type": "named",
              "name": "--container-bind",
              "valueHint": "bind_mount",
              "isRepeated": true
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-14T09:27:10.026613Z",
        "updatedAt": "2025-09-14T09:57:57.966658Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.gradion-ai/ipybox",
      "description": "An MCP server for sandboxed Python code execution with IPython and Docker, and file transfer.",
      "repository": {
        "url": "https://github.com/gradion-ai/ipybox",
        "source": "github"
      },
      "version": "0.6.6",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "ipybox",
          "version": "0.6.6",
          "runtimeHint": "uvx",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "description": "Required MCP server subcommand",
              "isRequired": true,
              "value": "mcp",
              "type": "positional"
            },
            {
              "description": "Directory allowed for host filesystem operations",
              "type": "named",
              "name": "--allowed-dir",
              "valueHint": "directory_path",
              "isRepeated": true
            },
            {
              "description": "Domain, IP address, or CIDR range allowed for outbound network access",
              "type": "named",
              "name": "--allowed-domain",
              "valueHint": "domain_or_ip",
              "isRepeated": true
            },
            {
              "description": "Docker image tag to use",
              "type": "named",
              "name": "--container-tag",
              "valueHint": "docker_image_tag"
            },
            {
              "description": "Environment variable for container (KEY=VALUE format)",
              "type": "named",
              "name": "--container-env-var",
              "valueHint": "env_var",
              "isRepeated": true
            },
            {
              "description": "Path to file containing container environment variables",
              "type": "named",
              "name": "--container-env-file",
              "valueHint": "file_path"
            },
            {
              "description": "Bind mount for container (host_path:container_path format)",
              "type": "named",
              "name": "--container-bind",
              "valueHint": "bind_mount",
              "isRepeated": true
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-14T09:57:57.864977Z",
        "updatedAt": "2025-09-14T09:57:57.864977Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.0.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.0.1",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.0.1",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-14T10:06:30.723296Z",
        "updatedAt": "2025-09-15T13:43:27.500266Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.himorishige/hatago-mcp-hub",
      "description": "Unified MCP Hub for managing multiple Model Context Protocol servers",
      "repository": {
        "url": "https://github.com/himorishige/hatago-mcp-hub",
        "source": "github"
      },
      "version": "0.0.15",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@himorishige/hatago-mcp-hub",
          "version": "0.0.15",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-14T10:38:58.0076Z",
        "updatedAt": "2025-09-14T14:57:18.607214Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.stefanoamorelli/fred-mcp-server",
      "description": "Federal Reserve Economic Data (FRED) MCP Server - Access all 800,000+ economic time series",
      "repository": {
        "url": "https://github.com/stefanoamorelli/fred-mcp-server",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "fred-mcp-server",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your FRED API key to access the API",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "FRED_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-14T11:16:38.333463Z",
        "updatedAt": "2025-09-14T11:16:38.333463Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/faithk7-gmail-mcp",
      "description": "Manage Gmail messages, threads, labels, drafts, and settings from your workflows. Send and organiz…",
      "repository": {
        "url": "https://github.com/faithk7/gmail-mcp",
        "source": "github"
      },
      "version": "1.7.4",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@faithk7/gmail-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-14T13:42:20.134258Z",
        "updatedAt": "2025-09-14T13:42:20.134258Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/BadRooBot-my_test_mcp",
      "description": "Get current weather for any city and create images from your prompts. Streamline planning, reports…",
      "repository": {
        "url": "https://github.com/BadRooBot/python_mcp",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@BadRooBot/my_test_mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-14T14:25:46.094496Z",
        "updatedAt": "2025-09-14T14:25:46.094496Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.himorishige/hatago-mcp-hub",
      "description": "Unified MCP Hub for managing multiple Model Context Protocol servers",
      "repository": {
        "url": "https://github.com/himorishige/hatago-mcp-hub",
        "source": "github"
      },
      "version": "0.0.16",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@himorishige/hatago-mcp-hub",
          "version": "0.0.16",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-14T14:57:18.596181Z",
        "updatedAt": "2025-09-14T14:57:18.596181Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.xorrkaz/cml-mcp",
      "description": "An MCP server that provides access to common Cisco Modeling Labs (CML) operations.",
      "repository": {
        "url": "https://github.com/xorrkaz/cml-mcp",
        "source": "github"
      },
      "version": "0.8.4",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "cml-mcp",
          "version": "0.8.4",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "URL for the CML Server",
              "isRequired": true,
              "format": "string",
              "name": "CML_URL"
            },
            {
              "description": "Username for CML authentication",
              "isRequired": true,
              "format": "string",
              "name": "CML_USERNAME"
            },
            {
              "description": "Password for CML authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CML_PASSWORD"
            },
            {
              "description": "Username for authentication to devices running in CML",
              "format": "string",
              "name": "PYATS_USERNAME"
            },
            {
              "description": "Password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_PASSWORD"
            },
            {
              "description": "Enable password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_AUTH_PASS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-14T14:57:56.26609Z",
        "updatedAt": "2025-09-19T15:45:51.337482Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/Hint-Services-obsidian-github-mcp",
      "description": "Connect AI assistants to your GitHub-hosted Obsidian vault to seamlessly access, search, and analy…",
      "repository": {
        "url": "https://github.com/Hint-Services/obsidian-github-mcp",
        "source": "github"
      },
      "version": "0.4.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Hint-Services/obsidian-github-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-14T15:20:36.371442Z",
        "updatedAt": "2025-09-14T15:20:36.371442Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/aryankeluskar-poke-video-mcp",
      "description": "Search your Flashback video library with natural language to instantly find relevant moments. Get…",
      "repository": {
        "url": "https://github.com/aryankeluskar/poke-video-mcp",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@aryankeluskar/poke-video-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-14T17:42:05.006814Z",
        "updatedAt": "2025-09-14T17:42:05.006814Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/BigVik193-reddit-user-mcp",
      "description": "Browse and manage Reddit posts, comments, and threads. Fetch user activity, explore hot/new/rising…",
      "repository": {
        "url": "https://github.com/BigVik193/reddit-user-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@BigVik193/reddit-user-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-14T21:19:18.64908Z",
        "updatedAt": "2025-09-14T21:19:18.64908Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/BigVik193-reddit-ads-mcp-test",
      "description": "Manage Reddit advertising end-to-end: browse ad accounts and payment methods, and organize campaig…",
      "repository": {
        "url": "https://github.com/BigVik193/reddit-ads-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@BigVik193/reddit-ads-mcp-test/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-14T21:38:57.984339Z",
        "updatedAt": "2025-09-14T21:38:57.984339Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/slhad-aha-mcp",
      "description": "A TypeScript MCP server for Home Assistant, enabling programmatic management of entities, automati…",
      "repository": {
        "url": "https://github.com/slhad/aha-mcp",
        "source": "github"
      },
      "version": "0.1.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@slhad/aha-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-14T21:53:54.664726Z",
        "updatedAt": "2025-09-14T21:53:54.664726Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/BigVik193-reddit-ads-mcp",
      "description": "Manage Reddit advertising across accounts, campaigns, ad groups, posts, and ads. List accounts, fu…",
      "repository": {
        "url": "https://github.com/BigVik193/reddit-ads-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@BigVik193/reddit-ads-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-14T22:00:51.726311Z",
        "updatedAt": "2025-09-14T22:00:51.726311Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/BigVik193-reddit-ads-mcp-api",
      "description": "Manage Reddit advertising end to end across accounts, funding methods, campaigns, ad groups, and a…",
      "repository": {
        "url": "https://github.com/BigVik193/reddit-ads-mcp-api",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@BigVik193/reddit-ads-mcp-api/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-14T22:40:30.852738Z",
        "updatedAt": "2025-09-14T22:40:30.852738Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.kkjdaniel/bgg-mcp",
      "description": "BoardGameGeek MCP server providing access to BGG API data through standardized tools",
      "repository": {
        "url": "https://github.com/kkjdaniel/bgg-mcp",
        "source": "github"
      },
      "version": "1.3.2",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/kdaniel/bgg-mcp:1.3.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your BoardGameGeek username for references such as ME or MY in prompts",
              "format": "string",
              "name": "BGG_USERNAME"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-15T00:05:40.274408Z",
        "updatedAt": "2025-09-16T01:51:47.03683Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/cpretzinger-ai-assistant-simple",
      "description": "UPDATED 9/1/2025! NEW TOOLS! Use the Redis Stream tools with n8n MCP Client Node for use anywhere!…",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@cpretzinger/ai-assistant-simple/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-15T00:26:36.144736Z",
        "updatedAt": "2025-09-15T00:26:36.144736Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.yuna0x0/hackmd-mcp",
      "description": "A Model Context Protocol server for integrating HackMD's note-taking platform with AI assistants.",
      "repository": {
        "url": "https://github.com/yuna0x0/hackmd-mcp",
        "source": "github"
      },
      "version": "1.5.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "hackmd-mcp",
          "version": "1.5.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your HackMD API token for API authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "HACKMD_API_TOKEN"
            },
            {
              "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
              "format": "string",
              "default": "https://api.hackmd.io/v1",
              "name": "HACKMD_API_URL"
            }
          ]
        },
        {
          "registryType": "oci",
          "identifier": "docker.io/yuna0x0/hackmd-mcp:1.5.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your HackMD API token for API authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "HACKMD_API_TOKEN"
            },
            {
              "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
              "format": "string",
              "default": "https://api.hackmd.io/v1",
              "name": "HACKMD_API_URL"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/yuna0x0/hackmd-mcp/releases/download/v1.5.0/hackmd-mcp-1.5.0.mcpb",
          "fileSha256": "6035e3082ffaf5627e1293a2c8a5d7f42496010431c9b026859dae3bbaa9ce38",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your HackMD API token for API authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "HACKMD_API_TOKEN"
            },
            {
              "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
              "format": "string",
              "default": "https://api.hackmd.io/v1",
              "name": "HACKMD_API_URL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-15T03:10:52.965843Z",
        "updatedAt": "2025-09-21T14:08:58.295678Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.shawndurrani/mcp-registry",
      "description": "Search the public MCP Registry; discover servers and copy SSE URLs.",
      "repository": {},
      "version": "0.1.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp-registry.shawndurrani.ai/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-15T03:11:16.637454Z",
        "updatedAt": "2025-09-15T04:01:11.068068Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/yuna0x0-hackmd-mcp",
      "description": "Interact with your HackMD notes and teams seamlessly. Manage your notes, view reading history, and…",
      "repository": {
        "url": "https://github.com/yuna0x0/hackmd-mcp",
        "source": "github"
      },
      "version": "1.5.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@yuna0x0/hackmd-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-15T03:33:42.649641Z",
        "updatedAt": "2025-09-29T12:00:09.741441Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/blbl147-xhs-mcp",
      "description": "搜索笔记、浏览首页推荐、查看笔记内容与评论，并发表你的评论。直接在工作流中与小红书内容互动，高效跟进话题。",
      "repository": {
        "url": "https://github.com/blbl147/xhs-mcp",
        "source": "github"
      },
      "version": "1.6.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@blbl147/xhs-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-15T03:34:24.676763Z",
        "updatedAt": "2025-09-15T03:34:24.676763Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/neverinfamous-memory-journal-mcp",
      "description": "A MCP server built for developers enabling Git based project management with project and personal…",
      "repository": {
        "url": "https://github.com/neverinfamous/memory-journal-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@neverinfamous/memory-journal-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-15T03:39:21.90803Z",
        "updatedAt": "2025-09-15T03:39:21.90803Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.shawndurrani/mcp-registry",
      "description": "Search the public MCP Registry; discover servers and copy SSE URLs.",
      "repository": {},
      "version": "0.1.1",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp-registry.shawndurrani.ai/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-15T04:01:11.057921Z",
        "updatedAt": "2025-09-15T04:20:53.740529Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.shawndurrani/mcp-registry",
      "description": "Search the public MCP Registry; discover servers and copy SSE URLs.",
      "repository": {},
      "version": "0.1.2",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp-registry.shawndurrani.ai/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-15T04:20:53.726246Z",
        "updatedAt": "2025-09-16T23:02:09.747666Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.karanb192/reddit-buddy-mcp",
      "description": "Reddit MCP server - browse posts, search content, analyze users.",
      "repository": {},
      "version": "1.0.6-test.4"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-15T06:34:25.789411Z",
        "updatedAt": "2025-09-15T07:27:45.804628Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.karanb192/reddit-buddy-mcp",
      "description": "Reddit MCP server - browse posts, search content, analyze users.",
      "repository": {},
      "version": "1.0.6-test.7",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@karanb192/reddit-buddy-mcp",
          "version": "1.0.6-test.7",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-15T07:27:45.798342Z",
        "updatedAt": "2025-09-15T07:27:45.798342Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.leshchenko1979/fast-mcp-telegram",
      "description": "Telegram MCP server with search and messaging capabilities",
      "repository": {
        "url": "https://github.com/leshchenko1979/fast-mcp-telegram",
        "source": "github"
      },
      "version": "0.4.5",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "fast-mcp-telegram",
          "version": "0.4.4",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Telegram API ID (from https://my.telegram.org/apps)",
              "isRequired": true,
              "name": "API_ID"
            },
            {
              "description": "Telegram API Hash (from https://my.telegram.org/apps)",
              "isRequired": true,
              "isSecret": true,
              "name": "API_HASH"
            },
            {
              "description": "Server mode: stdio (local), http-no-auth (dev), http-auth (prod)",
              "default": "stdio",
              "choices": [
                "stdio",
                "http-no-auth",
                "http-auth"
              ],
              "name": "SERVER_MODE"
            },
            {
              "description": "Custom session directory (defaults to ~/.config/fast-mcp-telegram/)",
              "name": "SESSION_DIR"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-15T08:03:29.248076Z",
        "updatedAt": "2025-09-17T14:08:48.781464Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cmpxchg16/mcp-ethical-hacking",
      "description": "An MCP server that provides LinkedIn & Reddit data",
      "repository": {
        "url": "https://github.com/cmpxchg16/mcp-ethical-hacking",
        "source": "github"
      },
      "version": "1.1.0",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/cmpxchg16/mcp-ethical-hacking/releases/download/v1.0.0/server.mcpb",
          "fileSha256": "fe333e598595000ae021bd27117db32ec69af6987f507ba7a63c90638ff633ce",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-15T11:11:03.268175Z",
        "updatedAt": "2025-09-15T12:55:00.139476Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.dynatrace-oss/Dynatrace-mcp",
      "description": "Model Context Protocol server for Dynatrace - access logs, events, metrics from Dynatrace via MCP.",
      "repository": {
        "url": "https://github.com/dynatrace-oss/Dynatrace-mcp",
        "source": "github"
      },
      "version": "0.6.0-rc.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@dynatrace-oss/dynatrace-mcp-server",
          "version": "0.6.0-rc.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your Dynatrace Platform Token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "DT_PLATFORM_TOKEN"
            },
            {
              "description": "The URL of your Dynatrace environment (e.g. 'https://abc12345.apps.dynatrace.com')",
              "format": "string",
              "name": "DT_ENVIRONMENT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-15T11:13:59.272011Z",
        "updatedAt": "2025-09-18T08:07:03.507179Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.jepto/mcp",
      "description": "Jepto MCP server that provides access to client knowledgebase & analytics for connected data sources",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.jepto.com"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-15T11:36:02.956033Z",
        "updatedAt": "2025-09-15T11:36:02.956033Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/ctaylor86-mcp-video-download-server",
      "description": "Connect your video workflows to cloud storage. Organize and access video assets across projects wi…",
      "repository": {
        "url": "https://github.com/ctaylor86/mcp-video-download-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@ctaylor86/mcp-video-download-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-15T11:45:18.173946Z",
        "updatedAt": "2025-09-15T11:45:18.173946Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.teamwork/mcp",
      "description": "The Teamwork.com official MCP server helps teams efficiently manage client projects with AI.",
      "repository": {
        "url": "https://github.com/teamwork/mcp",
        "source": "github"
      },
      "version": "1.3.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/teamwork/mcp:v1.3.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "TW_MCP_BEARER_TOKEN"
            },
            {
              "description": "Choose log output format between 'text' or 'json'. Default is 'text'.",
              "format": "string",
              "name": "TW_MCP_LOG_FORMAT"
            },
            {
              "description": "Choose log level between 'debug', 'info', 'warn' or 'error'. Default is 'info'.",
              "format": "string",
              "name": "TW_MCP_LOG_LEVEL"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-15T12:27:37.668501Z",
        "updatedAt": "2025-09-17T18:13:49.787674Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.antvis/mcp-server-chart",
      "description": "A Model Context Protocol server for generating charts using AntV.",
      "repository": {
        "url": "https://github.com/antvis/mcp-server-chart",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@antv/mcp-server-chart",
          "version": "0.9.0-beta.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Custom chart generation service URL for private deployment",
              "format": "string",
              "default": "https://antv-studio.alipay.com/api/gpt-vis",
              "name": "VIS_REQUEST_SERVER"
            },
            {
              "description": "Service identifier for chart generation records",
              "format": "string",
              "isSecret": true,
              "name": "SERVICE_ID"
            },
            {
              "description": "Comma-separated list of tool names to disable",
              "format": "string",
              "name": "DISABLED_TOOLS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-15T12:44:26.492264Z",
        "updatedAt": "2025-09-15T12:44:26.492264Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cmpxchg16/mcp-ethical-hacking",
      "description": "An MCP server that provides LinkedIn & Reddit data",
      "repository": {
        "url": "https://github.com/cmpxchg16/mcp-ethical-hacking",
        "source": "github"
      },
      "version": "1.2.0",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/cmpxchg16/mcp-ethical-hacking/releases/download/v1.0.0/server.mcpb",
          "fileSha256": "294365cbf53a602df093e3757e6a31cca6c50dd6af343fefa4a528ab869d24a0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-15T12:55:00.133512Z",
        "updatedAt": "2025-09-15T12:56:52.963416Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cmpxchg16/mcp-ethical-hacking",
      "description": "An MCP server that provides LinkedIn & Reddit data",
      "repository": {
        "url": "https://github.com/cmpxchg16/mcp-ethical-hacking",
        "source": "github"
      },
      "version": "1.3.0",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/cmpxchg16/mcp-ethical-hacking/releases/download/v1.3.0/server.mcpb",
          "fileSha256": "294365cbf53a602df093e3757e6a31cca6c50dd6af343fefa4a528ab869d24a0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-15T12:56:52.957979Z",
        "updatedAt": "2025-09-16T04:55:02.308872Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/git-mcp-server",
      "description": "Comprehensive Git MCP server enabling native git tools including clone, commit, worktree, & more.",
      "repository": {
        "url": "https://github.com/cyanheads/git-mcp-server",
        "source": "github"
      },
      "version": "2.3.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.3.3",
          "runtimeHint": "node",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "dist/index.js",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Specifies the transport mechanism for the server.",
              "isRequired": true,
              "format": "string",
              "default": "stdio",
              "name": "MCP_TRANSPORT_TYPE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Set to 'true' to enable GPG/SSH signing for commits made via the git_commit tool.",
              "format": "string",
              "default": "false",
              "name": "GIT_SIGN_COMMITS"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.3.3",
          "runtimeHint": "node",
          "transport": {
            "type": "streamable-http",
            "url": "http://127.0.0.1:3015/mcp"
          },
          "packageArguments": [
            {
              "value": "dist/index.js",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Specifies the transport mechanism for the server.",
              "isRequired": true,
              "format": "string",
              "default": "http",
              "name": "MCP_TRANSPORT_TYPE"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3015",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The host interface for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The HTTP endpoint path for MCP requests.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_STRATEGY"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Set to 'true' to enable GPG/SSH signing for commits made via the git_commit tool.",
              "format": "string",
              "default": "false",
              "name": "GIT_SIGN_COMMITS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-15T12:59:07.492837Z",
        "updatedAt": "2025-09-26T16:34:39.113583Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/pubmed-mcp-server",
      "description": "Comprehensive PubMed MCP Server to search, retrieve, and analyze biomedical literature from NCBI.",
      "repository": {
        "url": "https://github.com/cyanheads/pubmed-mcp-server",
        "source": "github"
      },
      "version": "1.4.4",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/pubmed-mcp-server",
          "version": "1.4.4",
          "runtimeHint": "node",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "dist/index.js",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Specifies the transport mechanism for the server.",
              "isRequired": true,
              "format": "string",
              "default": "stdio",
              "name": "MCP_TRANSPORT_TYPE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Your NCBI API key for higher rate limits.",
              "format": "string",
              "name": "NCBI_API_KEY"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/pubmed-mcp-server",
          "version": "1.4.4",
          "runtimeHint": "node",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3017/mcp"
          },
          "packageArguments": [
            {
              "value": "dist/index.js",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Specifies the transport mechanism for the server.",
              "isRequired": true,
              "format": "string",
              "default": "http",
              "name": "MCP_TRANSPORT_TYPE"
            },
            {
              "description": "The host for the HTTP server.",
              "format": "string",
              "default": "localhost",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port for the HTTP server.",
              "format": "string",
              "default": "3017",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for MCP requests.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Your NCBI API key for higher rate limits.",
              "format": "string",
              "name": "NCBI_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-15T13:34:11.145839Z",
        "updatedAt": "2025-09-15T13:34:11.145839Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.0.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.0.2",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.0.2",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-15T13:43:27.494335Z",
        "updatedAt": "2025-09-26T00:34:47.321289Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cr7258/elasticsearch-mcp-server",
      "description": "MCP server for interacting with Elasticsearch",
      "repository": {
        "url": "https://github.com/cr7258/elasticsearch-mcp-server",
        "source": "github"
      },
      "version": "2.0.15",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "elasticsearch-mcp-server",
          "version": "2.0.15",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Comma-separated list of Elasticsearch hosts (e.g., https://localhost:9200)",
              "format": "string",
              "default": "https://localhost:9200",
              "name": "ELASTICSEARCH_HOSTS"
            },
            {
              "description": "API key for Elasticsearch or Elastic Cloud authentication (recommended)",
              "format": "string",
              "isSecret": true,
              "name": "ELASTICSEARCH_API_KEY"
            },
            {
              "description": "Username for basic authentication (alternative to API key)",
              "format": "string",
              "name": "ELASTICSEARCH_USERNAME"
            },
            {
              "description": "Password for basic authentication (used with ELASTICSEARCH_USERNAME)",
              "format": "string",
              "isSecret": true,
              "name": "ELASTICSEARCH_PASSWORD"
            },
            {
              "description": "Whether to verify SSL certificates (true/false)",
              "format": "boolean",
              "default": "false",
              "name": "ELASTICSEARCH_VERIFY_CERTS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-15T14:34:34.758628Z",
        "updatedAt": "2025-09-15T14:34:34.758628Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.ritzademo/acme-todo",
      "description": "An MCP server for a simple todo list",
      "repository": {
        "url": "https://github.com/ritza-co/acme-todo",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.ritzademo.com/mcp/ritza-rzx-our91"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-15T16:48:08.37917Z",
        "updatedAt": "2025-09-15T16:48:08.37917Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/MetehanGZL-pokemcp",
      "description": "Provide detailed Pokémon data and information through a standardized MCP interface. Enable LLMs an…",
      "repository": {
        "url": "https://github.com/MetehanGZL/PokeMCP",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@MetehanGZL/pokemcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-15T17:56:16.25232Z",
        "updatedAt": "2025-09-15T17:56:16.25232Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.supabase/mcp",
      "description": "MCP server for interacting with the Supabase platform",
      "repository": {
        "url": "https://github.com/supabase-community/supabase-mcp",
        "source": "github",
        "subfolder": "packages/mcp-server-supabase"
      },
      "version": "0.5.4",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@supabase/mcp-server-supabase",
          "version": "0.5.4",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "Supabase project reference ID",
              "format": "string",
              "type": "named",
              "name": "--project-ref"
            },
            {
              "description": "Enable read-only mode",
              "format": "boolean",
              "type": "named",
              "name": "--read-only"
            },
            {
              "description": "Comma-separated list of features to enable",
              "format": "string",
              "type": "named",
              "name": "--features"
            },
            {
              "description": "Custom API URL",
              "format": "string",
              "type": "named",
              "name": "--api-url"
            }
          ],
          "environmentVariables": [
            {
              "description": "Personal access token for Supabase API",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "SUPABASE_ACCESS_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-15T20:35:36.816471Z",
        "updatedAt": "2025-09-18T21:32:17.517421Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.agilitycms/mcp-server",
      "description": "An MCP server that provides access to Agility CMS.  See https://mcp.agilitycms.com for more details.",
      "repository": {
        "url": "https://github.com/agility/agility-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.agilitycms.com/api/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-15T21:00:43.34878Z",
        "updatedAt": "2025-09-15T21:00:43.34878Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.SnowLeopard-AI/bigquery-mcp",
      "description": "A SnowLeopardAI-managed MCP server that provides access to Google BigQuery data.",
      "repository": {
        "url": "https://github.com/SnowLeopard-AI/bigquery-mcp",
        "source": "github"
      },
      "version": "0.1.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "sl-bigquery-mcp",
          "version": "0.1.8",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-15T22:35:28.327511Z",
        "updatedAt": "2025-09-15T22:35:28.327511Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.getclockwise/clockwise-mcp",
      "description": "An MCP server for managing your calendar, via Clockwise",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.getclockwise.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-15T23:12:29.670365Z",
        "updatedAt": "2025-09-15T23:12:29.670365Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/kkjdaniel-bgg-mcp",
      "description": "BGG MCP provides access to the BoardGameGeek API through the Model Context Protocol, enabling retr…",
      "repository": {
        "url": "https://github.com/kkjdaniel/bgg-mcp",
        "source": "github"
      },
      "version": "1.3.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@kkjdaniel/bgg-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T00:14:29.642756Z",
        "updatedAt": "2025-09-16T00:14:29.642756Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/lineex-pubmed-mcp-smithery",
      "description": "Search PubMed with precision using keyword and journal filters and smart sorting. Uncover MeSH ter…",
      "repository": {
        "url": "https://github.com/lineex/pubmed-mcp-smithery",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@lineex/pubmed-mcp-smithery/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T01:10:37.458959Z",
        "updatedAt": "2025-09-16T01:10:37.458959Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.kkjdaniel/bgg-mcp",
      "description": "BoardGameGeek MCP server providing access to BGG API data through standardized tools",
      "repository": {
        "url": "https://github.com/kkjdaniel/bgg-mcp",
        "source": "github"
      },
      "version": "1.4.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/kdaniel/bgg-mcp:1.4.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your BoardGameGeek username for references such as ME or MY in prompts",
              "format": "string",
              "name": "BGG_USERNAME"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T01:51:47.021732Z",
        "updatedAt": "2025-09-16T01:51:47.021732Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cmpxchg16/mcp-ethical-hacking",
      "description": "An MCP server that provides LinkedIn & Reddit data",
      "repository": {
        "url": "https://github.com/cmpxchg16/mcp-ethical-hacking",
        "source": "github"
      },
      "version": "1.4.0",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/cmpxchg16/mcp-ethical-hacking/releases/download/v1.4.0/server.mcpb",
          "fileSha256": "5e4f25e7f21b62974861f055cff90c1aef80d3b8bd1f32e05db744d1cbd67605",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T04:55:02.185051Z",
        "updatedAt": "2025-09-16T04:55:02.185051Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/ImRonAI-mcp-server-browserbase",
      "description": "Automate cloud browsers to navigate websites, interact with elements, and extract structured data.…",
      "repository": {
        "url": "https://github.com/ImRonAI/mcp-server-browserbase",
        "source": "github"
      },
      "version": "2.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@ImRonAI/mcp-server-browserbase/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T06:05:33.453619Z",
        "updatedAt": "2025-09-16T06:05:33.453619Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/Kim-soung-won-mcp-smithery-exam",
      "description": "Craft quick, personalized greetings by name. Generate ready-to-use greeting prompts for a consiste…",
      "repository": {
        "url": "https://github.com/Kim-soung-won/mcp-smithery-exam",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Kim-soung-won/mcp-smithery-exam/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T06:32:38.498462Z",
        "updatedAt": "2025-09-16T06:32:38.498462Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.p1va/symbols",
      "description": "MCP server to read, inspect and troubleshoot codebase symbols",
      "repository": {
        "url": "https://github.com/p1va/symbols",
        "source": "github"
      },
      "version": "0.0.11",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@p1va/symbols",
          "version": "0.0.11",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T07:43:34.104606Z",
        "updatedAt": "2025-09-16T07:43:34.104606Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.agentailor/slimcontext-mcp-server",
      "description": "MCP Server for SlimContext - AI chat history compression tools",
      "repository": {
        "url": "https://github.com/agentailor/slimcontext-mcp-server",
        "source": "github"
      },
      "version": "0.1.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "slimcontext-mcp-server",
          "version": "0.1.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T07:56:23.181996Z",
        "updatedAt": "2025-09-16T07:56:23.181996Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.p1va/symbols",
      "description": "MCP server to read, inspect and troubleshoot codebase symbols",
      "repository": {
        "url": "https://github.com/p1va/symbols",
        "source": "github"
      },
      "version": "0.0.12",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@p1va/symbols",
          "version": "0.0.12",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T10:02:42.424532Z",
        "updatedAt": "2025-09-16T10:02:42.424532Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/yuhuison-mediawiki-mcp-server-auth",
      "description": "Connect to your MediaWiki using simple credentials and manage content without OAuth. Search, read,…",
      "repository": {},
      "version": "1.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@yuhuison/mediawiki-mcp-server-auth/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T11:19:24.929803Z",
        "updatedAt": "2025-09-16T11:19:24.929803Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.p1va/symbols",
      "description": "MCP server to read, inspect and troubleshoot codebase symbols",
      "repository": {
        "url": "https://github.com/p1va/symbols",
        "source": "github"
      },
      "version": "0.0.13",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@p1va/symbols",
          "version": "0.0.13",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T12:14:32.12598Z",
        "updatedAt": "2025-09-16T12:14:32.12598Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/IlyaGusev-academia_mcp",
      "description": "Search arXiv and ACL Anthology, retrieve citations and references, and browse web sources to accel…",
      "repository": {
        "url": "https://github.com/IlyaGusev/academia_mcp",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@IlyaGusev/academia_mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T12:14:42.162776Z",
        "updatedAt": "2025-09-16T12:14:42.162776Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.containers/kubernetes-mcp-server",
      "description": "An MCP server that provides [describe what your server does]",
      "repository": {
        "url": "https://github.com/containers/kubernetes-mcp-server",
        "source": "github"
      },
      "version": "1.0.0"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T13:06:55.74293Z",
        "updatedAt": "2025-09-16T13:06:55.74293Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.containers/kubernetes-mcp-server",
      "description": "A Model Context Protocol (MCP) server for Kubernetes and OpenShift",
      "repository": {
        "url": "https://github.com/containers/kubernetes-mcp-server",
        "source": "github"
      },
      "version": "0.0.50"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T13:14:05.094878Z",
        "updatedAt": "2025-09-16T13:14:05.094878Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.nerfels/mind-map",
      "description": "Experimental code intelligence platform for Claude Code with AST parsing and context analysis",
      "repository": {
        "url": "https://github.com/nerfels/mind-map",
        "source": "github"
      },
      "version": "1.12.13",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mind-map-mcp",
          "version": "1.12.13",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Project root directory for MCP to analyze (optional - uses current working directory if not specified)",
              "format": "string",
              "name": "MCP_PROJECT_ROOT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T16:29:26.081799Z",
        "updatedAt": "2025-09-16T16:29:26.081799Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.dba-i/mssql-dba",
      "description": "An MCP server that provides [describe what your server does]",
      "repository": {
        "url": "https://github.com/dba-i/mssql-dba",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mssql-dba",
          "version": "1.0.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T16:43:44.243434Z",
        "updatedAt": "2025-09-16T16:43:44.243434Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/browserbasehq-mcp-browserbase",
      "description": "Provides cloud browser automation capabilities using Stagehand and Browserbase, enabling LLMs to i…",
      "repository": {
        "url": "https://github.com/browserbase/mcp-server-browserbase",
        "source": "github"
      },
      "version": "2.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@browserbasehq/mcp-browserbase/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T17:17:18.587292Z",
        "updatedAt": "2025-09-16T17:17:18.587292Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.lapfelix/xcodemcp",
      "description": "Control Xcode directly via JXA for build, test, debug operations with XCLogParser integration",
      "repository": {
        "url": "https://github.com/lapfelix/XcodeMCP",
        "source": "github"
      },
      "version": "2.1.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "xcodemcp",
          "version": "2.1.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T18:37:57.587731Z",
        "updatedAt": "2025-09-18T03:19:27.899606Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/Kryptoskatt-mcp-server",
      "description": "Enable AI assistants to interact seamlessly with the DefiLlama API by translating MCP tool calls i…",
      "repository": {},
      "version": "0.1.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Kryptoskatt/mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T19:42:06.349267Z",
        "updatedAt": "2025-09-17T10:41:17.536569Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/lukaskostka99-marketing-miner-mcp",
      "description": "Discover high-impact keyword ideas across Central and Eastern European and English markets. Analyz…",
      "repository": {
        "url": "https://github.com/lukaskostka99/marketing-miner-mcp",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@lukaskostka99/marketing-miner-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T19:53:18.718565Z",
        "updatedAt": "2025-09-16T19:53:18.718565Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.explorium/mcp-explorium",
      "description": "Access live company and contact data from Explorium's AgentSource B2B platform.",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp-github-registry.explorium.ai/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T21:06:15.352229Z",
        "updatedAt": "2025-09-16T21:06:15.352229Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "so.jinko/jinko-mcp",
      "description": "Jinko is a travel MCP server that provides hotel search and booking capabilities.",
      "repository": {
        "url": "https://github.com/jinkoso/jinko-mcp",
        "source": "github"
      },
      "version": "0.0.27",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp-remote.jinko.so/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T21:19:26.720482Z",
        "updatedAt": "2025-09-16T21:19:26.720482Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.cloudflare.mcp/mcp",
      "description": "Cloudflare MCP servers",
      "repository": {
        "url": "https://github.com/cloudflare/mcp-server-cloudflare",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://docs.mcp.cloudflare.com/mcp"
        },
        {
          "type": "streamable-http",
          "url": "https://observability.mcp.cloudflare.com/mcp",
          "headers": [
            {
              "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
              "isSecret": true,
              "name": "Authentication"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://bindings.mcp.cloudflare.com/mcp",
          "headers": [
            {
              "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
              "isSecret": true,
              "name": "Authentication"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://builds.mcp.cloudflare.com/mcp",
          "headers": [
            {
              "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
              "isSecret": true,
              "name": "Authentication"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://radar.mcp.cloudflare.com/mcp",
          "headers": [
            {
              "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
              "isSecret": true,
              "name": "Authentication"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://containers.mcp.cloudflare.com/mcp",
          "headers": [
            {
              "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
              "isSecret": true,
              "name": "Authentication"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://browser.mcp.cloudflare.com/mcp",
          "headers": [
            {
              "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
              "isSecret": true,
              "name": "Authentication"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://logs.mcp.cloudflare.com/mcp",
          "headers": [
            {
              "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
              "isSecret": true,
              "name": "Authentication"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://ai-gateway.mcp.cloudflare.com/mcp",
          "headers": [
            {
              "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
              "isSecret": true,
              "name": "Authentication"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://autorag.mcp.cloudflare.com/mcp",
          "headers": [
            {
              "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
              "isSecret": true,
              "name": "Authentication"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://auditlogs.mcp.cloudflare.com/mcp",
          "headers": [
            {
              "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
              "isSecret": true,
              "name": "Authentication"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://dns-analytics.mcp.cloudflare.com/mcp",
          "headers": [
            {
              "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
              "isSecret": true,
              "name": "Authentication"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://dex.mcp.cloudflare.com/mcp",
          "headers": [
            {
              "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
              "isSecret": true,
              "name": "Authentication"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://casb.mcp.cloudflare.com/mcp",
          "headers": [
            {
              "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
              "isSecret": true,
              "name": "Authentication"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://graphql.mcp.cloudflare.com/mcp",
          "headers": [
            {
              "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
              "isSecret": true,
              "name": "Authentication"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://docs.mcp.cloudflare.com/sse"
        },
        {
          "type": "sse",
          "url": "https://observability.mcp.cloudflare.com/sse",
          "headers": [
            {
              "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
              "isSecret": true,
              "name": "Authentication"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://bindings.mcp.cloudflare.com/sse",
          "headers": [
            {
              "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
              "isSecret": true,
              "name": "Authentication"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://builds.mcp.cloudflare.com/sse",
          "headers": [
            {
              "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
              "isSecret": true,
              "name": "Authentication"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://radar.mcp.cloudflare.com/sse",
          "headers": [
            {
              "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
              "isSecret": true,
              "name": "Authentication"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://containers.mcp.cloudflare.com/sse",
          "headers": [
            {
              "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
              "isSecret": true,
              "name": "Authentication"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://browser.mcp.cloudflare.com/sse",
          "headers": [
            {
              "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
              "isSecret": true,
              "name": "Authentication"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://logs.mcp.cloudflare.com/sse",
          "headers": [
            {
              "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
              "isSecret": true,
              "name": "Authentication"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://ai-gateway.mcp.cloudflare.com/sse",
          "headers": [
            {
              "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
              "isSecret": true,
              "name": "Authentication"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://autorag.mcp.cloudflare.com/sse",
          "headers": [
            {
              "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
              "isSecret": true,
              "name": "Authentication"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://auditlogs.mcp.cloudflare.com/sse",
          "headers": [
            {
              "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
              "isSecret": true,
              "name": "Authentication"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://dns-analytics.mcp.cloudflare.com/sse",
          "headers": [
            {
              "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
              "isSecret": true,
              "name": "Authentication"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://dex.mcp.cloudflare.com/sse",
          "headers": [
            {
              "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
              "isSecret": true,
              "name": "Authentication"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://casb.mcp.cloudflare.com/sse",
          "headers": [
            {
              "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
              "isSecret": true,
              "name": "Authentication"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://graphql.mcp.cloudflare.com/sse",
          "headers": [
            {
              "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
              "isSecret": true,
              "name": "Authentication"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T22:06:29.987729Z",
        "updatedAt": "2025-09-16T22:06:29.987729Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.timheuer/sampledotnetmcpserver",
      "description": "Sample .NET MCP Server",
      "repository": {
        "url": "https://github.com/timheuer/sampledotnetmcpserver",
        "source": "github"
      },
      "version": "0.1.26-beta",
      "packages": [
        {
          "registryType": "nuget",
          "identifier": "TimHeuer.SampleDotnetMcpServer",
          "version": "0.1.26-beta",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T22:11:37.310707Z",
        "updatedAt": "2025-09-16T22:30:54.361957Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.nickzren/opentargets",
      "description": "Open Targets MCP server for targets, diseases, drugs, variants, and evidence",
      "repository": {
        "url": "https://github.com/nickzren/opentargets-mcp",
        "source": "github",
        "id": "984363568"
      },
      "version": "0.1.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "opentargets-mcp",
          "version": "0.1.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T22:22:05.051792Z",
        "updatedAt": "2025-09-22T16:27:58.093087Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.timheuer/sampledotnetmcpserver",
      "description": "Sample .NET MCP Server",
      "repository": {
        "url": "https://github.com/timheuer/sampledotnetmcpserver",
        "source": "github"
      },
      "version": "0.1.27-beta",
      "packages": [
        {
          "registryType": "nuget",
          "identifier": "TimHeuer.SampleDotnetMcpServer",
          "version": "0.1.27-beta",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T22:30:54.356348Z",
        "updatedAt": "2025-09-17T01:27:02.860023Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/MisterSandFR-supabase-mcp-selfhosted",
      "description": "Query and manage your Supabase database directly from your workspace. Execute SQL statements, brow…",
      "repository": {
        "url": "https://github.com/MisterSandFR/Supabase-MCP-SelfHosted",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@MisterSandFR/supabase-mcp-selfhosted/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T22:41:06.536212Z",
        "updatedAt": "2025-09-18T14:42:06.205285Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.shawndurrani/mcp-merchant",
      "description": "Search-only commerce MCP server backed by Stripe (test)",
      "repository": {},
      "version": "0.1.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-merchant",
          "version": "0.1.3",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Stripe secret key (test mode)",
              "isRequired": true,
              "isSecret": true,
              "name": "STRIPE_SECRET_KEY"
            },
            {
              "description": "Max products to cache",
              "default": "100",
              "name": "PRODUCT_LIMIT"
            },
            {
              "description": "Catalog refresh interval in seconds",
              "default": "600",
              "name": "REFRESH_INTERVAL_SEC"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.shawndurrani.ai/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T22:54:28.454307Z",
        "updatedAt": "2025-09-16T22:54:28.454307Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.1stdibs/1stDibs",
      "description": "MCP server for browsing and searching items on 1stDibs marketplace.",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://www.1stdibs.com/soa/mcp/"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T23:01:22.451132Z",
        "updatedAt": "2025-09-16T23:01:22.451132Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.shawndurrani/mcp-registry",
      "description": "Search the public MCP Registry; discover servers and copy SSE URLs.",
      "repository": {},
      "version": "0.1.3",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp-registry.shawndurrani.ai/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T23:02:09.738662Z",
        "updatedAt": "2025-09-16T23:02:09.738662Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.linxule/lotus-wisdom",
      "description": "An MCP server for problem-solving using the Lotus Sutra's wisdom framework.",
      "repository": {
        "url": "https://github.com/linxule/lotus-wisdom-mcp",
        "source": "github",
        "id": "963596268"
      },
      "version": "0.1.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "lotus-wisdom-mcp",
          "version": "0.1.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-16T23:53:10.712982Z",
        "updatedAt": "2025-09-16T23:53:10.712982Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.timheuer/sampledotnetmcpserver",
      "description": "Sample .NET MCP Server",
      "repository": {
        "url": "https://github.com/timheuer/sampledotnetmcpserver",
        "source": "github"
      },
      "version": "0.1.28-beta",
      "packages": [
        {
          "registryType": "nuget",
          "identifier": "TimHeuer.SampleDotnetMcpServer",
          "version": "0.1.28-beta",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T01:27:02.813145Z",
        "updatedAt": "2025-09-17T01:44:26.048539Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.timheuer/sampledotnetmcpserver",
      "description": "Sample .NET MCP Server",
      "repository": {
        "url": "https://github.com/timheuer/sampledotnetmcpserver",
        "source": "github"
      },
      "version": "0.1.30-beta",
      "packages": [
        {
          "registryType": "nuget",
          "identifier": "TimHeuer.SampleDotnetMcpServer",
          "version": "0.1.30-beta",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T01:44:26.040149Z",
        "updatedAt": "2025-09-18T17:33:36.292751Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/JMoak-chrono-mcp",
      "description": "Convert and compare dates and times across any timezone with flexible, locale-aware formatting. Ad…",
      "repository": {
        "url": "https://github.com/JMoak/chrono-mcp",
        "source": "github"
      },
      "version": "0.2.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@JMoak/chrono-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T02:23:35.312972Z",
        "updatedAt": "2025-09-17T02:23:35.312972Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.mcpanalytics/analytics",
      "description": "ML statistical analysis platform for data teams",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://api.mcpanalytics.ai/auth0"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T02:35:06.675809Z",
        "updatedAt": "2025-09-17T02:38:18.073872Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.mcpanalytics/analytics",
      "description": "MCP Analytics, searchable tools and reports with interactive HTML visualization",
      "repository": {},
      "version": "1.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://api.mcpanalytics.ai/auth0"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T02:38:18.067163Z",
        "updatedAt": "2025-09-17T03:00:38.27521Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.mcpanalytics/analytics",
      "description": "MCP Analytics, searchable tools and reports with interactive HTML visualization",
      "repository": {
        "url": "https://github.com/embeddedlayers/mcp-analytics",
        "source": "github"
      },
      "version": "1.0.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://api.mcpanalytics.ai/auth0"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T03:00:38.248012Z",
        "updatedAt": "2025-09-17T03:17:49.632449Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.mcpanalytics/analytics",
      "description": "MCP Analytics, searchable tools and reports with interactive HTML visualization",
      "repository": {
        "url": "https://github.com/embeddedlayers/mcp-analytics",
        "source": "github"
      },
      "version": "1.0.3",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://api.mcpanalytics.ai/auth0"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T03:17:49.595346Z",
        "updatedAt": "2025-09-17T03:17:49.595346Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/cc25a-openai-api-agent-project123123123",
      "description": "Look up the latest stock prices by ticker symbol across global markets. Get current price and esse…",
      "repository": {
        "url": "https://github.com/cc25a/openai-api-agent-project",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@cc25a/openai-api-agent-project123123123/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T03:32:54.14302Z",
        "updatedAt": "2025-09-17T03:32:54.14302Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/STUzhy-py_execute_mcp",
      "description": "Run Python code in a secure sandbox without local setup. Declare inline dependencies and execute s…",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@STUzhy/py_execute_mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T04:55:34.956438Z",
        "updatedAt": "2025-09-17T04:55:34.956438Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ChengJiale150/jupyter-mcp-server",
      "description": "A powerful MCP server for AI-driven Jupyter Notebook management and execution",
      "repository": {
        "url": "https://github.com/ChengJiale150/jupyter-mcp-server",
        "source": "github"
      },
      "version": "1.1.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "better-jupyter-mcp-server",
          "version": "1.1.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T06:19:21.754937Z",
        "updatedAt": "2025-09-17T06:19:21.754937Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/hjsh200219-pharminfo-mcp",
      "description": "Look up Korean drug ingredient and product data by HIRA component and product codes via Pilldoc. V…",
      "repository": {
        "url": "https://github.com/hjsh200219/pharminfo-mcp",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@hjsh200219/pharminfo-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T06:55:47.401979Z",
        "updatedAt": "2025-09-17T06:55:47.401979Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.taurgis/sfcc-dev-mcp",
      "description": "MCP server for Salesforce B2C Commerce Cloud development assistance",
      "repository": {
        "url": "https://github.com/taurgis/sfcc-dev-mcp",
        "source": "github"
      },
      "version": "1.0.14",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "sfcc-dev-mcp",
          "version": "1.0.14",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T07:22:50.583896Z",
        "updatedAt": "2025-09-17T07:22:50.583896Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.jkawamoto/mcp-youtube-transcript",
      "description": "An MCP server retrieving transcripts of YouTube videos",
      "repository": {
        "url": "https://github.com/jkawamoto/mcp-youtube-transcript",
        "source": "github"
      },
      "version": "0.5.0",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/jkawamoto/mcp-youtube-transcript/releases/download/v0.5.0/mcp-youtube-transcript.mcpb",
          "fileSha256": "d44842be1e8029c9eaa4412668d06825d668b4eeb645a70386b1c98ab9de49ec",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T07:27:14.970034Z",
        "updatedAt": "2025-09-17T08:10:03.905252Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.jkawamoto/mcp-youtube-transcript",
      "description": "An MCP server retrieving transcripts of YouTube videos",
      "repository": {
        "url": "https://github.com/jkawamoto/mcp-youtube-transcript",
        "source": "github"
      },
      "version": "0.5.1",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/jkawamoto/mcp-youtube-transcript/releases/download/v0.5.1/mcp-youtube-transcript.mcpb",
          "fileSha256": "3356e741d4dafa24b0e931e3afd773c64d503f6624338beec62885f0dde59695",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T08:10:03.858868Z",
        "updatedAt": "2025-09-29T19:06:38.710478Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ChiR24/unreal-engine-mcp",
      "description": "Production-ready MCP server for Unreal Engine with comprehensive game development tools",
      "repository": {
        "url": "https://github.com/ChiR24/Unreal_mcp.git",
        "source": "github"
      },
      "version": "0.2.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "unreal-engine-mcp-server",
          "version": "0.2.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Unreal Engine host address",
              "value": "127.0.0.1",
              "name": "UE_HOST"
            },
            {
              "description": "Remote Control HTTP port",
              "value": "30010",
              "name": "UE_RC_HTTP_PORT"
            },
            {
              "description": "Remote Control WebSocket port",
              "value": "30020",
              "name": "UE_RC_WS_PORT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T08:19:12.108457Z",
        "updatedAt": "2025-09-17T12:43:41.544322Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "dev.lingo/main",
      "description": "Lingo.dev MCP Server - World-class i18n implementation with ICU MessageFormat.",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.lingo.dev/main"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T08:32:24.189924Z",
        "updatedAt": "2025-09-17T08:32:24.189924Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/pinion05-supabase-mcp-lite",
      "description": "Same functionality, consuming only 1/20 of the context window tokens.",
      "repository": {
        "url": "https://github.com/pinion05/supabase-mcp-lite",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@pinion05/supabase-mcp-lite/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T09:26:34.42483Z",
        "updatedAt": "2025-09-17T09:26:34.42483Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.croit/mcp-croit-ceph",
      "description": "MCP server for Croit Ceph cluster management with dynamic OpenAPI tool generation",
      "repository": {
        "url": "https://github.com/croit/mcp-croit-ceph",
        "source": "github",
        "id": "1058156155"
      },
      "version": "0.2.16",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/croit/mcp-croit-ceph:0.2.16",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Croit cluster URL (e.g., http://your-cluster.croit.io:8080)",
              "name": "CROIT_HOST"
            },
            {
              "description": "API authentication token for Croit cluster",
              "name": "CROIT_API_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T09:30:42.325917Z",
        "updatedAt": "2025-09-17T09:30:42.325917Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.grupo-avispa/dsr_mcp_server",
      "description": "An MCP server that provides tools for interacting with Deep State Representation (DSR) graphs.",
      "repository": {
        "url": "https://github.com/grupo-avispa/dsr_mcp_server",
        "source": "github"
      },
      "version": "1.0.0"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T10:15:32.830671Z",
        "updatedAt": "2025-09-17T10:22:23.142839Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.grupo-avispa/dsr_mcp_server",
      "description": "An MCP server that provides tools for interacting with Deep State Representation (DSR) graphs.",
      "repository": {
        "url": "https://github.com/grupo-avispa/dsr_mcp_server",
        "source": "github"
      },
      "version": "1.0.1",
      "websiteUrl": "https://grupo-avispa.github.io/dsr_mcp_server/"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T10:22:23.135623Z",
        "updatedAt": "2025-09-17T10:22:23.135623Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/Kryptoskatt-mcp-server",
      "description": "Enable AI assistants to interact seamlessly with the DefiLlama API by translating MCP tool calls i…",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Kryptoskatt/mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T10:41:17.402979Z",
        "updatedAt": "2025-09-17T10:41:17.402979Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.anyproto/anytype-mcp",
      "description": "Official MCP server for Anytype API - your encrypted, local and collaborative wiki.",
      "repository": {
        "url": "https://github.com/anyproto/anytype-mcp",
        "source": "github"
      },
      "version": "1.0.7",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@anyproto/anytype-mcp",
          "version": "1.0.7",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "JSON string of headers for Anytype API. Example: {\"Authorization\":\"Bearer <YOUR_API_KEY>\", \"Anytype-Version\":\"2025-05-20\"}",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "OPENAPI_MCP_HEADERS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T11:42:47.920301Z",
        "updatedAt": "2025-09-17T11:42:47.920301Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ChiR24/unreal-engine-mcp",
      "description": "Production-ready MCP server for Unreal Engine with comprehensive game development tools",
      "repository": {
        "url": "https://github.com/ChiR24/Unreal_mcp.git",
        "source": "github"
      },
      "version": "0.3.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "unreal-engine-mcp-server",
          "version": "0.3.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Unreal Engine host address",
              "value": "127.0.0.1",
              "name": "UE_HOST"
            },
            {
              "description": "Remote Control HTTP port",
              "value": "30010",
              "name": "UE_RC_HTTP_PORT"
            },
            {
              "description": "Remote Control WebSocket port",
              "value": "30020",
              "name": "UE_RC_WS_PORT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T12:43:41.48374Z",
        "updatedAt": "2025-09-19T06:42:00.165667Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.CursorTouch/Windows-MCP",
      "description": "An MCP Server for computer-use in Windows OS",
      "repository": {
        "url": "https://github.com/CursorTouch/Windows-MCP",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "windows_mcp",
          "version": "0.3.0",
          "runtimeHint": "uvx",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T13:24:08.52135Z",
        "updatedAt": "2025-09-17T13:24:08.52135Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.nesquikm/rubber-duck",
      "description": "An MCP server that bridges to multiple OpenAI-compatible LLMs - your AI rubber duck debugging panel",
      "repository": {
        "url": "https://github.com/nesquikm/mcp-rubber-duck",
        "source": "github"
      },
      "version": "1.1.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-rubber-duck",
          "version": "1.1.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "OpenAI API key (starts with sk-)",
              "format": "string",
              "isSecret": true,
              "name": "OPENAI_API_KEY"
            },
            {
              "description": "Google Gemini API key",
              "format": "string",
              "isSecret": true,
              "name": "GEMINI_API_KEY"
            },
            {
              "description": "Groq API key (starts with gsk_)",
              "format": "string",
              "isSecret": true,
              "name": "GROQ_API_KEY"
            },
            {
              "description": "Default LLM provider to use",
              "format": "string",
              "name": "DEFAULT_PROVIDER"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T13:24:12.420293Z",
        "updatedAt": "2025-09-17T13:24:12.420293Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/pinion05-supabase-mcp-lite",
      "description": "Same functionality, consuming only 1/20 of the context window tokens.",
      "repository": {
        "url": "https://github.com/pinion05/supabase-mcp-lite",
        "source": "github"
      },
      "version": "0.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@pinion05/supabase-mcp-lite/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T13:24:18.881488Z",
        "updatedAt": "2025-09-17T13:24:18.881488Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.r-huijts/strava-mcp",
      "description": "MCP server for accessing Strava API",
      "repository": {
        "url": "https://github.com/r-huijts/strava-mcp",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "strava-mcp-server",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your Strava API client ID",
              "isRequired": true,
              "format": "string",
              "name": "STRAVA_CLIENT_ID"
            },
            {
              "description": "Your Strava API client secret",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "STRAVA_CLIENT_SECRET"
            },
            {
              "description": "Your Strava API access token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "STRAVA_ACCESS_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T13:52:27.488577Z",
        "updatedAt": "2025-09-17T13:52:27.488577Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.leshchenko1979/fast-mcp-telegram",
      "description": "Telegram MCP server with search and messaging capabilities",
      "repository": {
        "url": "https://github.com/leshchenko1979/fast-mcp-telegram",
        "source": "github"
      },
      "version": "0.5.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "fast-mcp-telegram",
          "version": "0.5.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Telegram API ID (from https://my.telegram.org/apps)",
              "isRequired": true,
              "name": "API_ID"
            },
            {
              "description": "Telegram API Hash (from https://my.telegram.org/apps)",
              "isRequired": true,
              "isSecret": true,
              "name": "API_HASH"
            },
            {
              "description": "Server mode: stdio (local), http-no-auth (dev), http-auth (prod)",
              "default": "stdio",
              "choices": [
                "stdio",
                "http-no-auth",
                "http-auth"
              ],
              "name": "SERVER_MODE"
            },
            {
              "description": "Custom session directory (defaults to ~/.config/fast-mcp-telegram/)",
              "name": "SESSION_DIR"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T14:08:48.770809Z",
        "updatedAt": "2025-09-17T14:08:48.770809Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.p1va/symbols",
      "description": "MCP server to read, inspect and troubleshoot codebase symbols",
      "repository": {
        "url": "https://github.com/p1va/symbols",
        "source": "github"
      },
      "version": "0.0.14",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@p1va/symbols",
          "version": "0.0.14",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T14:15:12.928928Z",
        "updatedAt": "2025-09-17T14:15:12.928928Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.apple-rag/mcp-server",
      "description": "Apple Developer Documentation with Semantic Search, RAG, and AI reranking for MCP clients",
      "repository": {
        "url": "https://github.com/BingoWon/apple-rag-mcp",
        "source": "github"
      },
      "version": "1.1.3",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.apple-rag.com",
          "headers": [
            {
              "description": "MCP Token for authentication (optional - free tier available without token)",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T14:15:14.604093Z",
        "updatedAt": "2025-09-17T14:41:53.299387Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.apple-rag/mcp-server",
      "description": "Apple Developer Documentation with Semantic Search, RAG, and AI reranking for MCP clients",
      "repository": {
        "url": "https://github.com/BingoWon/apple-rag-mcp",
        "source": "github"
      },
      "version": "2.4.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.apple-rag.com",
          "headers": [
            {
              "description": "MCP Token for authentication (optional - free tier available without token)",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T14:41:53.205695Z",
        "updatedAt": "2025-09-17T14:43:14.562703Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.apple-rag/mcp-server",
      "description": "Apple Developer Documentation with Semantic Search, RAG, and AI reranking for MCP clients",
      "repository": {
        "url": "https://github.com/BingoWon/apple-rag-mcp",
        "source": "github"
      },
      "version": "2.4.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.apple-rag.com",
          "headers": [
            {
              "description": "MCP Token for authentication (optional - free tier available without token)",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T14:43:14.554349Z",
        "updatedAt": "2025-09-17T15:07:56.628066Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.docfork/docfork-mcp",
      "description": "MCP server for Docfork",
      "repository": {
        "url": "https://github.com/docfork/docfork-mcp",
        "source": "github"
      },
      "version": "0.7.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "docfork",
          "version": "0.7.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.docfork.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T14:44:53.97562Z",
        "updatedAt": "2025-09-17T14:44:53.97562Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.abelljs/abell",
      "description": "AI tools related to Abell. Currently includes MCP of Abell",
      "repository": {
        "url": "https://github.com/abelljs/abell",
        "source": "github"
      },
      "version": "0.0.9",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "abell-ai",
          "version": "0.0.9",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T14:53:07.562175Z",
        "updatedAt": "2025-09-17T14:53:07.562175Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.apple-rag/mcp-server",
      "description": "Apple Developer Documentation with Semantic Search, RAG, and AI reranking for MCP clients",
      "repository": {
        "url": "https://github.com/BingoWon/apple-rag-mcp",
        "source": "github"
      },
      "version": "2.5.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.apple-rag.com",
          "headers": [
            {
              "description": "MCP Token for authentication (optional - free tier available without token)",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T15:07:56.618881Z",
        "updatedAt": "2025-09-17T15:08:38.010176Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.apple-rag/mcp-server",
      "description": "Apple Developer Documentation with Semantic Search, RAG, and AI reranking for MCP clients",
      "repository": {
        "url": "https://github.com/BingoWon/apple-rag-mcp",
        "source": "github"
      },
      "version": "2.5.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.apple-rag.com",
          "headers": [
            {
              "description": "MCP Token for authentication (optional - free tier available without token)",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T15:08:38.002759Z",
        "updatedAt": "2025-09-17T15:11:26.214638Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.apple-rag/mcp-server",
      "description": "Apple Developer Documentation with Semantic Search, RAG, and AI reranking for MCP clients",
      "repository": {
        "url": "https://github.com/BingoWon/apple-rag-mcp",
        "source": "github"
      },
      "version": "2.5.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.apple-rag.com",
          "headers": [
            {
              "description": "MCP Token for authentication (optional - free tier available without token)",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T15:11:26.20691Z",
        "updatedAt": "2025-09-17T15:13:14.515444Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.apple-rag/mcp-server",
      "description": "Apple Developer Documentation with Semantic Search, RAG, and AI reranking for MCP clients",
      "repository": {
        "url": "https://github.com/BingoWon/apple-rag-mcp",
        "source": "github"
      },
      "version": "2.6.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.apple-rag.com",
          "headers": [
            {
              "description": "MCP Token for authentication (optional - free tier available without token)",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T15:13:14.508376Z",
        "updatedAt": "2025-09-20T13:08:19.358043Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.karanb192/reddit-mcp-buddy",
      "description": "Reddit MCP server - browse posts, search content, analyze users.",
      "repository": {},
      "version": "1.1.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "reddit-mcp-buddy",
          "version": "1.1.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T15:39:49.253377Z",
        "updatedAt": "2025-09-20T10:45:00.302258Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Antonytm/mcp-sitecore-server",
      "description": "A Model Context Protocol server for Sitecore",
      "repository": {
        "url": "https://github.com/Antonytm/mcp-sitecore-server",
        "source": "github"
      },
      "version": "1.3.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@antonytm/mcp-sitecore-server",
          "version": "1.3.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "name": ""
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T16:40:08.325649Z",
        "updatedAt": "2025-09-17T16:49:19.079089Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Antonytm/mcp-sitecore-server",
      "description": "A Model Context Protocol server for Sitecore",
      "repository": {
        "url": "https://github.com/Antonytm/mcp-sitecore-server",
        "source": "github"
      },
      "version": "1.3.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@antonytm/mcp-sitecore-server",
          "version": "1.3.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "name": ""
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T16:49:19.073212Z",
        "updatedAt": "2025-09-17T16:49:19.073212Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.AungMyoKyaw/betterprompt-mcp",
      "description": "MCP server for AI-enhanced prompt engineering and request conversion.",
      "repository": {
        "url": "https://github.com/AungMyoKyaw/betterprompt-mcp",
        "source": "github"
      },
      "version": "0.2.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "betterprompt-mcp",
          "version": "0.2.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T17:15:50.170627Z",
        "updatedAt": "2025-09-17T17:15:50.170627Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.getunblocked/unblocked-mcp",
      "description": "Unblocked MCP Server",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://getunblocked.com/api/mcpsse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T17:32:31.670692Z",
        "updatedAt": "2025-09-17T17:32:31.670692Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.teamwork/mcp",
      "description": "The Teamwork.com official MCP server helps teams efficiently manage client projects with AI.",
      "repository": {
        "url": "https://github.com/teamwork/mcp",
        "source": "github"
      },
      "version": "1.4.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/teamwork/mcp:v1.4.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "TW_MCP_BEARER_TOKEN"
            },
            {
              "description": "Choose log output format between 'text' or 'json'. Default is 'text'.",
              "format": "string",
              "name": "TW_MCP_LOG_FORMAT"
            },
            {
              "description": "Choose log level between 'debug', 'info', 'warn' or 'error'. Default is 'info'.",
              "format": "string",
              "name": "TW_MCP_LOG_LEVEL"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T18:13:49.724857Z",
        "updatedAt": "2025-09-26T17:26:33.304629Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.chris-schra/mcp-funnel",
      "description": "MCP proxy that aggregates multiple servers with tool filtering and customization",
      "repository": {
        "url": "https://github.com/chris-schra/mcp-funnel",
        "source": "github"
      },
      "version": "0.0.6",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-funnel",
          "version": "0.0.6",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T18:33:35.912597Z",
        "updatedAt": "2025-09-17T18:55:31.893306Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.chris-schra/mcp-funnel",
      "description": "MCP proxy that aggregates multiple servers with tool filtering and customization",
      "repository": {
        "url": "https://github.com/chris-schra/mcp-funnel",
        "source": "github",
        "id": "1055597409",
        "subfolder": "packages/mcp"
      },
      "version": "0.0.7",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-funnel",
          "version": "0.0.6",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "value": "-y",
              "type": "positional"
            }
          ],
          "packageArguments": [
            {
              "description": "Optional path to .mcp-funnel.json config file",
              "format": "filepath",
              "type": "positional",
              "valueHint": "config_path"
            }
          ],
          "environmentVariables": [
            {
              "description": "Alternative way to specify config file path",
              "format": "filepath",
              "name": "MCP_FUNNEL_CONFIG"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T18:55:31.888644Z",
        "updatedAt": "2025-09-17T18:55:31.888644Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.devcycle/mcp",
      "description": "DevCycle MCP server for feature flag management",
      "repository": {},
      "version": "6.0.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.devcycle.com/mcp"
        },
        {
          "type": "sse",
          "url": "https://mcp.devcycle.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T19:06:43.362453Z",
        "updatedAt": "2025-09-17T20:28:36.462391Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "app.thoughtspot/mcp-server",
      "description": "MCP Server for ThoughtSpot - provides OAuth authentication and tools for querying data",
      "repository": {
        "url": "https://github.com/thoughtspot/mcp-server",
        "source": "github"
      },
      "version": "0.5.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://agent.thoughtspot.app/mcp"
        },
        {
          "type": "sse",
          "url": "https://agent.thoughtspot.app/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T20:04:01.821027Z",
        "updatedAt": "2025-09-17T20:14:22.510543Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "app.thoughtspot/mcp-server",
      "description": "MCP Server for ThoughtSpot - provides OAuth authentication and tools for querying data",
      "repository": {
        "url": "https://github.com/thoughtspot/mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://agent.thoughtspot.app/mcp"
        },
        {
          "type": "sse",
          "url": "https://agent.thoughtspot.app/sse"
        },
        {
          "type": "streamable-http",
          "url": "https://agent.thoughtspot.app/bearer/mcp",
          "headers": [
            {
              "description": "Bearer token for authentication, have the ts-host as 'token@ts-host' or as a separate 'x-ts-host' header",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            },
            {
              "description": "ThoughtSpot instance URL, if not provided in the authorization header",
              "isRequired": true,
              "name": "X-TS-Host"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://agent.thoughtspot.app/bearer/sse",
          "headers": [
            {
              "description": "Bearer token for authentication, have the ts-host as 'token@ts-host' or as a separate 'x-ts-host' header",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            },
            {
              "description": "ThoughtSpot instance URL, if not provided in the authorization header",
              "isRequired": true,
              "name": "X-TS-Host"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T20:14:22.451731Z",
        "updatedAt": "2025-09-17T20:15:17.375784Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "app.thoughtspot/mcp-server",
      "description": "MCP Server for ThoughtSpot - provides OAuth authentication and tools for querying data",
      "repository": {
        "url": "https://github.com/thoughtspot/mcp-server",
        "source": "github"
      },
      "version": "1.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://agent.thoughtspot.app/mcp"
        },
        {
          "type": "sse",
          "url": "https://agent.thoughtspot.app/sse"
        },
        {
          "type": "streamable-http",
          "url": "https://agent.thoughtspot.app/bearer/mcp",
          "headers": [
            {
              "description": "Bearer token for authentication, have the ts-host as 'token@ts-host' or as a separate 'x-ts-host' header",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            },
            {
              "description": "ThoughtSpot instance URL, if not provided in the authorization header",
              "name": "X-TS-Host"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://agent.thoughtspot.app/bearer/sse",
          "headers": [
            {
              "description": "Bearer token for authentication, have the ts-host as 'token@ts-host' or as a separate 'x-ts-host' header",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            },
            {
              "description": "ThoughtSpot instance URL, if not provided in the authorization header",
              "name": "X-TS-Host"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T20:15:17.362825Z",
        "updatedAt": "2025-09-17T20:15:17.362825Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.devcycle/mcp",
      "description": "DevCycle MCP server for feature flag management",
      "repository": {
        "url": "https://github.com/DevCycleHQ/cli",
        "source": "github"
      },
      "version": "6.1.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.devcycle.com/mcp"
        },
        {
          "type": "sse",
          "url": "https://mcp.devcycle.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T20:28:36.449467Z",
        "updatedAt": "2025-09-17T20:28:36.449467Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/exa-labs-exa-code-mcp",
      "description": "Find open-source libraries and fetch contextual code snippets by version to accelerate development…",
      "repository": {
        "url": "https://github.com/exa-labs/exa-code-mcp",
        "source": "github"
      },
      "version": "0.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@exa-labs/exa-code-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T20:44:09.235886Z",
        "updatedAt": "2025-09-17T20:44:09.235886Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.promplate/hmr",
      "description": "Hot Module Reload (HMR) for Python with reactive programming and MCP tools",
      "repository": {
        "url": "https://github.com/promplate/pyth-on-line",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://promplate.github.io/pyth-on-line/hmr/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T20:50:30.150753Z",
        "updatedAt": "2025-09-17T20:50:30.150753Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "dev.promplate/hmr",
      "description": "Hot Module Reload (HMR) for Python with reactive programming and MCP tools",
      "repository": {
        "url": "https://github.com/promplate/pyth-on-line",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://pyth-on-line.promplate.dev/hmr/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T21:07:34.315525Z",
        "updatedAt": "2025-09-17T21:09:37.855503Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "dev.promplate/hmr",
      "description": "Hot Module Reload (HMR) and reactive programming for Python",
      "repository": {
        "url": "https://github.com/promplate/hmr",
        "source": "github"
      },
      "version": "1.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://pyth-on-line.promplate.dev/hmr/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T21:09:37.850176Z",
        "updatedAt": "2025-09-17T21:13:12.384421Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "dev.promplate/hmr",
      "description": "Docs for hot-module-reload and reactive programming for Python (`hmr` on PyPI)",
      "repository": {
        "url": "https://github.com/promplate/hmr",
        "source": "github"
      },
      "version": "1.0.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://pyth-on-line.promplate.dev/hmr/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T21:13:12.376457Z",
        "updatedAt": "2025-09-17T21:13:12.376457Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.vercel/vercel-mcp",
      "description": "An MCP server for connecting to Vercel",
      "repository": {},
      "version": "0.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.vercel.com"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T21:18:23.966054Z",
        "updatedAt": "2025-09-17T21:29:22.393252Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.vercel/vercel-mcp",
      "description": "An MCP server for Vercel",
      "repository": {},
      "version": "0.0.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.vercel.com"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T21:29:22.383255Z",
        "updatedAt": "2025-09-17T21:29:22.383255Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "trade.neglect/mcp-server",
      "description": "Full Solana DeFi coverage: launchpads, tokens, trades, and wallets, decoded at scale.",
      "repository": {
        "url": "https://github.com/609NFT/solana-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://api.neglect.trade/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T22:59:34.04442Z",
        "updatedAt": "2025-09-17T22:59:34.04442Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.8beeeaaat/touchdesigner-mcp-server",
      "description": "MCP server for TouchDesigner - Control and operate TouchDesigner projects through AI agents",
      "repository": {
        "url": "https://github.com/8beeeaaat/touchdesigner-mcp.git",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "touchdesigner-mcp-server",
          "version": "1.0.0",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T23:25:24.290746Z",
        "updatedAt": "2025-09-17T23:25:24.290746Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.schemacrawler/schemacrawler-ai",
      "description": "Enables natural language schema queries — explore tables, keys, procedures, and get SQL help fast",
      "repository": {
        "url": "https://github.com/schemacrawler/SchemaCrawler-AI",
        "source": "github"
      },
      "version": "v16.28.1-2",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/schemacrawler/schemacrawler-ai:v16.28.1-2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Database user name. Can be optional depending on the database connection type.",
              "format": "string",
              "isSecret": true,
              "name": "SCHCRWLR_DATABASE_USER"
            },
            {
              "description": "Database user password. Can be optional depending on the database connection type.",
              "format": "string",
              "isSecret": true,
              "name": "SCHCRWLR_DATABASE_PASSWORD"
            },
            {
              "description": "JDBC URL for database connection. If this is provided, the server, host, port and database are not used.",
              "format": "string",
              "name": "SCHCRWLR_JDBC_URL"
            },
            {
              "description": "SchemaCrawler database plugin, for example, 'sqlserver' or 'sqlite'. Used only if the JDBC URL is not provided.",
              "format": "string",
              "name": "SCHCRWLR_SERVER"
            },
            {
              "description": "Database host. Defaults to localhost. Used only if the JDBC URL is not provided.",
              "format": "string",
              "name": "SCHCRWLR_HOST"
            },
            {
              "description": "Database port. Defaults to the default port for the server type. Used only if the JDBC URL is not provided.",
              "format": "string",
              "name": "SCHCRWLR_PORT"
            },
            {
              "description": "Database to connect to (optional). Used only if the JDBC URL is not provided.",
              "format": "string",
              "name": "SCHCRWLR_DATABASE"
            },
            {
              "description": "How much database metadata to retrieve. Values are 'minimum', 'standard', 'detailed' or 'maximum'.",
              "format": "string",
              "name": "SCHCRWLR_INFO_LEVEL"
            },
            {
              "description": "Logging verbosity level. Values are 'SEVERE', 'WARNING', 'INFO', 'CONFIG', or 'FINE'.",
              "format": "string",
              "name": "SCHCRWLR_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-17T23:55:52.054265Z",
        "updatedAt": "2025-09-20T13:17:42.512459Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.balldontlie/mcp",
      "description": "MCP server for BALLDONTLIE API",
      "repository": {
        "url": "https://github.com/balldontlie-api/mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.balldontlie.io/mcp",
          "headers": [
            {
              "description": "API key for authentication",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T00:33:15.822455Z",
        "updatedAt": "2025-09-18T00:35:55.651574Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.balldontlie/mcp",
      "description": "Provides access to live sports data and analytics from BALLDONTLIE: The Sports API",
      "repository": {
        "url": "https://github.com/balldontlie-api/mcp",
        "source": "github"
      },
      "version": "1.1.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.balldontlie.io/mcp",
          "headers": [
            {
              "description": "API key for authentication",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T00:35:55.642005Z",
        "updatedAt": "2025-09-18T00:35:55.642005Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.mcpcap/mcpcap",
      "description": "An MCP server for analyzing PCAP files.",
      "repository": {
        "url": "https://github.com/mcpcap/mcpcap",
        "source": "github"
      },
      "version": "0.6.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcpcap",
          "version": "0.4.4",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T00:54:48.998145Z",
        "updatedAt": "2025-09-18T00:54:48.998145Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ci.git/mymlh-mcp-server",
      "description": "OAuth-enabled MyMLH MCP server for accessing MyMLH data.",
      "repository": {
        "url": "https://github.com/wei/mymlh-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mymlh-mcp.git.ci/mcp"
        },
        {
          "type": "sse",
          "url": "https://mymlh-mcp.git.ci/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T01:20:01.35206Z",
        "updatedAt": "2025-09-18T01:20:01.35206Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.pedro-rivas/android-puppeteer-mcp",
      "description": "MCP server for Android automation with UI interaction, screenshots, and device control",
      "repository": {
        "url": "https://github.com/pedro-rivas/android-puppeteer-mcp",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "android-puppeteer-mcp",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T02:09:11.965571Z",
        "updatedAt": "2025-09-18T02:09:11.965571Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.jkawamoto/mcp-bear",
      "description": "A MCP server for interacting with Bear note-taking software.",
      "repository": {
        "url": "https://github.com/jkawamoto/mcp-bear",
        "source": "github"
      },
      "version": "0.4.0",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/jkawamoto/mcp-bear/releases/download/v0.4.0/mcp-bear.mcpb",
          "fileSha256": "f91b513cc189736035e090dd8217a866d4492a53ed094cc277b248890278554e",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Bear API token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BEAR_API_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T02:53:22.271905Z",
        "updatedAt": "2025-09-18T02:53:22.271905Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.lapfelix/xcodemcp",
      "description": "Control Xcode directly via JXA for build, test, debug operations with XCLogParser integration",
      "repository": {
        "url": "https://github.com/lapfelix/XcodeMCP",
        "source": "github"
      },
      "version": "2.1.4",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "xcodemcp",
          "version": "2.1.4",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T03:19:27.884628Z",
        "updatedAt": "2025-09-18T03:19:27.884628Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.tuananh/hyper-mcp",
      "description": "📦️ A fast, secure MCP server that extends its capabilities through WebAssembly plugins",
      "repository": {
        "url": "https://github.com/tuananh/hyper-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/tuananh/hyper-mcp:v0.1.6",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T04:56:15.144633Z",
        "updatedAt": "2025-09-18T04:56:15.144633Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.macuse-app/macuse",
      "description": "Bridges AI assistants with native macOS functionality through the Model Context Protocol (MCP).",
      "repository": {
        "url": "https://github.com/macuse-app/macuse",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/macuse-app/macuse/releases/download/v1.0.1/macuse-1.0.1.mcpb",
          "fileSha256": "9e3444c567c66a57d15657dca437dbdb9560d16f00e6d4ac3d95ea795b9b482e",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T05:18:13.769559Z",
        "updatedAt": "2025-09-18T05:18:13.769559Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.NitishGourishetty/contextual-mcp-server",
      "description": "RAG-enabled MCP server using Contextual AI. Supports single-agent and multi-agent modes.",
      "repository": {
        "url": "https://github.com/NitishGourishetty/contextual-mcp-server",
        "source": "github"
      },
      "version": "0.1.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "contextual-mcp-server",
          "version": "0.1.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your Contextual AI API key",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "API_KEY"
            },
            {
              "description": "Your Contextual AI agent ID (required only for single-agent mode; omit for multi-agent mode)",
              "format": "string",
              "name": "AGENT_ID"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T06:42:30.878482Z",
        "updatedAt": "2025-09-18T06:42:30.878482Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/callmybot-hello-mcp-server",
      "description": "Generate quick, friendly greetings by name. Personalize salutations for any context. Explore the o…",
      "repository": {
        "url": "https://github.com/callmybot/hello-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@callmybot/hello-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T07:48:26.611267Z",
        "updatedAt": "2025-09-18T07:48:26.611267Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/airmang-hwpx-mcp",
      "description": "자동화하여 HWPX 문서의 로딩, 탐색, 편집, 검증을 한 번에 처리합니다. 문단·표·주석 추가, 텍스트 일괄 치환, 머리말·꼬리말 설정 등 반복 작업을 신속히 수행합니다. 기…",
      "repository": {
        "url": "https://github.com/airmang/hwpx-mcp",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@airmang/hwpx-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T07:51:38.712981Z",
        "updatedAt": "2025-09-18T07:51:38.712981Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.dynatrace-oss/Dynatrace-mcp",
      "description": "Model Context Protocol server for Dynatrace - access logs, events, metrics from Dynatrace via MCP.",
      "repository": {
        "url": "https://github.com/dynatrace-oss/Dynatrace-mcp",
        "source": "github"
      },
      "version": "0.6.0-rc.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@dynatrace-oss/dynatrace-mcp-server",
          "version": "0.6.0-rc.1",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your Dynatrace Platform Token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "DT_PLATFORM_TOKEN"
            },
            {
              "description": "The URL of your Dynatrace environment (e.g. 'https://abc12345.apps.dynatrace.com')",
              "isRequired": true,
              "format": "string",
              "name": "DT_ENVIRONMENT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T08:07:03.493254Z",
        "updatedAt": "2025-09-18T08:07:03.493254Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/minionszyw-bazi",
      "description": "Generate BaZi charts from birth details. Explore Four Pillars, solar terms, and Luck Pillars for d…",
      "repository": {
        "url": "https://github.com/minionszyw/bazi",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@minionszyw/bazi/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T08:13:10.601278Z",
        "updatedAt": "2025-09-18T08:13:10.601278Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.snapcall/mcp",
      "description": "MCP Server that generate video call url",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.snapcall.io"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T08:16:15.41436Z",
        "updatedAt": "2025-09-18T08:16:15.41436Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.OtherVibes/mcp-as-a-judge",
      "description": "MCP as a Judge: a behavioral MCP that strengthens AI coding assistants via explicit LLM evaluations",
      "repository": {},
      "version": "0.3.2",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "mcp-as-a-judge",
          "version": "0.3.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T08:25:43.82545Z",
        "updatedAt": "2025-09-18T20:23:31.617925Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/rainbowgore-stealthee-mcp-tools",
      "description": "Spot pre-launch products before they trend. Search the web and tech sites, extract and parse pages…",
      "repository": {
        "url": "https://github.com/rainbowgore/stealthee-MCP-tools",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@rainbowgore/stealthee-mcp-tools/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T08:35:04.917713Z",
        "updatedAt": "2025-09-18T08:35:04.917713Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.KylinMountain/web-fetch-mcp",
      "description": "MCP server for web content fetching, summarizing, comparing, and extracting information",
      "repository": {
        "url": "https://github.com/KylinMountain/web-fetch-mcp.git",
        "source": "github"
      },
      "version": "0.1.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "web-fetch-mcp",
          "version": "0.1.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your Gemini API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "GEMINI_API_KEY"
            },
            {
              "description": "Your proxy for the gemini api service",
              "format": "string",
              "name": "HTTP_PROXY"
            },
            {
              "description": "Your proxy for the gemini api service",
              "format": "string",
              "name": "HTTPS_PROXY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T09:15:43.239067Z",
        "updatedAt": "2025-09-18T09:15:43.239067Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/callmybot-cookbook-mcp-server",
      "description": "Count occurrences of any character in your text instantly. Specify the character and get precise c…",
      "repository": {
        "url": "https://github.com/callmybot/cookbook-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@callmybot/cookbook-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T09:25:11.477139Z",
        "updatedAt": "2025-09-18T09:25:11.477139Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/arjunkmrm-ahoy2",
      "description": "Create friendly greetings by name, with an optional pirate tone. Explore the origin of 'Hello, Wor…",
      "repository": {
        "url": "https://github.com/arjunkmrm/ahoy",
        "source": "github"
      },
      "version": "1.13.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@arjunkmrm/ahoy2/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T09:44:13.762613Z",
        "updatedAt": "2025-09-18T09:44:13.762613Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/adamamer20-paper-search-mcp-openai",
      "description": "Search and download academic papers from arXiv, PubMed, bioRxiv, medRxiv, Google Scholar, Semantic…",
      "repository": {
        "url": "https://github.com/adamamer20/paper-search-mcp-openai",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@adamamer20/paper-search-mcp-openai/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T10:21:35.776286Z",
        "updatedAt": "2025-09-18T10:21:35.776286Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/callmybot-domoticz",
      "description": "Greet anyone by name with a friendly hello. Explore the origin of 'Hello, World' for context in de…",
      "repository": {
        "url": "https://github.com/callmybot/domoticz",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@callmybot/domoticz/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T10:31:39.650923Z",
        "updatedAt": "2025-09-18T10:31:39.650923Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.devopness.mcp/server",
      "description": "An MCP server that uses Devopness to allow AI Agents to provision infrastructure to any cloud",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.devopness.com/mcp/"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T11:54:55.748613Z",
        "updatedAt": "2025-09-18T17:29:14.634765Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.mermaidchart/mermaid-mcp",
      "description": "MCP server for Mermaid diagram validation and rendering",
      "repository": {
        "url": "https://github.com/Mermaid-Chart/mermaid-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.mermaidchart.com/mcp"
        },
        {
          "type": "sse",
          "url": "https://mcp.mermaidchart.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T12:13:25.426328Z",
        "updatedAt": "2025-09-18T12:13:25.426328Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/ProfessionalWiki-mediawiki-mcp-server",
      "description": "Enable Large Language Model clients to interact seamlessly with any MediaWiki wiki. Perform action…",
      "repository": {},
      "version": "0.1.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@ProfessionalWiki/mediawiki-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T12:49:06.317403Z",
        "updatedAt": "2025-09-18T12:49:06.317403Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.PV-Bhat/vibe-check-mcp-server",
      "description": "Metacognitive AI agent oversight: adaptive CPI interrupts for alignment, reflection and safety",
      "repository": {
        "url": "https://github.com/PV-Bhat/vibe-check-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@pv-bhat/vibe-check-mcp",
          "version": "2.5.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T12:55:25.166512Z",
        "updatedAt": "2025-09-18T12:55:25.166512Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.wonderwhy-er/desktop-commander",
      "description": "MCP server for terminal commands, file operations, and process management",
      "repository": {
        "url": "https://github.com/wonderwhy-er/DesktopCommanderMCP",
        "source": "github"
      },
      "version": "0.2.15",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@wonderwhy-er/desktop-commander",
          "version": "0.2.15",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T13:15:52.386561Z",
        "updatedAt": "2025-09-26T16:35:30.873722Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/sunub-obsidian-mcp-server",
      "description": "Search your Obsidian vault to quickly find notes by title or keyword, summarize related content, a…",
      "repository": {
        "url": "https://github.com/sunub/obsidian-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@sunub/obsidian-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T13:40:45.500067Z",
        "updatedAt": "2025-09-18T13:40:45.500067Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/oxylabs-oxylabs-mcp",
      "description": "Fetch and process content from specified URLs using the Oxylabs Web Scraper API.",
      "repository": {
        "url": "https://github.com/oxylabs/oxylabs-mcp",
        "source": "github"
      },
      "version": "1.13.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@oxylabs/oxylabs-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T14:22:20.353742Z",
        "updatedAt": "2025-09-18T14:22:20.353742Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.localstack/localstack-mcp-server",
      "description": "A LocalStack MCP Server providing essential tools for local cloud development & testing",
      "repository": {
        "url": "https://github.com/localstack/localstack-mcp-server",
        "source": "github"
      },
      "version": "0.1.5",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@localstack/localstack-mcp-server",
          "version": "0.1.5",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "LocalStack Auth Token (optional for Pro features)",
              "format": "string",
              "isSecret": true,
              "name": "LOCALSTACK_AUTH_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T14:38:06.908081Z",
        "updatedAt": "2025-09-18T14:38:06.908081Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/MisterSandFR-supabase-mcp-selfhosted",
      "description": "Manage Supabase projects end to end across database, auth, storage, realtime, and migrations. Moni…",
      "repository": {
        "url": "https://github.com/MisterSandFR/Supabase-MCP-SelfHosted",
        "source": "github"
      },
      "version": "1.14.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@MisterSandFR/supabase-mcp-selfhosted/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T14:42:06.197815Z",
        "updatedAt": "2025-09-18T14:42:06.197815Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "app.linear/linear",
      "description": "MCP server for Linear project management and issue tracking",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.linear.app/sse"
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.linear.app/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T15:51:15.598862Z",
        "updatedAt": "2025-09-18T15:51:15.598862Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.minnas/mcp",
      "description": "Share prompts and context with your team and discover community collections.",
      "repository": {
        "url": "https://github.com/sensoris/minnas-service",
        "source": "github"
      },
      "version": "1.1.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://api.minnas.io/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T16:40:24.14673Z",
        "updatedAt": "2025-09-18T16:40:24.14673Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.devopness.mcp/server",
      "description": "Devopness MCP server for DevOps happiness! Empower AI Agents to deploy apps and infra, to any cloud.",
      "repository": {},
      "version": "1.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.devopness.com/mcp/"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T17:29:14.559764Z",
        "updatedAt": "2025-09-18T17:29:14.559764Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.timheuer/sampledotnetmcpserver",
      "description": "Sample .NET MCP Server",
      "repository": {
        "url": "https://github.com/timheuer/sampledotnetmcpserver",
        "source": "github"
      },
      "version": "0.1.41-beta",
      "packages": [
        {
          "registryType": "nuget",
          "identifier": "TimHeuer.SampleDotnetMcpServer",
          "version": "0.1.41-beta",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T17:33:36.288045Z",
        "updatedAt": "2025-09-18T21:01:12.611344Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.abhijitjavelin/javelin-guardrails-mcp-server",
      "description": "An MCP server that provides Javelin Standalone Guardrails",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://abhijitjavelin.github.io/javelin-guardrails-mcp-server/mcp",
          "headers": [
            {
              "description": "Javelin API key for authentication",
              "isRequired": true,
              "isSecret": true,
              "name": "x-javelin-apikey"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T17:34:35.233239Z",
        "updatedAt": "2025-09-18T17:34:35.233239Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/HARJAP-SINGH-3105-splitwise_mcp",
      "description": "Manage Splitwise balances, expenses, and groups from your workspace. Fetch friends and recent acti…",
      "repository": {
        "url": "https://github.com/HARJAP-SINGH-3105/Splitwise_MCP",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@HARJAP-SINGH-3105/splitwise_mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T18:42:59.470988Z",
        "updatedAt": "2025-09-18T18:42:59.470988Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.mux/mcp",
      "description": "The official MCP Server for the Mux API",
      "repository": {
        "url": "https://github.com/muxinc/mux-node-sdk",
        "source": "github",
        "subfolder": "packages/mcp-server"
      },
      "version": "12.8.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@mux/mcp",
          "version": "12.8.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your Mux access token ID",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "MUX_TOKEN_ID"
            },
            {
              "description": "Your Mux access token secret",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "MUX_TOKEN_SECRET"
            },
            {
              "description": "Your JWT signing key ID, for use with signed playback IDs",
              "format": "string",
              "isSecret": true,
              "name": "MUX_SIGNING_KEY"
            },
            {
              "description": "Your JWT private key, for use with signed playback IDs",
              "format": "string",
              "isSecret": true,
              "name": "MUX_PRIVATE_KEY"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.mux.com",
          "headers": [
            {
              "description": "Optional basic authorization header you can include, combining your Access Token and Secret using HTTP Basic Auth. If not provided, authorization will be handled via OAuth.",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T20:19:27.742689Z",
        "updatedAt": "2025-09-18T20:19:27.742689Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.OtherVibes/mcp-as-a-judge",
      "description": "MCP as a Judge: a behavioral MCP that strengthens AI coding assistants via explicit LLM evaluations",
      "repository": {},
      "version": "0.3.3",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "mcp-as-a-judge",
          "version": "0.3.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T20:23:31.611474Z",
        "updatedAt": "2025-09-18T21:45:57.098845Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.zenml-io/mcp-zenml",
      "description": "MCP server for ZenML - browse stacks, pipelines, runs, artifacts & trigger pipeline runs via API",
      "repository": {
        "url": "https://github.com/zenml-io/mcp-zenml",
        "source": "github"
      },
      "version": "1.0.4",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/zenmldocker/mcp-zenml:1.0.4",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Base URL of your ZenML server (e.g., https://<workspace-id>-zenml.cloudinfra.zenml.io).",
              "isRequired": true,
              "format": "string",
              "name": "ZENML_STORE_URL"
            },
            {
              "description": "API key used to authenticate with your ZenML server (ideally a service account key).",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "ZENML_STORE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T20:48:56.219552Z",
        "updatedAt": "2025-09-18T20:48:56.219552Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.timheuer/sampledotnetmcpserver",
      "description": "Sample .NET MCP Server",
      "repository": {
        "url": "https://github.com/timheuer/sampledotnetmcpserver",
        "source": "github"
      },
      "version": "0.1.45-beta",
      "packages": [
        {
          "registryType": "nuget",
          "identifier": "TimHeuer.SampleDotnetMcpServer",
          "version": "0.1.45-beta",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T21:01:12.606342Z",
        "updatedAt": "2025-09-18T21:24:07.74568Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.timheuer/sampledotnetmcpserver",
      "description": "Sample .NET MCP Server",
      "repository": {
        "url": "https://github.com/timheuer/sampledotnetmcpserver",
        "source": "github"
      },
      "version": "0.1.46-beta",
      "packages": [
        {
          "registryType": "nuget",
          "identifier": "TimHeuer.SampleDotnetMcpServer",
          "version": "0.1.46-beta",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T21:24:07.737452Z",
        "updatedAt": "2025-09-18T23:12:00.04013Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.supabase/mcp",
      "description": "MCP server for interacting with the Supabase platform",
      "repository": {
        "url": "https://github.com/supabase-community/supabase-mcp",
        "source": "github",
        "subfolder": "packages/mcp-server-supabase"
      },
      "version": "0.5.5",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@supabase/mcp-server-supabase",
          "version": "0.5.5",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "Supabase project reference ID",
              "format": "string",
              "type": "named",
              "name": "--project-ref"
            },
            {
              "description": "Enable read-only mode",
              "format": "boolean",
              "type": "named",
              "name": "--read-only"
            },
            {
              "description": "Comma-separated list of features to enable",
              "format": "string",
              "type": "named",
              "name": "--features"
            },
            {
              "description": "Custom API URL",
              "format": "string",
              "type": "named",
              "name": "--api-url"
            }
          ],
          "environmentVariables": [
            {
              "description": "Personal access token for Supabase API",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "SUPABASE_ACCESS_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T21:32:17.512332Z",
        "updatedAt": "2025-09-18T21:32:17.512332Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.marlenezw/publish-mcp-server",
      "description": "An MCP server that helps developers publish their MCP servers to the registry",
      "repository": {
        "url": "https://github.com/marlenezw/publish-mcp-server",
        "source": "github"
      },
      "version": "0.1.2",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "publish-mcp-server",
          "version": "0.1.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T21:41:33.141495Z",
        "updatedAt": "2025-09-18T22:42:06.389511Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "",
      "name": "io.github.OtherVibes/mcp-as-a-judge",
      "description": "MCP as a Judge: a behavioral MCP that strengthens AI coding assistants via explicit LLM evaluations",
      "repository": {},
      "version": "0.3.12"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T21:45:57.092951Z",
        "updatedAt": "2025-09-18T22:00:36.898441Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/kodey-ai-mapwise-mcp",
      "description": "Send friendly, personalized greetings on demand. Generate quick salutations with a simple prompt.…",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@kodey-ai/mapwise-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T21:55:01.522892Z",
        "updatedAt": "2025-09-18T21:55:01.522892Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "",
      "name": "io.github.OtherVibes/mcp-as-a-judge",
      "description": "MCP as a Judge: a behavioral MCP that strengthens AI coding assistants via explicit LLM evaluations",
      "repository": {},
      "version": "0.3.13"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T22:00:36.893962Z",
        "updatedAt": "2025-09-18T22:05:09.298621Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "",
      "name": "io.github.OtherVibes/mcp-as-a-judge",
      "description": "MCP as a Judge: a behavioral MCP that strengthens AI coding assistants via explicit LLM evaluations",
      "repository": {},
      "version": "0.3.14"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T22:05:09.292804Z",
        "updatedAt": "2025-09-20T10:35:19.813844Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.marlenezw/publish-mcp-server",
      "description": "An MCP server that helps developers publish their MCP servers to the registry",
      "repository": {
        "url": "https://github.com/marlenezw/publish-mcp-server",
        "source": "github"
      },
      "version": "0.1.3",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "publish-mcp-server",
          "version": "0.1.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T22:42:06.320771Z",
        "updatedAt": "2025-09-18T22:42:06.320771Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.jkawamoto/mcp-florence2",
      "description": "An MCP server for processing images using Florence-2",
      "repository": {
        "url": "https://github.com/jkawamoto/mcp-florence2",
        "source": "github"
      },
      "version": "0.3.2",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/jkawamoto/mcp-florence2/releases/download/v0.3.2/mcp-florence2.mcpb",
          "fileSha256": "58fcb84d444c01f3d7e9a3dd3ea6fa45dc7515663141527936ee8daec2cd0f63",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T22:50:50.364396Z",
        "updatedAt": "2025-09-19T00:50:28.853946Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.timheuer/sampledotnetmcpserver",
      "description": "Sample .NET MCP Server",
      "repository": {
        "url": "https://github.com/timheuer/sampledotnetmcpserver",
        "source": "github"
      },
      "version": "0.1.47-beta",
      "packages": [
        {
          "registryType": "nuget",
          "identifier": "TimHeuer.SampleDotnetMcpServer",
          "version": "0.1.47-beta",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-18T23:12:00.03146Z",
        "updatedAt": "2025-09-19T00:25:42.487559Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.timheuer/sampledotnetmcpserver",
      "description": "Sample .NET MCP Server",
      "repository": {
        "url": "https://github.com/timheuer/sampledotnetmcpserver",
        "source": "github"
      },
      "version": "0.1.48-beta",
      "packages": [
        {
          "registryType": "nuget",
          "identifier": "TimHeuer.SampleDotnetMcpServer",
          "version": "0.1.48-beta",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T00:25:42.425082Z",
        "updatedAt": "2025-09-19T16:03:41.846199Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.jkawamoto/mcp-florence2",
      "description": "An MCP server for processing images using Florence-2",
      "repository": {
        "url": "https://github.com/jkawamoto/mcp-florence2",
        "source": "github"
      },
      "version": "0.3.3",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/jkawamoto/mcp-florence2/releases/download/v0.3.3/mcp-florence2.mcpb",
          "fileSha256": "4e176c58148fde7ef8a548b5ba2ca5d6b4a2f496fb3ab3b84c7329e1c732147b",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T00:50:28.842923Z",
        "updatedAt": "2025-09-19T00:50:28.842923Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Lyellr88/marm-mcp-server",
      "description": "Universal MCP Server with advanced AI memory capabilities and semantic search.",
      "repository": {
        "url": "https://github.com/Lyellr88/MARM-Systems",
        "source": "github"
      },
      "version": "2.2.1",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "marm-mcp-server",
          "version": "2.2.1",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "oci",
          "identifier": "docker.io/lyellr88/marm-mcp-server:2.2.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T01:23:00.859132Z",
        "updatedAt": "2025-09-19T04:27:24.541089Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/alphago2580-naramarketmcp",
      "description": "Access Korea’s G2B procurement and Nara Market data for bid notices, awards, contracts, statistics…",
      "repository": {
        "url": "https://github.com/alphago2580/naramarketmcp",
        "source": "github"
      },
      "version": "1.14.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@alphago2580/naramarketmcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T02:36:55.167644Z",
        "updatedAt": "2025-09-19T02:36:55.167644Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.pubnub/mcp-server",
      "description": "PubNub MCP for Real-time messaging. API Access and SDK documentation.",
      "repository": {},
      "version": "1.0.104"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T02:42:31.411221Z",
        "updatedAt": "2025-09-19T21:08:36.529344Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/arjunkmrm-bobo",
      "description": "Send friendly, personalized greetings on command. Explore the origin of 'Hello, World' for quick c…",
      "repository": {},
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@arjunkmrm/bobo/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T03:28:29.606731Z",
        "updatedAt": "2025-09-19T03:28:29.606731Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.francisco-perez-sorrosal/cv",
      "description": "An MCP server that provides access to Francisco Perez-Sorrosal's CV",
      "repository": {
        "url": "https://github.com/francisco-perez-sorrosal/cv",
        "source": "github"
      },
      "version": "0.0.1",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/francisco-perez-sorrosal/cv/releases/download/v0.0.1/fps-cv-mcp-0.0.1.mcpb",
          "fileSha256": "d01ccdbbea56702215a8015ad19c12f5681b61c1fdaeaa258c88f657a6f02bd6",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T03:40:16.952879Z",
        "updatedAt": "2025-09-19T03:40:16.952879Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Lyellr88/marm-mcp-server",
      "description": "Universal MCP Server with advanced AI memory capabilities and semantic search.",
      "repository": {
        "url": "https://github.com/Lyellr88/MARM-Systems",
        "source": "github"
      },
      "version": "2.2.2",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "marm-mcp-server",
          "version": "2.2.2",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "oci",
          "identifier": "docker.io/lyellr88/marm-mcp-server:2.2.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T04:27:24.435507Z",
        "updatedAt": "2025-09-19T07:39:05.791393Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ChiR24/unreal-engine-mcp",
      "description": "Production-ready MCP server for Unreal Engine with comprehensive game development tools",
      "repository": {
        "url": "https://github.com/ChiR24/Unreal_mcp.git",
        "source": "github"
      },
      "version": "0.3.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "unreal-engine-mcp-server",
          "version": "0.3.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Unreal Engine host address",
              "value": "127.0.0.1",
              "name": "UE_HOST"
            },
            {
              "description": "Remote Control HTTP port",
              "value": "30010",
              "name": "UE_RC_HTTP_PORT"
            },
            {
              "description": "Remote Control WebSocket port",
              "value": "30020",
              "name": "UE_RC_WS_PORT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T06:41:59.942159Z",
        "updatedAt": "2025-09-20T06:29:35.191628Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Lyellr88/marm-mcp-server",
      "description": "Universal MCP Server with advanced AI memory capabilities and semantic search.",
      "repository": {
        "url": "https://github.com/Lyellr88/MARM-Systems",
        "source": "github"
      },
      "version": "2.2.3",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "marm-mcp-server",
          "version": "2.2.3",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "oci",
          "identifier": "docker.io/lyellr88/marm-mcp-server:2.2.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T07:39:05.72082Z",
        "updatedAt": "2025-09-19T08:07:18.948848Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.estruyf/vscode-demo-time",
      "description": "Enables AI assistants to interact with Demo Time and helps build presentations and demos.",
      "repository": {
        "url": "https://github.com/estruyf/vscode-demo-time",
        "source": "github"
      },
      "version": "0.0.55",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@demotime/mcp",
          "version": "0.0.55",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T07:45:12.638193Z",
        "updatedAt": "2025-09-19T07:45:12.638193Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/arjunkmrm-clock",
      "description": "Check the current time instantly and explore world timezones by region. Browse available continent…",
      "repository": {
        "url": "https://github.com/arjunkmrm/clock",
        "source": "github"
      },
      "version": "1.14.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@arjunkmrm/clock/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T08:00:25.675646Z",
        "updatedAt": "2025-09-19T08:00:25.675646Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Lyellr88/marm-mcp-server",
      "description": "Universal MCP Server with advanced AI memory capabilities and semantic search.",
      "repository": {
        "url": "https://github.com/Lyellr88/MARM-Systems",
        "source": "github"
      },
      "version": "2.2.4",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "marm-mcp-server",
          "version": "2.2.4",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "oci",
          "identifier": "docker.io/lyellr88/marm-mcp-server:2.2.4",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T08:07:18.942316Z",
        "updatedAt": "2025-09-23T06:50:35.607632Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/arjunkmrm-watch2",
      "description": "Get the current time in your chosen timezone. Browse available continents and regions to pick the…",
      "repository": {
        "url": "https://github.com/arjunkmrm/clock",
        "source": "github"
      },
      "version": "1.14.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@arjunkmrm/watch2/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T08:31:21.361328Z",
        "updatedAt": "2025-09-19T08:31:21.361328Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/jjlabsio-korea-stock-mcp",
      "description": "Search company disclosures and financial statements from the Korean market. Retrieve stock profile…",
      "repository": {
        "url": "https://github.com/jjlabsio/korea-stock-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@jjlabsio/korea-stock-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T09:01:49.012754Z",
        "updatedAt": "2025-09-19T09:01:49.012754Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.3",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T09:07:32.526636Z",
        "updatedAt": "2025-09-19T09:19:58.33767Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.4",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T09:19:58.329764Z",
        "updatedAt": "2025-09-19T09:33:46.378866Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.5",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T09:33:46.34143Z",
        "updatedAt": "2025-09-19T09:40:01.090665Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.6",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T09:40:01.083926Z",
        "updatedAt": "2025-09-19T11:31:51.128069Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.jjlabsio/korea-stock-mcp",
      "description": "MCP server for korea stock",
      "repository": {
        "url": "https://github.com/jjlabsio/korea-stock-mcp",
        "source": "github"
      },
      "version": "1.1.4",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "korea-stock-mcp",
          "version": "1.1.4",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "DART API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "DART_API_KEY"
            },
            {
              "description": "KRX API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "KRX_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T09:51:42.286475Z",
        "updatedAt": "2025-09-19T09:51:42.286475Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.florentine-ai/mcp",
      "description": "MCP server for Florentine.ai - Natural language to MongoDB aggregations",
      "repository": {
        "url": "https://github.com/florentine-ai/mcp",
        "source": "github"
      },
      "version": "0.2.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@florentine-ai/mcp",
          "version": "0.1.4",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "isRequired": true,
              "value": "@florentine-ai/mcp@latest",
              "type": "named",
              "name": "-y"
            }
          ],
          "packageArguments": [
            {
              "description": "The mode to run the MCP server in ('static' or 'dynamic')",
              "isRequired": true,
              "value": "static",
              "type": "named",
              "name": "--mode"
            },
            {
              "description": "Set to true to enable debug logging",
              "format": "boolean",
              "type": "named",
              "name": "--debug"
            },
            {
              "description": "The path to the log file, must be provided if debug is true",
              "format": "filepath",
              "type": "named",
              "name": "--logpath"
            }
          ],
          "environmentVariables": [
            {
              "description": "Your Florentine.ai API key, get it from https://florentine.ai/dashboard",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "FLORENTINE_TOKEN"
            },
            {
              "description": "The LLM service to use, one of 'openai', 'anthropic', 'google' or 'deepseek' (must only be provided if you did not set it in your Florentine.ai account)",
              "format": "string",
              "name": "LLM_SERVICE"
            },
            {
              "description": "Your API key for the LLM service (must only be provided if you did not set it in your Florentine.ai account)",
              "format": "string",
              "isSecret": true,
              "name": "LLM_KEY"
            },
            {
              "description": "Session ID for maintaining server-side context across requests",
              "format": "string",
              "name": "SESSION_ID"
            },
            {
              "description": "Stringified JSON array of return types for the response",
              "format": "string",
              "name": "RETURN_TYPES"
            },
            {
              "description": "Stringified JSON array of values for required inputs keys",
              "format": "string",
              "name": "REQUIRED_INPUTS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T10:37:42.953745Z",
        "updatedAt": "2025-09-19T10:37:42.953745Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.7",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T11:31:50.983916Z",
        "updatedAt": "2025-09-19T11:38:30.021907Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.8",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.8",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T11:35:34.688062Z",
        "updatedAt": "2025-09-19T11:51:13.380614Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.8",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T11:38:30.012332Z",
        "updatedAt": "2025-09-19T12:13:23.265367Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.9",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.9",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T11:51:13.375441Z",
        "updatedAt": "2025-09-19T13:21:42.772287Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.9",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T12:13:23.217248Z",
        "updatedAt": "2025-09-19T13:27:13.291855Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.apify/apify-mcp-server",
      "description": "Apify MCP Server providing access to thousands of web scraping and automation tools from Apify Store",
      "repository": {
        "url": "https://github.com/apify/apify-mcp-server",
        "source": "github"
      },
      "version": "0.4.10",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.apify.com/",
          "headers": [
            {
              "description": "Apify API token for authentication with Apify platform services. For example 'Bearer <apify-api-token>'",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T12:42:08.357511Z",
        "updatedAt": "2025-09-19T13:48:15.372766Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.10",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.10",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T13:21:42.73532Z",
        "updatedAt": "2025-09-26T09:53:32.930134Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.10",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T13:27:13.182402Z",
        "updatedAt": "2025-09-19T13:27:13.182402Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.apify/apify-mcp-server",
      "description": "Apify MCP server provides access to a marketplace for web scraping and data extraction tools.",
      "repository": {
        "url": "https://github.com/apify/apify-mcp-server",
        "source": "github"
      },
      "version": "0.4.15",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.apify.com/",
          "headers": [
            {
              "description": "Apify API token for authentication with Apify platform services. For example 'Bearer <apify-api-token>'",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T13:48:15.323674Z",
        "updatedAt": "2025-09-19T13:48:15.323674Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/anirbanbasu-frankfurtermcp",
      "description": "A MCP server for the Frankfurter API for currency exchange rates.",
      "repository": {
        "url": "https://github.com/anirbanbasu/frankfurtermcp",
        "source": "github"
      },
      "version": "1.13.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@anirbanbasu/frankfurtermcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T14:04:07.846044Z",
        "updatedAt": "2025-09-29T11:56:36.099614Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/PixdataOrg-coderide",
      "description": "CodeRide eliminates the context reset cycle once and for all. Through MCP integration, it seamless…",
      "repository": {
        "url": "https://github.com/PixdataOrg/coderide-mcp",
        "source": "github"
      },
      "version": "0.9.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@PixdataOrg/coderide/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T14:23:37.184036Z",
        "updatedAt": "2025-09-19T14:23:37.184036Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.xorrkaz/cml-mcp",
      "description": "An MCP server that provides access to common Cisco Modeling Labs (CML) operations.",
      "repository": {
        "url": "https://github.com/xorrkaz/cml-mcp",
        "source": "github"
      },
      "version": "0.9.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "cml-mcp",
          "version": "0.9.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "URL for the CML Server",
              "isRequired": true,
              "format": "string",
              "name": "CML_URL"
            },
            {
              "description": "Username for CML authentication",
              "isRequired": true,
              "format": "string",
              "name": "CML_USERNAME"
            },
            {
              "description": "Password for CML authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CML_PASSWORD"
            },
            {
              "description": "Username for authentication to devices running in CML",
              "format": "string",
              "name": "PYATS_USERNAME"
            },
            {
              "description": "Password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_PASSWORD"
            },
            {
              "description": "Enable password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_AUTH_PASS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T15:45:51.269663Z",
        "updatedAt": "2025-09-20T04:37:07.846404Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.YinTokey/mcp_hackernews",
      "description": "MCP server exposing a simple Hacker News search tool (top stories).",
      "repository": {
        "url": "https://github.com/YinTokey/mcp_hackernews",
        "source": "github"
      },
      "version": "0.1.1",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-hackernews",
          "version": "0.1.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T15:56:39.084268Z",
        "updatedAt": "2025-09-19T16:50:55.13034Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.timheuer/sampledotnetmcpserver",
      "description": "Sample .NET MCP Server",
      "repository": {
        "url": "https://github.com/timheuer/sampledotnetmcpserver",
        "source": "github"
      },
      "version": "0.1.49-beta",
      "packages": [
        {
          "registryType": "nuget",
          "identifier": "TimHeuer.SampleDotnetMcpServer",
          "version": "0.1.49-beta",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T16:03:41.816983Z",
        "updatedAt": "2025-09-19T21:00:37.915165Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/pythondev-pro-egw_writings_mcp_server",
      "description": "Search Ellen G. White’s writings by topic or phrase. Retrieve exact references and passages instan…",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@pythondev-pro/egw_writings_mcp_server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T16:18:36.558204Z",
        "updatedAt": "2025-09-19T16:18:36.558204Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.make/mcp-server",
      "description": "MCP server for building, running, and managing Make automations.",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.make.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T16:35:03.495243Z",
        "updatedAt": "2025-09-19T16:35:03.495243Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.YinTokey/mcp_hackernews",
      "description": "MCP server exposing a simple Hacker News search tool (top stories).",
      "repository": {
        "url": "https://github.com/YinTokey/mcp_hackernews",
        "source": "github"
      },
      "version": "0.1.2",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-hackernews",
          "version": "0.1.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T16:50:55.119396Z",
        "updatedAt": "2025-09-19T20:06:35.16264Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/zeta-chain-cli",
      "description": "Create friendly, customizable greetings for any name or audience. Break the ice in demos, onboardi…",
      "repository": {
        "url": "https://github.com/zeta-chain/cli",
        "source": "github",
        "subfolder": "src/mcp"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@zeta-chain/cli/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T16:55:43.436334Z",
        "updatedAt": "2025-09-19T16:55:43.436334Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.andrasfe/vulnicheck",
      "description": "HTTP MCP Server for comprehensive Python vulnerability scanning and security analysis.",
      "repository": {
        "url": "https://github.com/andrasfe/vulnicheck",
        "source": "github"
      },
      "version": "0.1.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/andrasfe/vulnicheck:main",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3000/mcp"
          },
          "environmentVariables": [
            {
              "description": "API key for NIST National Vulnerability Database (increases rate limit from 5 to 50 requests per 30 seconds)",
              "format": "string",
              "isSecret": true,
              "name": "NVD_API_KEY"
            },
            {
              "description": "GitHub token for Advisory Database access (increases rate limit to 5000 requests per hour)",
              "format": "string",
              "isSecret": true,
              "name": "GITHUB_TOKEN"
            },
            {
              "description": "OpenAI API key for LLM-based risk assessment in MCP passthrough operations",
              "format": "string",
              "isSecret": true,
              "name": "OPENAI_API_KEY"
            },
            {
              "description": "Anthropic API key for LLM-based risk assessment (alternative to OpenAI)",
              "format": "string",
              "isSecret": true,
              "name": "ANTHROPIC_API_KEY"
            },
            {
              "description": "Port for MCP HTTP server (default: 3000)",
              "format": "number",
              "name": "MCP_PORT"
            },
            {
              "description": "Cache time-to-live in seconds for vulnerability data (default: 900)",
              "format": "number",
              "name": "CACHE_TTL"
            },
            {
              "description": "Enable HTTP-only mode with MCP client delegation (true/false, default: auto-detect)",
              "format": "string",
              "name": "VULNICHECK_HTTP_ONLY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T18:01:49.485418Z",
        "updatedAt": "2025-09-19T18:01:49.485418Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.statsig/statsig-mcp-server",
      "description": "MCP server for Statsig API - interact with Statsig's feature flags, experiments, and analytics",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://api.statsig.com/v1/mcp",
          "headers": [
            {
              "description": "Statsig Console API key for authentication",
              "isRequired": true,
              "isSecret": true,
              "name": "statsig-api-key"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T18:53:25.028837Z",
        "updatedAt": "2025-09-19T18:53:25.028837Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/blacklotusdev8-test_m",
      "description": "Greet anyone by name with a friendly hello. Scrape webpages to extract content for quick reference…",
      "repository": {
        "url": "https://github.com/blacklotusdev8/test_m",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@blacklotusdev8/test_m/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T19:12:16.602435Z",
        "updatedAt": "2025-09-19T19:12:16.602435Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.YinTokey/mcp_hackernews",
      "description": "MCP server exposing a simple Hacker News search tool (top stories).",
      "repository": {
        "url": "https://github.com/YinTokey/mcp_hackernews",
        "source": "github"
      },
      "version": "1.1.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-hackernews",
          "version": "1.1.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T20:06:35.103561Z",
        "updatedAt": "2025-09-19T20:06:35.103561Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.SonarSource/sonarqube-mcp-server",
      "description": "An MCP server that enables integration with SonarQube Server or Cloud for code quality and security.",
      "repository": {
        "url": "https://github.com/SonarSource/sonarqube-mcp-server",
        "source": "github"
      },
      "version": "0.0.8",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/mcp/sonarqube:sha256:d9dc2f44f4f624bdc5fb5817abc74f6244dd40b2d03036380cd6253eff374ae5",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your SonarQube Server USER token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "SONARQUBE_TOKEN"
            },
            {
              "description": "Your SonarQube Cloud organization key (if using SonarQube Cloud)",
              "format": "string",
              "isSecret": true,
              "name": "SONARQUBE_ORG"
            },
            {
              "description": "Your SonarQube Server URL (if using SonarQube Server)",
              "format": "string",
              "isSecret": true,
              "name": "SONARQUBE_URL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T20:14:16.852443Z",
        "updatedAt": "2025-09-19T20:14:16.852443Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.timheuer/sampledotnetmcpserver",
      "description": "Sample .NET MCP Server",
      "repository": {
        "url": "https://github.com/timheuer/sampledotnetmcpserver",
        "source": "github"
      },
      "version": "0.1.53-beta",
      "packages": [
        {
          "registryType": "nuget",
          "identifier": "TimHeuer.SampleDotnetMcpServer",
          "version": "0.1.53-beta",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T21:00:37.853652Z",
        "updatedAt": "2025-09-22T16:13:17.248943Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.pubnub/mcp-server",
      "description": "PubNub MCP for Real-time messaging. API Access and SDK documentation.",
      "repository": {
        "url": "https://github.com/pubnub/pubnub-mcp-server",
        "source": "github"
      },
      "version": "1.0.106"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-19T21:08:36.5231Z",
        "updatedAt": "2025-09-19T21:08:36.5231Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/blockscout-mcp-server",
      "description": "Provide AI agents and automation tools with contextual access to blockchain data including balance…",
      "repository": {
        "url": "https://github.com/blockscout/mcp-server",
        "source": "github"
      },
      "version": "1.13.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@blockscout/mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T00:50:33.619952Z",
        "updatedAt": "2025-09-20T00:50:33.619952Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/pinkpixel-dev-web-scout-mcp",
      "description": "Search the web and extract clean, readable text from webpages. Process multiple URLs at once to sp…",
      "repository": {
        "url": "https://github.com/pinkpixel-dev/web-scout-mcp",
        "source": "github"
      },
      "version": "1.5.3",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@pinkpixel-dev/web-scout-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T02:41:17.173407Z",
        "updatedAt": "2025-09-20T03:20:23.189856Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.tedfytw1209/mcp-server-EVEfleet",
      "description": "An MCP server that provides tools for EVE Online players to manage their fleets",
      "repository": {
        "url": "https://github.com/tedfytw1209/mcp-server-EVEfleet",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-server-evefleet",
          "version": "0.1.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T02:52:57.271855Z",
        "updatedAt": "2025-09-20T03:21:10.606325Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.GabrielaHdzMicrosoft/mcp-server",
      "description": "An MCP server that provides visual memory and context storage with knowledge graph capabilities",
      "repository": {
        "url": "https://github.com/testing9384/mcp-server",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "visual-memory-context-server",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Path to the memory.json file for knowledge graph storage",
              "format": "string",
              "name": "MEMORY_FILE_PATH"
            },
            {
              "description": "Comma-separated list of directories the server can access, or JSON array format",
              "format": "string",
              "name": "ALLOWED_DIRECTORIES"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T03:14:43.524547Z",
        "updatedAt": "2025-09-20T03:14:43.524547Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/pinkpixel-dev-web-scout-mcp",
      "description": "Search the web and extract clean, readable text from webpages. Process multiple URLs at once to sp…",
      "repository": {
        "url": "https://github.com/pinkpixel-dev/web-scout-mcp",
        "source": "github"
      },
      "version": "1.5.4",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@pinkpixel-dev/web-scout-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T03:20:23.182804Z",
        "updatedAt": "2025-09-20T03:40:04.425108Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.tedfytw1209/mcp-server-EVEfleet",
      "description": "An MCP server that provides tools for EVE Online players to manage their fleets",
      "repository": {
        "url": "https://github.com/tedfytw1209/mcp-server-EVEfleet",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-server-evefleet",
          "version": "0.1.3",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T03:21:10.599411Z",
        "updatedAt": "2025-09-20T15:35:31.256351Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/pinkpixel-dev-web-scout-mcp",
      "description": "Search the web and extract clean, readable text from webpages. Process multiple URLs at once to sp…",
      "repository": {
        "url": "https://github.com/pinkpixel-dev/web-scout-mcp",
        "source": "github"
      },
      "version": "1.5.5",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@pinkpixel-dev/web-scout-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T03:40:04.41882Z",
        "updatedAt": "2025-09-20T03:40:04.41882Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.opencontext-team/mcp-server",
      "description": "An MCP server that provides visual memory and context storage with knowledge graph capabilities",
      "repository": {
        "url": "https://github.com/testing9384/mcp-server",
        "source": "github"
      },
      "version": "1.0.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "visual-memory-context-server",
          "version": "1.0.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Path to the memory.json file for knowledge graph storage",
              "format": "string",
              "name": "MEMORY_FILE_PATH"
            },
            {
              "description": "Comma-separated list of directories the server can access, or JSON array format",
              "format": "string",
              "name": "ALLOWED_DIRECTORIES"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T03:43:17.852241Z",
        "updatedAt": "2025-09-20T03:43:17.852241Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.xorrkaz/cml-mcp",
      "description": "An MCP server that provides access to common Cisco Modeling Labs (CML) operations.",
      "repository": {
        "url": "https://github.com/xorrkaz/cml-mcp",
        "source": "github"
      },
      "version": "0.9.1",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "cml-mcp",
          "version": "0.9.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "URL for the CML Server",
              "isRequired": true,
              "format": "string",
              "name": "CML_URL"
            },
            {
              "description": "Username for CML authentication",
              "isRequired": true,
              "format": "string",
              "name": "CML_USERNAME"
            },
            {
              "description": "Password for CML authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CML_PASSWORD"
            },
            {
              "description": "Username for authentication to devices running in CML",
              "format": "string",
              "name": "PYATS_USERNAME"
            },
            {
              "description": "Password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_PASSWORD"
            },
            {
              "description": "Enable password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_AUTH_PASS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T04:37:07.839681Z",
        "updatedAt": "2025-09-27T13:06:49.501121Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/anirbanbasu-pymcp",
      "description": "Primarily to be used as a template repository for developing MCP servers with FastMCP in Python, P…",
      "repository": {
        "url": "https://github.com/anirbanbasu/pymcp",
        "source": "github"
      },
      "version": "0.1.7",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@anirbanbasu/pymcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T05:41:08.153835Z",
        "updatedAt": "2025-09-20T05:41:08.153835Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ChiR24/unreal-engine-mcp",
      "description": "Production-ready MCP server for Unreal Engine with comprehensive game development tools",
      "repository": {
        "url": "https://github.com/ChiR24/Unreal_mcp.git",
        "source": "github"
      },
      "version": "0.4.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "unreal-engine-mcp-server",
          "version": "0.4.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Unreal Engine host address",
              "value": "127.0.0.1",
              "name": "UE_HOST"
            },
            {
              "description": "Remote Control HTTP port",
              "value": "30010",
              "name": "UE_RC_HTTP_PORT"
            },
            {
              "description": "Remote Control WebSocket port",
              "value": "30020",
              "name": "UE_RC_WS_PORT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T06:29:35.184998Z",
        "updatedAt": "2025-09-28T14:25:16.432207Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.driflyte/driflyte-mcp-server",
      "description": "Driflyte MCP server which lets AI assistants query topic-specific knowledge from web and GitHub.",
      "repository": {
        "url": "https://github.com/serkan-ozal/driflyte-mcp-server",
        "source": "github"
      },
      "version": "0.0.18",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@driflyte/mcp-server",
          "version": "0.0.18",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/mcp"
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/openai"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T09:03:36.622899Z",
        "updatedAt": "2025-09-20T16:12:47.919618Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/ramadasmr-networkcalc-mcp",
      "description": "Look up DNS information for any domain to troubleshoot issues and gather insights. Get fast, relia…",
      "repository": {
        "url": "https://github.com/ramadasmr/networkcalc-mcp",
        "source": "github"
      },
      "version": "1.13.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@ramadasmr/networkcalc-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T10:10:47.321873Z",
        "updatedAt": "2025-09-20T10:10:47.321873Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "",
      "name": "io.github.OtherVibes/mcp-as-a-judge",
      "description": "MCP as a Judge: a behavioral MCP that strengthens AI coding assistants via explicit LLM evaluations",
      "repository": {
        "url": "https://github.com/OtherVibes/mcp-as-a-judge",
        "source": "github"
      },
      "version": "0.3.20",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "mcp-as-a-judge",
          "version": "0.3.20",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T10:35:19.807926Z",
        "updatedAt": "2025-09-20T10:35:19.807926Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.karanb192/reddit-mcp-buddy",
      "description": "Reddit MCP server - browse posts, search content, analyze users.",
      "repository": {},
      "version": "1.1.1",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "reddit-mcp-buddy",
          "version": "1.1.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T10:45:00.29736Z",
        "updatedAt": "2025-09-30T13:25:32.633297Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Synclub-tech/synclub-dxt",
      "description": "SynClub MCP Server for AI-powered comic creation with script generation and image tools",
      "repository": {
        "url": "https://github.com/Synclub-tech/Synclub-dxt",
        "source": "github"
      },
      "version": "0.6.0"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T11:20:51.672216Z",
        "updatedAt": "2025-09-20T11:20:51.672216Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.apple-rag/mcp-server",
      "description": "Apple Developer Documentation with Semantic Search, RAG, and AI reranking for MCP clients",
      "repository": {
        "url": "https://github.com/BingoWon/apple-rag-mcp",
        "source": "github"
      },
      "version": "2.7.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.apple-rag.com",
          "headers": [
            {
              "description": "MCP Token for authentication (optional - free tier available without token)",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T13:08:19.344315Z",
        "updatedAt": "2025-09-20T13:10:26.619072Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.apple-rag/mcp-server",
      "description": "Apple Developer Documentation with Semantic Search, RAG, and AI reranking for MCP clients",
      "repository": {
        "url": "https://github.com/BingoWon/apple-rag-mcp",
        "source": "github"
      },
      "version": "2.8.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.apple-rag.com",
          "headers": [
            {
              "description": "MCP Token for authentication (optional - free tier available without token)",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T13:10:26.610216Z",
        "updatedAt": "2025-09-21T07:40:13.398559Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.schemacrawler/schemacrawler-ai",
      "description": "Enables natural language schema queries — explore tables, keys, procedures, and get SQL help fast",
      "repository": {
        "url": "https://github.com/schemacrawler/SchemaCrawler-AI",
        "source": "github"
      },
      "version": "v16.28.2-1",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/schemacrawler/schemacrawler-ai:v16.28.2-1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Database user name. Can be optional depending on the database connection type.",
              "format": "string",
              "isSecret": true,
              "name": "SCHCRWLR_DATABASE_USER"
            },
            {
              "description": "Database user password. Can be optional depending on the database connection type.",
              "format": "string",
              "isSecret": true,
              "name": "SCHCRWLR_DATABASE_PASSWORD"
            },
            {
              "description": "JDBC URL for database connection. If this is provided, the server, host, port and database are not used.",
              "format": "string",
              "name": "SCHCRWLR_JDBC_URL"
            },
            {
              "description": "SchemaCrawler database plugin, for example, 'sqlserver' or 'sqlite'. Used only if the JDBC URL is not provided.",
              "format": "string",
              "name": "SCHCRWLR_SERVER"
            },
            {
              "description": "Database host. Defaults to localhost. Used only if the JDBC URL is not provided.",
              "format": "string",
              "name": "SCHCRWLR_HOST"
            },
            {
              "description": "Database port. Defaults to the default port for the server type. Used only if the JDBC URL is not provided.",
              "format": "string",
              "name": "SCHCRWLR_PORT"
            },
            {
              "description": "Database to connect to (optional). Used only if the JDBC URL is not provided.",
              "format": "string",
              "name": "SCHCRWLR_DATABASE"
            },
            {
              "description": "How much database metadata to retrieve. Values are 'minimum', 'standard', 'detailed' or 'maximum'.",
              "format": "string",
              "name": "SCHCRWLR_INFO_LEVEL"
            },
            {
              "description": "Logging verbosity level. Values are 'SEVERE', 'WARNING', 'INFO', 'CONFIG', or 'FINE'.",
              "format": "string",
              "name": "SCHCRWLR_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T13:17:42.501613Z",
        "updatedAt": "2025-09-27T01:18:14.979887Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.pab1it0/prometheus-mcp-server",
      "description": "MCP server for Prometheus, enabling AI assistants to query metrics and monitor system health",
      "repository": {
        "url": "https://github.com/pab1it0/prometheus-mcp-server",
        "source": "github"
      },
      "version": "1.2.6",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/pab1it0/prometheus-mcp-server:1.2.6",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Prometheus server URL (e.g., http://localhost:9090)",
              "isRequired": true,
              "format": "string",
              "name": "PROMETHEUS_URL"
            },
            {
              "description": "Username for Prometheus basic authentication",
              "format": "string",
              "name": "PROMETHEUS_USERNAME"
            },
            {
              "description": "Password for Prometheus basic authentication",
              "format": "string",
              "isSecret": true,
              "name": "PROMETHEUS_PASSWORD"
            },
            {
              "description": "Bearer token for Prometheus authentication",
              "format": "string",
              "isSecret": true,
              "name": "PROMETHEUS_TOKEN"
            },
            {
              "description": "Organization ID for multi-tenant Prometheus setups",
              "format": "string",
              "name": "ORG_ID"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T14:17:36.93642Z",
        "updatedAt": "2025-09-21T08:44:02.056361Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/BadRooBot-test_m",
      "description": "Send quick greetings, scrape website content, and generate text or images on demand. Perform web s…",
      "repository": {
        "url": "https://github.com/BadRooBot/test_m",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@BadRooBot/test_m/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T14:41:53.772797Z",
        "updatedAt": "2025-09-20T14:41:53.772797Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/magenie33-quality-dimension-generator",
      "description": "Generate tailored quality criteria and scoring guides from your task descriptions. Refine objectiv…",
      "repository": {
        "url": "https://github.com/magenie33/quality-dimension-generator",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@magenie33/quality-dimension-generator/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T15:11:34.739058Z",
        "updatedAt": "2025-09-20T15:11:34.739058Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.tedfytw1209/mcp-server-EVEfleet",
      "description": "An MCP server that provides tools for EVE Online players to manage their fleets",
      "repository": {
        "url": "https://github.com/tedfytw1209/mcp-server-EVEfleet",
        "source": "github"
      },
      "version": "1.0.2",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-server-evefleet",
          "version": "0.1.4",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T15:35:31.249646Z",
        "updatedAt": "2025-09-20T15:35:31.249646Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/serkan-ozal-driflyte-mcp-server",
      "description": "Discover available topics and explore up-to-date, topic-tagged web content. Search to surface the…",
      "repository": {
        "url": "https://github.com/serkan-ozal/driflyte-mcp-server",
        "source": "github"
      },
      "version": "0.0.18",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@serkan-ozal/driflyte-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T15:36:42.402494Z",
        "updatedAt": "2025-09-20T16:15:36.760975Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.driflyte/driflyte-mcp-server",
      "description": "Driflyte MCP server which lets AI assistants query topic-specific knowledge from web and GitHub.",
      "repository": {
        "url": "https://github.com/serkan-ozal/driflyte-mcp-server",
        "source": "github"
      },
      "version": "0.0.19",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@driflyte/mcp-server",
          "version": "0.0.19",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/mcp"
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/openai"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T16:12:47.912695Z",
        "updatedAt": "2025-09-21T10:31:49.27675Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/devbrother2024-typescript-mcp-server-boilerplate",
      "description": "Kickstart development with a customizable TypeScript template featuring sample tools for greeting,…",
      "repository": {
        "url": "https://github.com/devbrother2024/typescript-mcp-server-boilerplate",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@devbrother2024/typescript-mcp-server-boilerplate/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T16:12:55.711869Z",
        "updatedAt": "2025-09-20T16:12:55.711869Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/serkan-ozal-driflyte-mcp-server",
      "description": "Discover available topics and explore up-to-date, topic-tagged web content. Search to surface the…",
      "repository": {
        "url": "https://github.com/serkan-ozal/driflyte-mcp-server",
        "source": "github"
      },
      "version": "0.0.19",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@serkan-ozal/driflyte-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T16:15:36.753965Z",
        "updatedAt": "2025-09-21T10:34:38.236823Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Nekzus/npm-sentinel-mcp",
      "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "1.8.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@nekzus/mcp-server",
          "version": "1.8.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T17:55:31.190946Z",
        "updatedAt": "2025-09-20T19:44:08.656928Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ubaumann/mkdocs-mcp",
      "description": "An MCP server that provides serves MkDocs as resources.",
      "repository": {
        "url": "https://github.com/ubaumann/mkdocs-mcp",
        "source": "github"
      },
      "version": "0.1.2",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mkdocs-mcp",
          "version": "0.1.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Path to the MkDocs project",
              "isRequired": true,
              "format": "string",
              "name": "MKDOCS_PROJECT_PATH"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T19:14:29.939374Z",
        "updatedAt": "2025-09-20T19:14:29.939374Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/Nekzus-npm-sentinel-mcp",
      "description": "Provide AI-powered real-time analysis and intelligence on NPM packages, including security, depend…",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "{{VERSION}}",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Nekzus/npm-sentinel-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T19:40:51.557718Z",
        "updatedAt": "2025-09-20T20:30:22.469112Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Nekzus/npm-sentinel-mcp",
      "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "1.9.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@nekzus/mcp-server",
          "version": "1.9.0",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T19:44:08.651401Z",
        "updatedAt": "2025-09-20T21:15:29.266179Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/Nekzus-npm-sentinel-mcp",
      "description": "Provide AI-powered real-time analysis and intelligence on NPM packages, including security, depend…",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "1.9.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Nekzus/npm-sentinel-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T20:30:22.451323Z",
        "updatedAt": "2025-09-20T21:15:59.347284Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Nekzus/npm-sentinel-mcp",
      "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "1.11.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@nekzus/mcp-server",
          "version": "1.11.0",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T21:15:29.25986Z",
        "updatedAt": "2025-09-20T21:30:51.466951Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/Nekzus-npm-sentinel-mcp",
      "description": "Provide AI-powered real-time analysis and intelligence on NPM packages, including security, depend…",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "1.10.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Nekzus/npm-sentinel-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T21:15:59.3403Z",
        "updatedAt": "2025-09-20T21:32:48.552Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Nekzus/npm-sentinel-mcp",
      "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "1.11.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@nekzus/mcp-server",
          "version": "1.11.1",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T21:30:51.46118Z",
        "updatedAt": "2025-09-20T22:17:46.118775Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/Nekzus-npm-sentinel-mcp",
      "description": "Provide AI-powered real-time analysis and intelligence on NPM packages, including security, depend…",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "1.11.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Nekzus/npm-sentinel-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T21:32:48.546367Z",
        "updatedAt": "2025-09-20T22:47:38.657177Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Nekzus/npm-sentinel-mcp",
      "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "1.11.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@nekzus/mcp-server",
          "version": "1.11.2",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T22:17:46.112364Z",
        "updatedAt": "2025-09-20T22:27:49.33253Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Nekzus/npm-sentinel-mcp",
      "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "1.11.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@nekzus/mcp-server",
          "version": "1.11.3",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T22:27:49.327157Z",
        "updatedAt": "2025-09-20T22:39:33.775619Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Nekzus/npm-sentinel-mcp",
      "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "1.11.4",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@nekzus/mcp-server",
          "version": "1.11.4",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T22:39:33.769198Z",
        "updatedAt": "2025-09-20T22:45:23.809567Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Nekzus/npm-sentinel-mcp",
      "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "1.11.5",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@nekzus/mcp-server",
          "version": "1.11.5",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T22:45:23.804865Z",
        "updatedAt": "2025-09-20T23:05:10.127914Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/Nekzus-npm-sentinel-mcp",
      "description": "Provide AI-powered real-time analysis and intelligence on NPM packages, including security, depend…",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "1.11.5",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Nekzus/npm-sentinel-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T22:47:38.649029Z",
        "updatedAt": "2025-09-20T23:26:41.758996Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Nekzus/npm-sentinel-mcp",
      "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "1.11.6",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@nekzus/mcp-server",
          "version": "1.11.6",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T23:05:10.12108Z",
        "updatedAt": "2025-09-20T23:15:02.127731Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Nekzus/npm-sentinel-mcp",
      "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "1.11.7",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@nekzus/mcp-server",
          "version": "1.11.7",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T23:15:02.122848Z",
        "updatedAt": "2025-09-20T23:23:20.783979Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Nekzus/npm-sentinel-mcp",
      "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "1.11.8",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@nekzus/mcp-server",
          "version": "1.11.8",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T23:23:20.779153Z",
        "updatedAt": "2025-09-20T23:23:20.779153Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/kaszek-kaszek-attio-mcp",
      "description": "Automate Attio CRM workflows with fast search and bulk operations across companies, people, deals,…",
      "repository": {},
      "version": "0.2.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@kaszek/kaszek-attio-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T23:26:13.627724Z",
        "updatedAt": "2025-09-20T23:26:13.627724Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/Nekzus-npm-sentinel-mcp",
      "description": "Provide AI-powered real-time analysis and intelligence on NPM packages, including security, depend…",
      "repository": {
        "url": "https://github.com/Nekzus/npm-sentinel-mcp",
        "source": "github"
      },
      "version": "1.11.8",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Nekzus/npm-sentinel-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-20T23:26:41.744482Z",
        "updatedAt": "2025-09-20T23:26:41.744482Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/duvomike-mcp",
      "description": "Transform numbers by doubling them and adding 5. Get instant results with a clear breakdown of the…",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@duvomike/mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-21T03:33:47.332418Z",
        "updatedAt": "2025-09-21T03:33:47.332418Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Raistlin82/btp-sap-odata-to-mcp-server-optimized",
      "description": "Enterprise SAP OData to MCP Server with AI capabilities and Cloud Foundry integration",
      "repository": {
        "url": "https://github.com/Raistlin82/btp-sap-odata-to-mcp-server-optimized",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "btp-sap-odata-to-mcp-server",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "URL of the SAP Identity Authentication Service tenant",
              "isRequired": true,
              "format": "string",
              "name": "SAP_IAS_URL"
            },
            {
              "description": "Client ID for the OAuth application in IAS",
              "isRequired": true,
              "format": "string",
              "name": "SAP_IAS_CLIENT_ID"
            },
            {
              "description": "Client Secret for the OAuth application in IAS",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "SAP_IAS_CLIENT_SECRET"
            },
            {
              "description": "Name of the BTP destination used for service discovery",
              "isRequired": true,
              "format": "string",
              "name": "SAP_DESTINATION_NAME"
            },
            {
              "description": "OData discovery mode: pattern, business, whitelist, or all",
              "format": "string",
              "name": "ODATA_DISCOVERY_MODE"
            },
            {
              "description": "Comma-separated patterns to include (pattern mode)",
              "format": "string",
              "name": "ODATA_INCLUDE_PATTERNS"
            },
            {
              "description": "Comma-separated patterns to exclude (pattern mode)",
              "format": "string",
              "name": "ODATA_EXCLUDE_PATTERNS"
            },
            {
              "description": "The port on which the Express server will listen",
              "format": "string",
              "name": "PORT"
            },
            {
              "description": "The application's operating environment",
              "format": "string",
              "name": "NODE_ENV"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-21T04:33:38.866275Z",
        "updatedAt": "2025-09-21T04:33:38.866275Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.pkolawa/mcp-krs-poland",
      "description": "Polish National government's registry of all businesses, foundations, and other legal entities.",
      "repository": {
        "url": "https://github.com/pkolawa/mcp-krs-poland",
        "source": "github"
      },
      "version": "1.0.11",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "krs-poland-mcp-server",
          "version": "1.0.11",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-21T06:20:54.765527Z",
        "updatedAt": "2025-09-21T06:20:54.765527Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.apple-rag/mcp-server",
      "description": "Apple Developer Documentation with Semantic Search, RAG, and AI reranking for MCP clients",
      "repository": {
        "url": "https://github.com/BingoWon/apple-rag-mcp",
        "source": "github"
      },
      "version": "2.9.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.apple-rag.com",
          "headers": [
            {
              "description": "MCP Token for authentication (optional - free tier available without token)",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-21T07:40:13.389326Z",
        "updatedAt": "2025-09-21T07:40:13.389326Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.pab1it0/prometheus-mcp-server",
      "description": "MCP server for Prometheus, enabling AI assistants to query metrics and monitor system health",
      "repository": {
        "url": "https://github.com/pab1it0/prometheus-mcp-server",
        "source": "github"
      },
      "version": "1.3.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/pab1it0/prometheus-mcp-server:1.3.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Prometheus server URL (e.g., http://localhost:9090)",
              "isRequired": true,
              "format": "string",
              "name": "PROMETHEUS_URL"
            },
            {
              "description": "Username for Prometheus basic authentication",
              "format": "string",
              "name": "PROMETHEUS_USERNAME"
            },
            {
              "description": "Password for Prometheus basic authentication",
              "format": "string",
              "isSecret": true,
              "name": "PROMETHEUS_PASSWORD"
            },
            {
              "description": "Bearer token for Prometheus authentication",
              "format": "string",
              "isSecret": true,
              "name": "PROMETHEUS_TOKEN"
            },
            {
              "description": "Organization ID for multi-tenant Prometheus setups",
              "format": "string",
              "name": "ORG_ID"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-21T08:44:02.03981Z",
        "updatedAt": "2025-09-21T08:44:02.03981Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.GoneTone/mcp-server-taiwan-weather",
      "description": "用於取得臺灣中央氣象署 API 資料的 Model Context Protocol (MCP) Server",
      "repository": {
        "url": "https://github.com/GoneTone/mcp-server-taiwan-weather",
        "source": "github"
      },
      "version": "0.1.4",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@gonetone/mcp-server-taiwan-weather",
          "version": "0.1.4",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "您的中央氣象署 API 授權碼。 請前往 https://opendata.cwa.gov.tw/user/authkey，登入後點擊 \"取得授權碼\" 取得。",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CWA_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-21T08:53:08.64452Z",
        "updatedAt": "2025-09-21T08:53:08.64452Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.driflyte/driflyte-mcp-server",
      "description": "Driflyte MCP server which lets AI assistants query topic-specific knowledge from web and GitHub.",
      "repository": {
        "url": "https://github.com/serkan-ozal/driflyte-mcp-server",
        "source": "github"
      },
      "version": "0.0.20",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@driflyte/mcp-server",
          "version": "0.0.20",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/mcp"
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/openai"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-21T10:31:49.21928Z",
        "updatedAt": "2025-09-21T10:31:49.21928Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/serkan-ozal-driflyte-mcp-server",
      "description": "Discover available topics and explore up-to-date, topic-tagged web content. Search to surface the…",
      "repository": {
        "url": "https://github.com/serkan-ozal/driflyte-mcp-server",
        "source": "github"
      },
      "version": "0.0.20",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@serkan-ozal/driflyte-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-21T10:34:38.229629Z",
        "updatedAt": "2025-09-29T21:11:04.768458Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/skr-cloudify-clickup-mcp-server-new",
      "description": "Manage your ClickUp workspace by creating, updating, and organizing tasks, lists, folders, and tag…",
      "repository": {
        "url": "https://github.com/skr-cloudify/clickup-mcp-server-new",
        "source": "github"
      },
      "version": "0.8.5",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@skr-cloudify/clickup-mcp-server-new/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-21T11:44:55.497079Z",
        "updatedAt": "2025-09-21T11:44:55.497079Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.yuna0x0/anilist-mcp",
      "description": "AniList MCP server for accessing AniList API data",
      "repository": {
        "url": "https://github.com/yuna0x0/anilist-mcp",
        "source": "github"
      },
      "version": "1.3.5",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "anilist-mcp",
          "version": "1.3.5",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "AniList API token for authenticated requests",
              "format": "string",
              "isSecret": true,
              "name": "ANILIST_TOKEN"
            }
          ]
        },
        {
          "registryType": "oci",
          "identifier": "ghcr.io/yuna0x0/anilist-mcp:1.3.5",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "AniList API token for authenticated requests",
              "format": "string",
              "isSecret": true,
              "name": "ANILIST_TOKEN"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/yuna0x0/anilist-mcp/releases/download/v1.3.5/anilist-mcp-1.3.5.mcpb",
          "fileSha256": "40a76d2027c01ac43c592bf14a08beed7bdc4faca1d814086d11dbd664efd24a",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "AniList API token for authenticated requests",
              "format": "string",
              "isSecret": true,
              "name": "ANILIST_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-21T13:14:02.752848Z",
        "updatedAt": "2025-09-22T00:19:27.284058Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.kevincogan/demo-mcp-server",
      "description": "Demo server entry for local testing",
      "repository": {
        "url": "https://github.com/kevincogan/demo-mcp-server",
        "source": "github"
      },
      "version": "1.0.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://kevincogan.github.io/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-21T13:59:09.345934Z",
        "updatedAt": "2025-09-22T08:33:07.216891Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "",
      "name": "io.github.Skills03/scrimba-teaching",
      "description": "Interactive programming teacher using Scrimba methodology for 10x retention",
      "repository": {},
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "scrimba-teaching-mcp",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-21T13:59:10.857936Z",
        "updatedAt": "2025-09-21T14:14:53.546905Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.yuna0x0/hackmd-mcp",
      "description": "A Model Context Protocol server for integrating HackMD's note-taking platform with AI assistants.",
      "repository": {
        "url": "https://github.com/yuna0x0/hackmd-mcp",
        "source": "github"
      },
      "version": "1.5.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "hackmd-mcp",
          "version": "1.5.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your HackMD API token for API authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "HACKMD_API_TOKEN"
            },
            {
              "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
              "format": "string",
              "default": "https://api.hackmd.io/v1",
              "name": "HACKMD_API_URL"
            }
          ]
        },
        {
          "registryType": "oci",
          "identifier": "ghcr.io/yuna0x0/hackmd-mcp:1.5.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your HackMD API token for API authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "HACKMD_API_TOKEN"
            },
            {
              "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
              "format": "string",
              "default": "https://api.hackmd.io/v1",
              "name": "HACKMD_API_URL"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/yuna0x0/hackmd-mcp/releases/download/v1.5.1/hackmd-mcp-1.5.1.mcpb",
          "fileSha256": "a994d25dbf19fb2fd783c5daba402bf87fc5a1456e1a11acf6e729984a5524ae",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your HackMD API token for API authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "HACKMD_API_TOKEN"
            },
            {
              "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
              "format": "string",
              "default": "https://api.hackmd.io/v1",
              "name": "HACKMD_API_URL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-21T14:08:58.290592Z",
        "updatedAt": "2025-09-22T00:26:57.638291Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "",
      "name": "io.github.Skills03/scrimba-teaching",
      "description": "Interactive programming teacher using Scrimba methodology for 10x retention",
      "repository": {},
      "version": "1.1.0",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "scrimba-teaching-mcp",
          "version": "1.1.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-21T14:14:53.542851Z",
        "updatedAt": "2025-09-21T14:49:14.681138Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.wordlift/mcp-server",
      "description": "WordLift MCP Server: AI-powered content optimization and semantic analysis",
      "repository": {},
      "version": "1.0.4",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.wordlift.io/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-21T14:24:47.187745Z",
        "updatedAt": "2025-09-21T14:24:47.187745Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "",
      "name": "io.github.Skills03/scrimba-teaching",
      "description": "Interactive programming teacher using Scrimba methodology for 10x retention",
      "repository": {},
      "version": "1.2.0",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "scrimba-teaching-mcp",
          "version": "1.2.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-21T14:49:14.675604Z",
        "updatedAt": "2025-09-21T15:36:57.844409Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Skills03/scrimba-teaching",
      "description": "Interactive programming teacher using Scrimba's methodology for 10x retention",
      "repository": {},
      "version": "2.0.0",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "scrimba-teaching-mcp",
          "version": "2.0.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-21T15:36:57.834955Z",
        "updatedAt": "2025-09-21T15:36:57.834955Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.delorenj/mcp-server-trello",
      "description": "MCP server for Trello boards with rate limiting, type safety, and comprehensive API integration.",
      "repository": {
        "url": "https://github.com/delorenj/mcp-server-trello",
        "source": "github"
      },
      "version": "1.5.5",
      "websiteUrl": "https://delorenj.github.io/mcp-server-trello",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@delorenj/mcp-server-trello",
          "version": "1.5.5",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your Trello API key",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "TRELLO_API_KEY"
            },
            {
              "description": "Your Trello token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "TRELLO_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-21T23:11:11.731179Z",
        "updatedAt": "2025-09-24T08:48:44.278992Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.yuna0x0/anilist-mcp",
      "description": "AniList MCP server for accessing AniList API data",
      "repository": {
        "url": "https://github.com/yuna0x0/anilist-mcp",
        "source": "github"
      },
      "version": "1.3.6",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "anilist-mcp",
          "version": "1.3.6",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "AniList API token for authenticated requests",
              "format": "string",
              "isSecret": true,
              "name": "ANILIST_TOKEN"
            }
          ]
        },
        {
          "registryType": "oci",
          "identifier": "ghcr.io/yuna0x0/anilist-mcp:1.3.6",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "AniList API token for authenticated requests",
              "format": "string",
              "isSecret": true,
              "name": "ANILIST_TOKEN"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/yuna0x0/anilist-mcp/releases/download/v1.3.6/anilist-mcp-1.3.6.mcpb",
          "fileSha256": "76579d74b1f94df9b6203d3a6a11385f22555f0f695dc109c1c6512a7e0c79ff",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "AniList API token for authenticated requests",
              "format": "string",
              "isSecret": true,
              "name": "ANILIST_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-22T00:19:27.27423Z",
        "updatedAt": "2025-09-29T12:44:11.443462Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.yuna0x0/hackmd-mcp",
      "description": "A Model Context Protocol server for integrating HackMD's note-taking platform with AI assistants.",
      "repository": {
        "url": "https://github.com/yuna0x0/hackmd-mcp",
        "source": "github"
      },
      "version": "1.5.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "hackmd-mcp",
          "version": "1.5.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your HackMD API token for API authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "HACKMD_API_TOKEN"
            },
            {
              "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
              "format": "string",
              "default": "https://api.hackmd.io/v1",
              "name": "HACKMD_API_URL"
            }
          ]
        },
        {
          "registryType": "oci",
          "identifier": "ghcr.io/yuna0x0/hackmd-mcp:1.5.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your HackMD API token for API authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "HACKMD_API_TOKEN"
            },
            {
              "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
              "format": "string",
              "default": "https://api.hackmd.io/v1",
              "name": "HACKMD_API_URL"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/yuna0x0/hackmd-mcp/releases/download/v1.5.2/hackmd-mcp-1.5.2.mcpb",
          "fileSha256": "85c9f9930596291f3ba9e0e5d3241cbeac4d5bcc6832845bd7c05348cc5511d5",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your HackMD API token for API authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "HACKMD_API_TOKEN"
            },
            {
              "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
              "format": "string",
              "default": "https://api.hackmd.io/v1",
              "name": "HACKMD_API_URL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-22T00:26:57.630168Z",
        "updatedAt": "2025-09-29T12:42:14.511867Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "dev.composio.rube/rube",
      "description": "Connect your AI to 500+ apps like Gmail, Slack, GitHub, and Notion with streamable HTTP transport.",
      "repository": {
        "url": "https://github.com/ComposioHQ/Rube",
        "source": "github"
      },
      "version": "0.0.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://rube.composio.dev/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-22T06:16:36.167908Z",
        "updatedAt": "2025-09-22T06:16:36.167908Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.kevincogan/demo-mcp-server",
      "description": "Demo server entry for local testing",
      "repository": {
        "url": "https://github.com/kevincogan/demo-mcp-server",
        "source": "github"
      },
      "version": "1.0.3",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://kevincogan.github.io/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-22T08:33:07.198216Z",
        "updatedAt": "2025-09-22T11:43:15.249645Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.jgador/websharp",
      "description": "Search the web and extract article text for LLMs.",
      "repository": {
        "url": "https://github.com/jgador/websharp",
        "source": "github"
      },
      "version": "v0.99.0-rc2",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/jessegador/websharp-mcp:v0.99.0-rc2",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:8081/"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-22T09:09:05.052334Z",
        "updatedAt": "2025-09-22T09:09:05.052334Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.yifancong/rsdoctor",
      "description": "An MCP server that provides build analysis and optimization recommendations for Rspack projects.",
      "repository": {
        "url": "https://github.com/web-infra-dev/rsdoctor",
        "source": "github"
      },
      "version": "0.1.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@rsdoctor/mcp-server",
          "version": "0.1.2-beta.0",
          "runtimeHint": "node",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-22T11:06:11.810761Z",
        "updatedAt": "2025-09-22T11:06:11.810761Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.kevincogan/demo-mcp-server",
      "description": "Demo server entry for local testing",
      "repository": {
        "url": "https://github.com/kevincogan/demo-mcp-server",
        "source": "github"
      },
      "version": "1.0.4",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://kevincogan.github.io/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-22T11:43:15.242713Z",
        "updatedAt": "2025-09-22T11:43:15.242713Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.kevincogan/demo-mcp-server",
      "description": "Demo server entry for local testing",
      "repository": {
        "url": "https://github.com/kevincogan/demo-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://kevincogan.github.io/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-22T11:58:38.187266Z",
        "updatedAt": "2025-09-22T11:58:38.187266Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.kevincogan/demo-mcp-server",
      "description": "Demo server entry for local testing",
      "repository": {
        "url": "https://github.com/kevincogan/demo-mcp-server",
        "source": "github"
      },
      "version": "1.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://kevincogan.github.io/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-22T11:59:44.974869Z",
        "updatedAt": "2025-09-22T11:59:44.974869Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.martymarkenson/postgres-connector",
      "description": "MCP server for querying PostgreSQL databases",
      "repository": {},
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "postgres-connector",
          "version": "1.0.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-22T12:15:43.369455Z",
        "updatedAt": "2025-09-23T12:45:22.907808Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.smartbear/smartbear-mcp",
      "description": "MCP server for AI access to SmartBear tools, including BugSnag, Reflect, API Hub, PactFlow.",
      "repository": {
        "url": "https://github.com/SmartBear/smartbear-mcp",
        "source": "github"
      },
      "version": "0.6.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@smartbear/mcp",
          "version": "0.6.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "BugSnag auth token. Leave empty to disable BugSnag tools. Learn more: https://developer.smartbear.com/smartbear-mcp/docs/bugsnag-integration",
              "isSecret": true,
              "name": "BUGSNAG_AUTH_TOKEN"
            },
            {
              "description": "BugSnag project API key (optional; narrows interactions to a single project). Learn more: https://developer.smartbear.com/smartbear-mcp/docs/bugsnag-integration",
              "name": "BUGSNAG_PROJECT_API_KEY"
            },
            {
              "description": "Reflect API token. Leave empty to disable Reflect tools. Learn more: https://developer.smartbear.com/smartbear-mcp/docs/test-hub-integration",
              "isSecret": true,
              "name": "REFLECT_API_TOKEN"
            },
            {
              "description": "API Hub API key. Leave empty to disable API Hub tools. Learn more: https://developer.smartbear.com/smartbear-mcp/docs/api-hub-integration",
              "isSecret": true,
              "name": "API_HUB_API_KEY"
            },
            {
              "description": "PactFlow/Pact Broker base URL. Leave empty to disable Pact tools. Learn more: https://developer.smartbear.com/smartbear-mcp/docs/contract-testing-with-pactflow",
              "name": "PACT_BROKER_BASE_URL"
            },
            {
              "description": "PactFlow authentication token. Learn more: https://developer.smartbear.com/smartbear-mcp/docs/contract-testing-with-pactflow",
              "isSecret": true,
              "name": "PACT_BROKER_TOKEN"
            },
            {
              "description": "Pact Broker username (alternative to token). Learn more: https://developer.smartbear.com/smartbear-mcp/docs/contract-testing-with-pactflow",
              "name": "PACT_BROKER_USERNAME"
            },
            {
              "description": "Pact Broker password (alternative to token). Learn more: https://developer.smartbear.com/smartbear-mcp/docs/contract-testing-with-pactflow",
              "isSecret": true,
              "name": "PACT_BROKER_PASSWORD"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-22T12:40:01.38619Z",
        "updatedAt": "2025-09-22T12:40:01.38619Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.timheuer/sampledotnetmcpserver",
      "description": "Sample .NET MCP Server",
      "repository": {
        "url": "https://github.com/timheuer/sampledotnetmcpserver",
        "source": "github"
      },
      "version": "0.1.56-beta-g9538a23d37",
      "packages": [
        {
          "registryType": "nuget",
          "registryBaseUrl": "https://api.nuget.org",
          "identifier": "TimHeuer.SampleDotnetMcpServer",
          "version": "0.1.56-beta-g9538a23d37",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-22T16:13:17.246046Z",
        "updatedAt": "2025-09-22T17:04:35.121527Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.nickzren/opentargets",
      "description": "Open Targets MCP server for targets, diseases, drugs, variants, and evidence",
      "repository": {
        "url": "https://github.com/nickzren/opentargets-mcp",
        "source": "github",
        "id": "984363568"
      },
      "version": "0.2.0",
      "websiteUrl": "https://nickzren.github.io/opentargets-mcp/",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "opentargets-mcp",
          "version": "0.2.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-22T16:27:58.086743Z",
        "updatedAt": "2025-09-22T16:27:58.086743Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.timheuer/sampledotnetmcpserver",
      "description": "Sample .NET MCP Server",
      "repository": {
        "url": "https://github.com/timheuer/sampledotnetmcpserver",
        "source": "github"
      },
      "version": "0.1.57-beta",
      "packages": [
        {
          "registryType": "nuget",
          "registryBaseUrl": "https://api.nuget.org",
          "identifier": "TimHeuer.SampleDotnetMcpServer",
          "version": "0.1.57-beta",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-22T17:04:35.115505Z",
        "updatedAt": "2025-09-22T17:04:35.115505Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Lungshot/ninjaone",
      "description": "MCP server for NinjaONE RMM with device management, monitoring, and automation",
      "repository": {},
      "version": "1.2.9"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-22T17:51:28.941427Z",
        "updatedAt": "2025-09-22T17:51:28.941427Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.proxylink-mcp/mcp-server",
      "description": "ProxyLink MCP server for finding and booking home service professionals",
      "repository": {},
      "version": "2.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://proxylink-mcp.com"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-22T18:02:54.12403Z",
        "updatedAt": "2025-09-22T18:02:54.12403Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.gibsonai/mcp",
      "description": "GibsonAI MCP server: manage your databases with natural language",
      "repository": {
        "url": "https://github.com/gibsonai/mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.gibsonai.com/"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-22T18:43:05.221834Z",
        "updatedAt": "2025-09-22T18:43:05.221834Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.MR901/plots-mcp",
      "description": "MCP server for data visualization with Mermaid charts.",
      "repository": {
        "url": "https://github.com/MR901/plots-mcp",
        "source": "github"
      },
      "version": "0.0.1",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-plots",
          "version": "0.0.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-22T19:25:51.84317Z",
        "updatedAt": "2025-09-22T19:25:51.84317Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.xcodebuildmcp/XcodeBuildMCP",
      "description": "XcodeBuildMCP provides tools for Xcode project management, simulator management, and app utilities.",
      "repository": {
        "url": "https://github.com/cameroncooke/XcodeBuildMCP",
        "source": "github",
        "id": "945551361"
      },
      "version": "1.14.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "xcodebuildmcp",
          "version": "1.14.1",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Enable experimental xcodemake incremental builds (true/false or 1/0).",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false",
                "1",
                "0"
              ],
              "name": "INCREMENTAL_BUILDS_ENABLED"
            },
            {
              "description": "Enable AI-powered dynamic tool discovery to load only relevant workflows.",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "XCODEBUILDMCP_DYNAMIC_TOOLS"
            },
            {
              "description": "Comma-separated list of workflows to load in Static Mode (e.g., 'simulator,device,project-discovery').",
              "format": "string",
              "name": "XCODEBUILDMCP_ENABLED_WORKFLOWS"
            },
            {
              "description": "Disable Sentry error reporting (preferred flag).",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "XCODEBUILDMCP_SENTRY_DISABLED"
            },
            {
              "description": "Enable verbose debug logging from the server.",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "XCODEBUILDMCP_DEBUG"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-22T20:19:27.621247Z",
        "updatedAt": "2025-09-22T20:19:27.621247Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.close/close-mcp",
      "description": "Close CRM to manage your sales pipeline. Learn more at https://close.com or https://mcp.close.com",
      "repository": {},
      "version": "1.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.close.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-22T21:07:57.60259Z",
        "updatedAt": "2025-09-22T21:07:57.60259Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.findyourfivepm/mcp-server",
      "description": "Discover cities where it's currently 5PM around the world with timezone and location data.",
      "repository": {},
      "version": "1.0.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.findyourfivepm.com"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-23T00:32:16.764241Z",
        "updatedAt": "2025-09-23T00:32:16.764241Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Lyellr88/marm-mcp-server",
      "description": "Universal MCP Server with advanced AI memory capabilities and semantic search.",
      "repository": {
        "url": "https://github.com/Lyellr88/MARM-Systems",
        "source": "github"
      },
      "version": "2.2.5",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "marm-mcp-server",
          "version": "2.2.5",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "oci",
          "identifier": "docker.io/lyellr88/marm-mcp-server:2.2.5",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-23T06:50:35.598481Z",
        "updatedAt": "2025-09-23T06:50:35.598481Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.biodnd/agent-fin",
      "description": "Agent Fin: finance MCP server with market data tools",
      "repository": {
        "url": "https://github.com/markchiang/go-agents",
        "source": "github",
        "subfolder": "src/go_agents/agents/fin"
      },
      "version": "0.1.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://agent-fin.biodnd.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-23T08:26:54.846586Z",
        "updatedAt": "2025-09-23T09:08:15.445609Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.biodnd/agent-ip",
      "description": "Agent IP: MCP server with patents search tools",
      "repository": {
        "url": "https://github.com/markchiang/go-agents",
        "source": "github",
        "subfolder": "src/go_agents/agents/ip"
      },
      "version": "0.1.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://agent-ip.biodnd.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-23T08:27:01.316624Z",
        "updatedAt": "2025-09-23T09:08:13.513992Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.biodnd/agent-press",
      "description": "Agent Press: news MCP server streaming company headlines",
      "repository": {
        "url": "https://github.com/markchiang/go-agents",
        "source": "github",
        "subfolder": "src/go_agents/agents/press"
      },
      "version": "0.1.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://agent-press.biodnd.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-23T08:27:08.049033Z",
        "updatedAt": "2025-09-23T09:08:14.84818Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.iworkist/btcmcp",
      "description": "An MCP server that provides Bitcoin price data from Binance API",
      "repository": {
        "url": "https://github.com/iworkist/btcmcp",
        "source": "github"
      },
      "version": "0.1.2",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "btcmcp",
          "version": "0.1.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-23T08:31:39.293572Z",
        "updatedAt": "2025-09-23T08:31:39.293572Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.GitHub30/qiita-mcp-server",
      "description": "Publish articles to Qiita via MCP tools. Minimal, fast, and focused on Qiita authoring.",
      "repository": {
        "url": "https://github.com/GitHub30/qiita-mcp-server",
        "source": "github"
      },
      "version": "0.1.0"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-23T08:59:51.414173Z",
        "updatedAt": "2025-09-23T08:59:51.414173Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.GitHub30/zenn-mcp-server",
      "description": "MCP server that posts to Zenn.",
      "repository": {
        "url": "https://github.com/GitHub30/zenn-mcp-server",
        "source": "github"
      },
      "version": "0.1.0"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-23T09:04:05.123481Z",
        "updatedAt": "2025-09-23T09:04:05.123481Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.GitHub30/note-mcp-server",
      "description": "MCP server for note.com: create, edit and retrieve posts.",
      "repository": {
        "url": "https://github.com/GitHub30/note-mcp-server",
        "source": "github"
      },
      "version": "0.1.0"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-23T09:07:31.81627Z",
        "updatedAt": "2025-09-23T09:07:31.81627Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.biodnd/agent-ip",
      "description": "Agent IP: MCP server with patents search tools",
      "repository": {
        "url": "https://github.com/markchiang/go-agents",
        "source": "github",
        "subfolder": "src/go_agents/agents/ip"
      },
      "version": "0.1.1",
      "remotes": [
        {
          "type": "sse",
          "url": "https://agent-ip.biodnd.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-23T09:08:13.488087Z",
        "updatedAt": "2025-09-23T09:47:07.386821Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.biodnd/agent-press",
      "description": "Agent Press: news MCP server streaming company headlines",
      "repository": {
        "url": "https://github.com/markchiang/go-agents",
        "source": "github",
        "subfolder": "src/go_agents/agents/press"
      },
      "version": "0.1.1",
      "remotes": [
        {
          "type": "sse",
          "url": "https://agent-press.biodnd.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-23T09:08:14.844607Z",
        "updatedAt": "2025-09-23T09:47:04.199964Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.biodnd/agent-fin",
      "description": "Agent Fin: finance MCP server with market data tools",
      "repository": {
        "url": "https://github.com/markchiang/go-agents",
        "source": "github",
        "subfolder": "src/go_agents/agents/fin"
      },
      "version": "0.1.1",
      "remotes": [
        {
          "type": "sse",
          "url": "https://agent-fin.biodnd.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-23T09:08:15.442472Z",
        "updatedAt": "2025-09-23T09:47:11.445954Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.MR901/mcp-plots",
      "description": "MCP server for data visualization with Mermaid charts.",
      "repository": {
        "url": "https://github.com/MR901/mcp-plots",
        "source": "github"
      },
      "version": "0.0.2",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-plots",
          "version": "0.0.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-23T09:17:58.154974Z",
        "updatedAt": "2025-09-24T12:22:55.556924Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.biodnd/agent-press",
      "description": "Agent Press: news MCP server streaming company headlines",
      "repository": {
        "url": "https://github.com/markchiang/go-agents",
        "source": "github",
        "subfolder": "src/go_agents/agents/press"
      },
      "version": "0.1.2",
      "remotes": [
        {
          "type": "sse",
          "url": "https://agent-press.biodnd.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-23T09:47:04.193457Z",
        "updatedAt": "2025-09-23T09:47:04.193457Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.biodnd/agent-ip",
      "description": "Agent IP: MCP server with patents search tools",
      "repository": {
        "url": "https://github.com/markchiang/go-agents",
        "source": "github",
        "subfolder": "src/go_agents/agents/ip"
      },
      "version": "0.1.2",
      "remotes": [
        {
          "type": "sse",
          "url": "https://agent-ip.biodnd.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-23T09:47:07.378272Z",
        "updatedAt": "2025-09-23T09:47:07.378272Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.biodnd/agent-fin",
      "description": "Agent Fin: finance MCP server with market data tools",
      "repository": {
        "url": "https://github.com/markchiang/go-agents",
        "source": "github",
        "subfolder": "src/go_agents/agents/fin"
      },
      "version": "0.1.2",
      "remotes": [
        {
          "type": "sse",
          "url": "https://agent-fin.biodnd.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-23T09:47:11.441639Z",
        "updatedAt": "2025-09-23T09:47:11.441639Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.nrwl/nx-console",
      "description": "A Model Context Protocol server implementation for Nx",
      "repository": {
        "url": "https://github.com/nrwl/nx-console",
        "source": "github"
      },
      "version": "0.6.12",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "nx-mcp",
          "version": "0.6.12",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-23T09:55:22.303227Z",
        "updatedAt": "2025-09-23T09:55:22.303227Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.wix/mcp",
      "description": "A Model Context Protocol server for Wix AI tools",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.wix.com/sse"
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.wix.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-23T12:39:56.865011Z",
        "updatedAt": "2025-09-23T12:39:56.865011Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.martymarkenson/postgres-connector",
      "description": "MCP server for querying PostgreSQL databases",
      "repository": {},
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "postgres-connector",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-23T12:45:22.905331Z",
        "updatedAt": "2025-09-25T21:59:51.449878Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.zomato/mcp",
      "description": "An MCP server that exposes functionalities to use Zomato's services.",
      "repository": {
        "url": "https://github.com/Zomato/mcp-server-manifest",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp-server.zomato.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-23T13:25:48.732533Z",
        "updatedAt": "2025-09-23T13:25:48.732533Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ptyagiegnyte/egnyte-mcp-server",
      "description": "Official Egnyte MCP Server for AI integration with document search, analysis, and collaboration.",
      "repository": {
        "url": "https://github.com/egnyte/mcp-server",
        "source": "github"
      },
      "version": "1.0.0"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-23T14:34:56.265623Z",
        "updatedAt": "2025-09-23T14:34:56.265623Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ptyagiegnyte/egnyte-remote",
      "description": "Secure integration between AI tools and Egnyte content with search, analysis, and workflow tools.",
      "repository": {},
      "version": "1.0.0"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-23T15:04:02.67593Z",
        "updatedAt": "2025-09-23T15:07:22.510126Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ptyagiegnyte/egnyte-remote",
      "description": "Secure integration between AI tools and Egnyte content with search, analysis, and workflow tools.",
      "repository": {},
      "version": "1.0.1"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-23T15:07:22.504595Z",
        "updatedAt": "2025-09-23T15:07:22.504595Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.neverinfamous/sqlite-mcp-server",
      "description": "SQLite MCP server with 73 tools for JSONB, full-text search, geospatial, and analytics.",
      "repository": {},
      "version": "2.6.0"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-23T23:52:16.05913Z",
        "updatedAt": "2025-09-23T23:52:16.05913Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.neverinfamous/memory-journal-mcp",
      "description": "Developer project journal with Git context, semantic search, and 7 specialized tools.",
      "repository": {},
      "version": "1.0.0"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-24T00:24:51.574493Z",
        "updatedAt": "2025-09-24T00:24:51.574493Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.iunera/druid-mcp-server",
      "description": "AI-powered MCP server for Apache Druid cluster management and analytic",
      "repository": {
        "url": "https://github.com/iunera/druid-mcp-server",
        "source": "github"
      },
      "version": "1.2.1",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/iunera/druid-mcp-server:1.2.1",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Druid router URL for connecting to the Druid cluster",
              "format": "string",
              "name": "DRUID_ROUTER_URL"
            },
            {
              "description": "Username for Druid authentication (optional)",
              "format": "string",
              "name": "DRUID_AUTH_USERNAME"
            },
            {
              "description": "Password for Druid authentication (optional)",
              "format": "string",
              "name": "DRUID_AUTH_PASSWORD"
            },
            {
              "description": "Enable SSL/TLS support for Druid connections",
              "format": "boolean",
              "name": "DRUID_SSL_ENABLED"
            },
            {
              "description": "Skip SSL certificate verification (for development/testing only)",
              "format": "boolean",
              "name": "DRUID_SSL_SKIP_VERIFICATION"
            },
            {
              "description": "Enable read-only mode (only GET requests and SQL queries allowed)",
              "format": "boolean",
              "name": "DRUID_MCP_READONLY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-24T05:52:38.477091Z",
        "updatedAt": "2025-09-24T07:04:32.175442Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.pkolawa/krs-poland-mcp-server",
      "description": "Polish National registry of businesses and other legal entities",
      "repository": {
        "url": "https://github.com/pkolawa/krs-poland-mcp-server",
        "source": "github"
      },
      "version": "1.0.17",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "krs-poland-mcp-server",
          "version": "1.0.17",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-24T06:35:32.426768Z",
        "updatedAt": "2025-09-24T06:35:32.426768Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.iunera/druid-mcp-server",
      "description": "AI-powered MCP server for Apache Druid cluster management and analytic",
      "repository": {
        "url": "https://github.com/iunera/druid-mcp-server",
        "source": "github"
      },
      "version": "1.2.2",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/iunera/druid-mcp-server:1.2.2",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Druid router URL for connecting to the Druid cluster",
              "format": "string",
              "name": "DRUID_ROUTER_URL"
            },
            {
              "description": "Username for Druid authentication (optional)",
              "format": "string",
              "name": "DRUID_AUTH_USERNAME"
            },
            {
              "description": "Password for Druid authentication (optional)",
              "format": "string",
              "name": "DRUID_AUTH_PASSWORD"
            },
            {
              "description": "Enable SSL/TLS support for Druid connections",
              "format": "boolean",
              "name": "DRUID_SSL_ENABLED"
            },
            {
              "description": "Skip SSL certificate verification (for development/testing only)",
              "format": "boolean",
              "name": "DRUID_SSL_SKIP_VERIFICATION"
            },
            {
              "description": "Enable read-only mode (only GET requests and SQL queries allowed)",
              "format": "boolean",
              "name": "DRUID_MCP_READONLY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-24T07:04:32.170773Z",
        "updatedAt": "2025-09-26T10:12:11.960195Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ChromeDevTools/chrome-devtools-mcp",
      "description": "MCP server for Chrome DevTools",
      "repository": {
        "url": "https://github.com/ChromeDevTools/chrome-devtools-mcp",
        "source": "github"
      },
      "version": "0.2.6",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "chrome-devtools-mcp",
          "version": "0.2.6",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-24T08:32:44.486461Z",
        "updatedAt": "2025-09-24T12:57:07.92043Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.delorenj/mcp-server-trello",
      "description": "MCP server for Trello boards with rate limiting, type safety, and comprehensive API integration.",
      "repository": {
        "url": "https://github.com/delorenj/mcp-server-trello",
        "source": "github"
      },
      "version": "1.5.6",
      "websiteUrl": "https://delorenj.github.io/mcp-server-trello",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@delorenj/mcp-server-trello",
          "version": "1.5.6",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your Trello API key",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "TRELLO_API_KEY"
            },
            {
              "description": "Your Trello token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "TRELLO_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-24T08:48:44.26804Z",
        "updatedAt": "2025-09-24T08:48:44.26804Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.jztan/redmine-mcp-server",
      "description": "Production-ready MCP server for Redmine with security, pagination, and enterprise features",
      "repository": {
        "url": "https://github.com/jztan/redmine-mcp-server",
        "source": "github"
      },
      "version": "0.4.4",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "redmine-mcp-server",
          "version": "0.4.4",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-24T11:06:13.143885Z",
        "updatedAt": "2025-09-24T12:09:39.854763Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.jztan/redmine-mcp-server",
      "description": "Production-ready MCP server for Redmine with security, pagination, and enterprise features",
      "repository": {
        "url": "https://github.com/jztan/redmine-mcp-server",
        "source": "github"
      },
      "version": "0.4.5",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "redmine-mcp-server",
          "version": "0.4.5",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "URL of your Redmine server (e.g., https://your-redmine-server.com)",
              "isRequired": true,
              "format": "string",
              "name": "REDMINE_URL"
            },
            {
              "description": "Redmine username for authentication (alternative to API key)",
              "format": "string",
              "name": "REDMINE_USERNAME"
            },
            {
              "description": "Redmine password for authentication (alternative to API key)",
              "format": "string",
              "isSecret": true,
              "name": "REDMINE_PASSWORD"
            },
            {
              "description": "Redmine API key for authentication (alternative to username/password)",
              "format": "string",
              "isSecret": true,
              "name": "REDMINE_API_KEY"
            },
            {
              "description": "Host address for the MCP server (default: 0.0.0.0)",
              "format": "string",
              "default": "0.0.0.0",
              "name": "SERVER_HOST"
            },
            {
              "description": "Port for the MCP server (default: 8000)",
              "format": "integer",
              "default": "8000",
              "name": "SERVER_PORT"
            },
            {
              "description": "Public hostname for file download URLs (default: localhost)",
              "format": "string",
              "default": "localhost",
              "name": "PUBLIC_HOST"
            },
            {
              "description": "Public port for file download URLs (default: 8000)",
              "format": "integer",
              "default": "8000",
              "name": "PUBLIC_PORT"
            },
            {
              "description": "Directory for storing downloaded attachments (default: ./attachments)",
              "format": "string",
              "default": "./attachments",
              "name": "ATTACHMENTS_DIR"
            },
            {
              "description": "Enable automatic cleanup of expired files (default: true)",
              "format": "boolean",
              "default": "true",
              "name": "AUTO_CLEANUP_ENABLED"
            },
            {
              "description": "Interval between cleanup runs in minutes (default: 10)",
              "format": "integer",
              "default": "10",
              "name": "CLEANUP_INTERVAL_MINUTES"
            },
            {
              "description": "Default expiry time for attachments in minutes (default: 60)",
              "format": "integer",
              "default": "60",
              "name": "ATTACHMENT_EXPIRES_MINUTES"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-24T12:09:39.852728Z",
        "updatedAt": "2025-09-24T12:09:39.852728Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.SamYuan1990/i18n-agent-action",
      "description": "An i18n github action for language translate",
      "repository": {},
      "version": "mcp",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/SamYuan1990/i18n-agent-action:mcp",
          "runtimeHint": "docker",
          "transport": {
            "type": "sse",
            "url": "https://example.com:8080/sse"
          },
          "runtimeArguments": [
            {
              "description": "Port mapping from host to container",
              "value": "8080:8080",
              "type": "named",
              "name": "-p"
            },
            {
              "description": "API key for the i18n service",
              "value": "api_key={api_key}",
              "variables": {
                "api_key": {
                  "description": "Your API key for the translation service",
                  "isRequired": true,
                  "format": "string",
                  "isSecret": true
                }
              },
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Volume mount for model files",
              "value": "{models_path}:/app/models",
              "variables": {
                "models_path": {
                  "description": "Path to your models directory on the host",
                  "isRequired": true,
                  "format": "filepath",
                  "default": "/path/to/your/models"
                }
              },
              "type": "named",
              "name": "-v"
            },
            {
              "description": "Encoder model file path",
              "value": "encoder={encoder_file}",
              "variables": {
                "encoder_file": {
                  "description": "Encoder model file name",
                  "isRequired": true,
                  "format": "string",
                  "default": "/app/models/your-encoder.onnx"
                }
              },
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Decoder model file path",
              "value": "decoder={decoder_file}",
              "variables": {
                "decoder_file": {
                  "description": "Decoder model file name",
                  "isRequired": true,
                  "format": "string",
                  "default": "/app/models/your-decoder.onnx"
                }
              },
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Tokens model file path",
              "value": "tokens={tokens_file}",
              "variables": {
                "tokens_file": {
                  "description": "Tokens model file name",
                  "isRequired": true,
                  "format": "string",
                  "default": "/app/models/your-tokens.onnx"
                }
              },
              "type": "named",
              "name": "-e"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-24T12:17:46.198378Z",
        "updatedAt": "2025-09-24T12:17:46.198378Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.MR901/mcp-plots",
      "description": "MCP server for data visualization with Mermaid charts.",
      "repository": {
        "url": "https://github.com/MR901/mcp-plots",
        "source": "github"
      },
      "version": "0.0.3",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-plots",
          "version": "0.0.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-24T12:22:55.555053Z",
        "updatedAt": "2025-09-24T12:22:55.555053Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ChromeDevTools/chrome-devtools-mcp",
      "description": "MCP server for Chrome DevTools",
      "repository": {
        "url": "https://github.com/ChromeDevTools/chrome-devtools-mcp",
        "source": "github"
      },
      "version": "0.2.7",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "chrome-devtools-mcp",
          "version": "0.2.7",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-24T12:57:07.916239Z",
        "updatedAt": "2025-09-25T16:53:34.191488Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.kemalersin/fonparam-mcp",
      "description": "MCP server for FonParam API - Turkish mutual funds data",
      "repository": {
        "url": "https://github.com/kemalersin/fonparam-mcp",
        "source": "github"
      },
      "version": "1.0.4",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "fonparam-mcp",
          "version": "1.0.4",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-24T13:05:56.655095Z",
        "updatedAt": "2025-09-24T13:05:56.655095Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.snyk/mcp",
      "description": "Easily find and fix security issues in your applications leveraging Snyk platform capabilities.",
      "repository": {
        "url": "https://github.com/snyk/snyk-ls",
        "source": "github",
        "subfolder": "mcp_extension"
      },
      "version": "1.1299.1",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "snyk",
          "version": "1.1299.1",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "mcp",
              "type": "positional"
            },
            {
              "value": "stdio",
              "type": "named",
              "name": "-t"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-24T13:33:59.91526Z",
        "updatedAt": "2025-09-24T13:33:59.91526Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.srikrishna235/scrimba-teaching-mcp",
      "description": "Unified MCP for Scrimba interactive programming education with visual learning",
      "repository": {},
      "version": "3.0.1",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "scrimba-teaching-mcp",
          "version": "3.0.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-24T14:46:53.165686Z",
        "updatedAt": "2025-09-24T14:46:53.165686Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.CodeLogicIncEngineering/codelogic-mcp-server",
      "description": "An MCP Server to utilize Codelogic's rich software dependency data in your AI programming assistant.",
      "repository": {
        "url": "https://github.com/CodeLogicIncEngineering/codelogic-mcp-server",
        "source": "github"
      },
      "version": "1.0.11",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "codelogic-mcp-server",
          "version": "1.0.11",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "url to the CodeLogic server e.g. https://myco.app.codelogic.com",
              "format": "string",
              "name": "CODELOGIC_SERVER_HOST"
            },
            {
              "description": "CodeLogic server username",
              "format": "string",
              "name": "CODELOGIC_USERNAME"
            },
            {
              "description": "CodeLogic server password",
              "format": "string",
              "name": "CODELOGIC_PASSWORD"
            },
            {
              "description": "the workspace name that your code is scanned into",
              "format": "string",
              "name": "CODELOGIC_WORKSPACE_NAME"
            },
            {
              "description": "When enabled, additional debug files such as timing_log.txt and impact_data*.json will be generated. Defaults to false",
              "format": "string",
              "name": "CODELOGIC_DEBUG_MODE"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-24T14:54:45.047401Z",
        "updatedAt": "2025-09-24T14:54:45.047401Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "co.pipeboard/meta-ads-mcp",
      "description": "Facebook / Meta Ads automation with AI: analyze performance, test creatives, optimize spend.",
      "repository": {},
      "version": "1.0.11",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.pipeboard.co/meta-ads-mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-24T15:11:32.888511Z",
        "updatedAt": "2025-09-24T16:14:42.455797Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "net.todoist/mcp",
      "description": "Official Todoist MCP server for AI assistants to manage tasks, projects, and workflows.",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://ai.todoist.net/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-24T15:27:34.540663Z",
        "updatedAt": "2025-09-24T15:27:34.540663Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "co.pipeboard/meta-ads-mcp",
      "description": "Facebook / Meta Ads automation with AI: analyze performance, test creatives, optimize spend.",
      "repository": {},
      "version": "1.0.12",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "meta-ads-mcp",
          "version": "1.0.12",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.pipeboard.co/meta-ads-mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-24T16:14:42.437857Z",
        "updatedAt": "2025-09-24T16:24:17.273563Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "co.pipeboard/meta-ads-mcp",
      "description": "Facebook / Meta Ads automation with AI: analyze performance, test creatives, optimize spend.",
      "repository": {},
      "version": "1.0.13",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "meta-ads-mcp",
          "version": "1.0.13",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.pipeboard.co/meta-ads-mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-24T16:24:17.268236Z",
        "updatedAt": "2025-09-24T16:24:17.268236Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.redpanda/docs-mcp",
      "description": "Get authoritative answers to questions about Redpanda.",
      "repository": {
        "url": "https://github.com/redpanda-data/docs-site",
        "source": "github",
        "subfolder": "netlify"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://docs.redpanda.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-24T16:34:00.228681Z",
        "updatedAt": "2025-09-24T16:34:00.228681Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.jcucci/dotnet-sherlock-mcp",
      "description": ".NET assembly introspection MCP server with advanced reflection and type analysis capabilities",
      "repository": {
        "url": "https://github.com/jcucci/dotnet-sherlock-mcp",
        "source": "github"
      },
      "version": "2.3.0",
      "packages": [
        {
          "registryType": "nuget",
          "identifier": "Sherlock.MCP.Server",
          "version": "2.3.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-24T21:21:37.075081Z",
        "updatedAt": "2025-09-24T21:21:37.075081Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.blockscout/mcp-server",
      "description": "MCP server for Blockscout",
      "repository": {
        "url": "https://github.com/blockscout/mcp-server",
        "source": "github"
      },
      "version": "0.10.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.blockscout.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-24T21:24:00.159185Z",
        "updatedAt": "2025-09-24T21:24:00.159185Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.vfarcic/dot-ai",
      "description": "AI-powered development platform for Kubernetes deployments and intelligent automation",
      "repository": {
        "url": "https://github.com/vfarcic/dot-ai",
        "source": "github"
      },
      "version": "0.100.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@vfarcic/dot-ai",
          "version": "0.100.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-24T21:49:38.605228Z",
        "updatedAt": "2025-09-28T16:21:23.447925Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.blockscout/mcp-server",
      "description": "MCP server for Blockscout",
      "repository": {
        "url": "https://github.com/blockscout/mcp-server",
        "source": "github"
      },
      "version": "0.11.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.blockscout.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-25T03:53:22.145546Z",
        "updatedAt": "2025-09-25T03:53:22.145546Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.srikrishna235/scrimba-teaching-mcp",
      "description": "Unified MCP for Scrimba's interactive programming education with visual learning",
      "repository": {},
      "version": "3.0.2",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "scrimba-teaching-mcp",
          "version": "3.0.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-25T05:38:56.28055Z",
        "updatedAt": "2025-09-25T05:38:56.28055Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.srikrishna235/scrimba-teaching-mcp",
      "description": "Unified MCP for Scrimba's interactive programming education with visual learning",
      "repository": {},
      "version": "3.0.3",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "scrimba-teaching-mcp",
          "version": "3.0.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-25T06:06:17.156575Z",
        "updatedAt": "2025-09-25T06:06:17.156575Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.srikrishna235/scrimba-teaching-mcp",
      "description": "Unified MCP for Scrimba's interactive programming education with visual learning",
      "repository": {},
      "version": "3.0.4",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "scrimba-teaching-mcp",
          "version": "3.0.4",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-25T06:09:38.832091Z",
        "updatedAt": "2025-09-25T06:09:38.832091Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "net.singular/mcp-server",
      "description": "Marketing intelligence MCP server providing campaign performance data and analytics tools.",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.singular.net/mcp-server/mcp"
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.singular.net/mcp-server/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-25T09:51:48.507426Z",
        "updatedAt": "2025-09-25T09:51:48.507426Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.alex-feel/mcp-context-server",
      "description": "An MCP server that provides persistent multimodal context storage for LLM agents.",
      "repository": {
        "url": "https://github.com/alex-feel/mcp-context-server",
        "source": "github"
      },
      "version": "0.1.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-context-server",
          "version": "0.1.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Log level",
              "format": "string",
              "name": "LOG_LEVEL"
            },
            {
              "description": "Maximum individual image size in megabytes",
              "format": "number",
              "name": "MAX_IMAGE_SIZE_MB"
            },
            {
              "description": "Maximum total request size in megabytes",
              "format": "number",
              "name": "MAX_TOTAL_SIZE_MB"
            },
            {
              "description": "Custom database file location path",
              "format": "string",
              "name": "DB_PATH"
            },
            {
              "description": "Maximum number of concurrent read connections in the pool",
              "format": "number",
              "name": "POOL_MAX_READERS"
            },
            {
              "description": "Maximum number of concurrent write connections in the pool",
              "format": "number",
              "name": "POOL_MAX_WRITERS"
            },
            {
              "description": "Connection timeout in seconds",
              "format": "number",
              "name": "POOL_CONNECTION_TIMEOUT_S"
            },
            {
              "description": "Idle connection timeout in seconds",
              "format": "number",
              "name": "POOL_IDLE_TIMEOUT_S"
            },
            {
              "description": "Connection health check interval in seconds",
              "format": "number",
              "name": "POOL_HEALTH_CHECK_INTERVAL_S"
            },
            {
              "description": "Maximum number of retry attempts for failed operations",
              "format": "number",
              "name": "RETRY_MAX_RETRIES"
            },
            {
              "description": "Base delay in seconds between retry attempts",
              "format": "number",
              "name": "RETRY_BASE_DELAY_S"
            },
            {
              "description": "Maximum delay in seconds between retry attempts",
              "format": "number",
              "name": "RETRY_MAX_DELAY_S"
            },
            {
              "description": "Enable random jitter in retry delays",
              "format": "boolean",
              "name": "RETRY_JITTER"
            },
            {
              "description": "Exponential backoff multiplication factor for retries",
              "format": "number",
              "name": "RETRY_BACKOFF_FACTOR"
            },
            {
              "description": "Enable SQLite foreign key constraints",
              "format": "boolean",
              "name": "SQLITE_FOREIGN_KEYS"
            },
            {
              "description": "SQLite journal mode (e.g., WAL, DELETE)",
              "format": "string",
              "name": "SQLITE_JOURNAL_MODE"
            },
            {
              "description": "SQLite synchronous mode (e.g., NORMAL, FULL, OFF)",
              "format": "string",
              "name": "SQLITE_SYNCHRONOUS"
            },
            {
              "description": "SQLite temporary storage location (e.g., MEMORY, FILE)",
              "format": "string",
              "name": "SQLITE_TEMP_STORE"
            },
            {
              "description": "SQLite memory-mapped I/O size in bytes",
              "format": "number",
              "name": "SQLITE_MMAP_SIZE"
            },
            {
              "description": "SQLite cache size (negative value for KB, positive for pages)",
              "format": "number",
              "name": "SQLITE_CACHE_SIZE"
            },
            {
              "description": "SQLite page size in bytes",
              "format": "number",
              "name": "SQLITE_PAGE_SIZE"
            },
            {
              "description": "SQLite WAL autocheckpoint threshold in pages",
              "format": "number",
              "name": "SQLITE_WAL_AUTOCHECKPOINT"
            },
            {
              "description": "SQLite busy timeout in milliseconds",
              "format": "number",
              "name": "SQLITE_BUSY_TIMEOUT_MS"
            },
            {
              "description": "SQLite WAL checkpoint mode (e.g., PASSIVE, FULL, RESTART)",
              "format": "string",
              "name": "SQLITE_WAL_CHECKPOINT"
            },
            {
              "description": "Server shutdown timeout in seconds",
              "format": "number",
              "name": "SHUTDOWN_TIMEOUT_S"
            },
            {
              "description": "Test mode shutdown timeout in seconds",
              "format": "number",
              "name": "SHUTDOWN_TIMEOUT_TEST_S"
            },
            {
              "description": "Queue operation timeout in seconds",
              "format": "number",
              "name": "QUEUE_TIMEOUT_S"
            },
            {
              "description": "Test mode queue timeout in seconds",
              "format": "number",
              "name": "QUEUE_TIMEOUT_TEST_S"
            },
            {
              "description": "Circuit breaker failure threshold before opening",
              "format": "number",
              "name": "CIRCUIT_BREAKER_FAILURE_THRESHOLD"
            },
            {
              "description": "Circuit breaker recovery timeout in seconds",
              "format": "number",
              "name": "CIRCUIT_BREAKER_RECOVERY_TIMEOUT_S"
            },
            {
              "description": "Maximum calls allowed in circuit breaker half-open state",
              "format": "number",
              "name": "CIRCUIT_BREAKER_HALF_OPEN_MAX_CALLS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-25T11:37:36.007595Z",
        "updatedAt": "2025-09-28T19:00:48.080152Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.formulahendry/code-runner",
      "description": "Code Runner MCP Server which can run code in various programming languages.",
      "repository": {
        "url": "https://github.com/formulahendry/mcp-server-code-runner",
        "source": "github"
      },
      "version": "0.1.9",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-server-code-runner",
          "version": "0.1.8",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "oci",
          "identifier": "docker.io/formulahendry/mcp-server-code-runner:0.1.8",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-25T12:04:21.598191Z",
        "updatedAt": "2025-09-25T12:04:21.598191Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.driflyte/driflyte-mcp-server",
      "description": "Driflyte MCP server which lets AI assistants query topic-specific knowledge from web and GitHub.",
      "repository": {
        "url": "https://github.com/serkan-ozal/driflyte-mcp-server",
        "source": "github"
      },
      "version": "0.1.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@driflyte/mcp-server",
          "version": "0.1.3",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/mcp"
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/openai"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-25T12:29:09.239298Z",
        "updatedAt": "2025-09-29T07:47:32.624676Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.tableall/mcp",
      "description": "Access Japan's finest Michelin-starred restaurants. Search, check availability, and browse menus.",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.tableall.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-25T13:06:07.208445Z",
        "updatedAt": "2025-09-25T13:06:07.208445Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "technology.draup/api-server",
      "description": "Global labour & market data for skills, workforce, planning, stakeholders, jobs, news & profiles",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.draup.technology/mcp/",
          "headers": [
            {
              "description": "Get the API key from Draup Support (support@draup.com)",
              "isRequired": true,
              "isSecret": true,
              "name": "X-API-Key"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-25T15:32:50.991404Z",
        "updatedAt": "2025-09-25T15:32:50.991404Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ChromeDevTools/chrome-devtools-mcp",
      "description": "MCP server for Chrome DevTools",
      "repository": {
        "url": "https://github.com/ChromeDevTools/chrome-devtools-mcp",
        "source": "github"
      },
      "version": "0.3.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "chrome-devtools-mcp",
          "version": "0.3.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-25T16:53:34.180043Z",
        "updatedAt": "2025-09-26T14:05:58.835876Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.fliptheweb/yazio-mcp",
      "description": "MCP server for accessing Yazio user & nutrition data (unofficial)",
      "repository": {
        "url": "https://github.com/fliptheweb/yazio-mcp",
        "source": "github"
      },
      "version": "0.0.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "yazio-mcp",
          "version": "0.0.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Yazio Username",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YAZIO_USERNAME"
            },
            {
              "description": "Yazio Password",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YAZIO_PASSWORD"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-25T20:50:24.594331Z",
        "updatedAt": "2025-09-25T21:36:08.07247Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.fliptheweb/yazio-mcp",
      "description": "MCP server for accessing Yazio user & nutrition data (unofficial)",
      "repository": {
        "url": "https://github.com/fliptheweb/yazio-mcp",
        "source": "github"
      },
      "version": "0.0.5",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "yazio-mcp",
          "version": "0.0.5",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Yazio Username",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YAZIO_USERNAME"
            },
            {
              "description": "Yazio Password",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YAZIO_PASSWORD"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-25T21:36:08.066968Z",
        "updatedAt": "2025-09-25T21:36:08.066968Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.martymarkenson/postgres-connector",
      "description": "MCP server for querying PostgreSQL databases",
      "repository": {},
      "version": "1.0.2",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "postgres-connector",
          "version": "1.0.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-25T21:59:51.445715Z",
        "updatedAt": "2025-09-25T21:59:51.445715Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.1.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.1.3",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.1.3",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-26T00:34:47.313294Z",
        "updatedAt": "2025-09-26T16:00:37.864917Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.moonolgerd/game-mcp",
      "description": "Discovers and manages installed games on Windows from Steam, Epic, GOG, Xbox, and other platforms.",
      "repository": {
        "url": "https://github.com/moonolgerd/game-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "nuget",
          "registryBaseUrl": "https://api.nuget.org",
          "identifier": "GameMcpServer",
          "version": "1.0.0",
          "runtimeHint": "dnx",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-26T02:51:31.883954Z",
        "updatedAt": "2025-09-26T02:51:31.883954Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.guanqun-yang/mcp-server-r-counter",
      "description": "A MCP Server Counting Number of r's for a Given Query",
      "repository": {
        "url": "https://github.com/guanqun-yang/mcp-server-r-counter",
        "source": "github"
      },
      "version": "0.0.3",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-server-r-counter",
          "version": "0.0.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-26T03:25:25.186688Z",
        "updatedAt": "2025-09-26T03:25:25.186688Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.BenAHammond/code-auditor-mcp",
      "description": "Code Quality Auditor: Analyze code for SOLID principles, DRY violations, and more",
      "repository": {
        "url": "https://github.com/BenAHammond/code-auditor-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "code-auditor-mcp",
          "version": "1.17.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-26T03:37:09.745162Z",
        "updatedAt": "2025-09-27T17:09:06.208862Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.wild-card/deepcontext",
      "description": "Advanced codebase indexing and semantic search MCP server",
      "repository": {
        "url": "https://github.com/Wildcard-Official/deepcontext",
        "source": "github"
      },
      "version": "0.1.15",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@wildcard-ai/deepcontext",
          "version": "0.1.15",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Jina AI API key for embeddings generation",
              "format": "string",
              "isSecret": true,
              "name": "JINA_API_KEY"
            },
            {
              "description": "Turbopuffer API key for vector storage",
              "format": "string",
              "isSecret": true,
              "name": "TURBOPUFFER_API_KEY"
            },
            {
              "description": "Wildcard API key for authentication",
              "format": "string",
              "isSecret": true,
              "name": "WILDCARD_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-26T03:44:16.929896Z",
        "updatedAt": "2025-09-26T03:44:16.929896Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "xyz.dreamtap/mcp",
      "description": "Dreamtap provides sources of inspiration to your AI to make it more creative.",
      "repository": {
        "url": "https://github.com/salexashenko/dreamtap",
        "source": "github"
      },
      "version": "0.1.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://dreamtap.xyz/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-26T04:11:38.085711Z",
        "updatedAt": "2025-09-26T04:11:38.085711Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.formulahendry/spec-driven-development",
      "description": "MCP Server that facilitates spec-driven development workflows, not just Vibe Coding.",
      "repository": {
        "url": "https://github.com/formulahendry/mcp-server-spec-driven-development",
        "source": "github"
      },
      "version": "0.1.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-server-spec-driven-development",
          "version": "0.1.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-26T06:51:26.732082Z",
        "updatedAt": "2025-09-26T06:51:26.732082Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.24",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.24",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-26T09:53:32.927169Z",
        "updatedAt": "2025-09-26T09:53:32.927169Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.iunera/druid-mcp-server",
      "description": "AI-powered MCP server for Apache Druid cluster management and analytic",
      "repository": {
        "url": "https://github.com/iunera/druid-mcp-server",
        "source": "github"
      },
      "version": "1.3.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/iunera/druid-mcp-server:1.3.0",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Druid router URL for connecting to the Druid cluster",
              "format": "string",
              "name": "DRUID_ROUTER_URL"
            },
            {
              "description": "Username for Druid authentication (optional)",
              "format": "string",
              "name": "DRUID_AUTH_USERNAME"
            },
            {
              "description": "Password for Druid authentication (optional)",
              "format": "string",
              "name": "DRUID_AUTH_PASSWORD"
            },
            {
              "description": "Enable SSL/TLS support for Druid connections",
              "format": "boolean",
              "name": "DRUID_SSL_ENABLED"
            },
            {
              "description": "Skip SSL certificate verification (for development/testing only)",
              "format": "boolean",
              "name": "DRUID_SSL_SKIP_VERIFICATION"
            },
            {
              "description": "Enable read-only mode (only GET requests and SQL queries allowed)",
              "format": "boolean",
              "name": "DRUID_MCP_READONLY_ENABLED"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-26T10:12:11.953842Z",
        "updatedAt": "2025-09-26T10:12:11.953842Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.windowsforum/mcp-server",
      "description": "MCP server for WindowsForum.com with search, document retrieval, and real-time forum analytics.",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.windowsforum.com"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-26T10:44:10.416999Z",
        "updatedAt": "2025-09-26T10:44:10.416999Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.clappia-dev/clappia-mcp",
      "description": "An MCP server that provides integration with Clappia platform",
      "repository": {
        "url": "https://github.com/clappia-dev/clappia-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/okaru413/clappia-mcp:1.0.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the Clappia platform",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CLAPPIA_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-26T11:05:30.583562Z",
        "updatedAt": "2025-09-26T11:05:30.583562Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.pree-dew/mcp-bookmark",
      "description": "MCP Server for adding bookmarks in openai RAG",
      "repository": {
        "url": "https://github.com/pree-dew/mcp-bookmark",
        "source": "github"
      },
      "version": "0.1.1",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-bookmark-server",
          "version": "0.1.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "open ai api key",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "OPENAI_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-26T11:24:18.288444Z",
        "updatedAt": "2025-09-28T11:22:51.467187Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.humanjesse/textarttools-mcp",
      "description": "Unicode text styling and ASCII art generation with 23 styles and 322+ figlet fonts",
      "repository": {
        "url": "https://github.com/humanjesse/textarttools-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://humanjesse.github.io/textarttools-mcp/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-26T13:09:45.715941Z",
        "updatedAt": "2025-09-26T13:09:45.715941Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ChromeDevTools/chrome-devtools-mcp",
      "description": "MCP server for Chrome DevTools",
      "repository": {
        "url": "https://github.com/ChromeDevTools/chrome-devtools-mcp",
        "source": "github"
      },
      "version": "0.4.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "chrome-devtools-mcp",
          "version": "0.4.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-26T14:05:58.832061Z",
        "updatedAt": "2025-09-29T14:19:58.810992Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.github/github-mcp-server",
      "description": "Connect AI assistants to GitHub - manage repos, issues, PRs, and workflows through natural language.",
      "repository": {
        "url": "https://github.com/github/github-mcp-server",
        "source": "github"
      },
      "version": "0.16.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/github/github-mcp-server:0.16.0",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "GITHUB_PERSONAL_ACCESS_TOKEN",
              "type": "positional",
              "valueHint": "env_var_name"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/github/github-mcp-server",
              "type": "positional",
              "valueHint": "image_name"
            }
          ],
          "environmentVariables": [
            {
              "description": "Your GitHub personal access token with appropriate scopes.",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "GITHUB_PERSONAL_ACCESS_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-26T15:06:49.295256Z",
        "updatedAt": "2025-09-30T14:42:48.239932Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.1.5",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.1.5",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.1.5",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-26T16:00:37.862171Z",
        "updatedAt": "2025-09-27T21:00:38.116998Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/git-mcp-server",
      "description": "Comprehensive Git MCP server enabling native git tools including clone, commit, worktree, & more.",
      "repository": {
        "url": "https://github.com/cyanheads/git-mcp-server",
        "source": "github"
      },
      "version": "2.3.4",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.3.4",
          "runtimeHint": "node",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "dist/index.js",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Specifies the transport mechanism for the server.",
              "isRequired": true,
              "format": "string",
              "default": "stdio",
              "name": "MCP_TRANSPORT_TYPE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Set to 'true' to enable GPG/SSH signing for commits made via the git_commit tool.",
              "format": "string",
              "default": "false",
              "name": "GIT_SIGN_COMMITS"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.3.4",
          "runtimeHint": "node",
          "transport": {
            "type": "streamable-http",
            "url": "http://127.0.0.1:3015/mcp"
          },
          "packageArguments": [
            {
              "value": "dist/index.js",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Specifies the transport mechanism for the server.",
              "isRequired": true,
              "format": "string",
              "default": "http",
              "name": "MCP_TRANSPORT_TYPE"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3015",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The host interface for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The HTTP endpoint path for MCP requests.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_STRATEGY"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Set to 'true' to enable GPG/SSH signing for commits made via the git_commit tool.",
              "format": "string",
              "default": "false",
              "name": "GIT_SIGN_COMMITS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-26T16:34:39.110415Z",
        "updatedAt": "2025-09-29T23:55:39.607519Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.wonderwhy-er/desktop-commander",
      "description": "MCP server for terminal commands, file operations, and process management",
      "repository": {
        "url": "https://github.com/wonderwhy-er/DesktopCommanderMCP",
        "source": "github"
      },
      "version": "0.2.16",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@wonderwhy-er/desktop-commander",
          "version": "0.2.16",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-26T16:35:30.865268Z",
        "updatedAt": "2025-09-26T16:35:30.865268Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.teamwork/mcp",
      "description": "The Teamwork.com official MCP server helps teams efficiently manage client projects with AI.",
      "repository": {
        "url": "https://github.com/teamwork/mcp",
        "source": "github"
      },
      "version": "1.5.2",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/teamwork/mcp:v1.5.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "TW_MCP_BEARER_TOKEN"
            },
            {
              "description": "Choose log output format between 'text' or 'json'. Default is 'text'.",
              "format": "string",
              "name": "TW_MCP_LOG_FORMAT"
            },
            {
              "description": "Choose log level between 'debug', 'info', 'warn' or 'error'. Default is 'info'.",
              "format": "string",
              "name": "TW_MCP_LOG_LEVEL"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-26T17:26:33.291166Z",
        "updatedAt": "2025-09-26T19:37:40.311231Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.foqal/Foqal",
      "description": "Foqal turns Slack/Teams into efficient support platforms with AI-powered ticketing.",
      "repository": {},
      "version": "2.0.0",
      "websiteUrl": "https://www.foqal.io?utm_source=mcp-registry&utm_medium=registry",
      "remotes": [
        {
          "type": "sse",
          "url": "https://support.foqal.io/api/mcp/[YOUR_GENERATED_TOKEN]"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-26T18:36:42.976406Z",
        "updatedAt": "2025-09-26T19:31:50.228407Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Snowflake-Labs/mcp",
      "description": "MCP Server for Snowflake from Snowflake Labs",
      "repository": {
        "url": "https://github.com/Snowflake-Labs/mcp",
        "source": "github"
      },
      "version": "1.3.3",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "snowflake-labs-mcp",
          "version": "1.3.3",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "description": "Path to service specification file",
              "isRequired": true,
              "type": "named",
              "name": "--service-config-file"
            },
            {
              "description": "Account identifier (e.g. xy12345.us-east-1)",
              "type": "named",
              "name": "--account"
            },
            {
              "description": "Snowflake host URL",
              "type": "named",
              "name": "--host"
            },
            {
              "description": "Username for authentication",
              "type": "named",
              "name": "--user"
            },
            {
              "description": "Password or programmatic access token",
              "type": "named",
              "name": "--password"
            },
            {
              "description": "Role to use for connection",
              "type": "named",
              "name": "--role"
            },
            {
              "description": "Warehouse to use for queries",
              "type": "named",
              "name": "--warehouse"
            },
            {
              "description": "Whether passcode is embedded in password",
              "type": "named",
              "name": "--passcode-in-password"
            },
            {
              "description": "MFA passcode for authentication",
              "type": "named",
              "name": "--passcode"
            },
            {
              "description": "Private key for key pair authentication",
              "type": "named",
              "name": "--private-key"
            },
            {
              "description": "Path to private key file",
              "type": "named",
              "name": "--private-key-file"
            },
            {
              "description": "Password for encrypted private key",
              "type": "named",
              "name": "--private-key-file-pwd"
            },
            {
              "description": "Authentication type",
              "default": "snowflake",
              "type": "named",
              "name": "--authenticator"
            },
            {
              "description": "Name of connection from connections.toml (or config.toml) file",
              "type": "named",
              "name": "--connection-name"
            },
            {
              "description": "Transport for the MCP server",
              "default": "stdio",
              "choices": [
                "stdio",
                "http",
                "sse",
                "streamable-http"
              ],
              "type": "named",
              "name": "--transport"
            },
            {
              "description": "Custom endpoint path for HTTP transports",
              "default": "/mcp",
              "type": "named",
              "name": "--endpoint"
            }
          ],
          "environmentVariables": [
            {
              "description": "Account identifier (e.g. xy12345.us-east-1)",
              "format": "string",
              "name": "SNOWFLAKE_ACCOUNT"
            },
            {
              "description": "Snowflake host URL",
              "format": "string",
              "name": "SNOWFLAKE_HOST"
            },
            {
              "description": "Username for authentication",
              "format": "string",
              "name": "SNOWFLAKE_USER"
            },
            {
              "description": "Password or programmatic access token",
              "format": "string",
              "name": "SNOWFLAKE_PASSWORD"
            },
            {
              "description": "Role to use for connection",
              "format": "string",
              "name": "SNOWFLAKE_ROLE"
            },
            {
              "description": "Warehouse to use for queries",
              "format": "string",
              "name": "SNOWFLAKE_WAREHOUSE"
            },
            {
              "description": "MFA passcode for authentication",
              "format": "string",
              "name": "SNOWFLAKE_PASSCODE"
            },
            {
              "description": "Private key for key pair authentication",
              "format": "string",
              "name": "SNOWFLAKE_PRIVATE_KEY"
            },
            {
              "description": "Path to private key file",
              "format": "string",
              "name": "SNOWFLAKE_PRIVATE_KEY_FILE"
            },
            {
              "description": "Password for encrypted private key",
              "format": "string",
              "name": "SNOWFLAKE_PRIVATE_KEY_FILE_PWD"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-26T18:50:29.355753Z",
        "updatedAt": "2025-09-26T18:50:29.355753Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Antonytm/mcp-all",
      "description": "A Model Context Protocol server to run other MCP servers",
      "repository": {
        "url": "https://github.com/Antonytm/mcp-all",
        "source": "github"
      },
      "version": "0.1.14",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@antonytm/mcp-all",
          "version": "0.1.14",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "name": "TRANSPORT"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@antonytm/mcp-all",
          "version": "0.1.14",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3001/mcp"
          },
          "environmentVariables": [
            {
              "name": "TRANSPORT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-26T19:13:30.169955Z",
        "updatedAt": "2025-09-28T10:35:40.360517Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.sellisd/mcp-units",
      "description": "An MCP server that provides some common units conversions for cooking",
      "repository": {
        "url": "https://github.com/sellisd/mcp-units",
        "source": "github"
      },
      "version": "0.3.3",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-units",
          "version": "0.3.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-26T19:21:00.556533Z",
        "updatedAt": "2025-09-26T19:21:00.556533Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.foqal/Foqal",
      "description": "Foqal turns Slack/Teams into efficient support platforms with AI-powered ticketing.",
      "repository": {
        "url": "https://github.com/foqal/mcp",
        "source": "github"
      },
      "version": "2.0.1",
      "websiteUrl": "https://www.foqal.io?utm_source=mcp-registry&utm_medium=registry",
      "remotes": [
        {
          "type": "sse",
          "url": "https://support.foqal.io/api/mcp/[YOUR_GENERATED_TOKEN]"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-26T19:31:50.224662Z",
        "updatedAt": "2025-09-26T19:31:50.224662Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.teamwork/mcp",
      "description": "The Teamwork.com official MCP server helps teams efficiently manage client projects with AI.",
      "repository": {
        "url": "https://github.com/teamwork/mcp",
        "source": "github"
      },
      "version": "1.5.3",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/teamwork/mcp:v1.5.3",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "TW_MCP_BEARER_TOKEN"
            },
            {
              "description": "Choose log output format between 'text' or 'json'. Default is 'text'.",
              "format": "string",
              "name": "TW_MCP_LOG_FORMAT"
            },
            {
              "description": "Choose log level between 'debug', 'info', 'warn' or 'error'. Default is 'info'.",
              "format": "string",
              "name": "TW_MCP_LOG_LEVEL"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-26T19:37:40.304023Z",
        "updatedAt": "2025-09-29T15:22:52.200922Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.spences10/mcp-turso-cloud",
      "description": "MCP server for integrating Turso with LLMs",
      "repository": {
        "url": "https://github.com/spences10/mcp-turso-cloud",
        "source": "github"
      },
      "version": "0.0.9",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-turso-cloud",
          "version": "0.0.9",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Turso Platform API token for authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "TURSO_API_TOKEN"
            },
            {
              "description": "Turso organization name",
              "isRequired": true,
              "format": "string",
              "name": "TURSO_ORGANIZATION"
            },
            {
              "description": "Default database name (optional)",
              "format": "string",
              "name": "TURSO_DEFAULT_DATABASE"
            },
            {
              "description": "Token expiration time (default: 7d)",
              "format": "string",
              "name": "TOKEN_EXPIRATION"
            },
            {
              "description": "Default token permission level (default: full-access)",
              "format": "string",
              "name": "TOKEN_PERMISSION"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-26T21:22:07.39904Z",
        "updatedAt": "2025-09-26T21:22:07.39904Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.iggredible/vim-mcp",
      "description": "Connect Claude Code to Vim/Neovim - query state, execute commands, search help, record macros",
      "repository": {
        "url": "https://github.com/iggredible/vim-mcp",
        "source": "github"
      },
      "version": "0.1.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "vim-mcp",
          "version": "0.1.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-26T22:02:08.877551Z",
        "updatedAt": "2025-09-26T22:02:08.877551Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.CodeAlive-AI/codealive-mcp",
      "description": "Semantic code search and analysis from CodeAlive for AI assistants and agents.",
      "repository": {
        "url": "https://github.com/CodeAlive-AI/codealive-mcp.git",
        "source": "github"
      },
      "version": "0.3.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/codealive-ai/codealive-mcp:0.3.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-26T22:23:43.446371Z",
        "updatedAt": "2025-09-26T22:23:43.446371Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.schemacrawler/schemacrawler-ai",
      "description": "Enables natural language schema queries — explore tables, keys, procedures, and get SQL help fast",
      "repository": {
        "url": "https://github.com/schemacrawler/SchemaCrawler-AI",
        "source": "github"
      },
      "version": "v16.28.3-1",
      "websiteUrl": "https://schemacrawler.github.io",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/schemacrawler/schemacrawler-ai:v16.28.3-1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Database user name. Can be optional depending on the database connection type.",
              "format": "string",
              "isSecret": true,
              "name": "SCHCRWLR_DATABASE_USER"
            },
            {
              "description": "Database user password. Can be optional depending on the database connection type.",
              "format": "string",
              "isSecret": true,
              "name": "SCHCRWLR_DATABASE_PASSWORD"
            },
            {
              "description": "JDBC URL for database connection. If this is provided, the server, host, port and database are not used.",
              "format": "string",
              "name": "SCHCRWLR_JDBC_URL"
            },
            {
              "description": "SchemaCrawler database plugin, for example, 'sqlserver' or 'sqlite'. Used only if the JDBC URL is not provided.",
              "format": "string",
              "name": "SCHCRWLR_SERVER"
            },
            {
              "description": "Database host. Defaults to localhost. Used only if the JDBC URL is not provided.",
              "format": "string",
              "name": "SCHCRWLR_HOST"
            },
            {
              "description": "Database port. Defaults to the default port for the server type. Used only if the JDBC URL is not provided.",
              "format": "string",
              "name": "SCHCRWLR_PORT"
            },
            {
              "description": "Database to connect to (optional). Used only if the JDBC URL is not provided.",
              "format": "string",
              "name": "SCHCRWLR_DATABASE"
            },
            {
              "description": "How much database metadata to retrieve. Values are 'minimum', 'standard', 'detailed' or 'maximum'.",
              "format": "string",
              "name": "SCHCRWLR_INFO_LEVEL"
            },
            {
              "description": "Logging verbosity level. Values are 'SEVERE', 'WARNING', 'INFO', 'CONFIG', or 'FINE'.",
              "format": "string",
              "name": "SCHCRWLR_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-27T01:18:14.973084Z",
        "updatedAt": "2025-09-27T01:18:14.973084Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.textarttools/textarttools-mcp",
      "description": "Unicode text styling and ASCII art generation with 23 styles and 322+ figlet fonts",
      "repository": {
        "url": "https://github.com/humanjesse/textarttools-mcp",
        "source": "github"
      },
      "version": "1.1.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.textarttools.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-27T01:40:48.80087Z",
        "updatedAt": "2025-09-27T01:54:33.936959Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.textarttools/textarttools-mcp",
      "description": "Unicode text styling and ASCII art generation with 23 styles and 322+ figlet fonts",
      "repository": {
        "url": "https://github.com/humanjesse/textarttools-mcp",
        "source": "github"
      },
      "version": "1.1.1",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.textarttools.com/"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-27T01:54:33.927691Z",
        "updatedAt": "2025-09-27T01:54:33.927691Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.habedi/omni-lpr",
      "description": "An MCP server for automatic license plate recognition",
      "repository": {
        "url": "https://github.com/habedi/omni-lpr",
        "source": "github"
      },
      "version": "0.3.2",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "omni-lpr",
          "version": "0.3.2",
          "transport": {
            "type": "streamable-http",
            "url": "http://127.0.0.1:8000/mcp/"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-27T08:52:54.853353Z",
        "updatedAt": "2025-09-27T08:52:54.853353Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.TonySimonovsky/claude-code-conversation-search-mcp",
      "description": "Search Claude Code conversation history with natural language queries across all projects",
      "repository": {
        "url": "https://github.com/TonySimonovsky/claude-code-conversation-search-mcp",
        "source": "github"
      },
      "version": "1.1.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "claude-code-conversation-search-mcp",
          "version": "1.1.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-27T10:30:26.181169Z",
        "updatedAt": "2025-09-27T10:30:26.181169Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.xorrkaz/cml-mcp",
      "description": "An MCP server that provides access to common Cisco Modeling Labs (CML) operations.",
      "repository": {
        "url": "https://github.com/xorrkaz/cml-mcp",
        "source": "github"
      },
      "version": "0.9.2",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "cml-mcp",
          "version": "0.9.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "URL for the CML Server",
              "isRequired": true,
              "format": "string",
              "name": "CML_URL"
            },
            {
              "description": "Username for CML authentication",
              "isRequired": true,
              "format": "string",
              "name": "CML_USERNAME"
            },
            {
              "description": "Password for CML authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CML_PASSWORD"
            },
            {
              "description": "Username for authentication to devices running in CML",
              "format": "string",
              "name": "PYATS_USERNAME"
            },
            {
              "description": "Password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_PASSWORD"
            },
            {
              "description": "Enable password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_AUTH_PASS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-27T13:06:49.494028Z",
        "updatedAt": "2025-09-27T19:37:16.17962Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.BenAHammond/code-auditor-mcp",
      "description": "Code Quality Auditor: Analyze code for SOLID principles, DRY violations, and more",
      "repository": {
        "url": "https://github.com/BenAHammond/code-auditor-mcp",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "code-auditor-mcp",
          "version": "1.17.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-27T17:09:06.204828Z",
        "updatedAt": "2025-09-28T17:14:16.566731Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.xorrkaz/cml-mcp",
      "description": "An MCP server that provides access to common Cisco Modeling Labs (CML) operations.",
      "repository": {
        "url": "https://github.com/xorrkaz/cml-mcp",
        "source": "github"
      },
      "version": "0.9.3",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "cml-mcp",
          "version": "0.9.3",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "URL for the CML Server",
              "isRequired": true,
              "format": "string",
              "name": "CML_URL"
            },
            {
              "description": "Username for CML authentication",
              "isRequired": true,
              "format": "string",
              "name": "CML_USERNAME"
            },
            {
              "description": "Password for CML authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CML_PASSWORD"
            },
            {
              "description": "Username for authentication to devices running in CML",
              "format": "string",
              "name": "PYATS_USERNAME"
            },
            {
              "description": "Password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_PASSWORD"
            },
            {
              "description": "Enable password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_AUTH_PASS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-27T19:37:16.175636Z",
        "updatedAt": "2025-09-27T19:37:16.175636Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.1.6",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.1.6",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.1.6",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-27T21:00:38.10892Z",
        "updatedAt": "2025-09-27T22:01:57.931717Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.1.7",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.1.7",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.1.7",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-27T22:01:57.920714Z",
        "updatedAt": "2025-09-28T04:06:34.163938Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.1.8",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.1.8",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.1.8",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-28T04:06:34.151236Z",
        "updatedAt": "2025-09-28T06:10:08.965399Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.appwrite/mcp-for-api",
      "description": "MCP (Model Context Protocol) server for Appwrite",
      "repository": {
        "url": "https://github.com/appwrite/mcp-for-api",
        "source": "github"
      },
      "version": "0.2.7",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "mcp-server-appwrite",
          "version": "0.2.7",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-28T06:08:26.62978Z",
        "updatedAt": "2025-09-28T06:08:26.62978Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.2.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.2.0",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.2.0",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-28T06:10:08.96025Z",
        "updatedAt": "2025-09-28T06:39:40.271601Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.2.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.2.1",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.2.1",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-28T06:39:40.26665Z",
        "updatedAt": "2025-09-28T07:49:04.525229Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.2.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.2.2",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.2.2",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-28T07:49:04.520081Z",
        "updatedAt": "2025-09-29T20:10:17.765787Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Antonytm/mcp-all",
      "description": "A Model Context Protocol server to run other MCP servers",
      "repository": {
        "url": "https://github.com/Antonytm/mcp-all",
        "source": "github"
      },
      "version": "0.1.15",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@antonytm/mcp-all",
          "version": "0.1.15",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "name": "TRANSPORT"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@antonytm/mcp-all",
          "version": "0.1.15",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3001/mcp"
          },
          "environmentVariables": [
            {
              "name": "TRANSPORT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-28T10:35:40.355497Z",
        "updatedAt": "2025-09-28T10:52:04.657619Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Antonytm/mcp-all",
      "description": "A Model Context Protocol server to run other MCP servers",
      "repository": {
        "url": "https://github.com/Antonytm/mcp-all",
        "source": "github"
      },
      "version": "0.1.16",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@antonytm/mcp-all",
          "version": "0.1.16",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "name": "TRANSPORT"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@antonytm/mcp-all",
          "version": "0.1.16",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3001/mcp"
          },
          "environmentVariables": [
            {
              "name": "TRANSPORT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-28T10:52:04.655522Z",
        "updatedAt": "2025-09-28T14:22:22.428848Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.pree-dew/mcp-bookmark",
      "description": "MCP Server for adding bookmarks in openai RAG",
      "repository": {
        "url": "https://github.com/pree-dew/mcp-bookmark",
        "source": "github"
      },
      "version": "0.1.2",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-bookmark-server",
          "version": "0.1.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "open ai api key",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "OPENAI_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-28T11:22:51.456627Z",
        "updatedAt": "2025-09-29T06:22:41.376104Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.catchmetrics.mcp/rum-analytics",
      "description": "RUM platform for web performance analytics, Core Web Vitals, and third-party script monitoring.",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.catchmetrics.io"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-28T14:07:41.27568Z",
        "updatedAt": "2025-09-28T14:07:41.27568Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Antonytm/mcp-all",
      "description": "A Model Context Protocol server to run other MCP servers",
      "repository": {
        "url": "https://github.com/Antonytm/mcp-all",
        "source": "github"
      },
      "version": "0.1.17",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@antonytm/mcp-all",
          "version": "0.1.17",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "name": "TRANSPORT"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@antonytm/mcp-all",
          "version": "0.1.17",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3001/mcp"
          },
          "environmentVariables": [
            {
              "name": "TRANSPORT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-28T14:22:22.424885Z",
        "updatedAt": "2025-09-28T15:27:54.814083Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ChiR24/unreal-engine-mcp",
      "description": "MCP server for Unreal Engine 5 with 13 tools for game development automation.",
      "repository": {
        "url": "https://github.com/ChiR24/Unreal_mcp.git",
        "source": "github"
      },
      "version": "0.4.4",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "unreal-engine-mcp-server",
          "version": "0.4.4",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Unreal Engine host address (default: 127.0.0.1)",
              "value": "127.0.0.1",
              "name": "UE_HOST"
            },
            {
              "description": "Remote Control HTTP port (default: 30010)",
              "value": "30010",
              "name": "UE_RC_HTTP_PORT"
            },
            {
              "description": "Remote Control WebSocket port (default: 30020)",
              "value": "30020",
              "name": "UE_RC_WS_PORT"
            },
            {
              "description": "Logging level: debug, info, warn, error (default: info)",
              "value": "info",
              "name": "LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-28T14:25:16.428438Z",
        "updatedAt": "2025-09-28T14:25:16.428438Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Antonytm/mcp-all",
      "description": "A Model Context Protocol server to run other MCP servers",
      "repository": {
        "url": "https://github.com/Antonytm/mcp-all",
        "source": "github"
      },
      "version": "0.1.19",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@antonytm/mcp-all",
          "version": "0.1.19",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "name": "TRANSPORT"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@antonytm/mcp-all",
          "version": "0.1.19",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3001/mcp"
          },
          "environmentVariables": [
            {
              "name": "TRANSPORT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-28T15:27:54.805308Z",
        "updatedAt": "2025-09-28T15:38:53.939532Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Antonytm/mcp-all",
      "description": "A Model Context Protocol server to run other MCP servers",
      "repository": {
        "url": "https://github.com/Antonytm/mcp-all",
        "source": "github"
      },
      "version": "0.1.20",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@antonytm/mcp-all",
          "version": "0.1.20",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "name": "TRANSPORT"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@antonytm/mcp-all",
          "version": "0.1.20",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3001/mcp"
          },
          "environmentVariables": [
            {
              "name": "TRANSPORT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-28T15:38:53.930887Z",
        "updatedAt": "2025-09-28T15:38:53.930887Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.vfarcic/dot-ai",
      "description": "AI-powered development platform for Kubernetes deployments and intelligent automation",
      "repository": {
        "url": "https://github.com/vfarcic/dot-ai",
        "source": "github"
      },
      "version": "0.101.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@vfarcic/dot-ai",
          "version": "0.101.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-28T16:21:23.44189Z",
        "updatedAt": "2025-09-28T16:21:23.44189Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.BenAHammond/code-auditor-mcp",
      "description": "Code Quality Auditor: Analyze code for SOLID principles, DRY violations, and more",
      "repository": {
        "url": "https://github.com/BenAHammond/code-auditor-mcp",
        "source": "github"
      },
      "version": "1.0.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "code-auditor-mcp",
          "version": "1.17.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-28T17:14:16.560687Z",
        "updatedAt": "2025-09-28T23:04:51.330532Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.alex-feel/mcp-context-server",
      "description": "An MCP server that provides persistent multimodal context storage for LLM agents.",
      "repository": {
        "url": "https://github.com/alex-feel/mcp-context-server",
        "source": "github"
      },
      "version": "0.2.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-context-server",
          "version": "0.2.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Log level",
              "format": "string",
              "name": "LOG_LEVEL"
            },
            {
              "description": "Maximum individual image size in megabytes",
              "format": "number",
              "name": "MAX_IMAGE_SIZE_MB"
            },
            {
              "description": "Maximum total request size in megabytes",
              "format": "number",
              "name": "MAX_TOTAL_SIZE_MB"
            },
            {
              "description": "Custom database file location path",
              "format": "string",
              "name": "DB_PATH"
            },
            {
              "description": "Maximum number of concurrent read connections in the pool",
              "format": "number",
              "name": "POOL_MAX_READERS"
            },
            {
              "description": "Maximum number of concurrent write connections in the pool",
              "format": "number",
              "name": "POOL_MAX_WRITERS"
            },
            {
              "description": "Connection timeout in seconds",
              "format": "number",
              "name": "POOL_CONNECTION_TIMEOUT_S"
            },
            {
              "description": "Idle connection timeout in seconds",
              "format": "number",
              "name": "POOL_IDLE_TIMEOUT_S"
            },
            {
              "description": "Connection health check interval in seconds",
              "format": "number",
              "name": "POOL_HEALTH_CHECK_INTERVAL_S"
            },
            {
              "description": "Maximum number of retry attempts for failed operations",
              "format": "number",
              "name": "RETRY_MAX_RETRIES"
            },
            {
              "description": "Base delay in seconds between retry attempts",
              "format": "number",
              "name": "RETRY_BASE_DELAY_S"
            },
            {
              "description": "Maximum delay in seconds between retry attempts",
              "format": "number",
              "name": "RETRY_MAX_DELAY_S"
            },
            {
              "description": "Enable random jitter in retry delays",
              "format": "boolean",
              "name": "RETRY_JITTER"
            },
            {
              "description": "Exponential backoff multiplication factor for retries",
              "format": "number",
              "name": "RETRY_BACKOFF_FACTOR"
            },
            {
              "description": "Enable SQLite foreign key constraints",
              "format": "boolean",
              "name": "SQLITE_FOREIGN_KEYS"
            },
            {
              "description": "SQLite journal mode (e.g., WAL, DELETE)",
              "format": "string",
              "name": "SQLITE_JOURNAL_MODE"
            },
            {
              "description": "SQLite synchronous mode (e.g., NORMAL, FULL, OFF)",
              "format": "string",
              "name": "SQLITE_SYNCHRONOUS"
            },
            {
              "description": "SQLite temporary storage location (e.g., MEMORY, FILE)",
              "format": "string",
              "name": "SQLITE_TEMP_STORE"
            },
            {
              "description": "SQLite memory-mapped I/O size in bytes",
              "format": "number",
              "name": "SQLITE_MMAP_SIZE"
            },
            {
              "description": "SQLite cache size (negative value for KB, positive for pages)",
              "format": "number",
              "name": "SQLITE_CACHE_SIZE"
            },
            {
              "description": "SQLite page size in bytes",
              "format": "number",
              "name": "SQLITE_PAGE_SIZE"
            },
            {
              "description": "SQLite WAL autocheckpoint threshold in pages",
              "format": "number",
              "name": "SQLITE_WAL_AUTOCHECKPOINT"
            },
            {
              "description": "SQLite busy timeout in milliseconds",
              "format": "number",
              "name": "SQLITE_BUSY_TIMEOUT_MS"
            },
            {
              "description": "SQLite WAL checkpoint mode (e.g., PASSIVE, FULL, RESTART)",
              "format": "string",
              "name": "SQLITE_WAL_CHECKPOINT"
            },
            {
              "description": "Server shutdown timeout in seconds",
              "format": "number",
              "name": "SHUTDOWN_TIMEOUT_S"
            },
            {
              "description": "Test mode shutdown timeout in seconds",
              "format": "number",
              "name": "SHUTDOWN_TIMEOUT_TEST_S"
            },
            {
              "description": "Queue operation timeout in seconds",
              "format": "number",
              "name": "QUEUE_TIMEOUT_S"
            },
            {
              "description": "Test mode queue timeout in seconds",
              "format": "number",
              "name": "QUEUE_TIMEOUT_TEST_S"
            },
            {
              "description": "Circuit breaker failure threshold before opening",
              "format": "number",
              "name": "CIRCUIT_BREAKER_FAILURE_THRESHOLD"
            },
            {
              "description": "Circuit breaker recovery timeout in seconds",
              "format": "number",
              "name": "CIRCUIT_BREAKER_RECOVERY_TIMEOUT_S"
            },
            {
              "description": "Maximum calls allowed in circuit breaker half-open state",
              "format": "number",
              "name": "CIRCUIT_BREAKER_HALF_OPEN_MAX_CALLS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-28T19:00:48.07279Z",
        "updatedAt": "2025-09-28T19:00:48.07279Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.klavis/strata",
      "description": "MCP server for progressive tool usage at any scale (see https://klavis.ai)",
      "repository": {
        "url": "https://github.com/Klavis-AI/klavis",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://strata.klavis.ai/mcp/"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-28T19:13:44.307076Z",
        "updatedAt": "2025-09-28T19:13:44.307076Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.CodeCraftersLLC/local-voice-mcp",
      "description": "Give your MCP clients the ability to speak by running local voice models using Chatterbox TTS",
      "repository": {},
      "version": "0.1.5",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@codecraftersllc/local-voice-mcp",
          "version": "0.1.5",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-28T21:11:08.235552Z",
        "updatedAt": "2025-09-28T21:11:08.235552Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.flarco/sling-cli",
      "description": "Sling CLI MCP server for data pipeline and replication management",
      "repository": {},
      "version": "1.4.24"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-28T21:44:03.912575Z",
        "updatedAt": "2025-09-28T21:44:03.912575Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.slingdata/sling-cli",
      "description": "Sling CLI MCP server for data pipeline and replication management",
      "repository": {},
      "version": "1.4.24",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "sling",
          "version": "1.4.23.post1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-28T22:21:25.744436Z",
        "updatedAt": "2025-09-28T22:25:06.473721Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.slingdata/sling-cli",
      "description": "Sling CLI MCP server for data pipeline and replication management",
      "repository": {},
      "version": "1.4.23",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "sling",
          "version": "1.4.23.post1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-28T22:21:47.749152Z",
        "updatedAt": "2025-09-28T22:21:47.749152Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.slingdata/sling-cli",
      "description": "Sling CLI MCP server for querying any database, running data pipelines and managing replications",
      "repository": {},
      "version": "1.4.25",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "sling",
          "version": "1.4.23.post1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-28T22:25:06.471641Z",
        "updatedAt": "2025-09-28T22:25:06.471641Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "app.zenable/zenable",
      "description": "Zenable cleans up sloppy AI code and prevents vulnerabilities with deterministic guardrails",
      "repository": {},
      "version": "2.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.zenable.app/"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-28T22:41:39.996616Z",
        "updatedAt": "2025-09-28T22:41:39.996616Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.BenAHammond/code-auditor-mcp",
      "description": "Code Quality Auditor: Analyze code for SOLID principles, DRY violations, and more",
      "repository": {
        "url": "https://github.com/BenAHammond/code-auditor-mcp",
        "source": "github"
      },
      "version": "1.0.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "code-auditor-mcp",
          "version": "1.17.4",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-28T23:04:51.324391Z",
        "updatedAt": "2025-09-29T01:21:09.062793Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.BenAHammond/code-auditor-mcp",
      "description": "Code Quality Auditor: Analyze code for SOLID principles, DRY violations, and more",
      "repository": {
        "url": "https://github.com/BenAHammond/code-auditor-mcp",
        "source": "github"
      },
      "version": "1.0.4",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "code-auditor-mcp",
          "version": "1.17.5",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T01:21:09.057133Z",
        "updatedAt": "2025-09-29T02:41:50.241153Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.antvis/mcp-server-chart",
      "description": "A Model Context Protocol server for generating charts using AntV.",
      "repository": {
        "url": "https://github.com/antvis/mcp-server-chart",
        "source": "github"
      },
      "version": "0.9.0-beta.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@antv/mcp-server-chart",
          "version": "0.9.0-beta.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Custom chart generation service URL for private deployment",
              "format": "string",
              "default": "https://antv-studio.alipay.com/api/gpt-vis",
              "name": "VIS_REQUEST_SERVER"
            },
            {
              "description": "Service identifier for chart generation records",
              "format": "string",
              "isSecret": true,
              "name": "SERVICE_ID"
            },
            {
              "description": "Comma-separated list of tool names to disable",
              "format": "string",
              "name": "DISABLED_TOOLS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T02:21:18.645027Z",
        "updatedAt": "2025-09-29T02:21:18.645027Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.BenAHammond/code-auditor-mcp",
      "description": "Code Quality Auditor: Analyze code for SOLID principles, DRY violations, and more",
      "repository": {
        "url": "https://github.com/BenAHammond/code-auditor-mcp",
        "source": "github"
      },
      "version": "1.0.5",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "code-auditor-mcp",
          "version": "1.18.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T02:41:50.232065Z",
        "updatedAt": "2025-09-29T02:41:50.232065Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.pree-dew/mcp-bookmark",
      "description": "MCP Server for adding bookmarks in openai RAG",
      "repository": {
        "url": "https://github.com/pree-dew/mcp-bookmark",
        "source": "github"
      },
      "version": "0.1.4",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-bookmark-server",
          "version": "0.1.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "open ai api key",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "OPENAI_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T06:22:41.372698Z",
        "updatedAt": "2025-09-29T06:32:47.112388Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.pree-dew/mcp-bookmark",
      "description": "MCP Server for adding bookmarks in openai RAG",
      "repository": {
        "url": "https://github.com/pree-dew/mcp-bookmark",
        "source": "github"
      },
      "version": "0.1.5",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-bookmark-server",
          "version": "0.1.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "open ai api key",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "OPENAI_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T06:32:47.109623Z",
        "updatedAt": "2025-09-29T06:32:47.109623Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.tschoonj/repology-mcp-server",
      "description": "MCP server that provides access to Repology package repository data",
      "repository": {
        "url": "https://github.com/tschoonj/repology-mcp-server",
        "source": "github"
      },
      "version": "0.1.1",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "repology-mcp-server",
          "version": "0.1.1",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "oci",
          "identifier": "ghcr.io/tschoonj/repology-mcp-server:0.1.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T07:26:44.823714Z",
        "updatedAt": "2025-09-29T07:26:44.823714Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.driflyte/driflyte-mcp-server",
      "description": "Driflyte MCP server which lets AI assistants query topic-specific knowledge from web and GitHub.",
      "repository": {
        "url": "https://github.com/serkan-ozal/driflyte-mcp-server",
        "source": "github"
      },
      "version": "0.1.4",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@driflyte/mcp-server",
          "version": "0.1.4",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/mcp"
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/openai"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T07:47:32.615907Z",
        "updatedAt": "2025-09-29T11:59:05.456593Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Decodo/mcp-web-scraper",
      "description": "Enable your AI agents to scrape and parse web content dynamically, including geo-restricted sites",
      "repository": {
        "url": "https://github.com/Decodo/mcp-web-scraper",
        "source": "github"
      },
      "version": "1.0.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@decodo/mcp-server",
          "version": "1.0.3",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Decodo Web Advanced API username",
              "isRequired": true,
              "format": "string",
              "name": "SCRAPER_API_USERNAME"
            },
            {
              "description": "Decodo Web Advanced API password",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "SCRAPER_API_PASSWORD"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T08:00:36.224653Z",
        "updatedAt": "2025-09-29T08:00:36.224653Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/arjunkmrm-local-test2",
      "description": "Send friendly greetings instantly. Learn the origin of 'Hello, World' to add a fun fact to your me…",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@arjunkmrm/local-test2/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T08:52:53.0348Z",
        "updatedAt": "2025-09-29T08:52:53.0348Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.brokerchooser/broker-safety",
      "description": "MCP server offering regulator-sourced legitimacy checks on investment entities by name or URL.",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.brokerchooser.com/servers/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T09:55:15.328085Z",
        "updatedAt": "2025-09-29T09:55:15.328085Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/renCosta2025-context7fork",
      "description": "Get up-to-date, version-specific documentation and code examples from official sources directly in…",
      "repository": {
        "url": "https://github.com/renCosta2025/context7fork",
        "source": "github"
      },
      "version": "1.0.13",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@renCosta2025/context7fork/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T10:26:07.372529Z",
        "updatedAt": "2025-09-29T10:26:07.372529Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/arjunkmrm-test2",
      "description": "Greet anyone by name with a friendly message. Explore the origin of 'Hello, World' to add context…",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@arjunkmrm/test2/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T10:33:30.587409Z",
        "updatedAt": "2025-09-29T10:33:30.587409Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/isnow890-data4library-mcp",
      "description": "책 싫어하는 제가 책에 대해 아는척하고 싶어서 만들었습니다.. 내 주변 도서관 실시간 대출 확인 읽고 싶은 책을 검색하면 주변 도서관 대출 가능 여부를 즉시 확인 굳이 도서관…",
      "repository": {
        "url": "https://github.com/isnow890/data4library-mcp",
        "source": "github"
      },
      "version": "1.0.5",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@isnow890/data4library-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T10:45:21.467985Z",
        "updatedAt": "2025-09-29T10:45:21.467985Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/anirbanbasu-frankfurtermcp",
      "description": "A MCP server for the Frankfurter API for currency exchange rates.",
      "repository": {
        "url": "https://github.com/anirbanbasu/frankfurtermcp",
        "source": "github"
      },
      "version": "1.15.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@anirbanbasu/frankfurtermcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T11:56:36.086039Z",
        "updatedAt": "2025-09-29T11:56:36.086039Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.driflyte/driflyte-mcp-server",
      "description": "Driflyte MCP server which lets AI assistants query topic-specific knowledge from web and GitHub.",
      "repository": {
        "url": "https://github.com/serkan-ozal/driflyte-mcp-server",
        "source": "github"
      },
      "version": "0.1.5",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@driflyte/mcp-server",
          "version": "0.1.5",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/mcp"
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/openai"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T11:59:05.447267Z",
        "updatedAt": "2025-09-29T12:02:45.777745Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/yuna0x0-hackmd-mcp",
      "description": "Interact with your HackMD notes and teams seamlessly. Manage your notes, view reading history, and…",
      "repository": {
        "url": "https://github.com/yuna0x0/hackmd-mcp",
        "source": "github"
      },
      "version": "1.5.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@yuna0x0/hackmd-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T12:00:09.735168Z",
        "updatedAt": "2025-09-29T12:48:21.854663Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.driflyte/driflyte-mcp-server",
      "description": "Driflyte MCP server which lets AI assistants query topic-specific knowledge from web and GitHub.",
      "repository": {
        "url": "https://github.com/serkan-ozal/driflyte-mcp-server",
        "source": "github"
      },
      "version": "0.1.6",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@driflyte/mcp-server",
          "version": "0.1.6",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/mcp"
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/openai"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T12:02:45.769143Z",
        "updatedAt": "2025-09-29T12:06:22.390263Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.driflyte/driflyte-mcp-server",
      "description": "Driflyte MCP server which lets AI assistants query topic-specific knowledge from web and GitHub.",
      "repository": {
        "url": "https://github.com/serkan-ozal/driflyte-mcp-server",
        "source": "github"
      },
      "version": "0.1.7",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@driflyte/mcp-server",
          "version": "0.1.7",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/mcp"
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/openai"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T12:06:22.37782Z",
        "updatedAt": "2025-09-29T12:13:56.684926Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/yuna0x0-anilist-mcp",
      "description": "Access and interact with anime and manga data seamlessly. Retrieve detailed information about your…",
      "repository": {
        "url": "https://github.com/yuna0x0/anilist-mcp",
        "source": "github"
      },
      "version": "1.3.6",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@yuna0x0/anilist-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T12:06:58.353802Z",
        "updatedAt": "2025-09-29T12:46:26.537327Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/arjunkmrm-scrapermcp_el",
      "description": "Extract and parse web pages into clean HTML, links, or Markdown. Handle dynamic, complex, or block…",
      "repository": {
        "url": "https://github.com/arjunkmrm/ScraperMcp_el",
        "source": "github"
      },
      "version": "1.15.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@arjunkmrm/scrapermcp_el/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T12:13:12.824688Z",
        "updatedAt": "2025-09-29T12:13:12.824688Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.driflyte/driflyte-mcp-server",
      "description": "Driflyte MCP server which lets AI assistants query topic-specific knowledge from web and GitHub.",
      "repository": {
        "url": "https://github.com/serkan-ozal/driflyte-mcp-server",
        "source": "github"
      },
      "version": "0.1.8",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@driflyte/mcp-server",
          "version": "0.1.8",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/mcp"
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/openai"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T12:13:56.668952Z",
        "updatedAt": "2025-09-29T14:12:11.331686Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.yuna0x0/hackmd-mcp",
      "description": "A Model Context Protocol server for integrating HackMD's note-taking platform with AI assistants.",
      "repository": {
        "url": "https://github.com/yuna0x0/hackmd-mcp",
        "source": "github"
      },
      "version": "1.5.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "hackmd-mcp",
          "version": "1.5.3",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your HackMD API token for API authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "HACKMD_API_TOKEN"
            },
            {
              "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
              "format": "string",
              "default": "https://api.hackmd.io/v1",
              "name": "HACKMD_API_URL"
            }
          ]
        },
        {
          "registryType": "oci",
          "identifier": "ghcr.io/yuna0x0/hackmd-mcp:1.5.3",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your HackMD API token for API authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "HACKMD_API_TOKEN"
            },
            {
              "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
              "format": "string",
              "default": "https://api.hackmd.io/v1",
              "name": "HACKMD_API_URL"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/yuna0x0/hackmd-mcp/releases/download/v1.5.3/hackmd-mcp-1.5.3.mcpb",
          "fileSha256": "9b216bf4c286ccc1b70f411f0b23777efbae0ab7239b8c99170cfac3b706721a",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your HackMD API token for API authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "HACKMD_API_TOKEN"
            },
            {
              "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
              "format": "string",
              "default": "https://api.hackmd.io/v1",
              "name": "HACKMD_API_URL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T12:42:14.506623Z",
        "updatedAt": "2025-09-29T12:42:14.506623Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.yuna0x0/anilist-mcp",
      "description": "AniList MCP server for accessing AniList API data",
      "repository": {
        "url": "https://github.com/yuna0x0/anilist-mcp",
        "source": "github"
      },
      "version": "1.3.7",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "anilist-mcp",
          "version": "1.3.7",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "AniList API token for authenticated requests",
              "format": "string",
              "isSecret": true,
              "name": "ANILIST_TOKEN"
            }
          ]
        },
        {
          "registryType": "oci",
          "identifier": "ghcr.io/yuna0x0/anilist-mcp:1.3.7",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "AniList API token for authenticated requests",
              "format": "string",
              "isSecret": true,
              "name": "ANILIST_TOKEN"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/yuna0x0/anilist-mcp/releases/download/v1.3.7/anilist-mcp-1.3.7.mcpb",
          "fileSha256": "29088017de549959db323020223aa564606285935bc5dbc7b2e2657ef4aba66a",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "AniList API token for authenticated requests",
              "format": "string",
              "isSecret": true,
              "name": "ANILIST_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T12:44:11.439741Z",
        "updatedAt": "2025-09-29T12:44:11.439741Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/bergeramit-bergeramit-hw3-tech-1",
      "description": "Add two numbers instantly and generate friendly greetings on demand. Speed up quick math and perso…",
      "repository": {
        "url": "https://github.com/bergeramit/bergeramit-hw3-tech",
        "source": "github"
      },
      "version": "1.15.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@bergeramit/bergeramit-hw3-tech-1/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T12:45:13.016748Z",
        "updatedAt": "2025-09-29T12:45:13.016748Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/yuna0x0-anilist-mcp",
      "description": "Access and interact with anime and manga data seamlessly. Retrieve detailed information about your…",
      "repository": {
        "url": "https://github.com/yuna0x0/anilist-mcp",
        "source": "github"
      },
      "version": "1.3.7",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@yuna0x0/anilist-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T12:46:26.531503Z",
        "updatedAt": "2025-09-29T12:46:26.531503Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/yuna0x0-hackmd-mcp",
      "description": "Interact with your HackMD notes and teams seamlessly. Manage your notes, view reading history, and…",
      "repository": {
        "url": "https://github.com/yuna0x0/hackmd-mcp",
        "source": "github"
      },
      "version": "1.5.3",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@yuna0x0/hackmd-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T12:48:21.84888Z",
        "updatedAt": "2025-09-29T12:48:21.84888Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/bergeramit-bergeramit-hw3-tech",
      "description": "Create friendly greetings and add two numbers instantly. Speed up simple tasks and streamline ligh…",
      "repository": {
        "url": "https://github.com/bergeramit/bergeramit-hw3-tech",
        "source": "github"
      },
      "version": "1.15.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@bergeramit/bergeramit-hw3-tech/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T12:49:39.923485Z",
        "updatedAt": "2025-09-29T12:49:39.923485Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/arjunkmrm-tutorials",
      "description": "Analyze stocks and SEC filings to surface key insights, from price and volume to insider activity…",
      "repository": {
        "url": "https://github.com/arjunkmrm/tutorials",
        "source": "github",
        "subfolder": "smithery-example/financial-server"
      },
      "version": "1.15.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@arjunkmrm/tutorials/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T12:55:16.098975Z",
        "updatedAt": "2025-09-29T12:55:16.098975Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/sebastianall1977-gmail-mcp",
      "description": "Manage Gmail end-to-end: search, read, send, draft, label, and organize threads. Automate workflow…",
      "repository": {
        "url": "https://github.com/sebastianall1977/gmail-mcp",
        "source": "github"
      },
      "version": "1.7.4",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@sebastianall1977/gmail-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T13:55:24.480833Z",
        "updatedAt": "2025-09-29T13:55:24.480833Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/Leghis-smart-thinking",
      "description": "Find relevant Smart‑Thinking memories fast. Fetch full entries by ID to get complete context. Spee…",
      "repository": {
        "url": "https://github.com/Leghis/Smart-Thinking",
        "source": "github"
      },
      "version": "0.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Leghis/smart-thinking/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T14:04:13.933299Z",
        "updatedAt": "2025-09-29T14:04:13.933299Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.driflyte/driflyte-mcp-server",
      "description": "Driflyte MCP server which lets AI assistants query topic-specific knowledge from web and GitHub.",
      "repository": {
        "url": "https://github.com/serkan-ozal/driflyte-mcp-server",
        "source": "github"
      },
      "version": "0.1.11",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@driflyte/mcp-server",
          "version": "0.1.11",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/mcp"
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/openai"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T14:12:11.322354Z",
        "updatedAt": "2025-09-29T14:59:11.627226Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ChromeDevTools/chrome-devtools-mcp",
      "description": "MCP server for Chrome DevTools",
      "repository": {
        "url": "https://github.com/ChromeDevTools/chrome-devtools-mcp",
        "source": "github"
      },
      "version": "0.5.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "chrome-devtools-mcp",
          "version": "0.5.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T14:19:58.808306Z",
        "updatedAt": "2025-09-29T14:56:48.9843Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ChromeDevTools/chrome-devtools-mcp",
      "description": "MCP server for Chrome DevTools",
      "repository": {
        "url": "https://github.com/ChromeDevTools/chrome-devtools-mcp",
        "source": "github"
      },
      "version": "0.5.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "chrome-devtools-mcp",
          "version": "0.5.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T14:56:48.980977Z",
        "updatedAt": "2025-09-29T14:56:48.980977Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.driflyte/driflyte-mcp-server",
      "description": "Driflyte MCP server which lets AI assistants query topic-specific knowledge from web and GitHub.",
      "repository": {
        "url": "https://github.com/serkan-ozal/driflyte-mcp-server",
        "source": "github"
      },
      "version": "0.1.12",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@driflyte/mcp-server",
          "version": "0.1.12",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/mcp"
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/openai"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T14:59:11.600468Z",
        "updatedAt": "2025-09-29T15:04:42.418978Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.driflyte/driflyte-mcp-server",
      "description": "Driflyte MCP server which lets AI assistants query topic-specific knowledge from web and GitHub.",
      "repository": {
        "url": "https://github.com/serkan-ozal/driflyte-mcp-server",
        "source": "github"
      },
      "version": "0.1.13",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@driflyte/mcp-server",
          "version": "0.1.13",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/mcp"
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/openai"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T15:04:42.401678Z",
        "updatedAt": "2025-09-29T16:01:11.635791Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/mfukushim-map-traveler-mcp",
      "description": "Create immersive travel experiences by instructing an avatar to navigate Google Maps. Report on th…",
      "repository": {
        "url": "https://github.com/mfukushim/map-traveler-mcp",
        "source": "github"
      },
      "version": "0.2.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@mfukushim/map-traveler-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T15:14:24.853367Z",
        "updatedAt": "2025-09-29T15:14:24.853367Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cloudquery/mcp",
      "description": "CloudQuery MCP server for asset inventory data. Supports CLI, PostgreSQL, and Platform modes.",
      "repository": {},
      "version": "1.6.6",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/cloudquery/mcp-releases/releases/download/v1.6.6/cq-platform-mcp_1.6.6_darwin_arm64.mcpb",
          "fileSha256": "8d2fbad62831940a0cd045a7adf185d90a9a021d0a060958b63f195a90d5c3d0",
          "runtimeHint": "darwin-arm64",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/cloudquery/mcp-releases/releases/download/v1.6.6/cq-platform-mcp_1.6.6_darwin_amd64.mcpb",
          "fileSha256": "75b9e79090d5f18287b9203be9b70a0188d9d38f0566fac06826f578932c88ee",
          "runtimeHint": "darwin-amd64",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/cloudquery/mcp-releases/releases/download/v1.6.6/cq-platform-mcp_1.6.6_linux_arm64.mcpb",
          "fileSha256": "eed268cc27341355ec9c4f5546c15ded0f6950e99498400b850ee6634d50a6b0",
          "runtimeHint": "linux-arm64",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/cloudquery/mcp-releases/releases/download/v1.6.6/cq-platform-mcp_1.6.6_linux_amd64.mcpb",
          "fileSha256": "2c6e9cc43d369ded1bcc4c143d177a302da2aa0c0ed555a81a1c0f1ffeb802bf",
          "runtimeHint": "linux-amd64",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/cloudquery/mcp-releases/releases/download/v1.6.6/cq-platform-mcp_1.6.6_windows_amd64.mcpb",
          "fileSha256": "c81da56dcf9b2e6739cc561aca6bb6d999b31db335369a8f6636942c7e6e319f",
          "runtimeHint": "windows-amd64",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T15:17:47.22008Z",
        "updatedAt": "2025-09-29T16:54:44.658951Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.teamwork/mcp",
      "description": "The Teamwork.com official MCP server helps teams efficiently manage client projects with AI.",
      "repository": {
        "url": "https://github.com/teamwork/mcp",
        "source": "github"
      },
      "version": "1.5.4",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/teamwork/mcp:v1.5.4",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "TW_MCP_BEARER_TOKEN"
            },
            {
              "description": "Choose log output format between 'text' or 'json'. Default is 'text'.",
              "format": "string",
              "name": "TW_MCP_LOG_FORMAT"
            },
            {
              "description": "Choose log level between 'debug', 'info', 'warn' or 'error'. Default is 'info'.",
              "format": "string",
              "name": "TW_MCP_LOG_LEVEL"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T15:22:52.190824Z",
        "updatedAt": "2025-09-29T15:48:22.792114Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.teamwork/mcp",
      "description": "The Teamwork.com official MCP server helps teams efficiently manage client projects with AI.",
      "repository": {
        "url": "https://github.com/teamwork/mcp",
        "source": "github"
      },
      "version": "1.5.5",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/teamwork/mcp:v1.5.5",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "TW_MCP_BEARER_TOKEN"
            },
            {
              "description": "Choose log output format between 'text' or 'json'. Default is 'text'.",
              "format": "string",
              "name": "TW_MCP_LOG_FORMAT"
            },
            {
              "description": "Choose log level between 'debug', 'info', 'warn' or 'error'. Default is 'info'.",
              "format": "string",
              "name": "TW_MCP_LOG_LEVEL"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T15:48:22.784028Z",
        "updatedAt": "2025-09-29T16:24:46.701866Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.driflyte/driflyte-mcp-server",
      "description": "Driflyte MCP server which lets AI assistants query topic-specific knowledge from web and GitHub.",
      "repository": {
        "url": "https://github.com/serkan-ozal/driflyte-mcp-server",
        "source": "github"
      },
      "version": "0.1.14",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@driflyte/mcp-server",
          "version": "0.1.14",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/mcp"
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/openai"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T16:01:11.618716Z",
        "updatedAt": "2025-09-30T05:25:53.00191Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.teamwork/mcp",
      "description": "The Teamwork.com official MCP server helps teams efficiently manage client projects with AI.",
      "repository": {
        "url": "https://github.com/teamwork/mcp",
        "source": "github"
      },
      "version": "1.5.6",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/teamwork/mcp:v1.5.6",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "TW_MCP_BEARER_TOKEN"
            },
            {
              "description": "Choose log output format between 'text' or 'json'. Default is 'text'.",
              "format": "string",
              "name": "TW_MCP_LOG_FORMAT"
            },
            {
              "description": "Choose log level between 'debug', 'info', 'warn' or 'error'. Default is 'info'.",
              "format": "string",
              "name": "TW_MCP_LOG_LEVEL"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T16:24:46.68581Z",
        "updatedAt": "2025-09-29T16:24:46.68581Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cloudquery/mcp",
      "description": "CloudQuery MCP server for asset inventory data. Supports CLI, PostgreSQL, and Platform modes.",
      "repository": {},
      "version": "1.6.8",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/cloudquery/mcp-releases/releases/download/v1.6.8/cq-platform-mcp_1.6.8_darwin_arm64.mcpb",
          "fileSha256": "4358a05946f1d66bba4eb99413e6a4048b8bc22503a8cb0af477f163cf41cd6b",
          "runtimeHint": "darwin-arm64",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/cloudquery/mcp-releases/releases/download/v1.6.8/cq-platform-mcp_1.6.8_darwin_amd64.mcpb",
          "fileSha256": "dd2987cc5ed558a1437095d27241b36729297484b3474e6e8337c2c254580a40",
          "runtimeHint": "darwin-amd64",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/cloudquery/mcp-releases/releases/download/v1.6.8/cq-platform-mcp_1.6.8_linux_arm64.mcpb",
          "fileSha256": "38329ed2fd87991aea3f1273da67ad0a458517793e0bdde5a464f00d4bb4aa7e",
          "runtimeHint": "linux-arm64",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/cloudquery/mcp-releases/releases/download/v1.6.8/cq-platform-mcp_1.6.8_linux_amd64.mcpb",
          "fileSha256": "7ff22d7bbd43e78c61bceead5943c94a0ef916d1f1d958e00a392531a76e15e2",
          "runtimeHint": "linux-amd64",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/cloudquery/mcp-releases/releases/download/v1.6.8/cq-platform-mcp_1.6.8_windows_amd64.mcpb",
          "fileSha256": "2c4faeadc742296aa20fada1b227f1afba77be165051b21788dac4af94be3bef",
          "runtimeHint": "windows-amd64",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T16:54:44.655421Z",
        "updatedAt": "2025-09-30T07:07:22.194586Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/hollaugo-financial-research-mcp-server",
      "description": "Analyze stocks with summaries, price targets, and analyst recommendations. Track SEC filings, divi…",
      "repository": {
        "url": "https://github.com/hollaugo/tutorials",
        "source": "github",
        "subfolder": "smithery-example/financial-server"
      },
      "version": "1.15.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@hollaugo/financial-research-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T16:56:54.604903Z",
        "updatedAt": "2025-09-29T16:56:54.604903Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.eghuzefa/engineer-your-data",
      "description": "MCP server for data engineering: validation, transformation, visualization, and APIs.",
      "repository": {},
      "version": "0.1.0",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "engineer-your-data",
          "version": "0.1.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T18:45:52.006376Z",
        "updatedAt": "2025-09-30T08:19:45.563296Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.jkawamoto/mcp-youtube-transcript",
      "description": "An MCP server retrieving transcripts of YouTube videos",
      "repository": {
        "url": "https://github.com/jkawamoto/mcp-youtube-transcript",
        "source": "github"
      },
      "version": "0.5.2",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/jkawamoto/mcp-youtube-transcript/releases/download/v0.5.2/mcp-youtube-transcript.mcpb",
          "fileSha256": "5b0494110d53c9e6fb8b689ebb5876a3e98351f7db64142eca874a0bb6ca188f",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T19:06:38.699033Z",
        "updatedAt": "2025-09-30T08:58:54.512237Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.2.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.2.3",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.2.3",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T20:10:17.759056Z",
        "updatedAt": "2025-09-29T20:59:55.941118Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.aikts/yandex-tracker-mcp",
      "description": "MCP server for Yandex Tracker API.",
      "repository": {},
      "version": "0.4.5",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "yandex-tracker-mcp",
          "version": "0.4.5",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T20:19:14.60056Z",
        "updatedAt": "2025-09-29T20:19:14.60056Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.2.4",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.2.4",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.2.4",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T20:59:55.933733Z",
        "updatedAt": "2025-09-29T22:30:42.092284Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/serkan-ozal-driflyte-mcp-server",
      "description": "Discover available topics and explore up-to-date, topic-tagged web content. Search to surface the…",
      "repository": {
        "url": "https://github.com/serkan-ozal/driflyte-mcp-server",
        "source": "github"
      },
      "version": "0.1.14",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@serkan-ozal/driflyte-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T21:11:04.756927Z",
        "updatedAt": "2025-09-30T05:31:42.633526Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/bielacki-igdb-mcp-server",
      "description": "Explore and discover video games from the Internet Game Database. Search titles, view detailed inf…",
      "repository": {
        "url": "https://github.com/bielacki/igdb-mcp-server",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@bielacki/igdb-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T21:24:56.528261Z",
        "updatedAt": "2025-09-29T21:24:56.528261Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.therealtimex/un-datacommons-mcp",
      "description": "MCP server to query Data Commons indicators and observations (base or custom).",
      "repository": {
        "url": "https://github.com/therealtimex/un-datacommons-mcp",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "un-datacommons-mcp",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Data Commons API key from apikeys.datacommons.org",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "DC_API_KEY"
            },
            {
              "description": "Type of Data Commons to use: base|custom (default: base)",
              "format": "string",
              "name": "DC_TYPE"
            },
            {
              "description": "Custom DC base URL when DC_TYPE=custom",
              "format": "string",
              "name": "CUSTOM_DC_URL"
            },
            {
              "description": "Comma-separated root topic DCIDs for custom DCs",
              "format": "string",
              "name": "DC_ROOT_TOPIC_DCIDS"
            },
            {
              "description": "Search scope for custom DCs: base_only|custom_only|base_and_custom",
              "format": "string",
              "name": "DC_SEARCH_SCOPE"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T21:53:16.395496Z",
        "updatedAt": "2025-09-29T21:53:16.395496Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.therealtimex/charts-mcp",
      "description": "MCP server for generating charts using AntV. Supports various chart types through MCP tools.",
      "repository": {},
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@realtimex/charts-mcp",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T22:16:43.896971Z",
        "updatedAt": "2025-09-30T03:37:43.053109Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.2.5",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.2.5",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.2.5",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T22:30:42.083622Z",
        "updatedAt": "2025-09-29T22:30:42.083622Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.toby/mirror-mcp",
      "description": "Mirror gives LLMs the ability to self-reflect with MCP sampling.",
      "repository": {
        "url": "https://github.com/toby/mirror-mcp",
        "source": "github"
      },
      "version": "0.0.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mirror-mcp",
          "version": "0.0.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T23:29:33.9883Z",
        "updatedAt": "2025-09-29T23:29:33.9883Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.GoogleCloudPlatform/gemini-cloud-assist-mcp",
      "description": "MCP Server for understanding, managing & troubleshooting your GCP environment.",
      "repository": {
        "url": "https://github.com/GoogleCloudPlatform/gemini-cloud-assist-mcp",
        "source": "github"
      },
      "version": "0.1.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@google-cloud/gemini-cloud-assist-mcp",
          "version": "0.1.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T23:42:19.208646Z",
        "updatedAt": "2025-09-29T23:42:19.208646Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/git-mcp-server",
      "description": "Comprehensive Git MCP server enabling native git tools including clone, commit, worktree, & more.",
      "repository": {
        "url": "https://github.com/cyanheads/git-mcp-server",
        "source": "github"
      },
      "version": "2.3.5",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.3.5",
          "runtimeHint": "node",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "dist/index.js",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Specifies the transport mechanism for the server.",
              "isRequired": true,
              "format": "string",
              "default": "stdio",
              "name": "MCP_TRANSPORT_TYPE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Set to 'true' to enable GPG/SSH signing for commits made via the git_commit tool.",
              "format": "string",
              "default": "false",
              "name": "GIT_SIGN_COMMITS"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.3.5",
          "runtimeHint": "node",
          "transport": {
            "type": "streamable-http",
            "url": "http://127.0.0.1:3015/mcp"
          },
          "packageArguments": [
            {
              "value": "dist/index.js",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Specifies the transport mechanism for the server.",
              "isRequired": true,
              "format": "string",
              "default": "http",
              "name": "MCP_TRANSPORT_TYPE"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3015",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The host interface for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The HTTP endpoint path for MCP requests.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_STRATEGY"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Set to 'true' to enable GPG/SSH signing for commits made via the git_commit tool.",
              "format": "string",
              "default": "false",
              "name": "GIT_SIGN_COMMITS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-29T23:55:39.600169Z",
        "updatedAt": "2025-09-29T23:55:39.600169Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/aamangeldi-dad-jokes-mcp",
      "description": "Get a random dad joke or search by keyword to fit any moment. Retrieve specific jokes by ID for re…",
      "repository": {
        "url": "https://github.com/aamangeldi/dad-jokes-mcp",
        "source": "github"
      },
      "version": "1.15.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@aamangeldi/dad-jokes-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T00:21:20.72031Z",
        "updatedAt": "2025-09-30T00:21:20.72031Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/xinkuang-china-stock-mcp",
      "description": "Access real-time and historical market data for China A-shares and Hong Kong stocks, along with ne…",
      "repository": {
        "url": "https://github.com/xinkuang/china-stock-mcp",
        "source": "github"
      },
      "version": "1.15.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@xinkuang/china-stock-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T01:41:03.405268Z",
        "updatedAt": "2025-09-30T01:41:03.405268Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/cindyloo-dropbox-mcp-server",
      "description": "Search, browse, and read your Dropbox files. Find documents by name or content, list folders, and…",
      "repository": {
        "url": "https://github.com/cindyloo/dropbox-mcp-server",
        "source": "github"
      },
      "version": "1.15.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@cindyloo/dropbox-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T02:02:08.583268Z",
        "updatedAt": "2025-09-30T02:02:08.583268Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/jessicayanwang-test",
      "description": "Fetch latest and historical currency exchange rates from Frankfurter. Convert amounts between curr…",
      "repository": {
        "url": "https://github.com/jessicayanwang/frankfurtermcp",
        "source": "github"
      },
      "version": "1.13.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@jessicayanwang/test/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T02:03:00.046026Z",
        "updatedAt": "2025-09-30T02:03:00.046026Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/miguelgarzons-mcp-cun",
      "description": "Greet people by name with friendly, personalized messages. Add a warm touch to onboarding, demos,…",
      "repository": {
        "url": "https://github.com/miguelgarzons/mcp-cun",
        "source": "github"
      },
      "version": "1.15.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@miguelgarzons/mcp-cun/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T03:30:01.02979Z",
        "updatedAt": "2025-09-30T03:30:01.02979Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.therealtimex/charts-mcp",
      "description": "MCP server for generating charts using AntV. Supports various chart types through MCP tools.",
      "repository": {},
      "version": "1.0.2",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@realtimex/charts-mcp",
          "version": "1.0.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T03:37:43.048664Z",
        "updatedAt": "2025-09-30T03:59:50.27374Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.gjeltep/app-store-connect-mcp",
      "description": "Interact with Apple's App Store Connect API",
      "repository": {
        "url": "https://github.com/gjeltep/app-store-connect-mcp",
        "source": "github"
      },
      "version": "0.1.0",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "app-store-connect-mcp",
          "version": "0.1.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "App Store Connect API Key ID",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "APP_STORE_KEY_ID"
            },
            {
              "description": "App Store Connect Issuer ID",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "APP_STORE_ISSUER_ID"
            },
            {
              "description": "Path to the .p8 private key file for App Store Connect authentication",
              "isRequired": true,
              "format": "string",
              "name": "APP_STORE_PRIVATE_KEY_PATH"
            },
            {
              "description": "Default App ID for operations (optional)",
              "format": "string",
              "name": "APP_STORE_APP_ID"
            },
            {
              "description": "Key type: 'team' or 'individual' (defaults to 'team')",
              "format": "string",
              "name": "APP_STORE_KEY_TYPE"
            },
            {
              "description": "Comma-separated list of OAuth scopes (optional)",
              "format": "string",
              "name": "APP_STORE_SCOPE"
            },
            {
              "description": "Subject for individual keys (optional)",
              "format": "string",
              "name": "APP_STORE_SUBJECT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T03:46:56.434066Z",
        "updatedAt": "2025-09-30T03:46:56.434066Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.therealtimex/charts-mcp",
      "description": "MCP server for generating charts using AntV. Supports various chart types through MCP tools.",
      "repository": {},
      "version": "1.0.3",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@realtimex/charts-mcp",
          "version": "1.0.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T03:59:50.270894Z",
        "updatedAt": "2025-09-30T09:05:51.368385Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/keithah-hostex-mcp",
      "description": "Manage your Hostex vacation rentals—properties, reservations, availability, listings, and guest me…",
      "repository": {
        "url": "https://github.com/keithah/hostex-mcp",
        "source": "github"
      },
      "version": "0.2.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@keithah/hostex-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T04:10:38.519183Z",
        "updatedAt": "2025-09-30T04:10:38.519183Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/keithah-tessie-mcp",
      "description": "Unofficial integration! ## ✨ Key Features ### 💰 Financial Intelligence - **Smart Charging Cost An…",
      "repository": {
        "url": "https://github.com/keithah/tessie-mcp",
        "source": "github"
      },
      "version": "1.1.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@keithah/tessie-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T04:22:17.289426Z",
        "updatedAt": "2025-09-30T04:22:17.289426Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.driflyte/driflyte-mcp-server",
      "description": "Driflyte MCP server which lets AI assistants query topic-specific knowledge from web and GitHub.",
      "repository": {
        "url": "https://github.com/serkan-ozal/driflyte-mcp-server",
        "source": "github"
      },
      "version": "0.1.15",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@driflyte/mcp-server",
          "version": "0.1.15",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/mcp"
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.driflyte.com/openai"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T05:25:52.990027Z",
        "updatedAt": "2025-09-30T05:25:52.990027Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/serkan-ozal-driflyte-mcp-server",
      "description": "Discover available topics and explore up-to-date, topic-tagged web content. Search to surface the…",
      "repository": {
        "url": "https://github.com/serkan-ozal/driflyte-mcp-server",
        "source": "github"
      },
      "version": "0.1.15",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@serkan-ozal/driflyte-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T05:31:42.627664Z",
        "updatedAt": "2025-09-30T05:31:42.627664Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/mrugankpednekar-bill_splitter_mcp",
      "description": "Track and split shared expenses across trips, events, and groups. Create groups, add expenses, and…",
      "repository": {
        "url": "https://github.com/mrugankpednekar/bill_splitter_mcp",
        "source": "github"
      },
      "version": "1.15.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@mrugankpednekar/bill_splitter_mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T06:59:08.923806Z",
        "updatedAt": "2025-09-30T06:59:08.923806Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cloudquery/mcp",
      "description": "CloudQuery MCP server for asset inventory data. Supports CLI, PostgreSQL, and Platform modes.",
      "repository": {},
      "version": "1.6.9",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/cloudquery/mcp-releases/releases/download/v1.6.9/cq-platform-mcp_1.6.9_darwin_arm64.mcpb",
          "fileSha256": "174f039a7ae18ec2fb03243a72209ad2b5388f3ef47b3e843e1f5b418457d60a",
          "runtimeHint": "darwin-arm64",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/cloudquery/mcp-releases/releases/download/v1.6.9/cq-platform-mcp_1.6.9_darwin_amd64.mcpb",
          "fileSha256": "7c13732f1f836520880575f2635e305b2031d0bd7889d1b61bb0443154009d7f",
          "runtimeHint": "darwin-amd64",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/cloudquery/mcp-releases/releases/download/v1.6.9/cq-platform-mcp_1.6.9_linux_arm64.mcpb",
          "fileSha256": "eac79b5dd29bf11c47823ab2c77d64adbdc1170001398c36f172b49b61567123",
          "runtimeHint": "linux-arm64",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/cloudquery/mcp-releases/releases/download/v1.6.9/cq-platform-mcp_1.6.9_linux_amd64.mcpb",
          "fileSha256": "2cee76607b1b3e26eb0e8f083611909cc9a40a61ddf6cdafe43d5076d448f60a",
          "runtimeHint": "linux-amd64",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/cloudquery/mcp-releases/releases/download/v1.6.9/cq-platform-mcp_1.6.9_windows_amd64.mcpb",
          "fileSha256": "19470e7e2a37abdee17194c71ff24f38c88fa8a6136f13db4b8dc4f11346c320",
          "runtimeHint": "windows-amd64",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T07:07:22.188419Z",
        "updatedAt": "2025-09-30T07:07:22.188419Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.eghuzefa/engineer-your-data",
      "description": "MCP server for data engineering: validation, transformation, visualization, and APIs.",
      "repository": {},
      "version": "0.1.1",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "engineer-your-data",
          "version": "0.1.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T08:19:45.554786Z",
        "updatedAt": "2025-09-30T15:40:05.213556Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.jkawamoto/mcp-youtube-transcript",
      "description": "An MCP server retrieving transcripts of YouTube videos",
      "repository": {
        "url": "https://github.com/jkawamoto/mcp-youtube-transcript",
        "source": "github"
      },
      "version": "0.5.3",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/jkawamoto/mcp-youtube-transcript/releases/download/v0.5.3/mcp-youtube-transcript.mcpb",
          "fileSha256": "aaa5a35af911a670d7b45845568d91ec7db485b8604b498ffb4edb720ccd8537",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T08:58:54.509019Z",
        "updatedAt": "2025-09-30T08:58:54.509019Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.therealtimex/charts-mcp",
      "description": "MCP server for generating charts using AntV. Supports various chart types through MCP tools.",
      "repository": {},
      "version": "1.0.4",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@realtimex/charts-mcp",
          "version": "1.0.4",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T09:05:51.361761Z",
        "updatedAt": "2025-09-30T09:05:51.361761Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/zhaoganghao-hellomcp",
      "description": "Greet people by name with friendly, concise messages. Explore the origin of 'Hello, World' for fun…",
      "repository": {
        "url": "https://github.com/zhaoganghao/hellomcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@zhaoganghao/hellomcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T10:35:36.775049Z",
        "updatedAt": "2025-09-30T10:35:36.775049Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.karanb192/reddit-mcp-buddy",
      "description": "Reddit browser for AI assistants. Browse posts, search content, analyze users. No API keys needed.",
      "repository": {
        "url": "https://github.com/karanb192/reddit-mcp-buddy",
        "source": "github",
        "id": "1056452116"
      },
      "version": "1.1.8",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "reddit-mcp-buddy",
          "version": "1.1.8",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T13:25:32.624236Z",
        "updatedAt": "2025-09-30T13:28:46.157268Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.karanb192/reddit-mcp-buddy",
      "description": "Reddit browser for AI assistants. Browse posts, search content, analyze users. No API keys needed.",
      "repository": {
        "url": "https://github.com/karanb192/reddit-mcp-buddy",
        "source": "github",
        "id": "1056452116"
      },
      "version": "1.1.9",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "reddit-mcp-buddy",
          "version": "1.1.9",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T13:28:46.15385Z",
        "updatedAt": "2025-09-30T13:47:00.854675Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.karanb192/reddit-mcp-buddy",
      "description": "Reddit browser for AI assistants. Browse posts, search content, analyze users. No API keys needed.",
      "repository": {
        "url": "https://github.com/karanb192/reddit-mcp-buddy",
        "source": "github",
        "id": "1056452116"
      },
      "version": "1.1.10",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "reddit-mcp-buddy",
          "version": "1.1.10",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T13:47:00.851054Z",
        "updatedAt": "2025-09-30T13:47:00.851054Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.nailuoGG/anki-mcp-server",
      "description": "MCP server enabling LLMs to interact with Anki flashcard software through AnkiConnect",
      "repository": {},
      "version": "0.1.8",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "anki-mcp-server",
          "version": "0.1.8",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T14:21:03.323446Z",
        "updatedAt": "2025-09-30T14:21:03.323446Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.github/github-mcp-server",
      "description": "Connect AI assistants to GitHub - manage repos, issues, PRs, and workflows through natural language.",
      "repository": {
        "url": "https://github.com/github/github-mcp-server",
        "source": "github"
      },
      "version": "0.17.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/github/github-mcp-server:0.17.0",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "GITHUB_PERSONAL_ACCESS_TOKEN",
              "type": "positional",
              "valueHint": "env_var_name"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/github/github-mcp-server",
              "type": "positional",
              "valueHint": "image_name"
            }
          ],
          "environmentVariables": [
            {
              "description": "Your GitHub personal access token with appropriate scopes.",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "GITHUB_PERSONAL_ACCESS_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T14:42:48.228262Z",
        "updatedAt": "2025-09-30T14:42:48.228262Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/Open-Scout-mcp",
      "description": "Create and publish one-pagers and boards for your organization. Upload images from the web, update…",
      "repository": {},
      "version": "0.1.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Open-Scout/mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T15:08:39.247411Z",
        "updatedAt": "2025-09-30T15:08:39.247411Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Saidiibrahim/search-papers",
      "description": "An MCP server to search papers from arXiv",
      "repository": {
        "url": "https://github.com/Saidiibrahim/search-papers",
        "source": "github"
      },
      "version": "0.1.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "search-papers",
          "version": "0.1.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T15:13:39.921862Z",
        "updatedAt": "2025-09-30T15:13:39.921862Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.eghuzefa/engineer-your-data",
      "description": "MCP server for data engineering: validation, transformation, visualization, and APIs.",
      "repository": {},
      "version": "0.1.2",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "engineer-your-data",
          "version": "0.1.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T15:40:05.209531Z",
        "updatedAt": "2025-09-30T15:58:02.19082Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.eghuzefa/engineer-your-data",
      "description": "MCP server for data engineering: validation, transformation, visualization, and APIs.",
      "repository": {},
      "version": "0.1.3",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "engineer-your-data",
          "version": "0.1.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T15:58:02.181915Z",
        "updatedAt": "2025-09-30T15:58:02.181915Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.kayembahamid/cybersim-pro",
      "description": "Cybersecurity training, simulation, and incident response MCP server",
      "repository": {
        "url": "https://github.com/kayembahamid/cybersim-pro",
        "source": "github",
        "subfolder": "cybersim-pro-mcp"
      },
      "version": "1.0.1",
      "websiteUrl": "https://kayembahamid.github.io",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/hamcodes/cybersim-pro-mcp:v1.0.1",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "type": "named",
              "name": "--rm"
            },
            {
              "type": "named",
              "name": "-i"
            },
            {
              "value": "hamcodes/cybersim-pro-mcp:v1.0.1",
              "type": "positional"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T16:26:24.948928Z",
        "updatedAt": "2025-09-30T16:26:24.948928Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/alex-llm-attack-mcp-server",
      "description": "Query and retrieve information about various adversarial tactics and techniques used in cyber atta…",
      "repository": {
        "url": "https://github.com/alex-llm/attAck-mcp-server",
        "source": "github"
      },
      "version": "2.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@alex-llm/attack-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T17:11:31.060313Z",
        "updatedAt": "2025-09-30T17:11:31.060313Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "co.axiom/mcp",
      "description": "List datasets, schemas, run APL queries, and use prompts for exploration, anomalies, and monitoring.",
      "repository": {
        "url": "https://github.com/axiomhq/mcp",
        "source": "github",
        "subfolder": "apps/mcp"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.axiom.co/sse"
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.axiom.co/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T18:09:02.670593Z",
        "updatedAt": "2025-09-30T18:09:02.670593Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.mapbox/mcp-server",
      "description": "Geospatial intelligence with Mapbox APIs like geocoding, POI search, directions, isochrones, etc.",
      "repository": {
        "url": "https://github.com/mapbox/mcp-server",
        "source": "github"
      },
      "version": "0.5.4-dev-5",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@mapbox/mcp-server",
          "version": "0.5.4-dev-5",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your Mapbox access token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "MAPBOX_ACCESS_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T19:13:33.421401Z",
        "updatedAt": "2025-09-30T19:13:33.421401Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.2.7",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.2.7",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.2.7",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T19:36:36.603269Z",
        "updatedAt": "2025-09-30T19:36:36.603269Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.motherduckdb/mcp-server-motherduck",
      "description": "Fast analytics and data processing with DuckDB and MotherDuck",
      "repository": {
        "url": "https://github.com/motherduckdb/mcp-server-motherduck",
        "source": "github"
      },
      "version": "0.7.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-server-motherduck",
          "version": "0.7.0",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "description": "Transport type for MCP server",
              "default": "stdio",
              "choices": [
                "stdio",
                "sse",
                "stream"
              ],
              "type": "named",
              "name": "--transport"
            },
            {
              "description": "Port to listen on for sse and stream transport mode",
              "format": "number",
              "default": "8000",
              "type": "named",
              "name": "--port"
            },
            {
              "description": "Path to local DuckDB database file or MotherDuck database",
              "default": "md:",
              "type": "named",
              "name": "--db-path"
            },
            {
              "description": "Access token to use for MotherDuck database connections",
              "isSecret": true,
              "type": "named",
              "name": "--motherduck-token"
            },
            {
              "description": "Flag for connecting to DuckDB or MotherDuck in read-only mode",
              "type": "named",
              "name": "--read-only"
            },
            {
              "description": "Home directory for DuckDB",
              "type": "named",
              "name": "--home-dir"
            },
            {
              "description": "Flag for connecting to MotherDuck in SaaS mode (disables filesystem and write permissions for local DuckDB)",
              "type": "named",
              "name": "--saas-mode"
            },
            {
              "description": "Enable JSON responses for HTTP stream (only supported for stream transport)",
              "type": "named",
              "name": "--json-response"
            }
          ],
          "environmentVariables": [
            {
              "description": "Access token to use for MotherDuck database connections",
              "isSecret": true,
              "name": "motherduck_token"
            },
            {
              "description": "Home directory for DuckDB (used as default if --home-dir not specified)",
              "name": "HOME"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T20:27:29.780756Z",
        "updatedAt": "2025-09-30T20:27:29.780756Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.2.8",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.2.8",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.2.8",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T21:44:47.642915Z",
        "updatedAt": "2025-09-30T21:44:47.642915Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.3.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.3.0",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.3.0",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T22:36:16.955582Z",
        "updatedAt": "2025-09-30T22:36:16.955582Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.3.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.3.1",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.3.1",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-09-30T22:56:18.617042Z",
        "updatedAt": "2025-09-30T22:56:18.617042Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.VictoriaMetrics-Community/mcp-victoriametrics",
      "description": "MCP Server for VictoriaMetrics. Provides integration with VictoriaMetrics API and documentation",
      "repository": {
        "url": "https://github.com/VictoriaMetrics-Community/mcp-victoriametrics",
        "source": "github"
      },
      "version": "1.13.1",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/victoriametrics-community/mcp-victoriametrics:v1.13.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "URL to VictoriaMetrics instance (it should be root URL of vmsingle or vmselect), for example http://localhost:8428 or https://play.victoriametrics.com",
              "isRequired": true,
              "format": "string",
              "name": "VM_INSTANCE_ENTRYPOINT"
            },
            {
              "description": "Type of VictoriaMetrics instance (single / cluster)",
              "isRequired": true,
              "format": "string",
              "name": "VM_INSTANCE_TYPE"
            },
            {
              "description": "Authentication token for VictoriaMetrics API",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "VM_INSTANCE_BEARER_TOKEN"
            },
            {
              "description": "Optional: API key from VictoriaMetrics Cloud Console (if you have deployment in VictoriaMetrics Cloud)",
              "format": "string",
              "isSecret": true,
              "name": "VMC_API_KEY"
            },
            {
              "description": "Comma-separated list of tools to disable",
              "format": "string",
              "name": "MCP_DISABLED_TOOLS"
            },
            {
              "description": "Disable all resources (documentation tool will continue to work)",
              "format": "boolean",
              "name": "MCP_DISABLE_RESOURCES"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-01T00:29:41.277327Z",
        "updatedAt": "2025-10-01T00:29:41.277327Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.VictoriaMetrics-Community/mcp-victorialogs",
      "description": "MCP Server for VictoriaLogs. Provides integration with VictoriaLogs API and documentation",
      "repository": {
        "url": "https://github.com/VictoriaMetrics-Community/mcp-victorialogs",
        "source": "github"
      },
      "version": "1.3.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/victoriametrics-community/mcp-victorialogs:v1.3.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "URL to VictoriaMetrics instance (it should be root URL of vmlingle or vlselect), for example http://localhost:9428 or https://play-vmlogs.victoriametrics.com",
              "isRequired": true,
              "format": "string",
              "name": "VL_INSTANCE_ENTRYPOINT"
            },
            {
              "description": "Type of VictoriaMetrics instance (single / cluster)",
              "isRequired": true,
              "format": "string",
              "name": "VL_INSTANCE_TYPE"
            },
            {
              "description": "Authentication token for VictoriaMetrics API",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "VL_INSTANCE_BEARER_TOKEN"
            },
            {
              "description": "Comma-separated list of tools to disable",
              "format": "string",
              "name": "MCP_DISABLED_TOOLS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-01T00:50:57.06251Z",
        "updatedAt": "2025-10-01T00:50:57.06251Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.gjeltep/app-store-connect-mcp",
      "description": "Interact with Apple's App Store Connect API",
      "repository": {
        "url": "https://github.com/gjeltep/app-store-connect-mcp",
        "source": "github"
      },
      "version": "0.1.1",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "app-store-connect-mcp",
          "version": "0.1.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "App Store Connect API Key ID",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "APP_STORE_KEY_ID"
            },
            {
              "description": "App Store Connect Issuer ID",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "APP_STORE_ISSUER_ID"
            },
            {
              "description": "Path to the .p8 private key file for App Store Connect authentication",
              "isRequired": true,
              "format": "string",
              "name": "APP_STORE_PRIVATE_KEY_PATH"
            },
            {
              "description": "Default App ID for operations (optional)",
              "format": "string",
              "name": "APP_STORE_APP_ID"
            },
            {
              "description": "Key type: 'team' or 'individual' (defaults to 'team')",
              "format": "string",
              "name": "APP_STORE_KEY_TYPE"
            },
            {
              "description": "Comma-separated list of OAuth scopes (optional)",
              "format": "string",
              "name": "APP_STORE_SCOPE"
            },
            {
              "description": "Subject for individual keys (optional)",
              "format": "string",
              "name": "APP_STORE_SUBJECT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-01T01:56:33.165299Z",
        "updatedAt": "2025-10-01T01:56:33.165299Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.compl-i-agent/csf",
      "description": "NIST CSF 2.0 - Professional cybersecurity framework with 11 tools and 12 prompts",
      "repository": {
        "url": "https://github.com/compligent/mcp-platform",
        "source": "github",
        "subfolder": "platform/servers/clients/csf-cli"
      },
      "version": "2.4.5",
      "websiteUrl": "https://compl-i-agent.github.io/csf",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@compligent-mcp/csf",
          "version": "2.4.5",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-01T04:46:30.749852Z",
        "updatedAt": "2025-10-01T04:46:30.749852Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.compl-i-agent/csf",
      "description": "NIST CSF 2.0 - Professional cybersecurity framework with 35 tools and 12 prompts",
      "repository": {
        "url": "https://github.com/compligent/mcp-platform",
        "source": "github",
        "subfolder": "platform/servers/clients/csf-cli"
      },
      "version": "2.4.6",
      "websiteUrl": "https://compl-i-agent.github.io/csf",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@compligent-mcp/csf",
          "version": "2.4.6",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-01T04:57:35.783318Z",
        "updatedAt": "2025-10-01T04:57:35.783318Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.therealtimex/browser-use",
      "description": "AI browser automation - navigate, click, type, extract content, and run autonomous web tasks",
      "repository": {
        "url": "https://github.com/therealtimex/browser-use",
        "source": "github",
        "subfolder": "browser_use/mcp"
      },
      "version": "0.7.10.dev1",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "realtimex-browser-use",
          "version": "0.7.10.dev1",
          "runtimeHint": "uvx",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "value": "realtimex-browser-use[cli]@0.7.10.dev1",
              "type": "positional"
            }
          ],
          "packageArguments": [
            {
              "value": "--mcp",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "OpenAI API key for LLM operations",
              "isRequired": true,
              "isSecret": true,
              "name": "OPENAI_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-01T10:28:55.470372Z",
        "updatedAt": "2025-10-01T10:28:55.470372Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.therealtimex/browser-use",
      "description": "AI browser automation - navigate, click, type, extract content, and run autonomous web tasks",
      "repository": {
        "url": "https://github.com/therealtimex/browser-use",
        "source": "github",
        "subfolder": "browser_use/mcp"
      },
      "version": "0.7.10.dev5",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "realtimex-browser-use",
          "version": "0.7.10.dev5",
          "runtimeHint": "uvx",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "value": "realtimex-browser-use[cli]@0.7.10.dev5",
              "type": "positional"
            }
          ],
          "packageArguments": [
            {
              "value": "--mcp",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "OpenAI API key for LLM operations",
              "isRequired": true,
              "isSecret": true,
              "name": "OPENAI_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-01T11:18:53.744371Z",
        "updatedAt": "2025-10-01T11:18:53.744371Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.therealtimex/browser-use",
      "description": "AI browser automation - navigate, click, type, extract content, and run autonomous web tasks",
      "repository": {
        "url": "https://github.com/therealtimex/browser-use",
        "source": "github",
        "subfolder": "browser_use/mcp"
      },
      "version": "0.7.10",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "realtimex-browser-use",
          "version": "0.7.10",
          "runtimeHint": "uvx",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "value": "realtimex-browser-use[cli]@0.7.10",
              "type": "positional"
            }
          ],
          "packageArguments": [
            {
              "value": "--mcp",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "OpenAI API key for LLM operations",
              "isRequired": true,
              "isSecret": true,
              "name": "OPENAI_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-01T11:22:24.309888Z",
        "updatedAt": "2025-10-01T11:22:24.309888Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "",
      "name": "io.github.toby/mirror-mcp",
      "description": "Mirror MCP: Introspection for LLMs",
      "repository": {
        "url": "https://github.com/toby/mirror-mcp",
        "source": "github"
      },
      "version": "0.0.4",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "mirror-mcp",
          "version": "0.0.4",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "Runtime argument 1",
              "format": "string",
              "value": "mirror-mcp@latest",
              "default": "mirror-mcp@latest",
              "type": "positional",
              "valueHint": "mirror-mcp@latest"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-01T14:57:52.418201Z",
        "updatedAt": "2025-10-01T14:57:52.418201Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.toby/mirror-mcp",
      "description": "Mirror MCP: Introspection for LLMs",
      "repository": {
        "url": "https://github.com/toby/mirror-mcp",
        "source": "github"
      },
      "version": "0.0.5",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "mirror-mcp",
          "version": "0.0.5",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "Runtime argument 1",
              "format": "string",
              "value": "mirror-mcp@latest",
              "default": "mirror-mcp@latest",
              "type": "positional",
              "valueHint": "mirror-mcp@latest"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-01T15:08:06.043579Z",
        "updatedAt": "2025-10-01T15:08:06.043579Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.team-telnyx/telnyx",
      "description": "Official TypeScript library for the Telnyx API",
      "repository": {
        "url": "https://github.com/team-telnyx/telnyx-node",
        "source": "github"
      },
      "version": "3.3.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "telnyx",
          "version": "3.3.3",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your Telnyx API key for authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "TELNYX_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-01T16:38:17.413677Z",
        "updatedAt": "2025-10-01T16:38:17.413677Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "com.devcycle/mcp",
      "description": "DevCycle MCP server for feature flag management",
      "repository": {
        "url": "https://github.com/DevCycleHQ/cli",
        "source": "github"
      },
      "version": "6.1.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.devcycle.com/mcp"
        },
        {
          "type": "sse",
          "url": "https://mcp.devcycle.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-01T20:03:22.897006Z",
        "updatedAt": "2025-10-01T20:03:22.897006Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.vfarcic/dot-ai",
      "description": "AI-powered development platform for Kubernetes deployments and intelligent automation",
      "repository": {
        "url": "https://github.com/vfarcic/dot-ai",
        "source": "github"
      },
      "version": "0.103.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@vfarcic/dot-ai",
          "version": "0.103.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-01T23:41:21.152404Z",
        "updatedAt": "2025-10-01T23:41:21.152404Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.nowledge-co/server.json",
      "description": "A server that provides MCPB package functionality for Nowledge Mem",
      "repository": {
        "url": "https://github.com/nowledge-co/claude-dxt",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "nowledge-mem",
          "version": "1.1.0",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/nowledge-co/claude-dxt/releases/download/v1.0.0/claude-dxt.mcpb",
          "fileSha256": "68d0c882efa7925cd1400a5a6c8e20e2a3b59e7abf8ae6bd45863d0be41aeb9a",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T03:21:13.375747Z",
        "updatedAt": "2025-10-02T03:21:13.375747Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/arjunkmrm-local01",
      "description": "Greet people warmly or roast them with playful banter. Explore the origin of 'Hello, World' for qu…",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@arjunkmrm/local01/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T04:20:15.678667Z",
        "updatedAt": "2025-10-02T04:20:15.678667Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.gitlab/mcp",
      "description": "Official GitLab MCP Server",
      "repository": {
        "url": "https://gitlab.com/gitlab-org/gitlab",
        "source": "gitlab"
      },
      "version": "0.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://gitlab.com/api/v4/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T04:59:37.530539Z",
        "updatedAt": "2025-10-02T04:59:37.530539Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/clinicaltrialsgov-mcp-server",
      "description": "Provides rich tools to search, retrieve, and analyze data from ClinicalTrials.gov API v2.",
      "repository": {
        "url": "https://github.com/cyanheads/clinicaltrialsgov-mcp-server",
        "source": "github"
      },
      "version": "1.2.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "clinicaltrialsgov-mcp-server",
          "version": "1.2.1",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn', 'error').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Storage provider type: 'in-memory', 'filesystem', 'supabase', 'cloudflare-r2', or 'cloudflare-kv'.",
              "format": "string",
              "default": "in-memory",
              "name": "STORAGE_PROVIDER_TYPE"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "clinicaltrialsgov-mcp-server",
          "version": "1.2.1",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3000/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3000",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn', 'error').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Storage provider type: 'in-memory', 'filesystem', 'supabase', 'cloudflare-r2', or 'cloudflare-kv'.",
              "format": "string",
              "default": "in-memory",
              "name": "STORAGE_PROVIDER_TYPE"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T06:39:26.594108Z",
        "updatedAt": "2025-10-02T06:39:26.594108Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/arjunkmrm-brave-search-mcp-server",
      "description": "Search the web, images, videos, news, and local businesses with robust filters, freshness controls…",
      "repository": {
        "url": "https://github.com/arjunkmrm/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.25",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@arjunkmrm/brave-search-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T06:39:58.418517Z",
        "updatedAt": "2025-10-02T06:39:58.418517Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.toby/mirror-mcp",
      "description": "Mirror MCP: Introspection for LLMs",
      "repository": {
        "url": "https://github.com/toby/mirror-mcp",
        "source": "github"
      },
      "version": "0.0.6",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "mirror-mcp",
          "version": "0.0.6",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "Runtime argument 1",
              "format": "string",
              "value": "mirror-mcp@latest",
              "default": "mirror-mcp@latest",
              "type": "positional",
              "valueHint": "mirror-mcp@latest"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T06:45:43.099115Z",
        "updatedAt": "2025-10-02T06:45:43.099115Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/222wcnm-bilistalkermcp",
      "description": "Track Bilibili creators and get the latest updates on videos, dynamics, and articles. Fetch user p…",
      "repository": {
        "url": "https://github.com/222wcnm/BiliStalkerMCP",
        "source": "github"
      },
      "version": "1.15.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@222wcnm/bilistalkermcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T06:57:33.936879Z",
        "updatedAt": "2025-10-02T06:57:33.936879Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/shoumikdc-arxiv-mcp",
      "description": "Discover the latest arXiv papers by category and keyword. Control how many results you get to spee…",
      "repository": {
        "url": "https://github.com/shoumikdc/arXiv-mcp",
        "source": "github"
      },
      "version": "1.15.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@shoumikdc/arxiv-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T06:59:26.159502Z",
        "updatedAt": "2025-10-02T06:59:26.159502Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "com.jumpcloud/jumpcloud-genai",
      "description": "An MCP server that provides an API to LLMs to manage their JumpCloud resources.",
      "repository": {},
      "version": "0.0.38",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.jumpcloud.com/v1"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T07:01:41.082257Z",
        "updatedAt": "2025-10-02T07:01:41.082257Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/clinicaltrialsgov-mcp-server",
      "description": "Provides rich tools to search, retrieve, and analyze data from ClinicalTrials.gov API v2.",
      "repository": {
        "url": "https://github.com/cyanheads/clinicaltrialsgov-mcp-server",
        "source": "github"
      },
      "version": "1.2.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "clinicaltrialsgov-mcp-server",
          "version": "1.2.2",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn', 'error').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Storage provider type: 'in-memory', 'filesystem', 'supabase', 'cloudflare-r2', or 'cloudflare-kv'.",
              "format": "string",
              "default": "in-memory",
              "name": "STORAGE_PROVIDER_TYPE"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "clinicaltrialsgov-mcp-server",
          "version": "1.2.2",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3000/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3000",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn', 'error').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Storage provider type: 'in-memory', 'filesystem', 'supabase', 'cloudflare-r2', or 'cloudflare-kv'.",
              "format": "string",
              "default": "in-memory",
              "name": "STORAGE_PROVIDER_TYPE"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T07:02:45.318019Z",
        "updatedAt": "2025-10-02T07:02:45.318019Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/FelixYifeiWang-felix-mcp-smithery",
      "description": "Streamline your workflow with Felix. Integrate it into your workspace and tailor its behavior to y…",
      "repository": {
        "url": "https://github.com/FelixYifeiWang/felix-mcp-smithery",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@FelixYifeiWang/felix-mcp-smithery/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T07:15:10.498525Z",
        "updatedAt": "2025-10-02T07:15:10.498525Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/cuongpo-coti-mcp",
      "description": "Connect to the COTI blockchain to manage accounts, transfer native tokens, and deploy and operate…",
      "repository": {
        "url": "https://github.com/cuongpo/coti-mcp",
        "source": "github"
      },
      "version": "0.2.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@cuongpo/coti-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T07:26:17.819584Z",
        "updatedAt": "2025-10-02T07:26:17.819584Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.pearl.mcp/pearl-api-mcp-server",
      "description": "Hybrid human + AI expertise for faster, trusted answers and decisions via MCP Server.",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.pearl.com/sse",
          "headers": [
            {
              "description": "Pearl API key for authenticated tool access.",
              "name": "X-API-Key"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.pearl.com/mcp",
          "headers": [
            {
              "description": "Pearl API key for authenticated tool access.",
              "name": "X-API-Key"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T07:26:38.92534Z",
        "updatedAt": "2025-10-02T07:26:38.92534Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.toby/mirror-mcp",
      "description": "Mirror MCP: Introspection for LLMs",
      "repository": {
        "url": "https://github.com/toby/mirror-mcp",
        "source": "github"
      },
      "version": "0.0.7",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "mirror-mcp",
          "version": "0.0.7",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "Runtime argument 1",
              "format": "string",
              "value": "mirror-mcp@latest",
              "default": "mirror-mcp@latest",
              "type": "positional",
              "valueHint": "mirror-mcp@latest"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T07:49:48.218998Z",
        "updatedAt": "2025-10-02T07:49:48.218998Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/clinicaltrialsgov-mcp-server",
      "description": "Provides rich tools to search, retrieve, and analyze data from ClinicalTrials.gov API v2.",
      "repository": {
        "url": "https://github.com/cyanheads/clinicaltrialsgov-mcp-server",
        "source": "github"
      },
      "version": "1.3.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "clinicaltrialsgov-mcp-server",
          "version": "1.3.0",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn', 'error').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Storage provider type: 'in-memory', 'filesystem', 'supabase', 'cloudflare-r2', or 'cloudflare-kv'.",
              "format": "string",
              "default": "in-memory",
              "name": "STORAGE_PROVIDER_TYPE"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "clinicaltrialsgov-mcp-server",
          "version": "1.3.0",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3000/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3000",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn', 'error').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Storage provider type: 'in-memory', 'filesystem', 'supabase', 'cloudflare-r2', or 'cloudflare-kv'.",
              "format": "string",
              "default": "in-memory",
              "name": "STORAGE_PROVIDER_TYPE"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T08:01:25.707814Z",
        "updatedAt": "2025-10-02T08:01:25.707814Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.3.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.3.2",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.3.2",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T08:22:22.24279Z",
        "updatedAt": "2025-10-02T08:22:22.24279Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/arjunkmrm-time",
      "description": "Get the current time anywhere and access concise timezone information. Set your preferred timezone…",
      "repository": {
        "url": "https://github.com/arjunkmrm/time",
        "source": "github"
      },
      "version": "1.15.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@arjunkmrm/time/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T08:35:12.663422Z",
        "updatedAt": "2025-10-02T08:35:12.663422Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.3.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.3.3",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.3.3",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T08:40:07.98099Z",
        "updatedAt": "2025-10-02T08:40:07.98099Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/clinicaltrialsgov-mcp-server",
      "description": "Provides rich tools to search, retrieve, and analyze data from ClinicalTrials.gov API v2.",
      "repository": {
        "url": "https://github.com/cyanheads/clinicaltrialsgov-mcp-server",
        "source": "github"
      },
      "version": "1.3.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "clinicaltrialsgov-mcp-server",
          "version": "1.3.1",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn', 'error').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Storage provider type: 'in-memory', 'filesystem', 'supabase', 'cloudflare-r2', or 'cloudflare-kv'.",
              "format": "string",
              "default": "in-memory",
              "name": "STORAGE_PROVIDER_TYPE"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "clinicaltrialsgov-mcp-server",
          "version": "1.3.1",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3000/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3017",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn', 'error').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Storage provider type: 'in-memory', 'filesystem', 'supabase', 'cloudflare-r2', or 'cloudflare-kv'.",
              "format": "string",
              "default": "in-memory",
              "name": "STORAGE_PROVIDER_TYPE"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T08:42:43.117085Z",
        "updatedAt": "2025-10-02T08:42:43.117085Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/clinicaltrialsgov-mcp-server",
      "description": "Provides rich tools to search, retrieve, and analyze data from ClinicalTrials.gov API v2.",
      "repository": {
        "url": "https://github.com/cyanheads/clinicaltrialsgov-mcp-server",
        "source": "github"
      },
      "version": "1.4.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "clinicaltrialsgov-mcp-server",
          "version": "1.4.0",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn', 'error').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Storage provider type: 'in-memory', 'filesystem', 'supabase', 'cloudflare-r2', or 'cloudflare-kv'.",
              "format": "string",
              "default": "in-memory",
              "name": "STORAGE_PROVIDER_TYPE"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "clinicaltrialsgov-mcp-server",
          "version": "1.4.0",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3000/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3017",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn', 'error').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Storage provider type: 'in-memory', 'filesystem', 'supabase', 'cloudflare-r2', or 'cloudflare-kv'.",
              "format": "string",
              "default": "in-memory",
              "name": "STORAGE_PROVIDER_TYPE"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T09:55:55.48594Z",
        "updatedAt": "2025-10-02T09:55:55.48594Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.toby/mirror-mcp",
      "description": "Mirror MCP: Introspection for LLMs",
      "repository": {
        "url": "https://github.com/toby/mirror-mcp",
        "source": "github"
      },
      "version": "0.0.8",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "mirror-mcp",
          "version": "0.0.8",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "Runtime argument 1",
              "format": "string",
              "value": "mirror-mcp@latest",
              "default": "mirror-mcp@latest",
              "type": "positional",
              "valueHint": "mirror-mcp@latest"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T10:35:09.187411Z",
        "updatedAt": "2025-10-02T10:35:09.187411Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.jotform/mcp",
      "description": "Jotform MCP",
      "repository": {
        "url": "https://github.com/jotform/mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.jotform.com/"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T10:40:19.104322Z",
        "updatedAt": "2025-10-02T10:40:19.104322Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.rogiervdbrnk/mcp-real-estate-server",
      "description": "MCP server for Dutch real estate data including BAG registry, energy labels, and zoning info.",
      "repository": {
        "url": "https://github.com/rogiervdbrnk/mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-real-estate-server",
          "version": "1.0.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "API key for Dutch BAG (Building and Address Registry) access - required for building data queries",
              "format": "string",
              "isSecret": true,
              "name": "BAG_API_KEY"
            },
            {
              "description": "API key for Dutch energy label database access - required for energy efficiency data",
              "format": "string",
              "isSecret": true,
              "name": "ENERGY_LABEL_API_KEY"
            },
            {
              "description": "Database connection URL for authentication and usage tracking features",
              "format": "string",
              "isSecret": true,
              "name": "DATABASE_URL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T10:57:33.396167Z",
        "updatedAt": "2025-10-02T10:57:33.396167Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.rogiervdbrnk/mcp-real-estate-server",
      "description": "MCP server for Dutch real estate data including BAG registry, energy labels, and zoning info.",
      "repository": {
        "url": "https://github.com/rogiervdbrnk/mcp-server",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-real-estate-server",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "API key for access, request at https://mcp-real-estate-http-server-muiw4w4zbq-ew.a.run.app",
              "format": "string",
              "isSecret": true,
              "name": "API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T11:05:58.611077Z",
        "updatedAt": "2025-10-02T11:05:58.611077Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.rogiervdbrnk/mcp-real-estate-server",
      "description": "MCP server for Dutch real estate data including BAG registry, energy labels, and zoning info.",
      "repository": {
        "url": "https://github.com/rogiervdbrnk/mcp-server",
        "source": "github"
      },
      "version": "1.0.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-real-estate-server",
          "version": "1.0.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "API key for access, request at https://mcp-real-estate-http-server-muiw4w4zbq-ew.a.run.app",
              "format": "string",
              "isSecret": true,
              "name": "API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T11:10:13.370671Z",
        "updatedAt": "2025-10-02T11:10:13.370671Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.rogiervdbrnk/mcp-real-estate-server",
      "description": "MCP server for Dutch real estate data including BAG registry, energy labels, and zoning info.",
      "repository": {
        "url": "https://github.com/rogiervdbrnk/mcp-server",
        "source": "github"
      },
      "version": "1.0.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-real-estate-server",
          "version": "1.0.3",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "API key for access, request at https://mcp-real-estate-http-server-muiw4w4zbq-ew.a.run.app",
              "format": "string",
              "isSecret": true,
              "name": "API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T11:13:12.841952Z",
        "updatedAt": "2025-10-02T11:13:12.841952Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.rogiervdbrnk/mcp-real-estate-server",
      "description": "MCP server for Dutch real estate data including BAG registry, energy labels, and zoning info.",
      "repository": {
        "url": "https://github.com/rogiervdbrnk/mcp-server",
        "source": "github"
      },
      "version": "1.0.4",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-real-estate-server",
          "version": "1.0.4",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "API key for access, request at https://mcp-real-estate-http-server-muiw4w4zbq-ew.a.run.app",
              "format": "string",
              "isSecret": true,
              "name": "API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T11:20:07.311601Z",
        "updatedAt": "2025-10-02T11:20:07.311601Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.rogiervdbrnk/mcp-real-estate-server",
      "description": "MCP server for Dutch real estate data including BAG registry, energy labels, and zoning info.",
      "repository": {
        "url": "https://github.com/rogiervdbrnk/mcp-server",
        "source": "github"
      },
      "version": "1.0.5",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-real-estate-server",
          "version": "1.0.5",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "API key for access, request at https://mcp-real-estate-http-server-muiw4w4zbq-ew.a.run.app",
              "format": "string",
              "isSecret": true,
              "name": "API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T11:25:05.527292Z",
        "updatedAt": "2025-10-02T11:25:05.527292Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.rogiervdbrnk/mcp-real-estate-server",
      "description": "MCP server for Dutch real estate data including BAG registry, energy labels, and zoning info.",
      "repository": {
        "url": "https://github.com/rogiervdbrnk/mcp-server",
        "source": "github"
      },
      "version": "1.0.6",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/rogiervdbrnk/mcp-server:1.0.6",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T11:46:03.899967Z",
        "updatedAt": "2025-10-02T11:46:03.899967Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.rogiervdbrnk/mcp-real-estate-server",
      "description": "MCP server for Dutch real estate data. Requires API_KEY_ID - register at Railway app for key.",
      "repository": {
        "url": "https://github.com/rogiervdbrnk/mcp-server",
        "source": "github"
      },
      "version": "1.0.7",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/rogiervdbrnk/mcp-server:1.0.7",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T11:57:12.974972Z",
        "updatedAt": "2025-10-02T11:57:12.974972Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.rogiervdbrnk/mcp-real-estate-server",
      "description": "MCP server for Dutch real estate data. Requires API_KEY_ID - register at Railway app for key.",
      "repository": {
        "url": "https://github.com/rogiervdbrnk/mcp-server",
        "source": "github"
      },
      "version": "1.0.8",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/rogiervdbrnk/mcp-server:1.0.8",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T12:01:55.46817Z",
        "updatedAt": "2025-10-02T12:01:55.46817Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.rogiervdbrnk/mcp-real-estate-server",
      "description": "MCP server for Dutch real estate data. Requires API_KEY_ID - register at Railway app for key.",
      "repository": {
        "url": "https://github.com/rogiervdbrnk/mcp-server",
        "source": "github"
      },
      "version": "1.0.9",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/rogiervdbrnk/mcp-server:1.0.9",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T12:05:58.868713Z",
        "updatedAt": "2025-10-02T12:05:58.868713Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.rogiervdbrnk/mcp-real-estate-server",
      "description": "MCP server for Dutch real estate data. API_KEY_ID optional for testing.",
      "repository": {
        "url": "https://github.com/rogiervdbrnk/mcp-server",
        "source": "github"
      },
      "version": "1.1.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/rogiervdbrnk/mcp-server:1.1.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T12:10:41.639729Z",
        "updatedAt": "2025-10-02T12:10:41.639729Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.rogiervdbrnk/mcp-real-estate-server",
      "description": "MCP server for Dutch real estate data. API_KEY_ID optional for testing.",
      "repository": {
        "url": "https://github.com/rogiervdbrnk/mcp-server",
        "source": "github"
      },
      "version": "1.1.1",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/rogiervdbrnk/mcp-server:1.1.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T12:16:56.197191Z",
        "updatedAt": "2025-10-02T12:16:56.197191Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/jekakos-mcp-user-data-enrichment",
      "description": "Enrich user data by adding social network links based on provided personal information. Integrate…",
      "repository": {
        "url": "https://github.com/jekakos/mcp-user-data-enrichment",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@jekakos/mcp-user-data-enrichment/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T12:50:51.350056Z",
        "updatedAt": "2025-10-02T12:50:51.350056Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.PagerDuty/pagerduty-mcp",
      "description": "PagerDuty's official MCP server which provides tools to interact with your PagerDuty account.",
      "repository": {
        "url": "https://github.com/PagerDuty/pagerduty-mcp-server",
        "source": "github"
      },
      "version": "0.2.1",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "pagerduty-mcp",
          "version": "0.2.1",
          "runtimeHint": "uvx",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "--enable-write-tools",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "PagerDuty User API Token - obtain from User Settings > API Access in your PagerDuty account",
              "name": "PAGERDUTY_USER_API_KEY"
            },
            {
              "description": "PagerDuty API host URL (default: https://api.pagerduty.com, EU: https://api.eu.pagerduty.com)",
              "name": "PAGERDUTY_API_HOST"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T14:01:05.05888Z",
        "updatedAt": "2025-10-02T14:01:05.05888Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/nickthelegend-test-mcp",
      "description": "Create friendly, personalized greetings in seconds. Toggle Pirate Mode to speak like a pirate for…",
      "repository": {},
      "version": "1.15.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@nickthelegend/test-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T14:15:26.542177Z",
        "updatedAt": "2025-10-02T14:15:26.542177Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.netdata/mcp-server",
      "description": "AI-powered infrastructure monitoring with real-time metrics, logs, alerts, and ML anomaly detection.",
      "repository": {
        "url": "https://github.com/netdata/netdata",
        "source": "github",
        "subfolder": "docs/netdata-ai/mcp"
      },
      "version": "2.7.0"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T15:15:23.468738Z",
        "updatedAt": "2025-10-02T15:15:23.468738Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.netdata/mcp-server",
      "description": "AI-powered infrastructure monitoring with real-time metrics, logs, alerts, and ML anomaly detection.",
      "repository": {
        "url": "https://github.com/netdata/netdata",
        "source": "github",
        "subfolder": "docs/netdata-ai/mcp"
      },
      "version": "2.7.1"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T15:16:31.197495Z",
        "updatedAt": "2025-10-02T15:16:31.197495Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.netdata/mcp-server",
      "description": "AI-powered infrastructure monitoring with real-time metrics, logs, alerts, and ML anomaly detection.",
      "repository": {
        "url": "https://github.com/netdata/netdata",
        "source": "github",
        "subfolder": "docs/netdata-ai/mcp"
      },
      "version": "2.7.1-1"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T15:17:51.78818Z",
        "updatedAt": "2025-10-02T15:17:51.78818Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/cuongpo-coti-mcp-1",
      "description": "Manage COTI accounts, deploy private ERC20 and ERC721 contracts, and transfer tokens and NFTs with…",
      "repository": {
        "url": "https://github.com/cuongpo/coti-mcp",
        "source": "github"
      },
      "version": "0.2.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@cuongpo/coti-mcp-1/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T15:24:18.456616Z",
        "updatedAt": "2025-10-02T15:24:18.456616Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "co.contraption/mcp",
      "description": "An MCP server that provides [describe what your server does]",
      "repository": {
        "url": "https://github.com/contraptionco/mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.contraption.co/"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T15:38:37.916768Z",
        "updatedAt": "2025-10-02T15:38:37.916768Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/IlyaGusev-academia_mcp",
      "description": "Search arXiv and ACL Anthology, retrieve citations and references, and browse web sources to accel…",
      "repository": {
        "url": "https://github.com/IlyaGusev/academia_mcp",
        "source": "github"
      },
      "version": "1.16.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@IlyaGusev/academia_mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T18:00:50.572805Z",
        "updatedAt": "2025-10-02T18:00:50.572805Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "dev.looptool/looptool",
      "description": "An MCP server that automatically collects feedback on your MCP server.",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://www.api.looptool.dev/mcp",
          "headers": [
            {
              "description": "Authorization Bearer header containing API key",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T18:08:05.667746Z",
        "updatedAt": "2025-10-02T18:08:05.667746Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/leandrogavidia-vechain-mcp-server",
      "description": "Search VeChain documentation, query on-chain data, and fetch fee suggestions with direct links to…",
      "repository": {
        "url": "https://github.com/leandrogavidia/vechain-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@leandrogavidia/vechain-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T18:35:25.040994Z",
        "updatedAt": "2025-10-02T18:35:25.040994Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/eliu243-oura-mcp-server-2",
      "description": "Connect your Oura Ring account to enable secure, authenticated access in your workflows. Generate…",
      "repository": {
        "url": "https://github.com/eliu243/oura-mcp-server",
        "source": "github"
      },
      "version": "1.16.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@eliu243/oura-mcp-server-2/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T18:40:49.71696Z",
        "updatedAt": "2025-10-02T18:40:49.71696Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/eliu243-oura-mcp-server-eliu",
      "description": "Connect your Oura Ring account securely in minutes. Enable authorized access to your sleep, activi…",
      "repository": {
        "url": "https://github.com/eliu243/oura-mcp-server",
        "source": "github"
      },
      "version": "1.16.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@eliu243/oura-mcp-server-eliu/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T18:40:51.593152Z",
        "updatedAt": "2025-10-02T18:40:51.593152Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/eliu243-oura-mcp-server",
      "description": "Connect your Oura Ring account and enable access to your wellness data in apps and automations. In…",
      "repository": {
        "url": "https://github.com/eliu243/oura-mcp-server",
        "source": "github"
      },
      "version": "1.16.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@eliu243/oura-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T18:41:13.003678Z",
        "updatedAt": "2025-10-02T18:41:13.003678Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.joshmsimpson/exiftool",
      "description": "Read, write, and remove metadata from 150+ file formats using ExifTool",
      "repository": {
        "url": "https://github.com/joshmsimpson/exiftool_mcp",
        "source": "github"
      },
      "version": "0.1.5",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "exiftool-mcp",
          "version": "0.1.5",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T19:36:56.362373Z",
        "updatedAt": "2025-10-02T19:36:56.362373Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.joshmsimpson/exiftool",
      "description": "Read, write, and remove metadata from 150+ file formats using ExifTool",
      "repository": {
        "url": "https://github.com/joshmsimpson/exiftool_mcp",
        "source": "github"
      },
      "version": "0.1.6",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "exiftool-mcp",
          "version": "0.1.6",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T19:57:51.949845Z",
        "updatedAt": "2025-10-02T19:57:51.949845Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.pab1it0/prometheus-mcp-server",
      "description": "MCP server providing Prometheus metrics access and PromQL query execution for AI assistants",
      "repository": {
        "url": "https://github.com/pab1it0/prometheus-mcp-server",
        "source": "github"
      },
      "version": "1.3.1",
      "websiteUrl": "https://pab1it0.github.io/prometheus-mcp-server",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/pab1it0/prometheus-mcp-server:1.3.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Prometheus server URL (e.g., http://localhost:9090)",
              "isRequired": true,
              "format": "string",
              "name": "PROMETHEUS_URL"
            },
            {
              "description": "Username for Prometheus basic authentication",
              "format": "string",
              "name": "PROMETHEUS_USERNAME"
            },
            {
              "description": "Password for Prometheus basic authentication",
              "format": "string",
              "isSecret": true,
              "name": "PROMETHEUS_PASSWORD"
            },
            {
              "description": "Bearer token for Prometheus authentication",
              "format": "string",
              "isSecret": true,
              "name": "PROMETHEUS_TOKEN"
            },
            {
              "description": "Organization ID for multi-tenant Prometheus setups",
              "format": "string",
              "name": "ORG_ID"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T20:07:04.4245Z",
        "updatedAt": "2025-10-02T20:07:04.4245Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.aikts/yandex-tracker-mcp",
      "description": "MCP server for Yandex Tracker API.",
      "repository": {},
      "version": "0.4.6",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "yandex-tracker-mcp",
          "version": "0.4.6",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T20:37:28.356994Z",
        "updatedAt": "2025-10-02T20:37:28.356994Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.iunera/druid-mcp-server",
      "description": "AI-powered MCP server for Apache Druid cluster management and analytic",
      "repository": {
        "url": "https://github.com/iunera/druid-mcp-server",
        "source": "github"
      },
      "version": "1.4.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/iunera/druid-mcp-server:1.4.0",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Druid router URL for connecting to the Druid cluster",
              "format": "string",
              "name": "DRUID_ROUTER_URL"
            },
            {
              "description": "Username for Druid authentication (optional)",
              "format": "string",
              "name": "DRUID_AUTH_USERNAME"
            },
            {
              "description": "Password for Druid authentication (optional)",
              "format": "string",
              "name": "DRUID_AUTH_PASSWORD"
            },
            {
              "description": "Enable SSL/TLS support for Druid connections",
              "format": "boolean",
              "name": "DRUID_SSL_ENABLED"
            },
            {
              "description": "Skip SSL certificate verification (for development/testing only)",
              "format": "boolean",
              "name": "DRUID_SSL_SKIP_VERIFICATION"
            },
            {
              "description": "Enable read-only mode (only GET requests and SQL queries allowed)",
              "format": "boolean",
              "name": "DRUID_MCP_READONLY_ENABLED"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T21:09:21.736111Z",
        "updatedAt": "2025-10-02T21:09:21.736111Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/afgong-sqlite-mcp-server",
      "description": "Explore your Messages SQLite database to browse tables and inspect schemas with ease. Run flexible…",
      "repository": {
        "url": "https://github.com/afgong/sqlite-mcp-server",
        "source": "github",
        "subfolder": "sqlite-explorer-fastmcp-mcp-server"
      },
      "version": "1.16.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@afgong/sqlite-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T21:47:24.293477Z",
        "updatedAt": "2025-10-02T21:47:24.293477Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/protein-mcp-server",
      "description": "MCP Server for 3D protein structural data retrieval & analysis from RCSB PDB, PDBe, and UniProt.",
      "repository": {
        "url": "https://github.com/cyanheads/protein-mcp-server",
        "source": "github"
      },
      "version": "1.0.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "protein-mcp-server",
          "version": "1.0.3",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "protein-mcp-server",
          "version": "1.0.3",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T22:53:52.408607Z",
        "updatedAt": "2025-10-02T22:53:52.408607Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/truss44-mcp-crypto-price",
      "description": "Provide real-time cryptocurrency price data and market analysis.",
      "repository": {
        "url": "https://github.com/truss44/mcp-crypto-price",
        "source": "github"
      },
      "version": "2.1.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@truss44/mcp-crypto-price/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T23:25:46.643562Z",
        "updatedAt": "2025-10-02T23:25:46.643562Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/pubmed-mcp-server",
      "description": "Comprehensive PubMed MCP Server to search, retrieve, and analyze biomedical literature from NCBI.",
      "repository": {
        "url": "https://github.com/cyanheads/pubmed-mcp-server",
        "source": "github"
      },
      "version": "1.4.5",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/pubmed-mcp-server",
          "version": "1.4.5",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Your NCBI API key for higher rate limits.",
              "format": "string",
              "name": "NCBI_API_KEY"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/pubmed-mcp-server",
          "version": "1.4.5",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3017/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The host for the HTTP server.",
              "format": "string",
              "default": "localhost",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port for the HTTP server.",
              "format": "string",
              "default": "3017",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for MCP requests.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Your NCBI API key for higher rate limits.",
              "format": "string",
              "name": "NCBI_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-02T23:33:18.616247Z",
        "updatedAt": "2025-10-02T23:33:18.616247Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/samihalawa-whatsapp-go-mcp",
      "description": "Scan QR codes and go! No more troublesome autos or APIs! Send text messages, images, links, locati…",
      "repository": {
        "url": "https://github.com/samihalawa/whatsapp-go-mcp",
        "source": "github"
      },
      "version": "v7.5.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@samihalawa/whatsapp-go-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-03T00:18:16.874195Z",
        "updatedAt": "2025-10-03T00:18:16.874195Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/BowenXU0126-aistudio_hw3",
      "description": "Send personalized greetings with optional pirate flair. Compose friendly salutations for any name…",
      "repository": {
        "url": "https://github.com/BowenXU0126/aistudio_hw3",
        "source": "github"
      },
      "version": "1.16.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@BowenXU0126/aistudio_hw3/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-03T00:54:01.690641Z",
        "updatedAt": "2025-10-03T00:54:01.690641Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/feeefapp-mcp",
      "description": "Enable AI assistants to interact seamlessly with Feeef e-commerce stores, products, and orders usi…",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@feeefapp/mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-03T01:55:09.587519Z",
        "updatedAt": "2025-10-03T01:55:09.587519Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/jenniferjiang0511-mit-ai-studio-hw3",
      "description": "Greet people by name and check local forecasts and weather alerts across the U.S. Switch to a play…",
      "repository": {
        "url": "https://github.com/jenniferjiang0511/MIT-AI-studio-HW3",
        "source": "github"
      },
      "version": "1.15.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@jenniferjiang0511/mit-ai-studio-hw3/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-03T03:01:55.290688Z",
        "updatedAt": "2025-10-03T03:01:55.290688Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/Phionx-mcp-hello-server",
      "description": "Send personalized greetings to anyone. Enable Pirate Mode for swashbuckling salutations. Explore t…",
      "repository": {
        "url": "https://github.com/Phionx/mcp-hello-server",
        "source": "github"
      },
      "version": "1.16.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Phionx/mcp-hello-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-03T06:11:06.81562Z",
        "updatedAt": "2025-10-03T06:11:06.81562Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.smartbear/smartbear-mcp",
      "description": "MCP server for AI access to SmartBear tools, including BugSnag, Reflect, API Hub, PactFlow.",
      "repository": {
        "url": "https://github.com/SmartBear/smartbear-mcp",
        "source": "github"
      },
      "version": "0.7.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@smartbear/mcp",
          "version": "0.7.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "BugSnag auth token. Leave empty to disable BugSnag tools. Learn more: https://developer.smartbear.com/smartbear-mcp/docs/bugsnag-integration",
              "isSecret": true,
              "name": "BUGSNAG_AUTH_TOKEN"
            },
            {
              "description": "BugSnag project API key (optional; narrows interactions to a single project). Learn more: https://developer.smartbear.com/smartbear-mcp/docs/bugsnag-integration",
              "name": "BUGSNAG_PROJECT_API_KEY"
            },
            {
              "description": "Reflect API token. Leave empty to disable Reflect tools. Learn more: https://developer.smartbear.com/smartbear-mcp/docs/test-hub-integration",
              "isSecret": true,
              "name": "REFLECT_API_TOKEN"
            },
            {
              "description": "API Hub API key. Leave empty to disable API Hub tools. Learn more: https://developer.smartbear.com/smartbear-mcp/docs/api-hub-integration",
              "isSecret": true,
              "name": "API_HUB_API_KEY"
            },
            {
              "description": "PactFlow/Pact Broker base URL. Leave empty to disable Pact tools. Learn more: https://developer.smartbear.com/smartbear-mcp/docs/contract-testing-with-pactflow",
              "name": "PACT_BROKER_BASE_URL"
            },
            {
              "description": "PactFlow authentication token. Learn more: https://developer.smartbear.com/smartbear-mcp/docs/contract-testing-with-pactflow",
              "isSecret": true,
              "name": "PACT_BROKER_TOKEN"
            },
            {
              "description": "Pact Broker username (alternative to token). Learn more: https://developer.smartbear.com/smartbear-mcp/docs/contract-testing-with-pactflow",
              "name": "PACT_BROKER_USERNAME"
            },
            {
              "description": "Pact Broker password (alternative to token). Learn more: https://developer.smartbear.com/smartbear-mcp/docs/contract-testing-with-pactflow",
              "isSecret": true,
              "name": "PACT_BROKER_PASSWORD"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-03T06:12:16.550775Z",
        "updatedAt": "2025-10-03T06:12:16.550775Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/ChiR24-unreal_mcp",
      "description": "Control Unreal Engine to browse assets, import content, and manage levels and sequences. Automate…",
      "repository": {
        "url": "https://github.com/ChiR24/Unreal_mcp",
        "source": "github"
      },
      "version": "0.4.4",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@ChiR24/unreal_mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-03T07:10:16.958159Z",
        "updatedAt": "2025-10-03T07:10:16.958159Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/ChiR24-unreal_mcp_server",
      "description": "A comprehensive Model Context Protocol (MCP) server that enables AI assistants to control Unreal E…",
      "repository": {
        "url": "https://github.com/ChiR24/Unreal_mcp",
        "source": "github"
      },
      "version": "0.4.4",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@ChiR24/unreal_mcp_server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-03T07:12:00.299485Z",
        "updatedAt": "2025-10-03T07:12:00.299485Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/arjunkmrm-test0",
      "description": "Get the current time in any timezone and quickly look up common timezone info. Set a default timez…",
      "repository": {
        "url": "https://github.com/arjunkmrm/time",
        "source": "github"
      },
      "version": "1.15.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@arjunkmrm/test0/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-03T08:18:08.952463Z",
        "updatedAt": "2025-10-03T08:18:08.952463Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.portel-dev/ncp",
      "description": "N-to-1 MCP Orchestration. Unified gateway for multiple MCP servers with intelligent tool discovery.",
      "repository": {
        "url": "https://github.com/portel-dev/ncp",
        "source": "github"
      },
      "version": "1.4.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@portel/ncp",
          "version": "1.4.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-03T08:55:51.008693Z",
        "updatedAt": "2025-10-03T08:55:51.008693Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/arjunkmrm-test01",
      "description": "Get the current time in any timezone. Explore concise timezone info to pick the right region. Simp…",
      "repository": {
        "url": "https://github.com/arjunkmrm/time",
        "source": "github"
      },
      "version": "1.15.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@arjunkmrm/test01/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-03T09:01:40.590024Z",
        "updatedAt": "2025-10-03T09:01:40.590024Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/arjunkmrm-local02",
      "description": "Get the current time in your chosen timezone and view common timezone information. Simplify schedu…",
      "repository": {
        "url": "https://github.com/arjunkmrm/time",
        "source": "github"
      },
      "version": "1.15.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@arjunkmrm/local02/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-03T09:02:26.911871Z",
        "updatedAt": "2025-10-03T09:02:26.911871Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.github/github-mcp-server",
      "description": "Connect AI assistants to GitHub - manage repos, issues, PRs, and workflows through natural language.",
      "repository": {
        "url": "https://github.com/github/github-mcp-server",
        "source": "github"
      },
      "version": "0.17.1",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/github/github-mcp-server:0.17.1",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "GITHUB_PERSONAL_ACCESS_TOKEN",
              "type": "positional",
              "valueHint": "env_var_name"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/github/github-mcp-server",
              "type": "positional",
              "valueHint": "image_name"
            }
          ],
          "environmentVariables": [
            {
              "description": "Your GitHub personal access token with appropriate scopes.",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "GITHUB_PERSONAL_ACCESS_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-03T09:27:03.720436Z",
        "updatedAt": "2025-10-03T09:27:03.720436Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.ChiR24/unreal-engine-mcp",
      "description": "MCP server for Unreal Engine 5 with 13 tools for game development automation.",
      "repository": {
        "url": "https://github.com/ChiR24/Unreal_mcp.git",
        "source": "github"
      },
      "version": "0.4.5",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "unreal-engine-mcp-server",
          "version": "0.4.5",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Unreal Engine host address (default: 127.0.0.1)",
              "value": "127.0.0.1",
              "name": "UE_HOST"
            },
            {
              "description": "Remote Control HTTP port (default: 30010)",
              "value": "30010",
              "name": "UE_RC_HTTP_PORT"
            },
            {
              "description": "Remote Control WebSocket port (default: 30020)",
              "value": "30020",
              "name": "UE_RC_WS_PORT"
            },
            {
              "description": "Logging level: debug, info, warn, error (default: info)",
              "value": "info",
              "name": "LOG_LEVEL"
            },
            {
              "description": "Absolute path to your Unreal .uproject file",
              "value": "C:/Users/YourName/Documents/Unreal Projects/YourProject",
              "name": "UE_PROJECT_PATH"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-03T09:34:13.366677Z",
        "updatedAt": "2025-10-03T09:34:13.366677Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/ChiR24-unreal_mcp",
      "description": "Control Unreal Engine to browse assets, import content, and manage levels and sequences. Automate…",
      "repository": {
        "url": "https://github.com/ChiR24/Unreal_mcp",
        "source": "github"
      },
      "version": "0.4.5",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@ChiR24/unreal_mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-03T09:43:19.045226Z",
        "updatedAt": "2025-10-03T09:43:19.045226Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/turnono-datacommons-mcp-server",
      "description": "Discover statistical indicators and topics in Data Commons. Retrieve observations for specific var…",
      "repository": {
        "url": "https://github.com/turnono/datacommons-mcp-server",
        "source": "github"
      },
      "version": "1.16.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@turnono/datacommons-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-03T09:53:14.229429Z",
        "updatedAt": "2025-10-03T09:53:14.229429Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/cristianoaredes-mcp-dadosbr",
      "description": "# MCP DadosBR Servidor MCP focado em dados públicos do Brasil. Oferece duas ferramentas simples e…",
      "repository": {
        "url": "https://github.com/cristianoaredes/mcp-dadosbr",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@cristianoaredes/mcp-dadosbr/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-03T12:13:44.073155Z",
        "updatedAt": "2025-10-03T12:13:44.073155Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/arjunkmrm-local001",
      "description": "Get the current time in your preferred timezone or any region you specify. Browse concise informat…",
      "repository": {
        "url": "https://github.com/arjunkmrm/time",
        "source": "github"
      },
      "version": "1.15.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@arjunkmrm/local001/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-03T12:44:39.189348Z",
        "updatedAt": "2025-10-03T12:44:39.189348Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/dsharipova-mcp-hw",
      "description": "Create personalized greetings by name in the tone you choose. Get quick suggestions for friendly i…",
      "repository": {
        "url": "https://github.com/dsharipova/mcp-hw",
        "source": "github"
      },
      "version": "1.16.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@dsharipova/mcp-hw/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-03T13:26:30.70555Z",
        "updatedAt": "2025-10-03T13:26:30.70555Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/keremurat-json",
      "description": "Compare two JSON files deeply without worrying about key or array order. Detect missing, extra, an…",
      "repository": {
        "url": "https://github.com/keremurat/mcp",
        "source": "github"
      },
      "version": "1.16.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@keremurat/json/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-03T13:28:40.425657Z",
        "updatedAt": "2025-10-03T13:28:40.425657Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/keremurat-jsonmcp",
      "description": "Compare two JSON files deeply, ignoring order, to surface every difference. Get a clear, structure…",
      "repository": {
        "url": "https://github.com/keremurat/mcp",
        "source": "github"
      },
      "version": "1.16.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@keremurat/jsonmcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-03T13:28:42.90749Z",
        "updatedAt": "2025-10-03T13:28:42.90749Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/keremurat-mcp",
      "description": "Compare two JSON files deeply, regardless of order. Get a detailed difference report highlighting…",
      "repository": {
        "url": "https://github.com/keremurat/mcp",
        "source": "github"
      },
      "version": "1.16.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@keremurat/mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-03T13:28:45.319778Z",
        "updatedAt": "2025-10-03T13:28:45.319778Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.vfarcic/dot-ai",
      "description": "AI-powered development platform for Kubernetes deployments and intelligent automation",
      "repository": {
        "url": "https://github.com/vfarcic/dot-ai",
        "source": "github"
      },
      "version": "0.104.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@vfarcic/dot-ai",
          "version": "0.104.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-03T14:09:27.993756Z",
        "updatedAt": "2025-10-03T14:09:27.993756Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/RectiFlex-centerassist-mcp",
      "description": "Streamline field service and construction operations with CenterPoint Connect. Manage companies, o…",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@RectiFlex/centerassist-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-03T15:38:17.960766Z",
        "updatedAt": "2025-10-03T15:38:17.960766Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ooples/mcp-console-automation",
      "description": "MCP server for AI-driven console application automation and monitoring",
      "repository": {
        "url": "https://github.com/ooples/mcp-console-automation",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-console-automation",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Logging level for console output (error, warn, info, debug, trace)",
              "format": "string",
              "name": "LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-03T16:47:33.032553Z",
        "updatedAt": "2025-10-03T16:47:33.032553Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/flight505-mcp_dincoder",
      "description": "Driven Intent Negotiation — Contract-Oriented Deterministic Executable Runtime DinCoder brings the…",
      "repository": {
        "url": "https://github.com/flight505/MCP_DinCoder",
        "source": "github"
      },
      "version": "0.1.13",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@flight505/mcp_dincoder/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-03T21:41:25.261987Z",
        "updatedAt": "2025-10-03T21:41:25.261987Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/flight505-mcp_dincoder",
      "description": "Driven Intent Negotiation — Contract-Oriented Deterministic Executable Runtime DinCoder brings the…",
      "repository": {
        "url": "https://github.com/flight505/MCP_DinCoder",
        "source": "github"
      },
      "version": "0.1.15",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@flight505/mcp_dincoder/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-03T21:53:12.422748Z",
        "updatedAt": "2025-10-03T21:53:12.422748Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.kmalakoff/mcp-pdf",
      "description": "MCP server for PDF generation using PDFKit",
      "repository": {
        "url": "https://github.com/kmalakoff/mcp-pdf",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@mcp-z/mcp-pdf",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-03T22:45:20.121187Z",
        "updatedAt": "2025-10-03T22:45:20.121187Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/arjunkmrm-boba-tea",
      "description": "Send friendly greetings to people by name. Discover the origin story behind 'Hello, World' for qui…",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@arjunkmrm/boba-tea/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T01:51:32.373165Z",
        "updatedAt": "2025-10-04T01:51:32.373165Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/arjunkmrm-ts-test-2",
      "description": "Greet anyone with a friendly, personalized hello. Explore the origin story of 'Hello, World.' Jump…",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@arjunkmrm/ts-test-2/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T02:01:26.06959Z",
        "updatedAt": "2025-10-04T02:01:26.06959Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/arjunkmrm-py-test-0",
      "description": "Send personalized greetings by name, with an optional pirate tone. Generate greeting prompts and e…",
      "repository": {},
      "version": "1.16.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@arjunkmrm/py-test-0/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T02:06:51.365096Z",
        "updatedAt": "2025-10-04T02:06:51.365096Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/arjunkmrm-mango-sago",
      "description": "Create cheerful, personalized greetings in seconds. Switch to playful pirate-speak for extra flair…",
      "repository": {
        "url": "https://github.com/arjunkmrm/mango-sago",
        "source": "github"
      },
      "version": "1.16.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@arjunkmrm/mango-sago/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T02:20:25.785458Z",
        "updatedAt": "2025-10-04T02:20:25.785458Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/aicastle-school-openai-api-agent-project11",
      "description": "Fetch the latest available stock quotes by ticker symbol across international markets. Check price…",
      "repository": {
        "url": "https://github.com/aicastle-school/openai-api-agent-project",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@aicastle-school/openai-api-agent-project11/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T02:42:49.15996Z",
        "updatedAt": "2025-10-04T02:42:49.15996Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.kmalakoff/mcp-pdf",
      "description": "MCP server for PDF generation using PDFKit",
      "repository": {
        "url": "https://github.com/kmalakoff/mcp-pdf",
        "source": "github"
      },
      "version": "1.0.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@mcp-z/mcp-pdf",
          "version": "1.0.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T02:52:44.445048Z",
        "updatedAt": "2025-10-04T02:52:44.445048Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/arjunkmrm-py-test-2",
      "description": "Greet people by name with friendly, customizable messages. Toggle Pirate Mode to speak like a swas…",
      "repository": {
        "url": "https://github.com/arjunkmrm/mango-sago",
        "source": "github"
      },
      "version": "1.16.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@arjunkmrm/py-test-2/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T03:00:46.274065Z",
        "updatedAt": "2025-10-04T03:00:46.274065Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/aicastle-school-openai-api-agent-project",
      "description": "Fetch current stock prices and key data for symbols across global markets. Look up companies like…",
      "repository": {
        "url": "https://github.com/aicastle-school/openai-api-agent-project",
        "source": "github"
      },
      "version": "1.14.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@aicastle-school/openai-api-agent-project/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T03:03:54.256827Z",
        "updatedAt": "2025-10-04T03:03:54.256827Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.kmalakoff/mcp-pdf",
      "description": "MCP server for PDF generation using PDFKit",
      "repository": {
        "url": "https://github.com/mcp-z/mcp-pdf",
        "source": "github"
      },
      "version": "1.0.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@mcp-z/mcp-pdf",
          "version": "1.0.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T04:00:20.84347Z",
        "updatedAt": "2025-10-04T04:00:20.84347Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.30",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.30",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T07:59:04.905522Z",
        "updatedAt": "2025-10-04T07:59:04.905522Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/infranodus-mcp-server-infranodus",
      "description": "Map text into knowledge graphs to create a structured representation of conceptual relations and t…",
      "repository": {
        "url": "https://github.com/infranodus/mcp-server-infranodus",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@infranodus/mcp-server-infranodus/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T08:08:11.981455Z",
        "updatedAt": "2025-10-04T08:08:11.981455Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.NeerajG03/vector-memory",
      "description": "Semantic document memory using Redis vector store. Save and recall files with natural language.",
      "repository": {},
      "version": "0.1.1",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "mcp-server-vector-memory",
          "version": "0.1.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T09:11:24.952995Z",
        "updatedAt": "2025-10-04T09:11:24.952995Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.NeerajG03/vector-memory",
      "description": "Semantic document memory using Redis vector store. Save and recall files with natural language.",
      "repository": {},
      "version": "0.1.2",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "mcp-server-vector-memory",
          "version": "0.1.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T09:47:42.238931Z",
        "updatedAt": "2025-10-04T09:47:42.238931Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.NeerajG03/vector-memory",
      "description": "Semantic document memory using Redis vector store. Save and recall files with natural language.",
      "repository": {},
      "version": "0.1.3",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "mcp-server-vector-memory",
          "version": "0.1.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T09:53:16.82883Z",
        "updatedAt": "2025-10-04T09:53:16.82883Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.NeerajG03/vector-memory",
      "description": "Semantic document memory using Redis vector store. Save and recall files with natural language.",
      "repository": {},
      "version": "0.1.4",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "mcp-server-vector-memory",
          "version": "0.1.4",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T09:57:22.022384Z",
        "updatedAt": "2025-10-04T09:57:22.022384Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.NeerajG03/vector-memory",
      "description": "Semantic document memory using Redis vector store. Save and recall files with natural language.",
      "repository": {},
      "version": "0.2.0",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "mcp-server-vector-memory",
          "version": "0.2.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T10:20:09.72275Z",
        "updatedAt": "2025-10-04T10:20:09.72275Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/survey-mcp-server",
      "description": "MCP server for conducting dynamic, conversational surveys with structured data collection.",
      "repository": {
        "url": "https://github.com/cyanheads/survey-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/survey-mcp-server",
          "version": "1.0.0",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/survey-mcp-server",
          "version": "1.0.0",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T10:59:31.873413Z",
        "updatedAt": "2025-10-04T10:59:31.873413Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.3.4",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.3.4",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.3.4",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T11:13:50.246161Z",
        "updatedAt": "2025-10-04T11:13:50.246161Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/survey-mcp-server",
      "description": "MCP server for conducting dynamic, conversational surveys with structured data collection.",
      "repository": {
        "url": "https://github.com/cyanheads/survey-mcp-server",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/survey-mcp-server",
          "version": "1.0.1",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Path to the directory containing survey definition files.",
              "format": "string",
              "default": "./surveys",
              "name": "SURVEY_DEFINITIONS_PATH"
            },
            {
              "description": "Path to the directory where survey responses are stored.",
              "format": "string",
              "default": "./storage/responses",
              "name": "SURVEY_RESPONSES_PATH"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/survey-mcp-server",
          "version": "1.0.1",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Path to the directory containing survey definition files.",
              "format": "string",
              "default": "./surveys",
              "name": "SURVEY_DEFINITIONS_PATH"
            },
            {
              "description": "Path to the directory where survey responses are stored.",
              "format": "string",
              "default": "./storage/responses",
              "name": "SURVEY_RESPONSES_PATH"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T11:26:03.378703Z",
        "updatedAt": "2025-10-04T11:26:03.378703Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.31",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.31",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T11:57:57.983312Z",
        "updatedAt": "2025-10-04T11:57:57.983312Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.30",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T12:00:20.468239Z",
        "updatedAt": "2025-10-04T12:00:20.468239Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.paiml/rash",
      "description": "Transpile Rust code to POSIX-compliant shell scripts with formal correctness guarantees",
      "repository": {},
      "version": "0.1.0"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T14:02:41.535548Z",
        "updatedAt": "2025-10-04T14:02:41.535548Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.paiml/pmat-agent",
      "description": "Zero-config AI context generation and code quality toolkit with Claude Code Agent Mode support",
      "repository": {},
      "version": "2.121.0"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T14:20:12.497388Z",
        "updatedAt": "2025-10-04T14:20:12.497388Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.paiml/pforge",
      "description": "Zero-boilerplate MCP server framework with declarative YAML configuration",
      "repository": {
        "url": "https://github.com/paiml/pforge",
        "source": "github"
      },
      "version": "0.1.2"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T14:21:46.420973Z",
        "updatedAt": "2025-10-04T14:21:46.420973Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.noahgift/ruchy-mcp",
      "description": "MCP server for Ruchy: code analysis, scoring, linting, formatting, and transpilation tools",
      "repository": {},
      "version": "3.67.0"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T14:32:03.692194Z",
        "updatedAt": "2025-10-04T14:32:03.692194Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.noahgift/depyler-mcp",
      "description": "MCP server for Depyler: Python-to-Rust transpiler with analysis and verification tools",
      "repository": {},
      "version": "3.4.0"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T14:37:28.206036Z",
        "updatedAt": "2025-10-04T14:37:28.206036Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.ChiR24/unreal-engine-mcp",
      "description": "MCP server for Unreal Engine 5 with 13 tools for game development automation.",
      "repository": {
        "url": "https://github.com/ChiR24/Unreal_mcp.git",
        "source": "github"
      },
      "version": "0.4.6",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "unreal-engine-mcp-server",
          "version": "0.4.6",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Unreal Engine host address (default: 127.0.0.1)",
              "value": "127.0.0.1",
              "name": "UE_HOST"
            },
            {
              "description": "Remote Control HTTP port (default: 30010)",
              "value": "30010",
              "name": "UE_RC_HTTP_PORT"
            },
            {
              "description": "Remote Control WebSocket port (default: 30020)",
              "value": "30020",
              "name": "UE_RC_WS_PORT"
            },
            {
              "description": "Logging level: debug, info, warn, error (default: info)",
              "value": "info",
              "name": "LOG_LEVEL"
            },
            {
              "description": "Absolute path to your Unreal .uproject file",
              "value": "C:/Users/YourName/Documents/Unreal Projects/YourProject",
              "name": "UE_PROJECT_PATH"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T14:37:40.383505Z",
        "updatedAt": "2025-10-04T14:37:40.383505Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.noahgift/pmcp",
      "description": "High-quality Rust SDK for Model Context Protocol (MCP) with full TypeScript SDK compatibility",
      "repository": {
        "url": "https://github.com/noahgift/rust-mcp-sdk",
        "source": "github"
      },
      "version": "1.6.1"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T14:39:36.996079Z",
        "updatedAt": "2025-10-04T14:39:36.996079Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.paiml/pmcp",
      "description": "High-quality Rust SDK for Model Context Protocol (MCP) with full TypeScript SDK compatibility",
      "repository": {
        "url": "https://github.com/paiml/rust-mcp-sdk",
        "source": "github"
      },
      "version": "1.6.1"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T14:59:47.429719Z",
        "updatedAt": "2025-10-04T14:59:47.429719Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/kirbah-mcp-youtube",
      "description": "Provide token-optimized, structured YouTube data to enhance your LLM applications. Access efficien…",
      "repository": {
        "url": "https://github.com/kirbah/mcp-youtube",
        "source": "github"
      },
      "version": "0.2.6",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@kirbah/mcp-youtube/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T16:31:58.771823Z",
        "updatedAt": "2025-10-04T16:31:58.771823Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.xorrkaz/cml-mcp",
      "description": "An MCP server that provides access to common Cisco Modeling Labs (CML) operations.",
      "repository": {
        "url": "https://github.com/xorrkaz/cml-mcp",
        "source": "github"
      },
      "version": "0.10.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "cml-mcp",
          "version": "0.10.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "URL for the CML Server",
              "isRequired": true,
              "format": "string",
              "name": "CML_URL"
            },
            {
              "description": "Username for CML authentication",
              "isRequired": true,
              "format": "string",
              "name": "CML_USERNAME"
            },
            {
              "description": "Password for CML authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CML_PASSWORD"
            },
            {
              "description": "Username for authentication to devices running in CML",
              "format": "string",
              "name": "PYATS_USERNAME"
            },
            {
              "description": "Password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_PASSWORD"
            },
            {
              "description": "Enable password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_AUTH_PASS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T19:39:26.975377Z",
        "updatedAt": "2025-10-04T19:39:26.975377Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.alex-feel/mcp-context-server",
      "description": "An MCP server that provides persistent multimodal context storage for LLM agents.",
      "repository": {
        "url": "https://github.com/alex-feel/mcp-context-server",
        "source": "github"
      },
      "version": "0.3.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-context-server",
          "version": "0.3.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Log level",
              "format": "string",
              "name": "LOG_LEVEL"
            },
            {
              "description": "Maximum individual image size in megabytes",
              "format": "number",
              "name": "MAX_IMAGE_SIZE_MB"
            },
            {
              "description": "Maximum total request size in megabytes",
              "format": "number",
              "name": "MAX_TOTAL_SIZE_MB"
            },
            {
              "description": "Custom database file location path",
              "format": "string",
              "name": "DB_PATH"
            },
            {
              "description": "Maximum number of concurrent read connections in the pool",
              "format": "number",
              "name": "POOL_MAX_READERS"
            },
            {
              "description": "Maximum number of concurrent write connections in the pool",
              "format": "number",
              "name": "POOL_MAX_WRITERS"
            },
            {
              "description": "Connection timeout in seconds",
              "format": "number",
              "name": "POOL_CONNECTION_TIMEOUT_S"
            },
            {
              "description": "Idle connection timeout in seconds",
              "format": "number",
              "name": "POOL_IDLE_TIMEOUT_S"
            },
            {
              "description": "Connection health check interval in seconds",
              "format": "number",
              "name": "POOL_HEALTH_CHECK_INTERVAL_S"
            },
            {
              "description": "Maximum number of retry attempts for failed operations",
              "format": "number",
              "name": "RETRY_MAX_RETRIES"
            },
            {
              "description": "Base delay in seconds between retry attempts",
              "format": "number",
              "name": "RETRY_BASE_DELAY_S"
            },
            {
              "description": "Maximum delay in seconds between retry attempts",
              "format": "number",
              "name": "RETRY_MAX_DELAY_S"
            },
            {
              "description": "Enable random jitter in retry delays",
              "format": "boolean",
              "name": "RETRY_JITTER"
            },
            {
              "description": "Exponential backoff multiplication factor for retries",
              "format": "number",
              "name": "RETRY_BACKOFF_FACTOR"
            },
            {
              "description": "Enable SQLite foreign key constraints",
              "format": "boolean",
              "name": "SQLITE_FOREIGN_KEYS"
            },
            {
              "description": "SQLite journal mode (e.g., WAL, DELETE)",
              "format": "string",
              "name": "SQLITE_JOURNAL_MODE"
            },
            {
              "description": "SQLite synchronous mode (e.g., NORMAL, FULL, OFF)",
              "format": "string",
              "name": "SQLITE_SYNCHRONOUS"
            },
            {
              "description": "SQLite temporary storage location (e.g., MEMORY, FILE)",
              "format": "string",
              "name": "SQLITE_TEMP_STORE"
            },
            {
              "description": "SQLite memory-mapped I/O size in bytes",
              "format": "number",
              "name": "SQLITE_MMAP_SIZE"
            },
            {
              "description": "SQLite cache size (negative value for KB, positive for pages)",
              "format": "number",
              "name": "SQLITE_CACHE_SIZE"
            },
            {
              "description": "SQLite page size in bytes",
              "format": "number",
              "name": "SQLITE_PAGE_SIZE"
            },
            {
              "description": "SQLite WAL autocheckpoint threshold in pages",
              "format": "number",
              "name": "SQLITE_WAL_AUTOCHECKPOINT"
            },
            {
              "description": "SQLite busy timeout in milliseconds",
              "format": "number",
              "name": "SQLITE_BUSY_TIMEOUT_MS"
            },
            {
              "description": "SQLite WAL checkpoint mode (e.g., PASSIVE, FULL, RESTART)",
              "format": "string",
              "name": "SQLITE_WAL_CHECKPOINT"
            },
            {
              "description": "Server shutdown timeout in seconds",
              "format": "number",
              "name": "SHUTDOWN_TIMEOUT_S"
            },
            {
              "description": "Test mode shutdown timeout in seconds",
              "format": "number",
              "name": "SHUTDOWN_TIMEOUT_TEST_S"
            },
            {
              "description": "Queue operation timeout in seconds",
              "format": "number",
              "name": "QUEUE_TIMEOUT_S"
            },
            {
              "description": "Test mode queue timeout in seconds",
              "format": "number",
              "name": "QUEUE_TIMEOUT_TEST_S"
            },
            {
              "description": "Circuit breaker failure threshold before opening",
              "format": "number",
              "name": "CIRCUIT_BREAKER_FAILURE_THRESHOLD"
            },
            {
              "description": "Circuit breaker recovery timeout in seconds",
              "format": "number",
              "name": "CIRCUIT_BREAKER_RECOVERY_TIMEOUT_S"
            },
            {
              "description": "Maximum calls allowed in circuit breaker half-open state",
              "format": "number",
              "name": "CIRCUIT_BREAKER_HALF_OPEN_MAX_CALLS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T19:58:20.868547Z",
        "updatedAt": "2025-10-04T19:58:20.868547Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.msenol/gorev",
      "description": "Task management system for AI assistants with MCP protocol, templates, and bilingual support (TR/EN)",
      "repository": {
        "url": "https://github.com/msenol/Gorev",
        "source": "github",
        "id": "msenol/Gorev"
      },
      "version": "0.16.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@mehmetsenol/gorev-mcp-server",
          "version": "0.16.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Language preference (en for English, tr for Turkish)",
              "name": "GOREV_LANG"
            },
            {
              "description": "Directory for storing Gorev database and data files",
              "name": "GOREV_DATA_DIR"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-04T22:55:59.067517Z",
        "updatedAt": "2025-10-04T22:55:59.067517Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/a-ariff-canvas-instant-mcp",
      "description": "Manage your Canvas coursework with quick access to courses, assignments, and grades. Track upcomin…",
      "repository": {
        "url": "https://github.com/a-ariff/canvas-instant-mcp",
        "source": "github"
      },
      "version": "2.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@a-ariff/canvas-instant-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-05T00:50:43.815585Z",
        "updatedAt": "2025-10-05T00:50:43.815585Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/wgong-sqlite-mcp-server",
      "description": "Explore, query, and inspect SQLite databases with ease. List tables, preview results, and view det…",
      "repository": {
        "url": "https://github.com/wgong/sqlite-mcp-server",
        "source": "github",
        "subfolder": "sqlite-explorer-fastmcp-mcp-server"
      },
      "version": "1.16.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@wgong/sqlite-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-05T01:52:30.252523Z",
        "updatedAt": "2025-10-05T01:52:30.252523Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.vfarcic/dot-ai",
      "description": "AI-powered development platform for Kubernetes deployments and intelligent automation",
      "repository": {
        "url": "https://github.com/vfarcic/dot-ai",
        "source": "github"
      },
      "version": "0.105.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@vfarcic/dot-ai",
          "version": "0.105.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-05T02:29:05.49617Z",
        "updatedAt": "2025-10-05T02:29:05.49617Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ooples/mcp-console-automation",
      "description": "MCP server for AI-driven console application automation and monitoring",
      "repository": {
        "url": "https://github.com/ooples/mcp-console-automation",
        "source": "github"
      },
      "version": "1.0.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-console-automation",
          "version": "1.0.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Logging level for console output (error, warn, info, debug, trace)",
              "format": "string",
              "name": "LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-05T02:30:04.484325Z",
        "updatedAt": "2025-10-05T02:30:04.484325Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.tjhop/prometheus-mcp-server",
      "description": "An API-complete MCP server to manage Prometheus-compatible backends via comprehensive tools.",
      "repository": {
        "url": "https://github.com/tjhop/prometheus-mcp-server",
        "source": "github"
      },
      "version": "v0.7.1",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/tjhop/prometheus-mcp-server:v0.7.1",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/tjhop/prometheus-mcp-server",
              "type": "positional",
              "valueHint": "image_name"
            }
          ],
          "packageArguments": [
            {
              "description": "URL of the Prometheus instance to connect to",
              "isRequired": true,
              "default": "http://127.0.0.1:9090",
              "type": "named",
              "name": "--prometheus.url"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-05T05:29:36.683234Z",
        "updatedAt": "2025-10-05T05:29:36.683234Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/ChiR24-unreal_mcp",
      "description": "Control Unreal Engine to browse assets, import content, and manage levels and sequences. Automate…",
      "repository": {
        "url": "https://github.com/ChiR24/Unreal_mcp",
        "source": "github"
      },
      "version": "0.4.6",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@ChiR24/unreal_mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-05T05:30:22.169534Z",
        "updatedAt": "2025-10-05T05:30:22.169534Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/motorboy1-my-mcp-server",
      "description": "Send friendly greetings by name. Discover the origin story of 'Hello, World' for quick context.",
      "repository": {
        "url": "https://github.com/motorboy1/my-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@motorboy1/my-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-05T06:36:24.851605Z",
        "updatedAt": "2025-10-05T06:36:24.851605Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.docfork/docfork-mcp",
      "description": "Up-to-date documentation to 9,000+ libraries for devs and AI agents.",
      "repository": {
        "url": "https://github.com/docfork/docfork-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "docfork",
          "version": "1.0.0",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.docfork.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-05T06:53:01.577028Z",
        "updatedAt": "2025-10-05T06:53:01.577028Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/data-mindset-sts-google-forms-mcp",
      "description": "Create and manage Google Forms to run surveys and collect data. Add text and multiple-choice quest…",
      "repository": {
        "url": "https://github.com/data-mindset/sts-google-forms-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@data-mindset/sts-google-forms-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-05T09:13:16.21757Z",
        "updatedAt": "2025-10-05T09:13:16.21757Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/survey-mcp-server",
      "description": "MCP server for conducting dynamic, conversational surveys with structured data collection.",
      "repository": {
        "url": "https://github.com/cyanheads/survey-mcp-server",
        "source": "github"
      },
      "version": "1.0.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/survey-mcp-server",
          "version": "1.0.2",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Path to the directory containing survey definition files.",
              "format": "string",
              "default": "./surveys",
              "name": "SURVEY_DEFINITIONS_PATH"
            },
            {
              "description": "Path to the directory where survey responses are stored.",
              "format": "string",
              "default": "./storage/responses",
              "name": "SURVEY_RESPONSES_PATH"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/survey-mcp-server",
          "version": "1.0.2",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Path to the directory containing survey definition files.",
              "format": "string",
              "default": "./surveys",
              "name": "SURVEY_DEFINITIONS_PATH"
            },
            {
              "description": "Path to the directory where survey responses are stored.",
              "format": "string",
              "default": "./storage/responses",
              "name": "SURVEY_RESPONSES_PATH"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-05T10:01:39.720785Z",
        "updatedAt": "2025-10-05T10:01:39.720785Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/survey-mcp-server",
      "description": "MCP server for conducting dynamic, conversational surveys with structured data collection.",
      "repository": {
        "url": "https://github.com/cyanheads/survey-mcp-server",
        "source": "github"
      },
      "version": "1.0.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/survey-mcp-server",
          "version": "1.0.3",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Path to the directory containing survey definition files.",
              "format": "string",
              "default": "./surveys",
              "name": "SURVEY_DEFINITIONS_PATH"
            },
            {
              "description": "Path to the directory where survey responses are stored.",
              "format": "string",
              "default": "./storage/responses",
              "name": "SURVEY_RESPONSES_PATH"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/survey-mcp-server",
          "version": "1.0.3",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Path to the directory containing survey definition files.",
              "format": "string",
              "default": "./surveys",
              "name": "SURVEY_DEFINITIONS_PATH"
            },
            {
              "description": "Path to the directory where survey responses are stored.",
              "format": "string",
              "default": "./storage/responses",
              "name": "SURVEY_RESPONSES_PATH"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-05T11:15:43.934144Z",
        "updatedAt": "2025-10-05T11:15:43.934144Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/survey-mcp-server",
      "description": "MCP server for conducting dynamic, conversational surveys with structured data collection.",
      "repository": {
        "url": "https://github.com/cyanheads/survey-mcp-server",
        "source": "github"
      },
      "version": "1.0.4",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/survey-mcp-server",
          "version": "1.0.4",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Path to the directory containing survey definition files.",
              "format": "string",
              "default": "./surveys",
              "name": "SURVEY_DEFINITIONS_PATH"
            },
            {
              "description": "Path to the directory where survey responses are stored.",
              "format": "string",
              "default": "./storage/responses",
              "name": "SURVEY_RESPONSES_PATH"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/survey-mcp-server",
          "version": "1.0.4",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Path to the directory containing survey definition files.",
              "format": "string",
              "default": "./surveys",
              "name": "SURVEY_DEFINITIONS_PATH"
            },
            {
              "description": "Path to the directory where survey responses are stored.",
              "format": "string",
              "default": "./storage/responses",
              "name": "SURVEY_RESPONSES_PATH"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-05T11:56:37.310669Z",
        "updatedAt": "2025-10-05T11:56:37.310669Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.3.5",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.3.5",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.3.5",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-05T12:01:26.309999Z",
        "updatedAt": "2025-10-05T12:01:26.309999Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/plainyogurt21-clintrials-mcp",
      "description": "Provide structured access to ClinicalTrials.gov data for searching, retrieving, and analyzing clin…",
      "repository": {},
      "version": "1.16.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@plainyogurt21/clintrials-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-05T12:56:11.696599Z",
        "updatedAt": "2025-10-05T12:56:11.696599Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/saidsef-mcp-github-pr-issue-analyser",
      "description": "A Model Context Protocol (MCP) application for automated GitHub PR analysis and issue management.…",
      "repository": {
        "url": "https://github.com/saidsef/mcp-github-pr-issue-analyser",
        "source": "github"
      },
      "version": "1.15.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@saidsef/mcp-github-pr-issue-analyser/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-05T14:58:08.898007Z",
        "updatedAt": "2025-10-05T14:58:08.898007Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/JunoJunHyun-festival-finder-mcp",
      "description": "Discover festivals worldwide by location, date, and genre. Compare options with key details like d…",
      "repository": {
        "url": "https://github.com/JunoJunHyun/Festival-Finder-mcp",
        "source": "github"
      },
      "version": "0.1.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@JunoJunHyun/festival-finder-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-05T15:14:35.748005Z",
        "updatedAt": "2025-10-05T15:14:35.748005Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.vfarcic/dot-ai",
      "description": "AI-powered development platform for Kubernetes deployments and intelligent automation",
      "repository": {
        "url": "https://github.com/vfarcic/dot-ai",
        "source": "github"
      },
      "version": "0.106.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@vfarcic/dot-ai",
          "version": "0.106.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-05T17:35:13.689623Z",
        "updatedAt": "2025-10-05T17:35:13.689623Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.mcp-z/mcp-pdf",
      "description": "MCP server for creative PDF generation with full emoji, Unicode, and offline support",
      "repository": {
        "url": "https://github.com/mcp-z/mcp-pdf.git",
        "source": "github"
      },
      "version": "1.1.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@mcp-z/mcp-pdf",
          "version": "1.1.0",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-05T18:30:49.550484Z",
        "updatedAt": "2025-10-05T18:30:49.550484Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.wonderwhy-er/desktop-commander",
      "description": "MCP server for terminal commands, file operations, and process management",
      "repository": {
        "url": "https://github.com/wonderwhy-er/DesktopCommanderMCP",
        "source": "github"
      },
      "version": "0.2.17",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@wonderwhy-er/desktop-commander",
          "version": "0.2.17",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-05T19:18:32.940192Z",
        "updatedAt": "2025-10-05T19:18:32.940192Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.mcp-z/mcp-pdf",
      "description": "MCP server for creative PDF generation with full emoji, Unicode, and offline support",
      "repository": {
        "url": "https://github.com/mcp-z/mcp-pdf.git",
        "source": "github",
        "id": "1069486310"
      },
      "version": "1.1.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@mcp-z/mcp-pdf",
          "version": "1.1.1",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-05T20:27:09.328654Z",
        "updatedAt": "2025-10-05T20:27:09.328654Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.vfarcic/dot-ai",
      "description": "AI-powered development platform for Kubernetes deployments and intelligent automation",
      "repository": {
        "url": "https://github.com/vfarcic/dot-ai",
        "source": "github"
      },
      "version": "0.107.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@vfarcic/dot-ai",
          "version": "0.107.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-05T22:03:29.489716Z",
        "updatedAt": "2025-10-05T22:03:29.489716Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.vfarcic/dot-ai",
      "description": "AI-powered development platform for Kubernetes deployments and intelligent automation",
      "repository": {
        "url": "https://github.com/vfarcic/dot-ai",
        "source": "github"
      },
      "version": "0.108.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@vfarcic/dot-ai",
          "version": "0.108.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-05T22:22:49.765403Z",
        "updatedAt": "2025-10-05T22:22:49.765403Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.vfarcic/dot-ai",
      "description": "AI-powered development platform for Kubernetes deployments and intelligent automation",
      "repository": {
        "url": "https://github.com/vfarcic/dot-ai",
        "source": "github"
      },
      "version": "0.109.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@vfarcic/dot-ai",
          "version": "0.109.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-05T22:44:21.933495Z",
        "updatedAt": "2025-10-05T22:44:21.933495Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.therealtimex/charts-mcp",
      "description": "MCP server for generating charts using AntV. Supports various chart types through MCP tools.",
      "repository": {},
      "version": "2.0.3",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@realtimex/charts-mcp",
          "version": "2.0.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T00:15:07.076222Z",
        "updatedAt": "2025-10-06T00:15:07.076222Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.therealtimex/charts-mcp",
      "description": "MCP server for generating charts using AntV. Supports various chart types through MCP tools.",
      "repository": {},
      "version": "2.0.4",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@realtimex/charts-mcp",
          "version": "2.0.4",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T00:51:38.720523Z",
        "updatedAt": "2025-10-06T00:51:38.720523Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.therealtimex/charts-mcp",
      "description": "MCP server for generating charts using AntV. Supports various chart types through MCP tools.",
      "repository": {},
      "version": "2.0.5",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@realtimex/charts-mcp",
          "version": "2.0.5",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T01:00:54.632687Z",
        "updatedAt": "2025-10-06T01:00:54.632687Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.therealtimex/charts-mcp",
      "description": "MCP server for generating charts using AntV. Supports various chart types through MCP tools.",
      "repository": {},
      "version": "2.0.6",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@realtimex/charts-mcp",
          "version": "2.0.6",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T01:51:10.751716Z",
        "updatedAt": "2025-10-06T01:51:10.751716Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.mcp-z/mcp-pdf",
      "description": "MCP server for creative PDF generation with full emoji, Unicode, and offline support",
      "repository": {
        "url": "https://github.com/mcp-z/mcp-pdf.git",
        "source": "github",
        "id": "1069486310"
      },
      "version": "1.2.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@mcp-z/mcp-pdf",
          "version": "1.2.0",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T05:27:23.110701Z",
        "updatedAt": "2025-10-06T05:27:23.110701Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/proflulab-documentassistant",
      "description": "Convert files between formats without quality loss. Speed up your workflow with fast, reliable con…",
      "repository": {},
      "version": "1.14.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@proflulab/documentassistant/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T07:24:02.799169Z",
        "updatedAt": "2025-10-06T07:24:02.799169Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/Artin0123-gemini-image-mcp-server",
      "description": "Analyze images and videos with Gemini to get fast, reliable visual insights. Handle content from U…",
      "repository": {
        "url": "https://github.com/Artin0123/gemini-image-mcp-server",
        "source": "github"
      },
      "version": "1.2.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Artin0123/gemini-image-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T07:34:28.779387Z",
        "updatedAt": "2025-10-06T07:34:28.779387Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/JunoJunHyun-festival-finder-mcp",
      "description": "Discover festivals worldwide by location, date, and genre. Compare options with key details like d…",
      "repository": {
        "url": "https://github.com/JunoJunHyun/Festival-Finder-mcp",
        "source": "github"
      },
      "version": "1.16.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@JunoJunHyun/festival-finder-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T09:40:14.759675Z",
        "updatedAt": "2025-10-06T09:40:14.759675Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/akilat-spec-leave-manager-mcp",
      "description": "Track and manage employee time off with quick balance lookups and streamlined applications. Find t…",
      "repository": {
        "url": "https://github.com/akilat-spec/leave-manager-mcp",
        "source": "github"
      },
      "version": "1.16.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@akilat-spec/leave-manager-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T10:13:37.506388Z",
        "updatedAt": "2025-10-06T10:13:37.506388Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/luminati-io-brightdata-mcp",
      "description": "One MCP for the Web. Easily search, crawl, navigate, and extract websites without getting blocked.…",
      "repository": {
        "url": "https://github.com/brightdata/brightdata-mcp-sse",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@luminati-io/brightdata-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T11:04:51.228096Z",
        "updatedAt": "2025-10-06T11:04:51.228096Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/aicastle-school-openai-api-agent-project",
      "description": "Fetch current stock prices and key data for symbols across global markets. Look up companies like…",
      "repository": {
        "url": "https://github.com/aicastle-school/openai-api-agent-project",
        "source": "github"
      },
      "version": "1.16.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@aicastle-school/openai-api-agent-project/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T11:12:18.988861Z",
        "updatedAt": "2025-10-06T11:12:18.988861Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/aicastle-school-openai-api-agent-project11",
      "description": "Fetch the latest available stock quotes by ticker symbol across international markets. Check price…",
      "repository": {
        "url": "https://github.com/aicastle-school/openai-api-agent-project",
        "source": "github"
      },
      "version": "1.16.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@aicastle-school/openai-api-agent-project11/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T11:12:19.115931Z",
        "updatedAt": "2025-10-06T11:12:19.115931Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/jweingardt12-mlb_mcp",
      "description": "Provides easy access to MLB, Baseball Savant, Statcast, and Fangraphs baseball data. Query detaile…",
      "repository": {},
      "version": "1.16.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@jweingardt12/mlb_mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T14:52:36.727607Z",
        "updatedAt": "2025-10-06T14:52:36.727607Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.hummingbot/mcp",
      "description": "MCP server exposing Hummingbot API for automated multi-exchange trading",
      "repository": {
        "url": "https://github.com/hummingbot/mcp",
        "source": "github"
      },
      "version": "0.1.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/hummingbot/hummingbot-mcp:0.1.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Base URL of the Hummingbot API (e.g., http://host.docker.internal:8820 or http://localhost:8000)",
              "isRequired": true,
              "format": "string",
              "name": "HUMMINGBOT_API_URL"
            },
            {
              "description": "Hummingbot API username",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "HUMMINGBOT_USERNAME"
            },
            {
              "description": "Hummingbot API password",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "HUMMINGBOT_PASSWORD"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T15:05:42.521939Z",
        "updatedAt": "2025-10-06T15:05:42.521939Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.alex-feel/mcp-context-server",
      "description": "An MCP server that provides persistent multimodal context storage for LLM agents.",
      "repository": {
        "url": "https://github.com/alex-feel/mcp-context-server",
        "source": "github"
      },
      "version": "0.4.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-context-server",
          "version": "0.4.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Log level",
              "format": "string",
              "name": "LOG_LEVEL"
            },
            {
              "description": "Maximum individual image size in megabytes",
              "format": "number",
              "name": "MAX_IMAGE_SIZE_MB"
            },
            {
              "description": "Maximum total request size in megabytes",
              "format": "number",
              "name": "MAX_TOTAL_SIZE_MB"
            },
            {
              "description": "Custom database file location path",
              "format": "string",
              "name": "DB_PATH"
            },
            {
              "description": "Maximum number of concurrent read connections in the pool",
              "format": "number",
              "name": "POOL_MAX_READERS"
            },
            {
              "description": "Maximum number of concurrent write connections in the pool",
              "format": "number",
              "name": "POOL_MAX_WRITERS"
            },
            {
              "description": "Connection timeout in seconds",
              "format": "number",
              "name": "POOL_CONNECTION_TIMEOUT_S"
            },
            {
              "description": "Idle connection timeout in seconds",
              "format": "number",
              "name": "POOL_IDLE_TIMEOUT_S"
            },
            {
              "description": "Connection health check interval in seconds",
              "format": "number",
              "name": "POOL_HEALTH_CHECK_INTERVAL_S"
            },
            {
              "description": "Maximum number of retry attempts for failed operations",
              "format": "number",
              "name": "RETRY_MAX_RETRIES"
            },
            {
              "description": "Base delay in seconds between retry attempts",
              "format": "number",
              "name": "RETRY_BASE_DELAY_S"
            },
            {
              "description": "Maximum delay in seconds between retry attempts",
              "format": "number",
              "name": "RETRY_MAX_DELAY_S"
            },
            {
              "description": "Enable random jitter in retry delays",
              "format": "boolean",
              "name": "RETRY_JITTER"
            },
            {
              "description": "Exponential backoff multiplication factor for retries",
              "format": "number",
              "name": "RETRY_BACKOFF_FACTOR"
            },
            {
              "description": "Enable SQLite foreign key constraints",
              "format": "boolean",
              "name": "SQLITE_FOREIGN_KEYS"
            },
            {
              "description": "SQLite journal mode (e.g., WAL, DELETE)",
              "format": "string",
              "name": "SQLITE_JOURNAL_MODE"
            },
            {
              "description": "SQLite synchronous mode (e.g., NORMAL, FULL, OFF)",
              "format": "string",
              "name": "SQLITE_SYNCHRONOUS"
            },
            {
              "description": "SQLite temporary storage location (e.g., MEMORY, FILE)",
              "format": "string",
              "name": "SQLITE_TEMP_STORE"
            },
            {
              "description": "SQLite memory-mapped I/O size in bytes",
              "format": "number",
              "name": "SQLITE_MMAP_SIZE"
            },
            {
              "description": "SQLite cache size (negative value for KB, positive for pages)",
              "format": "number",
              "name": "SQLITE_CACHE_SIZE"
            },
            {
              "description": "SQLite page size in bytes",
              "format": "number",
              "name": "SQLITE_PAGE_SIZE"
            },
            {
              "description": "SQLite WAL autocheckpoint threshold in pages",
              "format": "number",
              "name": "SQLITE_WAL_AUTOCHECKPOINT"
            },
            {
              "description": "SQLite busy timeout in milliseconds",
              "format": "number",
              "name": "SQLITE_BUSY_TIMEOUT_MS"
            },
            {
              "description": "SQLite WAL checkpoint mode (e.g., PASSIVE, FULL, RESTART)",
              "format": "string",
              "name": "SQLITE_WAL_CHECKPOINT"
            },
            {
              "description": "Server shutdown timeout in seconds",
              "format": "number",
              "name": "SHUTDOWN_TIMEOUT_S"
            },
            {
              "description": "Test mode shutdown timeout in seconds",
              "format": "number",
              "name": "SHUTDOWN_TIMEOUT_TEST_S"
            },
            {
              "description": "Queue operation timeout in seconds",
              "format": "number",
              "name": "QUEUE_TIMEOUT_S"
            },
            {
              "description": "Test mode queue timeout in seconds",
              "format": "number",
              "name": "QUEUE_TIMEOUT_TEST_S"
            },
            {
              "description": "Circuit breaker failure threshold before opening",
              "format": "number",
              "name": "CIRCUIT_BREAKER_FAILURE_THRESHOLD"
            },
            {
              "description": "Circuit breaker recovery timeout in seconds",
              "format": "number",
              "name": "CIRCUIT_BREAKER_RECOVERY_TIMEOUT_S"
            },
            {
              "description": "Maximum calls allowed in circuit breaker half-open state",
              "format": "number",
              "name": "CIRCUIT_BREAKER_HALF_OPEN_MAX_CALLS"
            },
            {
              "description": "Enable semantic search functionality",
              "format": "boolean",
              "name": "ENABLE_SEMANTIC_SEARCH"
            },
            {
              "description": "Ollama API host URL for embedding generation",
              "format": "string",
              "name": "OLLAMA_HOST"
            },
            {
              "description": "Embedding model name for semantic search",
              "format": "string",
              "name": "EMBEDDING_MODEL"
            },
            {
              "description": "Embedding vector dimensions",
              "format": "number",
              "name": "EMBEDDING_DIM"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T15:28:34.941574Z",
        "updatedAt": "2025-10-06T15:28:34.941574Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/brandonbosco-sigao-scf-mcp",
      "description": "Provides access to Civic Plus - See Click Fix, allowing you to interact with your data via an LLM.…",
      "repository": {},
      "version": "1.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@brandonbosco/sigao-scf-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T17:06:30.80395Z",
        "updatedAt": "2025-10-06T17:06:30.80395Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.tjhop/prometheus-mcp-server",
      "description": "An API-complete MCP server to manage Prometheus-compatible backends via comprehensive tools.",
      "repository": {
        "url": "https://github.com/tjhop/prometheus-mcp-server",
        "source": "github"
      },
      "version": "0.7.1",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/tjhop/prometheus-mcp-server:0.7.1",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/tjhop/prometheus-mcp-server",
              "type": "positional",
              "valueHint": "image_name"
            }
          ],
          "packageArguments": [
            {
              "description": "URL of the Prometheus instance to connect to",
              "isRequired": true,
              "default": "http://127.0.0.1:9090",
              "type": "named",
              "name": "--prometheus.url"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T18:04:36.40818Z",
        "updatedAt": "2025-10-06T18:04:36.40818Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/kesslerio-attio-mcp-server",
      "description": "Enable AI assistants to interact directly with your Attio CRM data through natural language querie…",
      "repository": {
        "url": "https://github.com/kesslerio/attio-mcp-server",
        "source": "github"
      },
      "version": "1.1.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@kesslerio/attio-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T18:05:45.305934Z",
        "updatedAt": "2025-10-06T18:05:45.305934Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.31",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T18:16:50.890615Z",
        "updatedAt": "2025-10-06T18:16:50.890615Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.32",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.32",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T18:25:30.335891Z",
        "updatedAt": "2025-10-06T18:25:30.335891Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.32",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T18:26:56.853124Z",
        "updatedAt": "2025-10-06T18:26:56.853124Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.33",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.33",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T18:56:05.494061Z",
        "updatedAt": "2025-10-06T18:56:05.494061Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.33",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T18:58:11.95218Z",
        "updatedAt": "2025-10-06T18:58:11.95218Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.34",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.34",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T19:14:16.94517Z",
        "updatedAt": "2025-10-06T19:14:16.94517Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.34",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T19:14:32.797821Z",
        "updatedAt": "2025-10-06T19:14:32.797821Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.35",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.35",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T19:26:25.096301Z",
        "updatedAt": "2025-10-06T19:26:25.096301Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.36",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.36",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T19:37:02.203876Z",
        "updatedAt": "2025-10-06T19:37:02.203876Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.36",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T19:39:20.500533Z",
        "updatedAt": "2025-10-06T19:39:20.500533Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.37",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.37",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T19:53:32.5457Z",
        "updatedAt": "2025-10-06T19:53:32.5457Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.37",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T19:56:07.70354Z",
        "updatedAt": "2025-10-06T19:56:07.70354Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.38",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T20:11:23.992588Z",
        "updatedAt": "2025-10-06T20:11:23.992588Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.38",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.38",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T20:12:53.546563Z",
        "updatedAt": "2025-10-06T20:12:53.546563Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.BenAHammond/code-auditor-mcp",
      "description": "Code Quality Auditor: Analyze code for SOLID principles, DRY violations, and more",
      "repository": {
        "url": "https://github.com/BenAHammond/code-auditor-mcp",
        "source": "github"
      },
      "version": "1.1.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "code-auditor-mcp",
          "version": "1.19.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T20:26:10.102466Z",
        "updatedAt": "2025-10-06T20:26:10.102466Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.39",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.39",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T20:29:42.184234Z",
        "updatedAt": "2025-10-06T20:29:42.184234Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.39",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T20:30:34.706952Z",
        "updatedAt": "2025-10-06T20:30:34.706952Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.40",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T21:00:58.525218Z",
        "updatedAt": "2025-10-06T21:00:58.525218Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.40",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.40",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T21:01:30.068883Z",
        "updatedAt": "2025-10-06T21:01:30.068883Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.41",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.41",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T21:28:38.28663Z",
        "updatedAt": "2025-10-06T21:28:38.28663Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.BenAHammond/code-auditor-mcp",
      "description": "Code Quality Auditor: Analyze code for SOLID principles, DRY violations, and more",
      "repository": {
        "url": "https://github.com/BenAHammond/code-auditor-mcp",
        "source": "github"
      },
      "version": "1.1.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "code-auditor-mcp",
          "version": "1.20.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T22:06:15.773924Z",
        "updatedAt": "2025-10-06T22:06:15.773924Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.42",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.42",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T22:18:03.015189Z",
        "updatedAt": "2025-10-06T22:18:03.015189Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.42",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T22:20:34.558495Z",
        "updatedAt": "2025-10-06T22:20:34.558495Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.43",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T22:32:12.781851Z",
        "updatedAt": "2025-10-06T22:32:12.781851Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.43",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.43",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T22:32:23.763766Z",
        "updatedAt": "2025-10-06T22:32:23.763766Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.44",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.44",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T22:48:45.722526Z",
        "updatedAt": "2025-10-06T22:48:45.722526Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.44",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T22:50:34.873751Z",
        "updatedAt": "2025-10-06T22:50:34.873751Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.45",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.45",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T22:58:44.307015Z",
        "updatedAt": "2025-10-06T22:58:44.307015Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.jkawamoto/mcp-youtube-transcript",
      "description": "An MCP server retrieving transcripts of YouTube videos",
      "repository": {
        "url": "https://github.com/jkawamoto/mcp-youtube-transcript",
        "source": "github"
      },
      "version": "0.5.4",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/jkawamoto/mcp-youtube-transcript/releases/download/v0.5.4/mcp-youtube-transcript.mcpb",
          "fileSha256": "195c643878037fa81fd2e18e622c1ae320eafe9c0445625c80460dee4855e906",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T23:03:08.26112Z",
        "updatedAt": "2025-10-06T23:03:08.26112Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.bajoski34/mcp-flutterwave",
      "description": "MCP Server to interact with Flutterwave APIs.",
      "repository": {
        "url": "https://github.com/bajoski34/mcp-flutterwave",
        "source": "github"
      },
      "version": "1.2.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-flutterwave",
          "version": "1.2.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your SECRET API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "FLW_SECRET_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T23:10:09.492919Z",
        "updatedAt": "2025-10-06T23:10:09.492919Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.46",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.46",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T23:14:33.419888Z",
        "updatedAt": "2025-10-06T23:14:33.419888Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.45",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T23:16:00.32203Z",
        "updatedAt": "2025-10-06T23:16:00.32203Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.47",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.47",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-06T23:48:15.241729Z",
        "updatedAt": "2025-10-06T23:48:15.241729Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.47",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T00:20:36.838282Z",
        "updatedAt": "2025-10-07T00:20:36.838282Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.48",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.48",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T00:21:51.596558Z",
        "updatedAt": "2025-10-07T00:21:51.596558Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.48",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T00:22:49.183531Z",
        "updatedAt": "2025-10-07T00:22:49.183531Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.49",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.49",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T00:37:09.522379Z",
        "updatedAt": "2025-10-07T00:37:09.522379Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.49",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T00:40:55.741227Z",
        "updatedAt": "2025-10-07T00:40:55.741227Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/kesslerio-attio-mcp-server",
      "description": "Connect AI to your Attio CRM. Manage contacts, companies, deals, and sales pipelines. Create tasks…",
      "repository": {
        "url": "https://github.com/kesslerio/attio-mcp-server",
        "source": "github"
      },
      "version": "1.1.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@kesslerio/attio-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T01:00:35.437419Z",
        "updatedAt": "2025-10-07T01:00:35.437419Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/kesslerio-attio-mcp-server",
      "description": "Connect AI to your Attio CRM. Manage contacts, companies, deals, and sales pipelines. Create tasks…",
      "repository": {
        "url": "https://github.com/kesslerio/attio-mcp-server",
        "source": "github"
      },
      "version": "1.1.1-fallback",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@kesslerio/attio-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T01:33:38.174012Z",
        "updatedAt": "2025-10-07T01:33:38.174012Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/szge-lolwiki-mcp",
      "description": "Generate friendly greetings for any audience. Toggle Pirate Mode for a playful, swashbuckling styl…",
      "repository": {
        "url": "https://github.com/szge/lolwiki-mcp",
        "source": "github"
      },
      "version": "1.16.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@szge/lolwiki-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T01:41:22.282712Z",
        "updatedAt": "2025-10-07T01:41:22.282712Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.schemacrawler/schemacrawler-ai",
      "description": "Enables natural language schema queries — explore tables, keys, procedures, and get SQL help fast",
      "repository": {
        "url": "https://github.com/schemacrawler/SchemaCrawler-AI",
        "source": "github"
      },
      "version": "v16.29.1-1",
      "websiteUrl": "https://schemacrawler.github.io",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/schemacrawler/schemacrawler-ai:v16.29.1-1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Database user name. Can be optional depending on the database connection type.",
              "format": "string",
              "isSecret": true,
              "name": "SCHCRWLR_DATABASE_USER"
            },
            {
              "description": "Database user password. Can be optional depending on the database connection type.",
              "format": "string",
              "isSecret": true,
              "name": "SCHCRWLR_DATABASE_PASSWORD"
            },
            {
              "description": "JDBC URL for database connection. If this is provided, the server, host, port and database are not used.",
              "format": "string",
              "name": "SCHCRWLR_JDBC_URL"
            },
            {
              "description": "SchemaCrawler database plugin, for example, 'sqlserver' or 'sqlite'. Used only if the JDBC URL is not provided.",
              "format": "string",
              "name": "SCHCRWLR_SERVER"
            },
            {
              "description": "Database host. Defaults to localhost. Used only if the JDBC URL is not provided.",
              "format": "string",
              "name": "SCHCRWLR_HOST"
            },
            {
              "description": "Database port. Defaults to the default port for the server type. Used only if the JDBC URL is not provided.",
              "format": "string",
              "name": "SCHCRWLR_PORT"
            },
            {
              "description": "Database to connect to (optional). Used only if the JDBC URL is not provided.",
              "format": "string",
              "name": "SCHCRWLR_DATABASE"
            },
            {
              "description": "How much database metadata to retrieve. Values are 'minimum', 'standard', 'detailed' or 'maximum'.",
              "format": "string",
              "name": "SCHCRWLR_INFO_LEVEL"
            },
            {
              "description": "Logging verbosity level. Values are 'SEVERE', 'WARNING', 'INFO', 'CONFIG', or 'FINE'.",
              "format": "string",
              "name": "SCHCRWLR_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T02:03:49.611586Z",
        "updatedAt": "2025-10-07T02:03:49.611586Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/RectiFlex-centerassist-mcp-cp",
      "description": "Streamline property management, construction, and service workflows with CenterPoint Connect. Sear…",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@RectiFlex/centerassist-mcp-cp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T03:31:56.911791Z",
        "updatedAt": "2025-10-07T03:31:56.911791Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/RectiFlex-centerassist-mcp-cp1",
      "description": "Access and manage CenterPoint Connect data for property management, construction, and service oper…",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@RectiFlex/centerassist-mcp-cp1/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T03:54:36.038569Z",
        "updatedAt": "2025-10-07T03:54:36.038569Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/kesslerio-attio-mcp-server-beta",
      "description": "Streamline your Attio workflows using natural language to search, create, update, and organize com…",
      "repository": {
        "url": "https://github.com/kesslerio/attio-mcp-server",
        "source": "github"
      },
      "version": "1.1.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@kesslerio/attio-mcp-server-beta/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T04:36:42.08064Z",
        "updatedAt": "2025-10-07T04:36:42.08064Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.carlisia/mcp-factcheck",
      "description": "An MCP server that validates content against MCP specification using semantic search and AI",
      "repository": {
        "url": "https://github.com/carlisia/mcp-factcheck",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/carlisia/mcp-factcheck:v1.0.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "OpenAI API key for embedding generation and content validation",
              "isRequired": true,
              "name": "OPENAI_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T05:23:36.272365Z",
        "updatedAt": "2025-10-07T05:23:36.272365Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/bhushangitfull-file-mcp-smith",
      "description": "Manage files and folders directly from your workspace. Read and write files, list directories, cre…",
      "repository": {
        "url": "https://github.com/bhushangitfull/file-mcp-smith",
        "source": "github"
      },
      "version": "1.16.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@bhushangitfull/file-mcp-smith/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T07:58:50.393118Z",
        "updatedAt": "2025-10-07T07:58:50.393118Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.clappia-dev/clappia-mcp",
      "description": "An MCP server that provides Clappia workspace, forms, workflows, submissions, and analytics",
      "repository": {
        "url": "https://github.com/clappia-dev/clappia-mcp",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/okaru413/clappia-mcp:1.0.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Clappia API key for authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CLAPPIA_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T08:10:55.274271Z",
        "updatedAt": "2025-10-07T08:10:55.274271Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.prisma/mcp",
      "description": "MCP server for managing Prisma Postgres.",
      "repository": {
        "url": "https://github.com/prisma/mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.prisma.io/sse",
          "headers": [
            {
              "description": "Bearer token for Prisma platform authentication",
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.prisma.io/mcp",
          "headers": [
            {
              "description": "Bearer token for Prisma platform authentication",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T08:43:06.941629Z",
        "updatedAt": "2025-10-07T08:43:06.941629Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/arjunkmrm-sg-bus-test",
      "description": "Get real-time bus arrival times for any Singapore bus stop by code, with optional service filterin…",
      "repository": {
        "url": "https://github.com/arjunkmrm/sg-bus-test",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@arjunkmrm/sg-bus-test/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T08:54:49.020099Z",
        "updatedAt": "2025-10-07T08:54:49.020099Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/Pratiksha-Kanoja-magicslide-mcp-test",
      "description": "Create polished slide decks from text or YouTube links in seconds. Fetch video transcripts to tran…",
      "repository": {
        "url": "https://github.com/Pratiksha-Kanoja/magicslide-mcp-test",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Pratiksha-Kanoja/magicslide-mcp-test/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T10:10:48.100762Z",
        "updatedAt": "2025-10-07T10:10:48.100762Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/mayla-debug-mcp-google-calendar2",
      "description": "Schedule and manage Google Calendar events directly from your workspace. Check availability, view…",
      "repository": {
        "url": "https://github.com/mayla-debug/mcp-google-calendar2",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@mayla-debug/mcp-google-calendar2/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T11:08:53.670394Z",
        "updatedAt": "2025-10-07T11:08:53.670394Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/Artin0123-gemini-image-mcp-server",
      "description": "Analyze images and videos with Gemini to get fast, reliable visual insights. Handle content from U…",
      "repository": {
        "url": "https://github.com/Artin0123/gemini-image-mcp-server",
        "source": "github"
      },
      "version": "1.3.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Artin0123/gemini-image-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T11:18:15.765383Z",
        "updatedAt": "2025-10-07T11:18:15.765383Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "dev.anotherai/anotherai",
      "description": "MCP server for building and testing AI agents with multi-model experimentation and insights.",
      "repository": {},
      "version": "0.1.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://api.anotherai.dev/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T12:06:15.262277Z",
        "updatedAt": "2025-10-07T12:06:15.262277Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/IndianAppGuy-magicslide-mcp-actual-test",
      "description": "Generate polished PowerPoint presentations from text prompts, YouTube videos, or structured outlin…",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@IndianAppGuy/magicslide-mcp-actual-test/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T12:06:34.023568Z",
        "updatedAt": "2025-10-07T12:06:34.023568Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.mapbox/mcp-server",
      "description": "Geospatial intelligence with Mapbox APIs like geocoding, POI search, directions, isochrones, etc.",
      "repository": {
        "url": "https://github.com/mapbox/mcp-server",
        "source": "github"
      },
      "version": "0.5.5",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@mapbox/mcp-server",
          "version": "0.5.5",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your Mapbox access token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "MAPBOX_ACCESS_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T12:20:23.67184Z",
        "updatedAt": "2025-10-07T12:20:23.67184Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/Artin0123-gemini-image-mcp-server",
      "description": "Analyze images and videos with Gemini to get fast, reliable visual insights. Handle content from U…",
      "repository": {
        "url": "https://github.com/Artin0123/gemini-vision-mcp",
        "source": "github"
      },
      "version": "1.3.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Artin0123/gemini-image-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T12:35:27.598218Z",
        "updatedAt": "2025-10-07T12:35:27.598218Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.florentine-ai/mcp",
      "description": "MCP server for Florentine.ai - Natural language to MongoDB aggregations",
      "repository": {
        "url": "https://github.com/florentine-ai/mcp",
        "source": "github"
      },
      "version": "0.2.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@florentine-ai/mcp",
          "version": "0.2.1",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "isRequired": true,
              "value": "@florentine-ai/mcp@latest",
              "type": "named",
              "name": "-y"
            }
          ],
          "packageArguments": [
            {
              "description": "The mode to run the MCP server in ('static' or 'dynamic')",
              "isRequired": true,
              "value": "static",
              "type": "named",
              "name": "--mode"
            },
            {
              "description": "Set to true to enable debug logging",
              "format": "boolean",
              "type": "named",
              "name": "--debug"
            },
            {
              "description": "The path to the log file, must be provided if debug is true",
              "format": "filepath",
              "type": "named",
              "name": "--logpath"
            }
          ],
          "environmentVariables": [
            {
              "description": "Your Florentine.ai API key, get it from https://florentine.ai/dashboard",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "FLORENTINE_TOKEN"
            },
            {
              "description": "The LLM service to use, one of 'openai', 'anthropic', 'google' or 'deepseek' (must only be provided if you did not set it in your Florentine.ai account)",
              "format": "string",
              "name": "LLM_SERVICE"
            },
            {
              "description": "Your API key for the LLM service (must only be provided if you did not set it in your Florentine.ai account)",
              "format": "string",
              "isSecret": true,
              "name": "LLM_KEY"
            },
            {
              "description": "Session ID for maintaining server-side context across requests",
              "format": "string",
              "name": "SESSION_ID"
            },
            {
              "description": "Stringified JSON array of return types for the response",
              "format": "string",
              "name": "RETURN_TYPES"
            },
            {
              "description": "Stringified JSON array of values for required inputs keys",
              "format": "string",
              "name": "REQUIRED_INPUTS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T12:53:53.745395Z",
        "updatedAt": "2025-10-07T12:53:53.745395Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.epidemicsound/mcp-server",
      "description": "Cloud-hosted MCP server for Epidemic Sound",
      "repository": {},
      "version": "1.0.0",
      "websiteUrl": "https://www.epidemicsound.com",
      "remotes": [
        {
          "type": "sse",
          "url": "https://www.epidemicsound.com/a/mcp-server/mcp"
        },
        {
          "type": "streamable-http",
          "url": "https://www.epidemicsound.com/a/mcp-server/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T13:15:06.928079Z",
        "updatedAt": "2025-10-07T13:15:06.928079Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/Artin0123-gemini-image-mcp-server",
      "description": "Analyze images and videos with Gemini to get fast, reliable visual insights. Handle content from U…",
      "repository": {
        "url": "https://github.com/Artin0123/gemini-vision-mcp",
        "source": "github"
      },
      "version": "1.3.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Artin0123/gemini-image-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T15:23:03.987387Z",
        "updatedAt": "2025-10-07T15:23:03.987387Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/Artin0123-gemini-image-mcp-server",
      "description": "Analyze images and videos with Gemini to get fast, reliable visual insights. Handle content from U…",
      "repository": {
        "url": "https://github.com/Artin0123/gemini-vision-mcp",
        "source": "github"
      },
      "version": "1.3.3",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Artin0123/gemini-image-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T15:31:03.021495Z",
        "updatedAt": "2025-10-07T15:31:03.021495Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.MauroDruwel/smartschool-mcp",
      "description": "Access Smartschool courses, grades, assignments, and messages through the Model Context Protocol",
      "repository": {},
      "version": "0.1.3",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "smartschool-mcp",
          "version": "0.1.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T15:39:52.176207Z",
        "updatedAt": "2025-10-07T15:39:52.176207Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.vfarcic/dot-ai",
      "description": "AI-powered development platform for Kubernetes deployments and intelligent automation",
      "repository": {
        "url": "https://github.com/vfarcic/dot-ai",
        "source": "github"
      },
      "version": "0.110.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@vfarcic/dot-ai",
          "version": "0.110.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T15:45:48.659864Z",
        "updatedAt": "2025-10-07T15:45:48.659864Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.MauroDruwel/smartschool-mcp",
      "description": "Access Smartschool courses, grades, assignments, and messages through the Model Context Protocol",
      "repository": {},
      "version": "0.1.4",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "smartschool-mcp",
          "version": "0.1.4",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T15:57:22.194069Z",
        "updatedAt": "2025-10-07T15:57:22.194069Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/Artin0123-gemini-image-mcp-server",
      "description": "Analyze images and videos with Gemini to get fast, reliable visual insights. Handle content from U…",
      "repository": {
        "url": "https://github.com/Artin0123/gemini-vision-mcp",
        "source": "github"
      },
      "version": "1.3.4",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Artin0123/gemini-image-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T15:57:33.366017Z",
        "updatedAt": "2025-10-07T15:57:33.366017Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/Artin0123-gemini-image-mcp-server",
      "description": "Analyze images and videos with Gemini to get fast, reliable visual insights. Handle content from U…",
      "repository": {
        "url": "https://github.com/Artin0123/gemini-vision-mcp",
        "source": "github"
      },
      "version": "0.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Artin0123/gemini-image-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T17:47:25.005282Z",
        "updatedAt": "2025-10-07T17:47:25.005282Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/Parc-Dev-task-breakdown-server",
      "description": "Break down complex problems into clear, actionable steps. Adapt on the fly by iterating, revising,…",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Parc-Dev/task-breakdown-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T18:37:20.988548Z",
        "updatedAt": "2025-10-07T18:37:20.988548Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.supabase/mcp",
      "description": "MCP server for interacting with the Supabase platform",
      "repository": {
        "url": "https://github.com/supabase-community/supabase-mcp",
        "source": "github",
        "subfolder": "packages/mcp-server-supabase"
      },
      "version": "0.5.6",
      "websiteUrl": "https://supabase.com/mcp",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@supabase/mcp-server-supabase",
          "version": "0.5.6",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "Supabase project reference ID",
              "format": "string",
              "type": "named",
              "name": "--project-ref"
            },
            {
              "description": "Enable read-only mode",
              "format": "boolean",
              "type": "named",
              "name": "--read-only"
            },
            {
              "description": "Comma-separated list of features to enable",
              "format": "string",
              "type": "named",
              "name": "--features"
            },
            {
              "description": "Custom API URL",
              "format": "string",
              "type": "named",
              "name": "--api-url"
            }
          ],
          "environmentVariables": [
            {
              "description": "Personal access token for Supabase API",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "SUPABASE_ACCESS_TOKEN"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.supabase.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T18:43:17.850411Z",
        "updatedAt": "2025-10-07T18:43:17.850411Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.mobile-next/mobile-mcp",
      "description": "MCP server for iOS and Android Mobile Development, Automation and Testing",
      "repository": {
        "url": "https://github.com/mobile-next/mobile-mcp",
        "source": "github"
      },
      "version": "0.0.31",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@mobilenext/mobile-mcp",
          "version": "0.0.31",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "name": ""
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T20:11:57.116929Z",
        "updatedAt": "2025-10-07T20:11:57.116929Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/TakoData-tako-mcp",
      "description": "Provide real-time data querying and visualization by integrating Tako with your agents. Generate o…",
      "repository": {
        "url": "https://github.com/TakoData/tako-mcp",
        "source": "github"
      },
      "version": "1.16.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@TakoData/tako-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T20:40:52.702786Z",
        "updatedAt": "2025-10-07T20:40:52.702786Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/mrugankpednekar-mcp-optimizer",
      "description": "Optimize crew and workforce schedules, resource allocation, and routing with linear and mixed-inte…",
      "repository": {
        "url": "https://github.com/mrugankpednekar/mcp-optimizer",
        "source": "github"
      },
      "version": "1.16.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@mrugankpednekar/mcp-optimizer/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T21:15:31.815401Z",
        "updatedAt": "2025-10-07T21:15:31.815401Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/Funding-Machine-ghl-mcp-fundingmachine",
      "description": "Automate GoHighLevel across CRM, messaging, calendars, marketing, e-commerce, and billing. Manage…",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Funding-Machine/ghl-mcp-fundingmachine/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T21:20:15.688859Z",
        "updatedAt": "2025-10-07T21:20:15.688859Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.jamesmontemagno/monkeymcp",
      "description": "MCP server providing monkey data, journeys, and location services for various monkey species.",
      "repository": {
        "url": "https://github.com/jamesmontemagno/monkeymcp",
        "source": "github"
      },
      "version": "2.0.3",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/jamesmontemagno/monkeymcp:2.0.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T23:03:40.813346Z",
        "updatedAt": "2025-10-07T23:03:40.813346Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/huuthangntk-claude-vision-mcp-server",
      "description": "Analyze images from multiple angles to extract detailed insights or quick summaries. Describe visu…",
      "repository": {
        "url": "https://github.com/huuthangntk/claude-vision-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@huuthangntk/claude-vision-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-07T23:20:55.125959Z",
        "updatedAt": "2025-10-07T23:20:55.125959Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/clpi-clp-mcp",
      "description": "Manage simple context workflows with quick init and add actions. Access the 'Hello, World' origin…",
      "repository": {
        "url": "https://github.com/clpi/clp-mcp",
        "source": "github"
      },
      "version": "0.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@clpi/clp-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T00:23:04.174735Z",
        "updatedAt": "2025-10-08T00:23:04.174735Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.tcehjaava/tmdb-mcp-server",
      "description": "MCP server for The Movie Database (TMDB) API",
      "repository": {
        "url": "https://github.com/tcehjaava/tmdb-mcp-server",
        "source": "github"
      },
      "version": "0.1.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "tmdb-mcp-server",
          "version": "0.1.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "TMDB API access token (get free at https://www.themoviedb.org/settings/api)",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "TMDB_ACCESS_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T02:19:10.232408Z",
        "updatedAt": "2025-10-08T02:19:10.232408Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/arjunkmrm-fetch",
      "description": "Fetch web pages and extract exactly the content you need. Select elements with CSS and retrieve co…",
      "repository": {
        "url": "https://github.com/arjunkmrm/fetch",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@arjunkmrm/fetch/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T02:32:40.481877Z",
        "updatedAt": "2025-10-08T02:32:40.481877Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/kodey-ai-salesforce-mcp-server",
      "description": "Run SOQL queries against your Salesforce org to retrieve records and insights. Explore objects, fi…",
      "repository": {
        "url": "https://github.com/kodey-ai/salesforce-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@kodey-ai/salesforce-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T03:10:46.917883Z",
        "updatedAt": "2025-10-08T03:10:46.917883Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/kodey-ai-salesforce-mcp-kodey",
      "description": "Run SOQL queries against your Salesforce org to explore and retrieve data. Quickly iterate on filt…",
      "repository": {
        "url": "https://github.com/kodey-ai/salesforce-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@kodey-ai/salesforce-mcp-kodey/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T03:10:47.790579Z",
        "updatedAt": "2025-10-08T03:10:47.790579Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/kodey-ai-salesforce-mcp",
      "description": "Run SOQL queries to explore and retrieve Salesforce data. Inspect records, fields, and relationshi…",
      "repository": {
        "url": "https://github.com/kodey-ai/salesforce-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@kodey-ai/salesforce-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T03:10:49.227357Z",
        "updatedAt": "2025-10-08T03:10:49.227357Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/kodey-ai-salesforce-mcp-minimal",
      "description": "Run SOQL queries to explore and retrieve Salesforce data. Access accounts, contacts, opportunities…",
      "repository": {
        "url": "https://github.com/kodey-ai/salesforce-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@kodey-ai/salesforce-mcp-minimal/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T03:10:50.179693Z",
        "updatedAt": "2025-10-08T03:10:50.179693Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.50",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.50",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T03:50:51.864833Z",
        "updatedAt": "2025-10-08T03:50:51.864833Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/DynamicEndpoints-m365-core-mcp",
      "description": "*Updated September 25th 2025** Manage your Microsoft 365 services effortlessly. Create and manage…",
      "repository": {
        "url": "https://github.com/DynamicEndpoints/m365-core-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@DynamicEndpoints/m365-core-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T04:00:42.356429Z",
        "updatedAt": "2025-10-08T04:00:42.356429Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.50",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T04:10:49.532129Z",
        "updatedAt": "2025-10-08T04:10:49.532129Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.51",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.51",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T04:11:26.218896Z",
        "updatedAt": "2025-10-08T04:11:26.218896Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.files/python-mcp",
      "description": "Securely give LLMs controlled access to real-world operations inside your Files.com environment",
      "repository": {
        "url": "https://github.com/Files-com/files-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "files-com-mcp",
          "version": "1.0.34",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Files.com API Key. Create at <your-site>.files.com/ui/apiKeys.",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "FILES_COM_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T04:16:43.21852Z",
        "updatedAt": "2025-10-08T04:16:43.21852Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.52",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.52",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T04:30:37.785482Z",
        "updatedAt": "2025-10-08T04:30:37.785482Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.52",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T04:30:38.743215Z",
        "updatedAt": "2025-10-08T04:30:38.743215Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/RectiFlex-centerassist-mcp1",
      "description": "Manage CenterPoint Connect data across properties, companies, employees, invoices, materials, and…",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@RectiFlex/centerassist-mcp1/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T05:13:44.681143Z",
        "updatedAt": "2025-10-08T05:13:44.681143Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/IndianAppGuy-magicslide-mcp",
      "description": "Generate professional PowerPoint presentations from text, YouTube videos, or structured JSON data.…",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@IndianAppGuy/magicslide-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T05:29:39.856257Z",
        "updatedAt": "2025-10-08T05:29:39.856257Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/Artin0123-gemini-image-mcp-server",
      "description": "Analyze images and videos with Gemini to get fast, reliable visual insights. Handle content from U…",
      "repository": {
        "url": "https://github.com/Artin0123/gemini-vision-mcp",
        "source": "github"
      },
      "version": "1.4.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Artin0123/gemini-image-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T06:00:18.979771Z",
        "updatedAt": "2025-10-08T06:00:18.979771Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "ai.smithery/Artin0123-gemini-image-mcp-server",
      "description": "Analyze images and videos with Gemini to get fast, reliable visual insights. Handle content from U…",
      "repository": {
        "url": "https://github.com/Artin0123/gemini-vision-mcp",
        "source": "github"
      },
      "version": "1.4.3",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@Artin0123/gemini-image-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "value": "Bearer {smithery_api_key}",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T06:18:22.754577Z",
        "updatedAt": "2025-10-08T06:18:22.754577Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ggozad/haiku-rag",
      "description": "Agentic Retrieval Augmented Generation (RAG) with LanceDB",
      "repository": {
        "url": "https://github.com/ggozad/haiku.rag",
        "source": "github"
      },
      "version": "0.11.4"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T08:12:29.084973Z",
        "updatedAt": "2025-10-08T08:12:29.084973Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.cycloid.mcp/server",
      "description": "An MCP server that let you interact with Cycloid.io Internal Development Portal and Platform",
      "repository": {
        "url": "https://github.com/cycloidio/cycloid-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.cycloid.io/mcp",
          "headers": [
            {
              "description": "API key for authentication",
              "isRequired": true,
              "isSecret": true,
              "name": "X-CY-API-KEY"
            },
            {
              "description": "The organization canonical name (tenant) you want to interact with",
              "isRequired": true,
              "name": "X-CY-ORG"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T10:47:05.417233Z",
        "updatedAt": "2025-10-08T10:47:05.417233Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.esrisaudiarabia/arcgis-mcp-server",
      "description": "Intelligent ArcGIS content search. Works with Online/Enterprise. Requires user credentials.",
      "repository": {
        "url": "https://github.com/esrisaudiarabia/esrisaudiarabia-mcp",
        "source": "github"
      },
      "version": "1.0.2",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "arcgis-mcp-server",
          "version": "1.0.2",
          "runtimeHint": "python",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your ArcGIS Portal URL (e.g., https://portal.company.com/portal)",
              "isRequired": true,
              "format": "string",
              "name": "ARCGIS_URL"
            },
            {
              "description": "Your ArcGIS Portal Username",
              "isRequired": true,
              "format": "string",
              "name": "ARCGIS_USERNAME"
            },
            {
              "description": "Your ArcGIS Portal Password",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "ARCGIS_PASSWORD"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T11:11:40.785916Z",
        "updatedAt": "2025-10-08T11:11:40.785916Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.edrich13/mcp-jira-server",
      "description": "MCP server for self-hosted Jira instance with Personal Access Token authentication",
      "repository": {},
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-jira-server",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Base URL of your Jira instance (e.g., https://jira.domain.com)",
              "isRequired": true,
              "format": "string",
              "name": "JIRA_BASE_URL"
            },
            {
              "description": "Your Jira Personal Access Token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "JIRA_PAT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T11:14:06.312345Z",
        "updatedAt": "2025-10-08T11:14:06.312345Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.teamwork/mcp",
      "description": "The Teamwork.com official MCP server helps teams efficiently manage client projects with AI.",
      "repository": {
        "url": "https://github.com/teamwork/mcp",
        "source": "github"
      },
      "version": "1.6.3",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/teamwork/mcp:v1.6.3",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "TW_MCP_BEARER_TOKEN"
            },
            {
              "description": "Choose log output format between 'text' or 'json'. Default is 'text'.",
              "format": "string",
              "name": "TW_MCP_LOG_FORMAT"
            },
            {
              "description": "Choose log level between 'debug', 'info', 'warn' or 'error'. Default is 'info'.",
              "format": "string",
              "name": "TW_MCP_LOG_LEVEL"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T11:30:00.595881Z",
        "updatedAt": "2025-10-08T11:30:00.595881Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ChromeDevTools/chrome-devtools-mcp",
      "description": "MCP server for Chrome DevTools",
      "repository": {
        "url": "https://github.com/ChromeDevTools/chrome-devtools-mcp",
        "source": "github"
      },
      "version": "0.6.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "chrome-devtools-mcp",
          "version": "0.6.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T12:12:06.024966Z",
        "updatedAt": "2025-10-08T12:12:06.024966Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.cycloid.mcp/server",
      "description": "An MCP server that let you interact with Cycloid.io Internal Development Portal and Platform",
      "repository": {
        "url": "https://github.com/cycloidio/cycloid-mcp-server",
        "source": "github"
      },
      "version": "1.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.cycloid.io/mcp",
          "headers": [
            {
              "description": "API key for authentication",
              "isRequired": true,
              "isSecret": true,
              "name": "X-CY-API-KEY"
            },
            {
              "description": "The organization canonical name (tenant) you want to interact with",
              "isRequired": true,
              "name": "X-CY-ORG"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T12:49:02.342984Z",
        "updatedAt": "2025-10-08T12:49:02.342984Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.IPv6/mcp-transcribe",
      "description": "MCP-Transcribe server allows LLMs to interact with the text content of audio/video files",
      "repository": {
        "url": "https://github.com/transcribe-app/mcp-transcribe",
        "source": "github"
      },
      "version": "1.0.4",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/transcribe-app/mcp-transcribe/releases/download/v1.0.4/transcribe-com-v1.0.4.mcpb",
          "fileSha256": "720278617e2a55372919f4ca33bb6298e1e58433f4148fe88b86463fad07bdab",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your MCP-integration URL",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "MCP_INTEGRATION_URL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T14:44:05.256925Z",
        "updatedAt": "2025-10-08T14:44:05.256925Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.zeiq-co/thoth-mcp",
      "description": "MCP server for Thoth with multi-platform AI content generation",
      "repository": {
        "url": "https://github.com/perminder-klair/thoth-mcp",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@usethoth/mcp-server",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T16:45:58.653494Z",
        "updatedAt": "2025-10-08T16:45:58.653494Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.zeiq-co/thoth-mcp",
      "description": "MCP server for Thoth with multi-platform AI content generation",
      "repository": {
        "url": "https://github.com/perminder-klair/thoth-mcp",
        "source": "github"
      },
      "version": "1.0.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@usethoth/mcp-server",
          "version": "1.0.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T16:56:24.838745Z",
        "updatedAt": "2025-10-08T16:56:24.838745Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.53",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.53",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T17:38:48.551946Z",
        "updatedAt": "2025-10-08T17:38:48.551946Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.figma.mcp/mcp",
      "description": "The Figma MCP server brings Figma context directly into your AI workflow.",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.figma.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T18:25:56.591115Z",
        "updatedAt": "2025-10-08T18:25:56.591115Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.figma.mcp/mcp",
      "description": "The Figma MCP server brings Figma context directly into your AI workflow.",
      "repository": {},
      "version": "1.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.figma.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T18:29:41.508062Z",
        "updatedAt": "2025-10-08T18:29:41.508062Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
      "name": "com.devcycle/mcp",
      "description": "DevCycle MCP server for feature flag management",
      "repository": {
        "url": "https://github.com/DevCycleHQ/cli",
        "source": "github"
      },
      "version": "6.1.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.devcycle.com/mcp"
        },
        {
          "type": "sse",
          "url": "https://mcp.devcycle.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T18:37:24.013715Z",
        "updatedAt": "2025-10-08T18:37:24.013715Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.francisco-perez-sorrosal/cv",
      "description": "An MCP server that provides access to Francisco Perez-Sorrosal's CV",
      "repository": {
        "url": "https://github.com/francisco-perez-sorrosal/cv.git",
        "source": "github"
      },
      "version": "0.0.3",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/francisco-perez-sorrosal/cv/releases/download/v0.0.3/fps-cv-mcp-0.0.3.mcpb",
          "fileSha256": "d9835e29ee1a95759219f23bb988f71cb9d419b631754fc0ad8ab43b5ff0042e",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T19:16:22.808746Z",
        "updatedAt": "2025-10-08T19:16:22.808746Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.oguzc/playwright-wizard-mcp",
      "description": "MCP server providing Playwright test generation wizard with intelligent prompts and best practices",
      "repository": {},
      "version": "0.1.4",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "playwright-wizard-mcp",
          "version": "0.1.4",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-08T23:12:35.503809Z",
        "updatedAt": "2025-10-08T23:12:35.503809Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.54",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.54",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-09T00:07:38.154091Z",
        "updatedAt": "2025-10-09T00:07:38.154091Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "com.figma.mcp/mcp",
      "description": "The Figma MCP server brings Figma context directly into your AI workflow.",
      "repository": {},
      "version": "1.0.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.figma.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-09T01:27:54.786945Z",
        "updatedAt": "2025-10-09T01:27:54.786945Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.robotmcp/ros-mcp-server",
      "description": "Connect AI models like Claude & ChatGPT with ROS robots using MCP",
      "repository": {
        "url": "https://github.com/robotmcp/ros-mcp-server",
        "source": "github"
      },
      "version": "2.1.5",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "ros-mcp",
          "version": "2.1.5",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-09T03:09:28.494233Z",
        "updatedAt": "2025-10-09T03:09:28.494233Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.tjhop/prometheus-mcp-server",
      "description": "An API-complete MCP server to manage Prometheus-compatible backends via comprehensive tools.",
      "repository": {
        "url": "https://github.com/tjhop/prometheus-mcp-server",
        "source": "github"
      },
      "version": "0.8.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/tjhop/prometheus-mcp-server:0.8.0",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/tjhop/prometheus-mcp-server",
              "type": "positional",
              "valueHint": "image_name"
            }
          ],
          "packageArguments": [
            {
              "description": "URL of the Prometheus instance to connect to",
              "isRequired": true,
              "default": "http://127.0.0.1:9090",
              "type": "named",
              "name": "--prometheus.url"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-09T04:27:49.853754Z",
        "updatedAt": "2025-10-09T04:27:49.853754Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.robotmcp/ros-mcp-server",
      "description": "Connect AI models like Claude & ChatGPT with ROS robots using MCP",
      "repository": {
        "url": "https://github.com/robotmcp/ros-mcp-server",
        "source": "github"
      },
      "version": "2.1.6",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "ros-mcp",
          "version": "2.1.6",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-09T05:11:18.719361Z",
        "updatedAt": "2025-10-09T05:11:18.719361Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.NeerajG03/vector-memory",
      "description": "Semantic document memory using Redis vector store. Save and recall files with natural language.",
      "repository": {},
      "version": "0.3.0",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "mcp-server-vector-memory",
          "version": "0.3.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-09T07:17:52.844958Z",
        "updatedAt": "2025-10-09T07:17:52.844958Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.dynatrace-oss/Dynatrace-mcp",
      "description": "Model Context Protocol server for Dynatrace - access logs, events, metrics from Dynatrace via MCP.",
      "repository": {
        "url": "https://github.com/dynatrace-oss/Dynatrace-mcp",
        "source": "github"
      },
      "version": "0.9.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@dynatrace-oss/dynatrace-mcp-server",
          "version": "0.9.0",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "The URL of your Dynatrace environment (e.g. 'https://abc12345.apps.dynatrace.com')",
              "isRequired": true,
              "format": "string",
              "name": "DT_ENVIRONMENT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-09T07:38:56.727535Z",
        "updatedAt": "2025-10-09T07:38:56.727535Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "host.justcall.mcp/justcall-mcp-server",
      "description": "JustCall MCP Server",
      "repository": {
        "url": "https://github.com/saaslabsco/justcall-mcp-server",
        "source": "github"
      },
      "version": "0.0.4",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.justcall.host/mcp",
          "headers": [
            {
              "description": "API key and Secret for authentication in the format of <API_KEY>:<API_SECRET>",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-09T10:03:16.606919Z",
        "updatedAt": "2025-10-09T10:03:16.606919Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.esrisaudiarabia/arcgis-mcp-server",
      "description": "Intelligent ArcGIS content search. Works with Online/Enterprise. Requires user credentials.",
      "repository": {
        "url": "https://github.com/esrisaudiarabia/esrisaudiarabia-mcp",
        "source": "github"
      },
      "version": "1.0.3",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "arcgis-mcp-server",
          "version": "1.0.3",
          "runtimeHint": "python",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your ArcGIS Portal URL (e.g., https://portal.company.com/portal)",
              "isRequired": true,
              "format": "string",
              "name": "ARCGIS_URL"
            },
            {
              "description": "Your ArcGIS Portal Username",
              "isRequired": true,
              "format": "string",
              "name": "ARCGIS_USERNAME"
            },
            {
              "description": "Your ArcGIS Portal Password",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "ARCGIS_PASSWORD"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-09T11:57:43.824444Z",
        "updatedAt": "2025-10-09T11:57:43.824444Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.dynatrace-oss/Dynatrace-mcp",
      "description": "Model Context Protocol server for Dynatrace - access logs, events, metrics from Dynatrace via MCP.",
      "repository": {
        "url": "https://github.com/dynatrace-oss/Dynatrace-mcp",
        "source": "github"
      },
      "version": "0.9.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@dynatrace-oss/dynatrace-mcp-server",
          "version": "0.9.1",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "The URL of your Dynatrace environment (e.g. 'https://abc12345.apps.dynatrace.com')",
              "isRequired": true,
              "format": "string",
              "name": "DT_ENVIRONMENT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-09T13:36:41.412763Z",
        "updatedAt": "2025-10-09T13:36:41.412763Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.pzep1/mcp-meet",
      "description": "One-click Google Meet scheduling and Apple Calendar mirroring with smart availability detection",
      "repository": {
        "url": "https://github.com/znz-systems/mcp-meet",
        "source": "github"
      },
      "version": "0.3.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-meet",
          "version": "0.3.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Google OAuth Client ID",
              "isRequired": true,
              "format": "string",
              "name": "GOOGLE_CLIENT_ID"
            },
            {
              "description": "Google OAuth Client Secret",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "GOOGLE_CLIENT_SECRET"
            },
            {
              "description": "Google OAuth Redirect URI",
              "format": "string",
              "default": "http://localhost:5173/oauth2/callback",
              "name": "GOOGLE_REDIRECT_URI"
            },
            {
              "description": "Comma-separated list of calendar IDs to check for availability",
              "format": "string",
              "default": "primary",
              "name": "CALENDAR_IDS"
            },
            {
              "description": "Name of the Apple Calendar to create events in",
              "format": "string",
              "default": "Meetings",
              "name": "APPLE_CALENDAR_NAME"
            },
            {
              "description": "Timezone for calendar operations",
              "format": "string",
              "default": "Europe/London",
              "name": "TZ"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-09T15:27:11.703854Z",
        "updatedAt": "2025-10-09T15:27:11.703854Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.oguzc/playwright-wizard-mcp",
      "description": "MCP server providing Playwright test generation wizard with intelligent prompts and best practices",
      "repository": {},
      "version": "0.1.5",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "playwright-wizard-mcp",
          "version": "0.1.5",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-09T16:33:41.81031Z",
        "updatedAt": "2025-10-09T16:33:41.81031Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.aliengiraffe/spotdb",
      "description": "Ephemeral data sandbox for AI workflows with guardrails and security",
      "repository": {
        "url": "https://github.com/aliengiraffe/spotdb",
        "source": "github"
      },
      "version": "0.1.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/aliengiraffe/spotdb:0.1.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Optional API key for request authentication",
              "format": "string",
              "isSecret": true,
              "name": "X-API-Key"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-09T17:05:17.793149Z",
        "updatedAt": "2025-10-09T17:05:17.793149Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.gauravfs-14/lit-mcp",
      "description": "MCP server for academic literature databases (arXiv, DBLP) to accelerate research using LLMs.",
      "repository": {},
      "version": "0.1.9",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "lit-mcp",
          "version": "0.1.9",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-09T19:18:03.140556Z",
        "updatedAt": "2025-10-09T19:18:03.140556Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.gauravfs-14/lit-mcp",
      "description": "MCP server for academic literature databases (arXiv, DBLP) to accelerate research using LLMs.",
      "repository": {},
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "lit-mcp",
          "version": "1.0.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-09T19:50:29.822014Z",
        "updatedAt": "2025-10-09T19:50:29.822014Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "dev.svelte/mcp",
      "description": "The official Svelte MCP server providing docs and autofixing tools for Svelte development",
      "repository": {
        "url": "https://github.com/sveltejs/mcp",
        "source": "github",
        "id": "1054419133",
        "subfolder": "packages/mcp-stdio"
      },
      "version": "0.1.4",
      "websiteUrl": "https://svelte.dev/docs/mcp/overview",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@sveltejs/mcp",
          "version": "0.1.4",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.svelte.dev/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-09T20:44:20.51165Z",
        "updatedAt": "2025-10-09T20:44:20.51165Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.abhishekbhakat/airflow-mcp-server",
      "description": "An MCP server for Apache Airflow ",
      "repository": {
        "url": "https://github.com/abhishekbhakat/airflow-mcp-server",
        "source": "github"
      },
      "version": "0.9.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "airflow-mcp-server",
          "version": "0.9.0",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "description": "Use only read-only tools for safe operations",
              "type": "named",
              "name": "--safe"
            },
            {
              "description": "Use static tools instead of hierarchical discovery",
              "type": "named",
              "name": "--static-tools"
            }
          ],
          "environmentVariables": [
            {
              "description": "The base URL for the Airflow API (e.g., http://localhost:8080)",
              "isRequired": true,
              "format": "string",
              "name": "AIRFLOW_BASE_URL"
            },
            {
              "description": "The JWT authentication token for Airflow API access",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "AUTH_TOKEN"
            }
          ]
        },
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "airflow-mcp-server",
          "version": "0.8.2",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3000"
          },
          "packageArguments": [
            {
              "description": "Use HTTP (Streamable HTTP) transport",
              "type": "named",
              "name": "--http"
            },
            {
              "description": "Port to run HTTP server on",
              "value": "3000",
              "type": "named",
              "name": "--port"
            },
            {
              "description": "Host to bind HTTP server to",
              "value": "localhost",
              "type": "named",
              "name": "--host"
            },
            {
              "description": "Use only read-only tools for safe operations",
              "type": "named",
              "name": "--safe"
            },
            {
              "description": "Use static tools instead of hierarchical discovery",
              "type": "named",
              "name": "--static-tools"
            }
          ],
          "environmentVariables": [
            {
              "description": "The base URL for the Airflow API (e.g., http://localhost:8080)",
              "isRequired": true,
              "format": "string",
              "name": "AIRFLOW_BASE_URL"
            },
            {
              "description": "The JWT authentication token for Airflow API access",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "AUTH_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-09T22:19:57.025824Z",
        "updatedAt": "2025-10-09T22:19:57.025824Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "",
      "name": "io.github.antuelle78/weather-mcp",
      "description": "A simple MCP server for getting weather information.",
      "repository": {},
      "version": "1.0.0"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-09T23:19:01.125697Z",
        "updatedAt": "2025-10-09T23:19:01.125697Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.alondmnt/joplin-mcp",
      "description": "FastMCP server exposing Joplin notes, notebooks, tags, and imports.",
      "repository": {
        "url": "https://github.com/alondmnt/joplin-mcp",
        "source": "github"
      },
      "version": "0.4.1",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "joplin-mcp",
          "version": "0.4.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Web Clipper authentication token from a running Joplin instance",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "JOPLIN_TOKEN"
            },
            {
              "description": "Optional override for the Joplin Web Clipper base URL (default http://localhost:41184)",
              "format": "string",
              "name": "JOPLIN_URL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-10T01:08:43.656063Z",
        "updatedAt": "2025-10-10T01:08:43.656063Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.vishalsachdev/canvas-mcp",
      "description": "Canvas LMS integration for students and educators with FERPA-compliant analytics and workflows",
      "repository": {
        "url": "https://github.com/vishalsachdev/canvas-mcp",
        "source": "github",
        "id": "940427833"
      },
      "version": "1.0.1",
      "websiteUrl": "https://vishalsachdev.github.io/canvas-mcp",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "canvas-mcp",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-10T04:23:39.070152Z",
        "updatedAt": "2025-10-10T04:23:39.070152Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.buildkite/buildkite-mcp-server",
      "description": "MCP server exposing Buildkite API data (pipelines, builds, jobs, tests) to AI tooling and editors.",
      "repository": {
        "url": "https://github.com/buildkite/buildkite-mcp-server",
        "source": "github",
        "id": "962909011"
      },
      "version": "0.7.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/buildkite/buildkite-mcp-server:0.7.0",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "BUILDKITE_API_TOKEN",
              "type": "positional"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/buildkite/buildkite-mcp-server:0.7.0",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Buildkite API token for authentication. Get one from https://buildkite.com/user/api-access-tokens",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BUILDKITE_API_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-10T05:18:04.942499Z",
        "updatedAt": "2025-10-10T05:18:04.942499Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.vemonet/openroute-mcp",
      "description": "Plan routes using OpenRouteService API, for activities such as hiking or mountain biking",
      "repository": {
        "url": "https://github.com/vemonet/openroute-mcp",
        "source": "github"
      },
      "version": "0.0.3",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "openroute-mcp",
          "version": "0.0.3",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for https://api.openrouteservice.org",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "OPENROUTESERVICE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-10T06:03:34.202607Z",
        "updatedAt": "2025-10-10T06:03:34.202607Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.NeerajG03/vector-memory",
      "description": "Semantic document memory using Redis vector store. Save and recall files with natural language.",
      "repository": {},
      "version": "0.3.1",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "mcp-server-vector-memory",
          "version": "0.3.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-10T06:34:43.517731Z",
        "updatedAt": "2025-10-10T06:34:43.517731Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.fengcl/mcp-sse-demo-02",
      "description": "Spring Boot MCP 服务器（示例占位描述），通过 GHCR 以 OCI 镜像发布至 MCP Registry。",
      "repository": {},
      "version": "0.0.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/fengcl/mcp-sse-demo-02:0.1.5",
          "transport": {
            "type": "sse",
            "url": "http://2d816j6296.uicp.fun/mcp/sse"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-10T06:58:59.102576Z",
        "updatedAt": "2025-10-10T06:58:59.102576Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.github/github-mcp-server",
      "description": "Connect AI assistants to GitHub - manage repos, issues, PRs, and workflows through natural language.",
      "repository": {
        "url": "https://github.com/github/github-mcp-server",
        "source": "github"
      },
      "version": "0.18.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/github/github-mcp-server:0.18.0",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "GITHUB_PERSONAL_ACCESS_TOKEN",
              "type": "positional",
              "valueHint": "env_var_name"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/github/github-mcp-server",
              "type": "positional",
              "valueHint": "image_name"
            }
          ],
          "environmentVariables": [
            {
              "description": "Your GitHub personal access token with appropriate scopes.",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "GITHUB_PERSONAL_ACCESS_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-10T08:53:44.77159Z",
        "updatedAt": "2025-10-10T08:53:44.77159Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.opsmill/infrahub-mcp",
      "description": "An MCP server connects your AI assistants to Infrahub using the open MCP standard.",
      "repository": {
        "url": "https://github.com/opsmill/infrahub-mcp",
        "source": "github"
      },
      "version": "0.1.2",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "infrahub-mcp",
          "version": "0.1.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "The URL/address of your Infrahub instance",
              "isRequired": true,
              "format": "string",
              "name": "INFRAHUB_ADDRESS"
            },
            {
              "description": "Your Infrahub API token for authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "INFRAHUB_API_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-10T12:06:41.863655Z",
        "updatedAt": "2025-10-10T12:06:41.863655Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.vaadin/docs-mcp",
      "description": "Provides Vaadin Documentation and help with development tasks",
      "repository": {
        "url": "https://github.com/vaadin/vaadin-documentation-services",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.vaadin.com/docs/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-10T12:41:08.516131Z",
        "updatedAt": "2025-10-10T12:41:08.516131Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.alex-feel/mcp-context-server",
      "description": "An MCP server that provides persistent multimodal context storage for LLM agents.",
      "repository": {
        "url": "https://github.com/alex-feel/mcp-context-server",
        "source": "github"
      },
      "version": "0.4.1",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-context-server",
          "version": "0.4.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Log level",
              "format": "string",
              "name": "LOG_LEVEL"
            },
            {
              "description": "Maximum individual image size in megabytes",
              "format": "number",
              "name": "MAX_IMAGE_SIZE_MB"
            },
            {
              "description": "Maximum total request size in megabytes",
              "format": "number",
              "name": "MAX_TOTAL_SIZE_MB"
            },
            {
              "description": "Custom database file location path",
              "format": "string",
              "name": "DB_PATH"
            },
            {
              "description": "Maximum number of concurrent read connections in the pool",
              "format": "number",
              "name": "POOL_MAX_READERS"
            },
            {
              "description": "Maximum number of concurrent write connections in the pool",
              "format": "number",
              "name": "POOL_MAX_WRITERS"
            },
            {
              "description": "Connection timeout in seconds",
              "format": "number",
              "name": "POOL_CONNECTION_TIMEOUT_S"
            },
            {
              "description": "Idle connection timeout in seconds",
              "format": "number",
              "name": "POOL_IDLE_TIMEOUT_S"
            },
            {
              "description": "Connection health check interval in seconds",
              "format": "number",
              "name": "POOL_HEALTH_CHECK_INTERVAL_S"
            },
            {
              "description": "Maximum number of retry attempts for failed operations",
              "format": "number",
              "name": "RETRY_MAX_RETRIES"
            },
            {
              "description": "Base delay in seconds between retry attempts",
              "format": "number",
              "name": "RETRY_BASE_DELAY_S"
            },
            {
              "description": "Maximum delay in seconds between retry attempts",
              "format": "number",
              "name": "RETRY_MAX_DELAY_S"
            },
            {
              "description": "Enable random jitter in retry delays",
              "format": "boolean",
              "name": "RETRY_JITTER"
            },
            {
              "description": "Exponential backoff multiplication factor for retries",
              "format": "number",
              "name": "RETRY_BACKOFF_FACTOR"
            },
            {
              "description": "Enable SQLite foreign key constraints",
              "format": "boolean",
              "name": "SQLITE_FOREIGN_KEYS"
            },
            {
              "description": "SQLite journal mode (e.g., WAL, DELETE)",
              "format": "string",
              "name": "SQLITE_JOURNAL_MODE"
            },
            {
              "description": "SQLite synchronous mode (e.g., NORMAL, FULL, OFF)",
              "format": "string",
              "name": "SQLITE_SYNCHRONOUS"
            },
            {
              "description": "SQLite temporary storage location (e.g., MEMORY, FILE)",
              "format": "string",
              "name": "SQLITE_TEMP_STORE"
            },
            {
              "description": "SQLite memory-mapped I/O size in bytes",
              "format": "number",
              "name": "SQLITE_MMAP_SIZE"
            },
            {
              "description": "SQLite cache size (negative value for KB, positive for pages)",
              "format": "number",
              "name": "SQLITE_CACHE_SIZE"
            },
            {
              "description": "SQLite page size in bytes",
              "format": "number",
              "name": "SQLITE_PAGE_SIZE"
            },
            {
              "description": "SQLite WAL autocheckpoint threshold in pages",
              "format": "number",
              "name": "SQLITE_WAL_AUTOCHECKPOINT"
            },
            {
              "description": "SQLite busy timeout in milliseconds",
              "format": "number",
              "name": "SQLITE_BUSY_TIMEOUT_MS"
            },
            {
              "description": "SQLite WAL checkpoint mode (e.g., PASSIVE, FULL, RESTART)",
              "format": "string",
              "name": "SQLITE_WAL_CHECKPOINT"
            },
            {
              "description": "Server shutdown timeout in seconds",
              "format": "number",
              "name": "SHUTDOWN_TIMEOUT_S"
            },
            {
              "description": "Test mode shutdown timeout in seconds",
              "format": "number",
              "name": "SHUTDOWN_TIMEOUT_TEST_S"
            },
            {
              "description": "Queue operation timeout in seconds",
              "format": "number",
              "name": "QUEUE_TIMEOUT_S"
            },
            {
              "description": "Test mode queue timeout in seconds",
              "format": "number",
              "name": "QUEUE_TIMEOUT_TEST_S"
            },
            {
              "description": "Circuit breaker failure threshold before opening",
              "format": "number",
              "name": "CIRCUIT_BREAKER_FAILURE_THRESHOLD"
            },
            {
              "description": "Circuit breaker recovery timeout in seconds",
              "format": "number",
              "name": "CIRCUIT_BREAKER_RECOVERY_TIMEOUT_S"
            },
            {
              "description": "Maximum calls allowed in circuit breaker half-open state",
              "format": "number",
              "name": "CIRCUIT_BREAKER_HALF_OPEN_MAX_CALLS"
            },
            {
              "description": "Enable semantic search functionality",
              "format": "boolean",
              "name": "ENABLE_SEMANTIC_SEARCH"
            },
            {
              "description": "Ollama API host URL for embedding generation",
              "format": "string",
              "name": "OLLAMA_HOST"
            },
            {
              "description": "Embedding model name for semantic search",
              "format": "string",
              "name": "EMBEDDING_MODEL"
            },
            {
              "description": "Embedding vector dimensions",
              "format": "number",
              "name": "EMBEDDING_DIM"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-10T13:17:29.64251Z",
        "updatedAt": "2025-10-10T13:17:29.64251Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ChromeDevTools/chrome-devtools-mcp",
      "description": "MCP server for Chrome DevTools",
      "repository": {
        "url": "https://github.com/ChromeDevTools/chrome-devtools-mcp",
        "source": "github"
      },
      "version": "0.7.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "chrome-devtools-mcp",
          "version": "0.7.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-10T13:24:44.555677Z",
        "updatedAt": "2025-10-10T13:24:44.555677Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.khaoss85/orchestro",
      "description": "Your AI Development Conductor - 60 MCP tools for intelligent task orchestration",
      "repository": {},
      "version": "2.1.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@khaoss85/orchestro",
          "version": "2.1.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-10T13:39:31.339806Z",
        "updatedAt": "2025-10-10T13:39:31.339806Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ChromeDevTools/chrome-devtools-mcp",
      "description": "MCP server for Chrome DevTools",
      "repository": {
        "url": "https://github.com/ChromeDevTools/chrome-devtools-mcp",
        "source": "github"
      },
      "version": "0.7.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "chrome-devtools-mcp",
          "version": "0.7.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-10T14:57:37.523563Z",
        "updatedAt": "2025-10-10T14:57:37.523563Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ChromeDevTools/chrome-devtools-mcp",
      "description": "MCP server for Chrome DevTools",
      "repository": {
        "url": "https://github.com/ChromeDevTools/chrome-devtools-mcp",
        "source": "github"
      },
      "version": "0.8.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "chrome-devtools-mcp",
          "version": "0.8.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-10T15:15:51.028831Z",
        "updatedAt": "2025-10-10T15:15:51.028831Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.xorrkaz/cml-mcp",
      "description": "An MCP server that provides access to common Cisco Modeling Labs (CML) operations.",
      "repository": {
        "url": "https://github.com/xorrkaz/cml-mcp",
        "source": "github"
      },
      "version": "0.11.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "cml-mcp",
          "version": "0.11.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "URL for the CML Server",
              "isRequired": true,
              "format": "string",
              "name": "CML_URL"
            },
            {
              "description": "Username for CML authentication",
              "isRequired": true,
              "format": "string",
              "name": "CML_USERNAME"
            },
            {
              "description": "Password for CML authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CML_PASSWORD"
            },
            {
              "description": "Username for authentication to devices running in CML",
              "format": "string",
              "name": "PYATS_USERNAME"
            },
            {
              "description": "Password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_PASSWORD"
            },
            {
              "description": "Enable password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_AUTH_PASS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-10T17:18:00.281076Z",
        "updatedAt": "2025-10-10T17:18:00.281076Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.opsera/opsera",
      "description": "Opsera AI Agent MCP server providing authenticated DevOps automation over SSE",
      "repository": {
        "url": "https://github.com/OpseraEngineering/opsera-ai",
        "source": "github",
        "subfolder": "agent-authentication-gateway"
      },
      "version": "0.5.0",
      "websiteUrl": "https://docs.opsera.io",
      "remotes": [
        {
          "type": "sse",
          "url": "https://agent.opsera.io/mcp",
          "headers": [
            {
              "description": "Bearer token for authenticated access",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/publisher-provided": {
          "categories": [
            "devops",
            "automation"
          ],
          "keywords": [
            "opsera",
            "pipelines",
            "analytics",
            "ai"
          ],
          "maintainers": [
            {
              "name": "OpseraEngineering",
              "url": "https://www.opsera.io"
            }
          ]
        }
      }
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-10T18:33:51.096423Z",
        "updatedAt": "2025-10-10T18:33:51.096423Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.kesslerio/attio-mcp-server",
      "description": "AI-powered Attio CRM access. Manage contacts, companies, deals, tasks, notes and workflows.",
      "repository": {
        "url": "https://github.com/kesslerio/attio-mcp-server",
        "source": "github"
      },
      "version": "1.1.8",
      "websiteUrl": "https://kesslerio.github.io/attio-mcp-server",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "attio-mcp",
          "version": "1.1.8",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your Attio API key (required for all tools except health-check)",
              "isRequired": true,
              "isSecret": true,
              "name": "ATTIO_API_KEY"
            },
            {
              "description": "Optional Attio workspace ID for workspace-specific operations",
              "name": "ATTIO_WORKSPACE_ID"
            },
            {
              "description": "Tool mode: 'full' (all tools) or 'search' (search tools only). Default: 'full'",
              "name": "ATTIO_MCP_TOOL_MODE"
            },
            {
              "description": "Logging level: 'DEBUG', 'INFO', 'WARN', 'ERROR'. Default: 'INFO'",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/publisher-provided": {
          "build_info": {
            "timestamp": "2025-10-10T18:30:00Z"
          },
          "tool": "github-actions",
          "version": "1.0.0"
        }
      }
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-10T20:26:22.164986Z",
        "updatedAt": "2025-10-10T20:26:22.164986Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.vishalsachdev/canvas-mcp",
      "description": "Canvas LMS integration for students and educators with FERPA-compliant analytics and workflows",
      "repository": {
        "url": "https://github.com/vishalsachdev/canvas-mcp",
        "source": "github",
        "id": "940427833"
      },
      "version": "1.0.2",
      "websiteUrl": "https://vishalsachdev.github.io/canvas-mcp",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "canvas-mcp",
          "version": "1.0.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-10T20:55:21.388929Z",
        "updatedAt": "2025-10-10T20:55:21.388929Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.svnscha/mcp-windbg",
      "description": "A Model Context Protocol server for Windows crash dump analysis using WinDBG/CDB",
      "repository": {
        "url": "https://github.com/svnscha/mcp-windbg",
        "source": "github"
      },
      "version": "0.2.3",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-windbg",
          "version": "0.2.3",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Custom path to cdb.exe (optional)",
              "format": "string",
              "name": "CDB_PATH"
            },
            {
              "description": "Symbol path for Windows debugging (optional, defaults to Microsoft symbol server)",
              "format": "string",
              "name": "_NT_SYMBOL_PATH"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-10T21:26:27.596915Z",
        "updatedAt": "2025-10-10T21:26:27.596915Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Inflectra/mcp-server-spira",
      "description": "A Model Context Protocol (MCP) server enabling AI assistants to interact with Spira by Inflectra.",
      "repository": {
        "url": "https://github.com/Inflectra/mcp-server-spira",
        "source": "github"
      },
      "version": "1.1.1",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-server-spira",
          "version": "1.1.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "The base URL for your instance of Spira (typically https://mycompany.spiraservice.net or https://demo-xx.spiraservice.net/mycompany)",
              "isRequired": true,
              "format": "string",
              "name": "INFLECTRA_SPIRA_BASE_URL"
            },
            {
              "description": "The login name you use to access Spira",
              "isRequired": true,
              "format": "string",
              "name": "INFLECTRA_SPIRA_USERNAME"
            },
            {
              "description": "The API Key (RSS Token) you use to access the Spira REST API",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "INFLECTRA_SPIRA_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-10T21:51:36.90412Z",
        "updatedAt": "2025-10-10T21:51:36.90412Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.iunera/druid-mcp-server",
      "description": "AI-powered MCP server for Apache Druid cluster management and analytic",
      "repository": {
        "url": "https://github.com/iunera/druid-mcp-server",
        "source": "github"
      },
      "version": "1.5.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/iunera/druid-mcp-server:1.5.0",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Druid router URL for connecting to the Druid cluster",
              "format": "string",
              "name": "DRUID_ROUTER_URL"
            },
            {
              "description": "Druid coordinator URL for querying metadata endpoints (optional)",
              "format": "string",
              "name": "DRUID_COORDINATOR_URL"
            },
            {
              "description": "Username for Druid authentication (optional)",
              "format": "string",
              "name": "DRUID_AUTH_USERNAME"
            },
            {
              "description": "Password for Druid authentication (optional)",
              "format": "string",
              "name": "DRUID_AUTH_PASSWORD"
            },
            {
              "description": "Enable SSL/TLS support for Druid connections",
              "format": "boolean",
              "name": "DRUID_SSL_ENABLED"
            },
            {
              "description": "Skip SSL certificate verification (for development/testing only)",
              "format": "boolean",
              "name": "DRUID_SSL_SKIP_VERIFICATION"
            },
            {
              "description": "Enable read-only mode (only GET requests and SQL queries allowed)",
              "format": "boolean",
              "name": "DRUID_MCP_READONLY_ENABLED"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-10T22:04:11.143667Z",
        "updatedAt": "2025-10-10T22:04:11.143667Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "dev.svelte/mcp",
      "description": "The official Svelte MCP server providing docs and autofixing tools for Svelte development",
      "repository": {
        "url": "https://github.com/sveltejs/mcp",
        "source": "github",
        "id": "1054419133",
        "subfolder": "packages/mcp-stdio"
      },
      "version": "0.1.5",
      "websiteUrl": "https://svelte.dev/docs/mcp/overview",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@sveltejs/mcp",
          "version": "0.1.5",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.svelte.dev/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-10T22:24:27.359558Z",
        "updatedAt": "2025-10-10T22:24:27.359558Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.zzstoatzz/tangled-mcp",
      "description": "MCP server for Tangled git platform. Manage repositories, branches, and issues on tangled.org.",
      "repository": {},
      "version": "0.0.5",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "tangled-mcp",
          "version": "0.0.5",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-11T04:01:57.682028Z",
        "updatedAt": "2025-10-11T04:01:57.682028Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.zzstoatzz/tangled-mcp",
      "description": "MCP server for Tangled git platform. Manage repositories, branches, and issues on tangled.org.",
      "repository": {},
      "version": "0.0.6",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "tangled-mcp",
          "version": "0.0.6",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-11T04:04:42.173472Z",
        "updatedAt": "2025-10-11T04:04:42.173472Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.zzstoatzz/tangled-mcp",
      "description": "MCP server for Tangled git platform. Manage repositories, branches, and issues on tangled.org.",
      "repository": {},
      "version": "0.0.8",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "tangled-mcp",
          "version": "0.0.8",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-11T04:56:25.688997Z",
        "updatedAt": "2025-10-11T04:56:25.688997Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.zzstoatzz/tangled-mcp",
      "description": "MCP server for Tangled git platform. Manage repositories, branches, and issues on tangled.org.",
      "repository": {},
      "version": "0.0.9",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "tangled-mcp",
          "version": "0.0.9",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-11T06:21:56.321596Z",
        "updatedAt": "2025-10-11T06:21:56.321596Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.zzstoatzz/tangled-mcp",
      "description": "MCP server for Tangled git platform. Manage repositories, branches, and issues on tangled.org.",
      "repository": {},
      "version": "0.0.10",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "tangled-mcp",
          "version": "0.0.10",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-11T07:37:15.519172Z",
        "updatedAt": "2025-10-11T07:37:15.519172Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/git-mcp-server",
      "description": "Comprehensive Git MCP server enabling native git tools including clone, commit, worktree, & more.",
      "repository": {
        "url": "https://github.com/cyanheads/git-mcp-server",
        "source": "github"
      },
      "version": "2.4.5",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.4.5",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Optional absolute path to restrict all git operations to a specific directory tree. Provides security sandboxing for multi-tenant or shared environments.",
              "format": "string",
              "name": "GIT_BASE_DIR"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.4.5",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3015/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3015",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Optional absolute path to restrict all git operations to a specific directory tree. Provides security sandboxing for multi-tenant or shared environments.",
              "format": "string",
              "name": "GIT_BASE_DIR"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-11T09:21:52.504842Z",
        "updatedAt": "2025-10-11T09:21:52.504842Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.appwrite/mcp-for-api",
      "description": "MCP (Model Context Protocol) server for Appwrite",
      "repository": {
        "url": "https://github.com/appwrite/mcp-for-api",
        "source": "github"
      },
      "version": "0.2.8",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "mcp-server-appwrite",
          "version": "0.2.8",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-11T10:00:39.909371Z",
        "updatedAt": "2025-10-11T10:00:39.909371Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.svnscha/mcp-windbg",
      "description": "A Model Context Protocol server for Windows crash dump analysis using WinDBG/CDB",
      "repository": {
        "url": "https://github.com/svnscha/mcp-windbg",
        "source": "github"
      },
      "version": "0.2.5",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-windbg",
          "version": "0.2.5",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Custom path to cdb.exe (optional)",
              "format": "string",
              "name": "CDB_PATH"
            },
            {
              "description": "Symbol path for Windows debugging (optional, defaults to Microsoft symbol server)",
              "format": "string",
              "name": "_NT_SYMBOL_PATH"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-11T10:52:33.714231Z",
        "updatedAt": "2025-10-11T10:52:33.714231Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.vfarcic/dot-ai",
      "description": "AI-powered development platform for Kubernetes deployments and intelligent automation",
      "repository": {
        "url": "https://github.com/vfarcic/dot-ai",
        "source": "github"
      },
      "version": "0.111.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@vfarcic/dot-ai",
          "version": "0.111.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-11T13:32:05.107813Z",
        "updatedAt": "2025-10-11T13:32:05.107813Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.xorrkaz/cml-mcp",
      "description": "An MCP server that provides access to common Cisco Modeling Labs (CML) operations.",
      "repository": {
        "url": "https://github.com/xorrkaz/cml-mcp",
        "source": "github"
      },
      "version": "0.11.1",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "cml-mcp",
          "version": "0.11.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "URL for the CML Server",
              "isRequired": true,
              "format": "string",
              "name": "CML_URL"
            },
            {
              "description": "Username for CML authentication",
              "isRequired": true,
              "format": "string",
              "name": "CML_USERNAME"
            },
            {
              "description": "Password for CML authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CML_PASSWORD"
            },
            {
              "description": "Username for authentication to devices running in CML",
              "format": "string",
              "name": "PYATS_USERNAME"
            },
            {
              "description": "Password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_PASSWORD"
            },
            {
              "description": "Enable password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_AUTH_PASS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-11T15:52:44.821216Z",
        "updatedAt": "2025-10-11T15:52:44.821216Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.portel-dev/ncp",
      "description": "N-to-1 MCP Orchestration. Unified gateway for multiple MCP servers with intelligent tool discovery.",
      "repository": {
        "url": "https://github.com/portel-dev/ncp",
        "source": "github"
      },
      "version": "1.5.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@portel/ncp",
          "version": "1.5.0",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Enable debug logging for troubleshooting",
              "default": "false",
              "name": "NCP_DEBUG"
            },
            {
              "description": "Operating mode: 'mcp' for AI assistant integration or 'cli' for command-line",
              "default": "mcp",
              "name": "NCP_MODE"
            },
            {
              "description": "Disable colored output in logs and CLI",
              "default": "false",
              "name": "NO_COLOR"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-11T18:32:37.021359Z",
        "updatedAt": "2025-10-11T18:32:37.021359Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.svnscha/mcp-windbg",
      "description": "A Model Context Protocol server for Windows crash dump analysis using WinDbg/CDB",
      "repository": {
        "url": "https://github.com/svnscha/mcp-windbg",
        "source": "github"
      },
      "version": "0.10.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-windbg",
          "version": "0.10.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Custom path to cdb.exe (optional)",
              "format": "string",
              "name": "CDB_PATH"
            },
            {
              "description": "Symbol path for Windows debugging (optional, defaults to Microsoft symbol server)",
              "format": "string",
              "name": "_NT_SYMBOL_PATH"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-11T19:30:39.16081Z",
        "updatedAt": "2025-10-11T19:30:39.16081Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.oguzc/playwright-wizard-mcp",
      "description": "MCP server providing Playwright test generation wizard with intelligent prompts and best practices",
      "repository": {},
      "version": "0.1.6",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "playwright-wizard-mcp",
          "version": "0.1.6",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-11T21:16:42.967078Z",
        "updatedAt": "2025-10-11T21:16:42.967078Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.zwldarren/akshare-one-mcp",
      "description": "MCP server that provides access to Chinese stock market data using akshare-one",
      "repository": {},
      "version": "0.3.6",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "akshare-one-mcp",
          "version": "0.3.6",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-11T23:19:09.623208Z",
        "updatedAt": "2025-10-11T23:19:09.623208Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/git-mcp-server",
      "description": "Comprehensive Git MCP server enabling native git tools including clone, commit, worktree, & more.",
      "repository": {
        "url": "https://github.com/cyanheads/git-mcp-server",
        "source": "github"
      },
      "version": "2.4.6",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.4.6",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Optional absolute path to restrict all git operations to a specific directory tree. Provides security sandboxing for multi-tenant or shared environments.",
              "format": "string",
              "name": "GIT_BASE_DIR"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.4.6",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3015/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3015",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Optional absolute path to restrict all git operations to a specific directory tree. Provides security sandboxing for multi-tenant or shared environments.",
              "format": "string",
              "name": "GIT_BASE_DIR"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-12T05:29:00.853312Z",
        "updatedAt": "2025-10-12T05:29:00.853312Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.copyleftdev/fabric-atelier",
      "description": "AI-powered content processing with 226 Fabric patterns for writing, analysis, and code generation.",
      "repository": {
        "url": "https://github.com/copyleftdev/fabric-atelier.git",
        "source": "github"
      },
      "version": "0.1.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/copyleftdev/fabric-atelier:0.1.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-12T05:37:10.361226Z",
        "updatedAt": "2025-10-12T05:37:10.361226Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.copyleftdev/fabric-atelier",
      "description": "AI-powered content processing with 226 Fabric patterns for writing, analysis, and code generation.",
      "repository": {
        "url": "https://github.com/copyleftdev/fabric-atelier.git",
        "source": "github"
      },
      "version": "0.1.1",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/copyleftdev/fabric-atelier:0.1.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-12T05:46:24.703709Z",
        "updatedAt": "2025-10-12T05:46:24.703709Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.copyleftdev/fabric-atelier",
      "description": "AI-powered content processing with 226 Fabric patterns for writing, analysis, and code generation.",
      "repository": {
        "url": "https://github.com/copyleftdev/fabric-atelier.git",
        "source": "github"
      },
      "version": "0.1.2",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/copyleftdev/fabric-atelier:0.1.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-12T05:55:44.267818Z",
        "updatedAt": "2025-10-12T05:55:44.267818Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.3.6",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.3.6",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.3.6",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-12T06:29:27.45359Z",
        "updatedAt": "2025-10-12T06:29:27.45359Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.yokingma/time-mcp",
      "description": "Time MCP Server, giving LLMs time awareness capabilities.",
      "repository": {
        "url": "https://github.com/yokingma/time-mcp",
        "source": "github"
      },
      "version": "1.0.5",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "time-mcp",
          "version": "1.0.5",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-12T08:47:25.767731Z",
        "updatedAt": "2025-10-12T08:47:25.767731Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.esrisaudiarabia/arcgis-mcp-server",
      "description": "Intelligent ArcGIS content search. Works with Online/Enterprise. Requires user credentials.",
      "repository": {
        "url": "https://github.com/esrisaudiarabia/esrisaudiarabia-mcp",
        "source": "github"
      },
      "version": "1.0.4",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "arcgis-mcp-server",
          "version": "1.0.4",
          "runtimeHint": "python",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your ArcGIS Portal URL (e.g., https://portal.company.com/portal)",
              "isRequired": true,
              "format": "string",
              "name": "ARCGIS_URL"
            },
            {
              "description": "Your ArcGIS Portal Username",
              "isRequired": true,
              "format": "string",
              "name": "ARCGIS_USERNAME"
            },
            {
              "description": "Your ArcGIS Portal Password",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "ARCGIS_PASSWORD"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-12T11:31:58.218686Z",
        "updatedAt": "2025-10-12T11:31:58.218686Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.pshivapr/selenium-mcp",
      "description": "Selenium Tools for MCP",
      "repository": {
        "url": "https://github.com/pshivapr/selenium-mcp",
        "source": "github"
      },
      "version": "0.4.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "selenium-webdriver-mcp",
          "version": "0.4.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "format": "string",
              "isSecret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-12T11:40:29.372594Z",
        "updatedAt": "2025-10-12T11:40:29.372594Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.pshivapr/selenium-mcp",
      "description": "Selenium Tools for MCP",
      "repository": {
        "url": "https://github.com/pshivapr/selenium-mcp",
        "source": "github"
      },
      "version": "0.4.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "selenium-webdriver-mcp",
          "version": "0.4.3",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "format": "string",
              "isSecret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-12T12:13:55.07404Z",
        "updatedAt": "2025-10-12T12:13:55.07404Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.portel-dev/ncp",
      "description": "N-to-1 MCP Orchestration. Unified gateway for multiple MCP servers with intelligent tool discovery.",
      "repository": {
        "url": "https://github.com/portel-dev/ncp",
        "source": "github"
      },
      "version": "1.5.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@portel/ncp",
          "version": "1.5.1",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Enable debug logging for troubleshooting",
              "default": "false",
              "name": "NCP_DEBUG"
            },
            {
              "description": "Operating mode: 'mcp' for AI assistant integration or 'cli' for command-line",
              "default": "mcp",
              "name": "NCP_MODE"
            },
            {
              "description": "Disable colored output in logs and CLI",
              "default": "false",
              "name": "NO_COLOR"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-12T12:49:37.039884Z",
        "updatedAt": "2025-10-12T12:49:37.039884Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.pshivapr/selenium-mcp",
      "description": "Selenium Tools for MCP",
      "repository": {
        "url": "https://github.com/pshivapr/selenium-mcp",
        "source": "github"
      },
      "version": "0.4.6",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "selenium-webdriver-mcp",
          "version": "0.4.6",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "format": "string",
              "isSecret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-12T13:46:03.582393Z",
        "updatedAt": "2025-10-12T13:46:03.582393Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.easytocloud/mac-letterhead",
      "description": "Professional letterhead PDF generator for macOS with Markdown support and smart margin detection",
      "repository": {
        "url": "https://github.com/easytocloud/Mac-letterhead",
        "source": "github"
      },
      "version": "0.13.9",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "Mac-letterhead",
          "version": "0.13.9",
          "runtimeHint": "python3",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "mcp",
              "type": ""
            }
          ]
        }
      ],
      "_meta": {}
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-12T14:47:17.714734Z",
        "updatedAt": "2025-10-12T14:47:17.714734Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.motherduckdb/mcp-server-motherduck",
      "description": "Fast analytics and data processing with DuckDB and MotherDuck",
      "repository": {
        "url": "https://github.com/motherduckdb/mcp-server-motherduck",
        "source": "github"
      },
      "version": "0.7.1",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-server-motherduck",
          "version": "0.7.1",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "description": "Transport type for MCP server",
              "default": "stdio",
              "choices": [
                "stdio",
                "sse",
                "stream"
              ],
              "type": "named",
              "name": "--transport"
            },
            {
              "description": "Port to listen on for sse and stream transport mode",
              "format": "number",
              "default": "8000",
              "type": "named",
              "name": "--port"
            },
            {
              "description": "Path to local DuckDB database file or MotherDuck database",
              "default": "md:",
              "type": "named",
              "name": "--db-path"
            },
            {
              "description": "Access token to use for MotherDuck database connections",
              "isSecret": true,
              "type": "named",
              "name": "--motherduck-token"
            },
            {
              "description": "Flag for connecting to DuckDB or MotherDuck in read-only mode",
              "type": "named",
              "name": "--read-only"
            },
            {
              "description": "Home directory for DuckDB",
              "type": "named",
              "name": "--home-dir"
            },
            {
              "description": "Flag for connecting to MotherDuck in SaaS mode (disables filesystem and write permissions for local DuckDB)",
              "type": "named",
              "name": "--saas-mode"
            },
            {
              "description": "Enable JSON responses for HTTP stream (only supported for stream transport)",
              "type": "named",
              "name": "--json-response"
            }
          ],
          "environmentVariables": [
            {
              "description": "Access token to use for MotherDuck database connections",
              "isSecret": true,
              "name": "motherduck_token"
            },
            {
              "description": "Home directory for DuckDB (used as default if --home-dir not specified)",
              "name": "HOME"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-12T15:30:59.715076Z",
        "updatedAt": "2025-10-12T15:30:59.715076Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.portel-dev/ncp",
      "description": "N-to-1 MCP Orchestration. Unified gateway for multiple MCP servers with intelligent tool discovery.",
      "repository": {
        "url": "https://github.com/portel-dev/ncp",
        "source": "github"
      },
      "version": "1.5.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@portel/ncp",
          "version": "1.5.2",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Enable debug logging for troubleshooting",
              "default": "false",
              "name": "NCP_DEBUG"
            },
            {
              "description": "Operating mode: 'mcp' for AI assistant integration or 'cli' for command-line",
              "default": "mcp",
              "name": "NCP_MODE"
            },
            {
              "description": "Disable colored output in logs and CLI",
              "default": "false",
              "name": "NO_COLOR"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-12T16:05:42.526042Z",
        "updatedAt": "2025-10-12T16:05:42.526042Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.xorrkaz/cml-mcp",
      "description": "An MCP server that provides access to common Cisco Modeling Labs (CML) operations.",
      "repository": {
        "url": "https://github.com/xorrkaz/cml-mcp",
        "source": "github"
      },
      "version": "0.11.2",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "cml-mcp",
          "version": "0.11.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "URL for the CML Server",
              "isRequired": true,
              "format": "string",
              "name": "CML_URL"
            },
            {
              "description": "Username for CML authentication",
              "isRequired": true,
              "format": "string",
              "name": "CML_USERNAME"
            },
            {
              "description": "Password for CML authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CML_PASSWORD"
            },
            {
              "description": "Username for authentication to devices running in CML",
              "format": "string",
              "name": "PYATS_USERNAME"
            },
            {
              "description": "Password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_PASSWORD"
            },
            {
              "description": "Enable password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_AUTH_PASS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-12T17:17:57.07011Z",
        "updatedAt": "2025-10-12T17:17:57.07011Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.bullpenstrategygroup.rotunda/mcp",
      "description": "An MCP server that provides congressional transcripts",
      "repository": {
        "url": "https://github.com/CorporateEntity101/rotunda",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://rotunda.bullpenstrategygroup.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-12T17:18:07.009904Z",
        "updatedAt": "2025-10-12T17:18:07.009904Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.mazemax/mindvalley-products-mcp",
      "description": "AI assistant access to Mindvalley products, masterclasses, programs, and certifications.",
      "repository": {
        "url": "https://github.com/mazemax/mindvalley-products-mcp",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mindvalley-products-mcp",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-12T20:09:53.501562Z",
        "updatedAt": "2025-10-12T20:09:53.501562Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.HzaCode/onecite",
      "description": "Generate academic citations from DOI, arXiv, titles, or URLs in BibTeX, APA, MLA formats.",
      "repository": {
        "url": "https://github.com/HzaCode/OneCite",
        "source": "github"
      },
      "version": "0.0.11",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "onecite",
          "version": "0.0.11",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-12T21:44:12.300272Z",
        "updatedAt": "2025-10-12T21:44:12.300272Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.VictoriaMetrics-Community/mcp-victoriatraces",
      "description": "MCP Server for VictoriaTraces. Provides integration with VictoriaTraces API and documentation",
      "repository": {
        "url": "https://github.com/VictoriaMetrics-Community/mcp-victoriatraces",
        "source": "github"
      },
      "version": "1.1.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/victoriametrics-community/mcp-victoriatraces:v1.1.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "URL to VictoriaTraces instance (it should be root URL of vtlingle or vtselect), for example http://localhost:10428",
              "isRequired": true,
              "format": "string",
              "name": "VT_INSTANCE_ENTRYPOINT"
            },
            {
              "description": "Authentication token for VictoriaMetrics API",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "VT_INSTANCE_BEARER_TOKEN"
            },
            {
              "description": "Comma-separated list of tools to disable",
              "format": "string",
              "name": "MCP_DISABLED_TOOLS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-12T22:50:29.668876Z",
        "updatedAt": "2025-10-12T22:50:29.668876Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.meminal/meminal",
      "description": "Memory for deep conversational context across any platform",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://meminal.ai/mcp",
          "headers": [
            {
              "description": "Bearer token for authentication (OAuth or Personal Access Token)",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-12T23:40:10.473855Z",
        "updatedAt": "2025-10-12T23:40:10.473855Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ShingWong/node-server-orchestrator",
      "description": "MCP server for orchestrating Node.js development servers (backend, frontend, databases, etc.)",
      "repository": {},
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "node-server-orchestrator",
          "version": "1.0.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-13T00:22:52.73379Z",
        "updatedAt": "2025-10-13T00:22:52.73379Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.olostep/olostep-mcp-server",
      "description": "Olostep MCP server for web scraping, google search and website urls search.",
      "repository": {},
      "version": "1.0.7",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "olostep-mcp",
          "version": "1.0.7",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-13T01:59:10.580648Z",
        "updatedAt": "2025-10-13T01:59:10.580648Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.vfarcic/dot-ai",
      "description": "AI-powered development platform for Kubernetes deployments and intelligent automation",
      "repository": {
        "url": "https://github.com/vfarcic/dot-ai",
        "source": "github"
      },
      "version": "0.112.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@vfarcic/dot-ai",
          "version": "0.112.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-13T04:46:10.578207Z",
        "updatedAt": "2025-10-13T04:46:10.578207Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.neverinfamous/postgres-mcp-server",
      "description": "Enterprise PostgreSQL MCP server with 63 tools, 10 resources, 10 prompts for AI-native operations",
      "repository": {
        "url": "https://github.com/neverinfamous/postgres-mcp.git",
        "source": "github"
      },
      "version": "1.1.1",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/writenotenow/postgres-mcp-enhanced:v1.1.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-13T05:12:37.461499Z",
        "updatedAt": "2025-10-13T05:12:37.461499Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.neverinfamous/memory-journal-mcp",
      "description": "Developer journal with knowledge graphs, relationships, Git context, and semantic search",
      "repository": {
        "url": "https://github.com/neverinfamous/memory-journal-mcp.git",
        "source": "github"
      },
      "version": "1.1.3",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/writenotenow/memory-journal-mcp:v1.1.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-13T06:21:43.981017Z",
        "updatedAt": "2025-10-13T06:21:43.981017Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.esrisaudiarabia/arcgis-mcp-server",
      "description": "Intelligent ArcGIS content search. Works with Online/Enterprise. Requires user credentials.",
      "repository": {
        "url": "https://github.com/esrisaudiarabia/esrisaudiarabia-mcp",
        "source": "github"
      },
      "version": "1.0.5",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "arcgis-mcp-server",
          "version": "1.0.5",
          "runtimeHint": "python",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your ArcGIS Portal URL (e.g., https://portal.company.com/portal)",
              "isRequired": true,
              "format": "string",
              "name": "ARCGIS_URL"
            },
            {
              "description": "Your ArcGIS Portal Username",
              "isRequired": true,
              "format": "string",
              "name": "ARCGIS_USERNAME"
            },
            {
              "description": "Your ArcGIS Portal Password",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "ARCGIS_PASSWORD"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-13T06:47:46.293743Z",
        "updatedAt": "2025-10-13T06:47:46.293743Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.neverinfamous/sqlite-mcp-server",
      "description": "SQLite MCP server with 73 tools for JSONB, full-text search, geospatial, and analytics.",
      "repository": {
        "url": "https://github.com/neverinfamous/sqlite-mcp-server.git",
        "source": "github"
      },
      "version": "2.6.3",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "sqlite-mcp-server-enhanced",
          "version": "2.6.3",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "oci",
          "identifier": "docker.io/writenotenow/sqlite-mcp-server:v2.6.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-13T08:08:01.494568Z",
        "updatedAt": "2025-10-13T08:08:01.494568Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.esrisaudiarabia/arcgis-mcp-server",
      "description": "Intelligent ArcGIS content search. Works with Online/Enterprise. Requires user credentials.",
      "repository": {
        "url": "https://github.com/esrisaudiarabia/esrisaudiarabia-mcp",
        "source": "github"
      },
      "version": "1.0.6",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "arcgis-mcp-server",
          "version": "1.0.6",
          "runtimeHint": "python",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your ArcGIS Portal URL (e.g., https://portal.company.com/portal)",
              "isRequired": true,
              "format": "string",
              "name": "ARCGIS_URL"
            },
            {
              "description": "Your ArcGIS Portal Username",
              "isRequired": true,
              "format": "string",
              "name": "ARCGIS_USERNAME"
            },
            {
              "description": "Your ArcGIS Portal Password",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "ARCGIS_PASSWORD"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-13T08:53:26.138062Z",
        "updatedAt": "2025-10-13T08:53:26.138062Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/git-mcp-server",
      "description": "Comprehensive Git MCP server enabling native git tools including clone, commit, worktree, & more.",
      "repository": {
        "url": "https://github.com/cyanheads/git-mcp-server",
        "source": "github"
      },
      "version": "2.4.7",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.4.7",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Optional absolute path to restrict all git operations to a specific directory tree. Provides security sandboxing for multi-tenant or shared environments.",
              "format": "string",
              "name": "GIT_BASE_DIR"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.4.7",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3015/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3015",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Optional absolute path to restrict all git operations to a specific directory tree. Provides security sandboxing for multi-tenant or shared environments.",
              "format": "string",
              "name": "GIT_BASE_DIR"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-13T09:18:01.808976Z",
        "updatedAt": "2025-10-13T09:18:01.808976Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/git-mcp-server",
      "description": "Comprehensive Git MCP server enabling native git tools including clone, commit, worktree, & more.",
      "repository": {
        "url": "https://github.com/cyanheads/git-mcp-server",
        "source": "github"
      },
      "version": "2.4.8",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.4.8",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Optional absolute path to restrict all git operations to a specific directory tree. Provides security sandboxing for multi-tenant or shared environments.",
              "format": "string",
              "name": "GIT_BASE_DIR"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.4.8",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3015/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3015",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Optional absolute path to restrict all git operations to a specific directory tree. Provides security sandboxing for multi-tenant or shared environments.",
              "format": "string",
              "name": "GIT_BASE_DIR"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-13T09:46:10.837203Z",
        "updatedAt": "2025-10-13T09:46:10.837203Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.esrisaudiarabia/arcgis-mcp-server",
      "description": "Intelligent ArcGIS content search. Works with Online/Enterprise. Requires user credentials.",
      "repository": {
        "url": "https://github.com/esrisaudiarabia/esrisaudiarabia-mcp",
        "source": "github"
      },
      "version": "1.0.7",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "arcgis-mcp-server",
          "version": "1.0.7",
          "runtimeHint": "python",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your ArcGIS Portal URL (e.g., https://portal.company.com/portal)",
              "isRequired": true,
              "format": "string",
              "name": "ARCGIS_URL"
            },
            {
              "description": "Your ArcGIS Portal Username",
              "isRequired": true,
              "format": "string",
              "name": "ARCGIS_USERNAME"
            },
            {
              "description": "Your ArcGIS Portal Password",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "ARCGIS_PASSWORD"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-13T09:55:12.798473Z",
        "updatedAt": "2025-10-13T09:55:12.798473Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.sachin-shetty/egnyte-ai-samples",
      "description": "Secure integration between AI tools and Egnyte content with search, analysis, and workflow tools.",
      "repository": {},
      "version": "1.0.2"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-13T10:16:46.546315Z",
        "updatedAt": "2025-10-13T10:16:46.546315Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/git-mcp-server",
      "description": "Comprehensive Git MCP server enabling native git tools including clone, commit, worktree, & more.",
      "repository": {
        "url": "https://github.com/cyanheads/git-mcp-server",
        "source": "github"
      },
      "version": "2.4.9",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.4.9",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Optional absolute path to restrict all git operations to a specific directory tree. Provides security sandboxing for multi-tenant or shared environments.",
              "format": "string",
              "name": "GIT_BASE_DIR"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.4.9",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3015/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3015",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Optional absolute path to restrict all git operations to a specific directory tree. Provides security sandboxing for multi-tenant or shared environments.",
              "format": "string",
              "name": "GIT_BASE_DIR"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-13T10:27:37.007298Z",
        "updatedAt": "2025-10-13T10:27:37.007298Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.esrisaudiarabia/arcgis-mcp-server",
      "description": "Intelligent ArcGIS content search. Works with Online/Enterprise. Requires user credentials.",
      "repository": {
        "url": "https://github.com/esrisaudiarabia/esrisaudiarabia-mcp",
        "source": "github"
      },
      "version": "1.0.9",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "arcgis-mcp-server",
          "version": "1.0.9",
          "runtimeHint": "python",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your ArcGIS Portal URL (e.g., https://portal.company.com/portal)",
              "isRequired": true,
              "format": "string",
              "name": "ARCGIS_URL"
            },
            {
              "description": "Your ArcGIS Portal Username",
              "isRequired": true,
              "format": "string",
              "name": "ARCGIS_USERNAME"
            },
            {
              "description": "Your ArcGIS Portal Password",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "ARCGIS_PASSWORD"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-13T10:31:28.222132Z",
        "updatedAt": "2025-10-13T10:31:28.222132Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ptyagiegnyte/egnyte-remote",
      "description": "Secure integration between AI tools and Egnyte content with search, analysis, and workflow tools.",
      "repository": {
        "url": "https://github.com/sachin-shetty/egnyte-ai-samples",
        "source": "github"
      },
      "version": "1.0.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://ptyagiegnyte.github.io/egnyte-remote/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-13T10:55:52.47622Z",
        "updatedAt": "2025-10-13T10:55:52.47622Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ChromeDevTools/chrome-devtools-mcp",
      "description": "MCP server for Chrome DevTools",
      "repository": {
        "url": "https://github.com/ChromeDevTools/chrome-devtools-mcp",
        "source": "github"
      },
      "version": "0.8.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "chrome-devtools-mcp",
          "version": "0.8.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-13T14:48:47.109315Z",
        "updatedAt": "2025-10-13T14:48:47.109315Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.wei/hn-mcp-server",
      "description": "Model Context Protocol server for HackerNews API access.",
      "repository": {},
      "version": "1.0.3",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "hn-mcp-server",
          "version": "1.0.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-13T19:30:39.113567Z",
        "updatedAt": "2025-10-13T19:30:39.113567Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.wei/hn-mcp-server",
      "description": "Model Context Protocol server for HackerNews API access.",
      "repository": {},
      "version": "1.1.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "hn-mcp-server",
          "version": "1.1.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-13T20:31:53.02091Z",
        "updatedAt": "2025-10-13T20:31:53.02091Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.wei/mcp-registry-mcp-server",
      "description": "MCP server for querying the official MCP registry.",
      "repository": {
        "url": "https://github.com/wei/mcp-registry-mcp-server",
        "source": "github",
        "id": "wei/mcp-registry-mcp-server"
      },
      "version": "1.1.1",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "mcp-registry-mcp-server",
          "version": "1.1.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-13T20:37:00.067295Z",
        "updatedAt": "2025-10-13T20:37:00.067295Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.jkawamoto/mcp-youtube-transcript",
      "description": "An MCP server retrieving transcripts of YouTube videos",
      "repository": {
        "url": "https://github.com/jkawamoto/mcp-youtube-transcript",
        "source": "github"
      },
      "version": "0.5.5",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/jkawamoto/mcp-youtube-transcript/releases/download/v0.5.5/mcp-youtube-transcript.mcpb",
          "fileSha256": "57f6c0aafdea34c9f08cd12d0211f8f8e4fa55d251fce9e41e53ee0a50528c8d",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-13T23:22:37.679968Z",
        "updatedAt": "2025-10-13T23:22:37.679968Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.motherduckdb/mcp-server-motherduck",
      "description": "Fast analytics and data processing with DuckDB and MotherDuck",
      "repository": {
        "url": "https://github.com/motherduckdb/mcp-server-motherduck",
        "source": "github"
      },
      "version": "0.7.2",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "mcp-server-motherduck",
          "version": "0.7.2",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "description": "Transport type for MCP server",
              "default": "stdio",
              "choices": [
                "stdio",
                "sse",
                "stream"
              ],
              "type": "named",
              "name": "--transport"
            },
            {
              "description": "Port to listen on for sse and stream transport mode",
              "format": "number",
              "default": "8000",
              "type": "named",
              "name": "--port"
            },
            {
              "description": "Path to local DuckDB database file or MotherDuck database",
              "default": "md:",
              "type": "named",
              "name": "--db-path"
            },
            {
              "description": "Access token to use for MotherDuck database connections",
              "isSecret": true,
              "type": "named",
              "name": "--motherduck-token"
            },
            {
              "description": "Flag for connecting to DuckDB or MotherDuck in read-only mode",
              "type": "named",
              "name": "--read-only"
            },
            {
              "description": "Home directory for DuckDB",
              "type": "named",
              "name": "--home-dir"
            },
            {
              "description": "Flag for connecting to MotherDuck in SaaS mode (disables filesystem and write permissions for local DuckDB)",
              "type": "named",
              "name": "--saas-mode"
            },
            {
              "description": "Enable JSON responses for HTTP stream (only supported for stream transport)",
              "type": "named",
              "name": "--json-response"
            }
          ],
          "environmentVariables": [
            {
              "description": "Access token to use for MotherDuck database connections",
              "isSecret": true,
              "name": "motherduck_token"
            },
            {
              "description": "Home directory for DuckDB (used as default if --home-dir not specified)",
              "name": "HOME"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-13T23:32:14.916459Z",
        "updatedAt": "2025-10-13T23:32:14.916459Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/smithery-ai-fetch",
      "description": "A simple tool that performs a fetch request to a webpage.",
      "repository": {
        "url": "https://github.com/smithery-ai/mcp-servers",
        "source": "github",
        "subfolder": "fetch"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@smithery-ai/fetch/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-14T03:19:26.387795Z",
        "updatedAt": "2025-10-14T03:19:26.387795Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.gomarble/mcp-api",
      "description": "GoMarble MCP API Server",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://apps.gomarble.ai/mcp-api/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-14T05:56:54.505554Z",
        "updatedAt": "2025-10-14T05:56:54.505554Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
      "name": "io.github.portel-dev/ncp",
      "description": "N-to-1 MCP Orchestration. Unified gateway for multiple MCP servers with intelligent tool discovery.",
      "repository": {
        "url": "https://github.com/portel-dev/ncp",
        "source": "github"
      },
      "version": "1.5.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@portel/ncp",
          "version": "1.5.3",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Enable debug logging for troubleshooting",
              "default": "false",
              "name": "NCP_DEBUG"
            },
            {
              "description": "Operating mode: 'mcp' for AI assistant integration or 'cli' for command-line",
              "default": "mcp",
              "name": "NCP_MODE"
            },
            {
              "description": "Disable colored output in logs and CLI",
              "default": "false",
              "name": "NO_COLOR"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-14T08:13:42.561411Z",
        "updatedAt": "2025-10-14T08:13:42.561411Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.VictoriaMetrics-Community/mcp-victoriametrics",
      "description": "MCP Server for VictoriaMetrics. Provides integration with VictoriaMetrics API and documentation",
      "repository": {
        "url": "https://github.com/VictoriaMetrics-Community/mcp-victoriametrics",
        "source": "github"
      },
      "version": "1.14.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/victoriametrics-community/mcp-victoriametrics:v1.14.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "URL to VictoriaMetrics instance (it should be root URL of vmsingle or vmselect), for example http://localhost:8428 or https://play.victoriametrics.com",
              "isRequired": true,
              "format": "string",
              "name": "VM_INSTANCE_ENTRYPOINT"
            },
            {
              "description": "Type of VictoriaMetrics instance (single / cluster)",
              "isRequired": true,
              "format": "string",
              "name": "VM_INSTANCE_TYPE"
            },
            {
              "description": "Authentication token for VictoriaMetrics API",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "VM_INSTANCE_BEARER_TOKEN"
            },
            {
              "description": "Optional: API key from VictoriaMetrics Cloud Console (if you have deployment in VictoriaMetrics Cloud)",
              "format": "string",
              "isSecret": true,
              "name": "VMC_API_KEY"
            },
            {
              "description": "Comma-separated list of tools to disable",
              "format": "string",
              "name": "MCP_DISABLED_TOOLS"
            },
            {
              "description": "Disable all resources (documentation tool will continue to work)",
              "format": "boolean",
              "name": "MCP_DISABLE_RESOURCES"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-14T08:50:11.270966Z",
        "updatedAt": "2025-10-14T08:50:11.270966Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.VectifyAI/pageindex-mcp",
      "description": "Reasoning-based RAG system for chatting with long PDFs. Supports local and online files.",
      "repository": {
        "url": "https://github.com/VectifyAI/pageindex-mcp",
        "source": "github"
      },
      "version": "1.6.2",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "pageindex-mcp",
          "version": "1.6.2",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/VectifyAI/pageindex-mcp/releases/download/v1.6.2/pageindex-mcp-1.6.2.mcpb",
          "fileSha256": "67138e48f8755be07fafb149cb438f1144619e90b232e5329208ec0c2fbf2d6f",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-14T09:01:46.734305Z",
        "updatedAt": "2025-10-14T09:01:46.734305Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.smartling/smartling-mcp-server",
      "description": "Smartling MCP Server",
      "repository": {
        "url": "https://github.com/Smartling/smartling-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.smartling.com/mcp",
          "headers": [
            {
              "description": "Smartling MCP Token for authentication",
              "isRequired": true,
              "isSecret": true,
              "name": "X-SL-Authentication"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-14T09:12:05.50323Z",
        "updatedAt": "2025-10-14T09:12:05.50323Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.smartbear/smartbear-mcp",
      "description": "MCP server for AI access to SmartBear tools, including BugSnag, Reflect, API Hub, PactFlow.",
      "repository": {
        "url": "https://github.com/SmartBear/smartbear-mcp",
        "source": "github"
      },
      "version": "0.8.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@smartbear/mcp",
          "version": "0.8.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "BugSnag auth token. Leave empty to disable BugSnag tools. Learn more: https://developer.smartbear.com/smartbear-mcp/docs/bugsnag-integration",
              "isSecret": true,
              "name": "BUGSNAG_AUTH_TOKEN"
            },
            {
              "description": "BugSnag project API key (optional; narrows interactions to a single project). Learn more: https://developer.smartbear.com/smartbear-mcp/docs/bugsnag-integration",
              "name": "BUGSNAG_PROJECT_API_KEY"
            },
            {
              "description": "Reflect API token. Leave empty to disable Reflect tools. Learn more: https://developer.smartbear.com/smartbear-mcp/docs/test-hub-integration",
              "isSecret": true,
              "name": "REFLECT_API_TOKEN"
            },
            {
              "description": "API Hub API key. Leave empty to disable API Hub tools. Learn more: https://developer.smartbear.com/smartbear-mcp/docs/api-hub-integration",
              "isSecret": true,
              "name": "API_HUB_API_KEY"
            },
            {
              "description": "PactFlow/Pact Broker base URL. Leave empty to disable Pact tools. Learn more: https://developer.smartbear.com/smartbear-mcp/docs/contract-testing-with-pactflow",
              "name": "PACT_BROKER_BASE_URL"
            },
            {
              "description": "PactFlow authentication token. Learn more: https://developer.smartbear.com/smartbear-mcp/docs/contract-testing-with-pactflow",
              "isSecret": true,
              "name": "PACT_BROKER_TOKEN"
            },
            {
              "description": "Pact Broker username (alternative to token). Learn more: https://developer.smartbear.com/smartbear-mcp/docs/contract-testing-with-pactflow",
              "name": "PACT_BROKER_USERNAME"
            },
            {
              "description": "Pact Broker password (alternative to token). Learn more: https://developer.smartbear.com/smartbear-mcp/docs/contract-testing-with-pactflow",
              "isSecret": true,
              "name": "PACT_BROKER_PASSWORD"
            },
            {
              "description": "The Zephyr Cloud API token for authentication. Learn more: https://support.smartbear.com/zephyr/docs/en/rest-api/api-access-tokens-management.html",
              "isSecret": true,
              "name": "ZEPHYR_API_TOKEN"
            },
            {
              "description": " The Zephyr Cloud API base url. Should be changed depending on the region of your Jira instance. Learn more: https://support.smartbear.com/zephyr-scale-cloud/api-docs/#section/Authentication/Accessing-the-API",
              "name": "ZEPHYR_BASE_URL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-14T09:22:57.579085Z",
        "updatedAt": "2025-10-14T09:22:57.579085Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.VictoriaMetrics-Community/mcp-victoriatraces",
      "description": "MCP Server for VictoriaTraces. Provides integration with VictoriaTraces API and documentation",
      "repository": {
        "url": "https://github.com/VictoriaMetrics-Community/mcp-victoriatraces",
        "source": "github"
      },
      "version": "1.2.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/victoriametrics-community/mcp-victoriatraces:v1.2.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "URL to VictoriaTraces instance (it should be root URL of vtlingle or vtselect), for example http://localhost:10428",
              "isRequired": true,
              "format": "string",
              "name": "VT_INSTANCE_ENTRYPOINT"
            },
            {
              "description": "Authentication token for VictoriaMetrics API",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "VT_INSTANCE_BEARER_TOKEN"
            },
            {
              "description": "Comma-separated list of tools to disable",
              "format": "string",
              "name": "MCP_DISABLED_TOOLS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-14T13:18:31.394794Z",
        "updatedAt": "2025-10-14T13:18:31.394794Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.pab1it0/prometheus-mcp-server",
      "description": "MCP server providing Prometheus metrics access and PromQL query execution for AI assistants",
      "repository": {
        "url": "https://github.com/pab1it0/prometheus-mcp-server",
        "source": "github"
      },
      "version": "1.3.2",
      "websiteUrl": "https://pab1it0.github.io/prometheus-mcp-server",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/pab1it0/prometheus-mcp-server:1.3.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Prometheus server URL (e.g., http://localhost:9090)",
              "isRequired": true,
              "format": "string",
              "name": "PROMETHEUS_URL"
            },
            {
              "description": "Username for Prometheus basic authentication",
              "format": "string",
              "name": "PROMETHEUS_USERNAME"
            },
            {
              "description": "Password for Prometheus basic authentication",
              "format": "string",
              "isSecret": true,
              "name": "PROMETHEUS_PASSWORD"
            },
            {
              "description": "Bearer token for Prometheus authentication",
              "format": "string",
              "isSecret": true,
              "name": "PROMETHEUS_TOKEN"
            },
            {
              "description": "Organization ID for multi-tenant Prometheus setups",
              "format": "string",
              "name": "ORG_ID"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-14T13:40:32.875477Z",
        "updatedAt": "2025-10-14T13:40:32.875477Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.3.7",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.3.7",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.3.7",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-14T14:05:51.459039Z",
        "updatedAt": "2025-10-14T14:05:51.459039Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.3.8",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.3.8",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.3.8",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-14T16:45:36.929465Z",
        "updatedAt": "2025-10-14T16:45:36.929465Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.keboola/mcp",
      "description": "Connect your AI assistants to Keboola and expose your data, transformations, SQL queries, ...",
      "repository": {},
      "version": "1.25.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.us-east4.gcp.keboola.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-14T17:26:10.792295Z",
        "updatedAt": "2025-10-14T17:26:10.792295Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.idjohnson/vikunjamcp",
      "description": "An MCP server that provides access to Vikunja, a self-hosted task management solution.",
      "repository": {},
      "version": "1.0.26",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/idjohnson/vikunjamcp:0.26",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "URL to the Vikunja Instance",
              "isRequired": true,
              "format": "string",
              "name": "VIKUNJA_URL"
            },
            {
              "description": "Username to use with the Vikunja Instance",
              "isRequired": true,
              "format": "string",
              "name": "VIKUNJA_USERNAME"
            },
            {
              "description": "Password for user in the Vikunja Instance",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "VIKUNJA_PASSWORD"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-14T17:59:14.383902Z",
        "updatedAt": "2025-10-14T17:59:14.383902Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.54",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-14T20:48:33.420391Z",
        "updatedAt": "2025-10-14T20:48:33.420391Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.3.9",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.3.9",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.3.9",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-14T22:06:19.959528Z",
        "updatedAt": "2025-10-14T22:06:19.959528Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.nathishdev-netizen/dida-mcp-server",
      "description": "Hotel search, booking, and review MCP server with 12+ detailed fields per hotel",
      "repository": {
        "url": "https://github.com/nathishdev-netizen/dida-mcp-server",
        "source": "github"
      },
      "version": "1.0.0"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T05:16:39.654307Z",
        "updatedAt": "2025-10-15T05:16:39.654307Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.nathishdev-netizen/dida-mcp-server",
      "description": "Hotel search, booking, and review MCP server with 12+ detailed fields per hotel",
      "repository": {
        "url": "https://github.com/nathishdev-netizen/dida-mcp-server",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "dida-mcp-server",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T05:53:42.277036Z",
        "updatedAt": "2025-10-15T05:53:42.277036Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.iunera/druid-mcp-server",
      "description": "AI-powered MCP server for Apache Druid cluster management and analytic",
      "repository": {
        "url": "https://github.com/iunera/druid-mcp-server",
        "source": "github"
      },
      "version": "1.5.1",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/iunera/druid-mcp-server:1.5.1",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Druid router URL for connecting to the Druid cluster",
              "format": "string",
              "name": "DRUID_ROUTER_URL"
            },
            {
              "description": "Druid coordinator URL for querying metadata endpoints (optional)",
              "format": "string",
              "name": "DRUID_COORDINATOR_URL"
            },
            {
              "description": "Username for Druid authentication (optional)",
              "format": "string",
              "name": "DRUID_AUTH_USERNAME"
            },
            {
              "description": "Password for Druid authentication (optional)",
              "format": "string",
              "name": "DRUID_AUTH_PASSWORD"
            },
            {
              "description": "Enable SSL/TLS support for Druid connections",
              "format": "boolean",
              "name": "DRUID_SSL_ENABLED"
            },
            {
              "description": "Skip SSL certificate verification (for development/testing only)",
              "format": "boolean",
              "name": "DRUID_SSL_SKIP_VERIFICATION"
            },
            {
              "description": "Enable read-only mode (only GET requests and SQL queries allowed)",
              "format": "boolean",
              "name": "DRUID_MCP_READONLY_ENABLED"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T07:44:42.399935Z",
        "updatedAt": "2025-10-15T07:44:42.399935Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.unifiedoffer/mcp-server",
      "description": "AI-powered product search, affiliate links, and price negotiation for e-commerce platforms",
      "title": "Unified Offer Protocol MCP Server",
      "repository": {
        "url": "https://github.com/Chris85appding/unified-offer-protocol-front",
        "source": "github"
      },
      "version": "2.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://api.unifiedoffer.com/functions/v1/mcp-http-wrapper",
          "headers": [
            {
              "description": "API key for authentication. Get your free API key at https://unifiedoffer.com",
              "isRequired": true,
              "isSecret": true,
              "name": "x-api-key"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T08:03:06.202667Z",
        "updatedAt": "2025-10-15T08:03:06.202667Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.unifiedoffer/mcp-server",
      "description": "AI-powered product search, affiliate links, and price negotiation for e-commerce platforms",
      "title": "Unified Offer Protocol MCP Server",
      "repository": {
        "url": "https://github.com/Chris85appding/unified-offer-protocol-front",
        "source": "github"
      },
      "version": "2.0.1",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@unifiedoffer/mcp-server",
          "version": "2.0.1",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://api.unifiedoffer.com/functions/v1/mcp-http-wrapper",
          "headers": [
            {
              "description": "API key for authentication. Get your free API key at https://unifiedoffer.com",
              "isRequired": true,
              "isSecret": true,
              "name": "x-api-key"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T08:18:02.470698Z",
        "updatedAt": "2025-10-15T08:18:02.470698Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.unifiedoffer/mcp-server",
      "description": "AI-powered product search, affiliate links, and price negotiation for e-commerce platforms",
      "title": "Unified Offer Protocol MCP Server",
      "repository": {
        "url": "https://github.com/Chris85appding/unified-offer-protocol-front",
        "source": "github"
      },
      "version": "2.0.2",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@unifiedoffer/mcp-server",
          "version": "2.0.1",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "pypi",
          "identifier": "uop-mcp-server",
          "version": "2.0.1",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "oci",
          "identifier": "docker.io/chrisappding/mcp-server:2.0.0",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://api.unifiedoffer.com/functions/v1/mcp-http-wrapper",
          "headers": [
            {
              "description": "API key for authentication. Get your free API key at https://unifiedoffer.com",
              "isRequired": true,
              "isSecret": true,
              "name": "x-api-key"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T08:37:56.540755Z",
        "updatedAt": "2025-10-15T08:37:56.540755Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.dynatrace-oss/Dynatrace-mcp",
      "description": "Model Context Protocol server for Dynatrace - access logs, events, metrics from Dynatrace via MCP.",
      "repository": {
        "url": "https://github.com/dynatrace-oss/Dynatrace-mcp",
        "source": "github"
      },
      "version": "0.9.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@dynatrace-oss/dynatrace-mcp-server",
          "version": "0.9.2",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "The URL of your Dynatrace environment (e.g. 'https://abc12345.apps.dynatrace.com')",
              "isRequired": true,
              "format": "string",
              "name": "DT_ENVIRONMENT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T09:11:12.627725Z",
        "updatedAt": "2025-10-15T09:11:12.627725Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.esrisaudiarabia/arcgis-mcp-server",
      "description": "Intelligent ArcGIS content search. Works with Online/Enterprise. Requires user credentials.",
      "repository": {
        "url": "https://github.com/esrisaudiarabia/esrisaudiarabia-mcp",
        "source": "github"
      },
      "version": "1.1.0",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "arcgis-mcp-server",
          "version": "1.1.0",
          "runtimeHint": "python",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your ArcGIS Portal URL (e.g., https://portal.company.com/portal)",
              "isRequired": true,
              "format": "string",
              "name": "ARCGIS_URL"
            },
            {
              "description": "Your ArcGIS Portal Username",
              "isRequired": true,
              "format": "string",
              "name": "ARCGIS_USERNAME"
            },
            {
              "description": "Your ArcGIS Portal Password",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "ARCGIS_PASSWORD"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T09:40:48.416226Z",
        "updatedAt": "2025-10-15T09:40:48.416226Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.goodfel10w/welcome-text-generator-mcp",
      "description": "MCP Server für automatische Generierung professioneller Willkommenstexte für neue Mitarbeiter",
      "repository": {
        "url": "https://github.com/goodfel10w/WelcomeTextGenerator",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "welcome-text-generator-mcp",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T09:54:50.774705Z",
        "updatedAt": "2025-10-15T09:54:50.774705Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.4.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.4.0",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.4.0",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T09:57:08.46678Z",
        "updatedAt": "2025-10-15T09:57:08.46678Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.4.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.4.1",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.4.1",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T10:30:18.618768Z",
        "updatedAt": "2025-10-15T10:30:18.618768Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Chris85appding/unified-offer-protocol",
      "description": "AI-powered e-commerce product search, affiliate links, and price negotiation",
      "title": "Unified Offer Protocol MCP Server",
      "repository": {
        "url": "https://github.com/UnifiedOffer/mcpserver",
        "source": "github"
      },
      "version": "2.0.3"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T10:48:30.9433Z",
        "updatedAt": "2025-10-15T10:48:30.9433Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.nathishdev-netizen/dida-mcp-server",
      "description": "Hotel search, booking, and review MCP server with 12+ detailed fields per hotel",
      "repository": {
        "url": "https://github.com/nathishdev-netizen/dida-mcp-server",
        "source": "github"
      },
      "version": "1.0.2",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "dida-mcp-server",
          "version": "1.0.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T10:51:41.994683Z",
        "updatedAt": "2025-10-15T10:51:41.994683Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.4.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.4.2",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.4.2",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T10:54:56.123781Z",
        "updatedAt": "2025-10-15T10:54:56.123781Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.esrisaudiarabia/arcgis-mcp-server",
      "description": "Intelligent ArcGIS content search. Works with Online/Enterprise. Requires user credentials.",
      "repository": {
        "url": "https://github.com/esrisaudiarabia/esrisaudiarabia-mcp",
        "source": "github"
      },
      "version": "1.1.1",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "arcgis-mcp-server",
          "version": "1.1.1",
          "runtimeHint": "python",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your ArcGIS Portal URL (e.g., https://portal.company.com/portal)",
              "isRequired": true,
              "format": "string",
              "name": "ARCGIS_URL"
            },
            {
              "description": "Your ArcGIS Portal Username",
              "isRequired": true,
              "format": "string",
              "name": "ARCGIS_USERNAME"
            },
            {
              "description": "Your ArcGIS Portal Password",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "ARCGIS_PASSWORD"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T10:54:57.773178Z",
        "updatedAt": "2025-10-15T10:54:57.773178Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Chris85appding/unified-offer-protocol",
      "description": "AI-powered e-commerce product search, affiliate links, and price negotiation",
      "title": "Unified Offer Protocol MCP Server",
      "repository": {
        "url": "https://github.com/UnifiedOffer/mcpserver",
        "source": "github"
      },
      "version": "2.0.4"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T11:08:12.94593Z",
        "updatedAt": "2025-10-15T11:08:12.94593Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Chris85appding/unified-offer-protocol",
      "description": "AI-powered e-commerce product search, affiliate links, and price negotiation",
      "title": "Unified Offer Protocol MCP Server",
      "repository": {
        "url": "https://github.com/UnifiedOffer/mcpserver",
        "source": "github"
      },
      "version": "2.0.5"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T11:08:42.111357Z",
        "updatedAt": "2025-10-15T11:08:42.111357Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.esrisaudiarabia/arcgis-mcp-server",
      "description": "Intelligent ArcGIS content search. Works with Online/Enterprise. Requires user credentials.",
      "repository": {
        "url": "https://github.com/esrisaudiarabia/esrisaudiarabia-mcp",
        "source": "github"
      },
      "version": "1.1.2",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "arcgis-mcp-server",
          "version": "1.1.2",
          "runtimeHint": "python",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your ArcGIS Portal URL (e.g., https://portal.company.com/portal)",
              "isRequired": true,
              "format": "string",
              "name": "ARCGIS_URL"
            },
            {
              "description": "Your ArcGIS Portal Username",
              "isRequired": true,
              "format": "string",
              "name": "ARCGIS_USERNAME"
            },
            {
              "description": "Your ArcGIS Portal Password",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "ARCGIS_PASSWORD"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T11:25:32.736805Z",
        "updatedAt": "2025-10-15T11:25:32.736805Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.esrisaudiarabia/arcgis-mcp-server",
      "description": "Intelligent ArcGIS content search. Works with Online/Enterprise. Requires user credentials.",
      "repository": {
        "url": "https://github.com/esrisaudiarabia/esrisaudiarabia-mcp",
        "source": "github"
      },
      "version": "1.1.3",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "arcgis-mcp-server",
          "version": "1.1.3",
          "runtimeHint": "python",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your ArcGIS Portal URL (e.g., https://portal.company.com/portal)",
              "isRequired": true,
              "format": "string",
              "name": "ARCGIS_URL"
            },
            {
              "description": "Your ArcGIS Portal Username",
              "isRequired": true,
              "format": "string",
              "name": "ARCGIS_USERNAME"
            },
            {
              "description": "Your ArcGIS Portal Password",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "ARCGIS_PASSWORD"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T11:40:00.585557Z",
        "updatedAt": "2025-10-15T11:40:00.585557Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.esrisaudiarabia/arcgis-mcp-server",
      "description": "Intelligent ArcGIS content search. Works with Online/Enterprise. Requires user credentials.",
      "repository": {
        "url": "https://github.com/esrisaudiarabia/esrisaudiarabia-mcp",
        "source": "github"
      },
      "version": "1.1.4",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "arcgis-mcp-server",
          "version": "1.1.4",
          "runtimeHint": "python",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your ArcGIS Portal URL (e.g., https://portal.company.com/portal)",
              "isRequired": true,
              "format": "string",
              "name": "ARCGIS_URL"
            },
            {
              "description": "Your ArcGIS Portal Username",
              "isRequired": true,
              "format": "string",
              "name": "ARCGIS_USERNAME"
            },
            {
              "description": "Your ArcGIS Portal Password",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "ARCGIS_PASSWORD"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T11:57:52.273137Z",
        "updatedAt": "2025-10-15T11:57:52.273137Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.generect/generect-mcp",
      "description": "B2B lead generation and company search through Generect Live API for sales prospecting.",
      "repository": {},
      "version": "0.1.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.generect.com/mcp",
          "headers": [
            {
              "description": "Bearer Token YOUR_GENERECT_API_KEY from https://app.generect.com",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T12:09:11.509495Z",
        "updatedAt": "2025-10-15T12:09:11.509495Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.grafana/mcp-grafana",
      "description": "An MCP server giving access to Grafana dashboards, data and more.",
      "repository": {
        "url": "https://github.com/grafana/mcp-grafana",
        "source": "github"
      },
      "version": "v0.7.7-rc.3",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/grafana/mcp-grafana:0.7.7-rc.3",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "URL to your Grafana instance",
              "isRequired": true,
              "format": "string",
              "name": "GRAFANA_URL"
            },
            {
              "description": "Service account token used to authenticate with your Grafana instance",
              "format": "string",
              "isSecret": true,
              "name": "GRAFANA_SERVICE_ACCOUNT_TOKEN"
            },
            {
              "description": "Username to authenticate with your Grafana instance",
              "format": "string",
              "name": "GRAFANA_USERNAME"
            },
            {
              "description": "Password to authenticate with your Grafana instance",
              "format": "string",
              "isSecret": true,
              "name": "GRAFANA_PASSWORD"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T12:55:33.817886Z",
        "updatedAt": "2025-10-15T12:55:33.817886Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.grafana/mcp-grafana",
      "description": "An MCP server giving access to Grafana dashboards, data and more.",
      "repository": {
        "url": "https://github.com/grafana/mcp-grafana",
        "source": "github"
      },
      "version": "v0.7.7",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/grafana/mcp-grafana:0.7.7",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "URL to your Grafana instance",
              "isRequired": true,
              "format": "string",
              "name": "GRAFANA_URL"
            },
            {
              "description": "Service account token used to authenticate with your Grafana instance",
              "format": "string",
              "isSecret": true,
              "name": "GRAFANA_SERVICE_ACCOUNT_TOKEN"
            },
            {
              "description": "Username to authenticate with your Grafana instance",
              "format": "string",
              "name": "GRAFANA_USERNAME"
            },
            {
              "description": "Password to authenticate with your Grafana instance",
              "format": "string",
              "isSecret": true,
              "name": "GRAFANA_PASSWORD"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T13:00:08.717349Z",
        "updatedAt": "2025-10-15T13:00:08.717349Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.4.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.4.3",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.4.3",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T13:16:51.7145Z",
        "updatedAt": "2025-10-15T13:16:51.7145Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/git-mcp-server",
      "description": "Comprehensive Git MCP server enabling native git tools including clone, commit, worktree, & more.",
      "repository": {
        "url": "https://github.com/cyanheads/git-mcp-server",
        "source": "github"
      },
      "version": "2.5.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.5.1",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Optional absolute path to restrict all git operations to a specific directory tree. Provides security sandboxing for multi-tenant or shared environments.",
              "format": "string",
              "name": "GIT_BASE_DIR"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.5.1",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3015/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3015",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Optional absolute path to restrict all git operations to a specific directory tree. Provides security sandboxing for multi-tenant or shared environments.",
              "format": "string",
              "name": "GIT_BASE_DIR"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T14:25:36.846763Z",
        "updatedAt": "2025-10-15T14:25:36.846763Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/git-mcp-server",
      "description": "Comprehensive Git MCP server enabling native git tools including clone, commit, worktree, & more.",
      "repository": {
        "url": "https://github.com/cyanheads/git-mcp-server",
        "source": "github"
      },
      "version": "2.5.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.5.2",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Optional absolute path to restrict all git operations to a specific directory tree. Provides security sandboxing for multi-tenant or shared environments.",
              "format": "string",
              "name": "GIT_BASE_DIR"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.5.2",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3015/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3015",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Optional absolute path to restrict all git operations to a specific directory tree. Provides security sandboxing for multi-tenant or shared environments.",
              "format": "string",
              "name": "GIT_BASE_DIR"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T14:38:56.470854Z",
        "updatedAt": "2025-10-15T14:38:56.470854Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/git-mcp-server",
      "description": "Comprehensive Git MCP server enabling native git tools including clone, commit, worktree, & more.",
      "repository": {
        "url": "https://github.com/cyanheads/git-mcp-server",
        "source": "github"
      },
      "version": "2.5.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.5.3",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Optional absolute path to restrict all git operations to a specific directory tree. Provides security sandboxing for multi-tenant or shared environments.",
              "format": "string",
              "name": "GIT_BASE_DIR"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.5.3",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3015/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3015",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Optional absolute path to restrict all git operations to a specific directory tree. Provides security sandboxing for multi-tenant or shared environments.",
              "format": "string",
              "name": "GIT_BASE_DIR"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T14:58:06.489856Z",
        "updatedAt": "2025-10-15T14:58:06.489856Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "goog.workspace-developer/developer-tools",
      "description": "Provides tools for searching Google Workspace documentation and much more.",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://workspace-developer.goog/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T15:22:33.648019Z",
        "updatedAt": "2025-10-15T15:22:33.648019Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.wallet-connectors/wallet-verifier-mcp",
      "description": "MCP server for verifying EUDI/Talao wallet data via OIDC4VP (pull) for AI agents.",
      "repository": {
        "url": "https://github.com/TalaoDAO/connectors",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://wallet-connectors.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T15:50:52.564942Z",
        "updatedAt": "2025-10-15T15:50:52.564942Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.keboola/mcp",
      "description": "Connect your AI assistants to Keboola and expose your data, transformations, SQL queries, ...",
      "repository": {
        "url": "https://github.com/keboola/mcp-server",
        "source": "github"
      },
      "version": "1.26.1",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "keboola-mcp-server",
          "version": "1.26.1",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.us-east4.gcp.keboola.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T16:28:18.549114Z",
        "updatedAt": "2025-10-15T16:28:18.549114Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/clinicaltrialsgov-mcp-server",
      "description": "Provides rich tools to search, retrieve, and analyze data from ClinicalTrials.gov API v2.",
      "repository": {
        "url": "https://github.com/cyanheads/clinicaltrialsgov-mcp-server",
        "source": "github"
      },
      "version": "1.5.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "clinicaltrialsgov-mcp-server",
          "version": "1.5.0",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn', 'error').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Storage provider type: 'in-memory', 'filesystem', 'supabase', 'cloudflare-r2', or 'cloudflare-kv'.",
              "format": "string",
              "default": "in-memory",
              "name": "STORAGE_PROVIDER_TYPE"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "clinicaltrialsgov-mcp-server",
          "version": "1.5.0",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3000/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3017",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn', 'error').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Storage provider type: 'in-memory', 'filesystem', 'supabase', 'cloudflare-r2', or 'cloudflare-kv'.",
              "format": "string",
              "default": "in-memory",
              "name": "STORAGE_PROVIDER_TYPE"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T17:20:51.124174Z",
        "updatedAt": "2025-10-15T17:20:51.124174Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/survey-mcp-server",
      "description": "MCP server for conducting dynamic, conversational surveys with structured data collection.",
      "repository": {
        "url": "https://github.com/cyanheads/survey-mcp-server",
        "source": "github"
      },
      "version": "1.0.5",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/survey-mcp-server",
          "version": "1.0.5",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Path to the directory containing survey definition files.",
              "format": "string",
              "default": "./surveys",
              "name": "SURVEY_DEFINITIONS_PATH"
            },
            {
              "description": "Path to the directory where survey responses are stored.",
              "format": "string",
              "default": "./storage/responses",
              "name": "SURVEY_RESPONSES_PATH"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/survey-mcp-server",
          "version": "1.0.5",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Path to the directory containing survey definition files.",
              "format": "string",
              "default": "./surveys",
              "name": "SURVEY_DEFINITIONS_PATH"
            },
            {
              "description": "Path to the directory where survey responses are stored.",
              "format": "string",
              "default": "./storage/responses",
              "name": "SURVEY_RESPONSES_PATH"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T18:34:11.592998Z",
        "updatedAt": "2025-10-15T18:34:11.592998Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.4.5",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.4.5",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.4.5",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T19:48:40.523239Z",
        "updatedAt": "2025-10-15T19:48:40.523239Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Defozo/ddc-ci-control-bridge",
      "description": "Control monitor brightness, contrast, power and input via DDC/CI with MCP and MQTT support.",
      "title": "DDC/CI Control Bridge",
      "repository": {
        "url": "https://github.com/Defozo/ddc-ci-control-bridge",
        "source": "github"
      },
      "version": "1.0.2",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "ddc-ci-control-bridge",
          "version": "1.0.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T22:56:48.276964Z",
        "updatedAt": "2025-10-15T22:56:48.276964Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Defozo/ddc-ci-control-bridge",
      "description": "Control monitor brightness, contrast, power and input via DDC/CI with MCP and MQTT support.",
      "title": "DDC/CI Control Bridge",
      "repository": {
        "url": "https://github.com/Defozo/ddc-ci-control-bridge",
        "source": "github"
      },
      "version": "1.0.3",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "ddc-ci-control-bridge",
          "version": "1.0.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T23:01:42.464137Z",
        "updatedAt": "2025-10-15T23:01:42.464137Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Defozo/ddc-ci-control-bridge",
      "description": "Control monitor brightness, contrast, power and input via DDC/CI with MCP and MQTT support.",
      "title": "DDC/CI Control Bridge",
      "repository": {
        "url": "https://github.com/Defozo/ddc-ci-control-bridge",
        "source": "github"
      },
      "version": "1.0.4",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "ddc-ci-control-bridge",
          "version": "1.0.4",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T23:11:19.127515Z",
        "updatedAt": "2025-10-15T23:11:19.127515Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.IvanRublev/keyphrases-mcp",
      "description": "An MCP server to extract keyphrases from a text with the BERT model",
      "repository": {
        "url": "https://github.com/IvanRublev/keyphrases-mcp",
        "source": "github"
      },
      "version": "0.0.4",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "keyphrases-mcp",
          "version": "0.0.4",
          "runtimeHint": "uvx",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "value": "keyphrases-mcp-server",
              "type": "positional"
            },
            {
              "description": "Directory containing documents to process",
              "isRequired": true,
              "format": "filepath",
              "type": "named",
              "name": "--allowed-dir",
              "valueHint": "documents_directory"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T23:19:27.424097Z",
        "updatedAt": "2025-10-15T23:19:27.424097Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Defozo/ddc-ci-control-bridge",
      "description": "Control monitor brightness, contrast, power and input via DDC/CI with MCP and MQTT support.",
      "title": "DDC/CI Control Bridge",
      "repository": {
        "url": "https://github.com/Defozo/ddc-ci-control-bridge",
        "source": "github"
      },
      "version": "1.0.5",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "ddc-ci-control-bridge",
          "version": "1.0.5",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T23:23:22.77478Z",
        "updatedAt": "2025-10-15T23:23:22.77478Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "dev.continue/docs",
      "description": "An MCP server for docs.continue.dev",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://docs.continue.dev/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-15T23:26:13.710356Z",
        "updatedAt": "2025-10-15T23:26:13.710356Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Wolfe-Jam/claude-faf-mcp",
      "description": "33+ MCP tools for .faf Project DNA. AI-ready context for Claude Desktop, VS Code, and any MCP host.",
      "title": ".faf = Project DNA ✨ for AI-Context, On-Demand",
      "repository": {
        "url": "https://github.com/Wolfe-Jam/claude-faf-mcp",
        "source": "github"
      },
      "version": "2.6.1",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "claude-faf-mcp",
          "version": "2.6.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-16T07:25:20.554474Z",
        "updatedAt": "2025-10-16T07:25:20.554474Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.nigue3025/tw-cwa-weather-mcp",
      "description": "Access Taiwan CWA weather data and forecasts for all counties and cities",
      "title": "Taiwan CWA Weather",
      "repository": {},
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "tw-cwa-weather-mcp",
          "version": "1.0.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-16T08:00:51.977764Z",
        "updatedAt": "2025-10-16T08:00:51.977764Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.vardior9/apiiro",
      "description": "Ship software securely with an AI AppSec Agent",
      "repository": {},
      "version": "0.1.0"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-16T08:50:47.461916Z",
        "updatedAt": "2025-10-16T08:50:47.461916Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.esrisaudiarabia/arcgis-mcp-server",
      "description": "Intelligent ArcGIS content search. Works with Online/Enterprise. Requires user credentials.",
      "repository": {
        "url": "https://github.com/esrisaudiarabia/esrisaudiarabia-mcp",
        "source": "github"
      },
      "version": "1.1.5",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "arcgis-mcp-server",
          "version": "1.1.5",
          "runtimeHint": "python",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your ArcGIS Portal URL (e.g., https://portal.company.com/portal)",
              "isRequired": true,
              "format": "string",
              "name": "ARCGIS_URL"
            },
            {
              "description": "Your ArcGIS Portal Username",
              "isRequired": true,
              "format": "string",
              "name": "ARCGIS_USERNAME"
            },
            {
              "description": "Your ArcGIS Portal Password",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "ARCGIS_PASSWORD"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-16T09:55:37.178122Z",
        "updatedAt": "2025-10-16T09:55:37.178122Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.ggozad/haiku-rag",
      "description": "Agentic Retrieval Augmented Generation (RAG) with LanceDB",
      "repository": {
        "url": "https://github.com/ggozad/haiku.rag",
        "source": "github"
      },
      "version": "0.12.1"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-16T10:03:40.746006Z",
        "updatedAt": "2025-10-16T10:03:40.746006Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.generect/generect-mcp",
      "description": "B2B lead generation and company search through Generect Live API for sales prospecting.",
      "repository": {},
      "version": "0.1.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.generect.com/mcp",
          "headers": [
            {
              "description": "Bearer Token YOUR_GENERECT_API_KEY from https://beta.generect.com",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-16T10:29:57.990912Z",
        "updatedAt": "2025-10-16T10:29:57.990912Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.generect/generect-mcp",
      "description": "B2B lead generation and company search through Generect Live API for sales prospecting.",
      "repository": {
        "url": "https://github.com/generect/generect_mcp.git",
        "source": "github"
      },
      "version": "0.1.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.generect.com/mcp",
          "headers": [
            {
              "description": "Bearer Token YOUR_GENERECT_API_KEY from https://beta.generect.com",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-16T10:34:55.182635Z",
        "updatedAt": "2025-10-16T10:34:55.182635Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/survey-mcp-server",
      "description": "MCP server for conducting dynamic, conversational surveys with structured data collection.",
      "repository": {
        "url": "https://github.com/cyanheads/survey-mcp-server",
        "source": "github"
      },
      "version": "1.0.6",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/survey-mcp-server",
          "version": "1.0.6",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Path to the directory containing survey definition files.",
              "format": "string",
              "default": "./surveys",
              "name": "SURVEY_DEFINITIONS_PATH"
            },
            {
              "description": "Path to the directory where survey responses are stored.",
              "format": "string",
              "default": "./storage/responses",
              "name": "SURVEY_RESPONSES_PATH"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/survey-mcp-server",
          "version": "1.0.6",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Path to the directory containing survey definition files.",
              "format": "string",
              "default": "./surveys",
              "name": "SURVEY_DEFINITIONS_PATH"
            },
            {
              "description": "Path to the directory where survey responses are stored.",
              "format": "string",
              "default": "./storage/responses",
              "name": "SURVEY_RESPONSES_PATH"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-16T13:32:28.372114Z",
        "updatedAt": "2025-10-16T13:32:28.372114Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.4.9",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.4.9",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.4.9",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-16T13:58:15.360213Z",
        "updatedAt": "2025-10-16T13:58:15.360213Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.vulnersCom/vulners-mcp",
      "description": "MCP server for the Vulners.com API",
      "repository": {
        "url": "https://github.com/vulnersCom/vulners-mcp",
        "source": "github"
      },
      "version": "1.0.3",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "vulners-mcp",
          "version": "1.0.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-16T14:30:43.443853Z",
        "updatedAt": "2025-10-16T14:30:43.443853Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.colabfit/colabfit-mcp",
      "description": "An MCP server that provides access to the ColabFit database",
      "repository": {
        "url": "https://github.com/colabfit/colabfit-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "colabfit-mcp",
          "version": "0.0.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-16T16:55:46.847116Z",
        "updatedAt": "2025-10-16T16:55:46.847116Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.SonarSource/sonarqube-mcp-server",
      "description": "An MCP server that enables integration with SonarQube Server or Cloud for code quality and security.",
      "repository": {
        "url": "https://github.com/SonarSource/sonarqube-mcp-server",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/mcp/sonarqube:latest",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your SonarQube Server USER token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "SONARQUBE_TOKEN"
            },
            {
              "description": "Your SonarQube Cloud organization key (if using SonarQube Cloud)",
              "format": "string",
              "isSecret": true,
              "name": "SONARQUBE_ORG"
            },
            {
              "description": "Your SonarQube Server URL (if using SonarQube Server)",
              "format": "string",
              "isSecret": true,
              "name": "SONARQUBE_URL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-16T17:12:11.698378Z",
        "updatedAt": "2025-10-16T17:12:11.698378Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.figma.mcp/mcp",
      "description": "The Figma MCP server brings Figma design context directly into your AI workflow.",
      "title": "Figma MCP Server",
      "repository": {
        "url": "https://github.com/figma/mcp-server-guide",
        "source": "github"
      },
      "version": "1.0.3",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.figma.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-16T17:40:56.949472Z",
        "updatedAt": "2025-10-16T17:40:56.949472Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "com.amplitude/mcp-server",
      "description": "Search, access, and get insights on your Amplitude data",
      "title": "Amplitude",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.amplitude.com/mcp"
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.eu.amplitude.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-16T20:22:46.742037Z",
        "updatedAt": "2025-10-16T20:22:46.742037Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "io.github.Abraxas1010/agent-payment-mcp",
      "description": "Secure USDC payments for AI agents on Base blockchain with budget controls and instant settlement.",
      "repository": {
        "url": "https://github.com/Abraxas1010/agent-payment-mcp",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/Apoth3osis-ai/agent-payment-mcp/releases/download/v1.0.1/agent-payment-server",
          "fileSha256": "53c727257cb433b4d369306a0b46221f15a1c8a6d14eb0c83fea8f4ace4d4ee1",
          "runtimeHint": "binary",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your AgentPMT API key for authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "AGENT_PAYMENT_API_KEY"
            },
            {
              "description": "Your AgentPMT budget key for spending control",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "AGENT_PAYMENT_BUDGET_KEY"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/Apoth3osis-ai/agent-payment-mcp/releases/download/v1.0.1/agent-payment-server-darwin-amd64",
          "fileSha256": "c151af56e81e1d9081feaa917c14eadae44780fa51b72e83431bb1b894bbc83e",
          "runtimeHint": "binary",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your AgentPMT API key for authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "AGENT_PAYMENT_API_KEY"
            },
            {
              "description": "Your AgentPMT budget key for spending control",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "AGENT_PAYMENT_BUDGET_KEY"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/Apoth3osis-ai/agent-payment-mcp/releases/download/v1.0.1/agent-payment-server-darwin-arm64",
          "fileSha256": "ad5630f47e409b6cc18bf330896947b90ebe6a61c688587e00f196d4ccec47cd",
          "runtimeHint": "binary",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your AgentPMT API key for authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "AGENT_PAYMENT_API_KEY"
            },
            {
              "description": "Your AgentPMT budget key for spending control",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "AGENT_PAYMENT_BUDGET_KEY"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/Apoth3osis-ai/agent-payment-mcp/releases/download/v1.0.1/agent-payment-server-windows-amd64.exe",
          "fileSha256": "bf8220131e001d06789561e064400e9dc5ea674e3a5bb17c9ed1e1b238a36f06",
          "runtimeHint": "binary",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your AgentPMT API key for authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "AGENT_PAYMENT_API_KEY"
            },
            {
              "description": "Your AgentPMT budget key for spending control",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "AGENT_PAYMENT_BUDGET_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-16T21:14:59.912521Z",
        "updatedAt": "2025-10-16T21:14:59.912521Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json",
      "name": "ai.smithery/browserbasehq-mcp-browserbase",
      "description": "Provides cloud browser automation capabilities using Stagehand and Browserbase, enabling LLMs to i…",
      "repository": {
        "url": "https://github.com/browserbase/mcp-server-browserbase",
        "source": "github"
      },
      "version": "2.2.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@browserbasehq/mcp-browserbase/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-16T21:51:16.500712Z",
        "updatedAt": "2025-10-16T21:51:16.500712Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.teamwork/mcp",
      "description": "The Teamwork.com official MCP server helps teams efficiently manage client projects with AI.",
      "repository": {
        "url": "https://github.com/teamwork/mcp",
        "source": "github"
      },
      "version": "1.6.6",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/teamwork/mcp:v1.6.6",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "TW_MCP_BEARER_TOKEN"
            },
            {
              "description": "Choose log output format between 'text' or 'json'. Default is 'text'.",
              "format": "string",
              "name": "TW_MCP_LOG_FORMAT"
            },
            {
              "description": "Choose log level between 'debug', 'info', 'warn' or 'error'. Default is 'info'.",
              "format": "string",
              "name": "TW_MCP_LOG_LEVEL"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-16T23:39:58.493936Z",
        "updatedAt": "2025-10-16T23:39:58.493936Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.Apoth3osis-ai/agent-payment-mcp",
      "description": "Secure USDC payments for AI agents on Base blockchain with budget controls and instant settlement.",
      "repository": {
        "url": "https://github.com/Apoth3osis-ai/agent-payment-mcp",
        "source": "github"
      },
      "version": "1.0.7",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/Apoth3osis-ai/agent-payment-mcp/releases/download/v1.0.7/agent-payment-server",
          "fileSha256": "352a5cdda80e4c9694cec0aa05e5f9360b7e4643fb79a77787a25ff561e2f238",
          "runtimeHint": "binary",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your AgentPMT API key for authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "AGENT_PAYMENT_API_KEY"
            },
            {
              "description": "Your AgentPMT budget key for spending control",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "AGENT_PAYMENT_BUDGET_KEY"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/Apoth3osis-ai/agent-payment-mcp/releases/download/v1.0.7/agent-payment-server-darwin-amd64",
          "fileSha256": "d925eca57b2b7e910c5a41185db0eaf61674d9abb6fe880e5a2c844968d9c454",
          "runtimeHint": "binary",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your AgentPMT API key for authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "AGENT_PAYMENT_API_KEY"
            },
            {
              "description": "Your AgentPMT budget key for spending control",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "AGENT_PAYMENT_BUDGET_KEY"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/Apoth3osis-ai/agent-payment-mcp/releases/download/v1.0.7/agent-payment-server-darwin-arm64",
          "fileSha256": "66735cab4440d45fab9d7988db5cc6985aa794c258c2c0b04326f23f77a34ce2",
          "runtimeHint": "binary",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your AgentPMT API key for authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "AGENT_PAYMENT_API_KEY"
            },
            {
              "description": "Your AgentPMT budget key for spending control",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "AGENT_PAYMENT_BUDGET_KEY"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/Apoth3osis-ai/agent-payment-mcp/releases/download/v1.0.7/agent-payment-server-windows-amd64.exe",
          "fileSha256": "071235d6976d19c9b6318947be307588491823278542256e66662ec86ccb2b2b",
          "runtimeHint": "binary",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your AgentPMT API key for authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "AGENT_PAYMENT_API_KEY"
            },
            {
              "description": "Your AgentPMT budget key for spending control",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "AGENT_PAYMENT_BUDGET_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-17T02:44:03.454919Z",
        "updatedAt": "2025-10-17T02:44:03.454919Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.tech-sushant/calculator-mcp",
      "description": "A simple Model Context Protocol calculator server",
      "repository": {
        "url": "https://github.com/tech-sushant/calculator-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@tech-sushant/calculator-mcp",
          "version": "1.0.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-17T04:20:04.104146Z",
        "updatedAt": "2025-10-17T04:20:04.104146Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "dev.svelte/mcp",
      "description": "The official Svelte MCP server providing docs and autofixing tools for Svelte development",
      "repository": {
        "url": "https://github.com/sveltejs/mcp",
        "source": "github",
        "id": "1054419133",
        "subfolder": "packages/mcp-stdio"
      },
      "version": "0.1.8",
      "websiteUrl": "https://svelte.dev/docs/mcp/overview",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@sveltejs/mcp",
          "version": "0.1.8",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.svelte.dev/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-17T06:25:42.291491Z",
        "updatedAt": "2025-10-17T06:25:42.291491Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.testiny/testiny-mcp",
      "description": "An MCP server that provides access to Testiny projects, test cases and test runs",
      "title": "Testiny Test Management",
      "repository": {},
      "version": "0.1.0",
      "websiteUrl": "https://www.testiny.io/docs/mcp-server/",
      "icons": [
        {
          "src": "https://app.testiny.io/logo.png",
          "mimeType": "image/png",
          "sizes": [
            "128x128"
          ]
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://app.testiny.io/api/v1/mcp-server",
          "headers": [
            {
              "description": "An optional API key, otherwise OAuth2 can be used",
              "isSecret": true,
              "name": "X-Token"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-17T09:13:46.270929Z",
        "updatedAt": "2025-10-17T09:13:46.270929Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.57",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.57",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-17T14:21:42.93601Z",
        "updatedAt": "2025-10-17T14:21:42.93601Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.nickzitzer/servicenow-nodejs",
      "description": "Multi-instance ServiceNow MCP server with 40+ tools and intelligent schema discovery",
      "repository": {
        "url": "https://github.com/Happy-Technologies-LLC/mcp-servicenow-nodejs",
        "source": "github"
      },
      "version": "2.1.1",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "servicenow-mcp-server",
          "version": "2.1.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "ServiceNow instance URL (e.g., https://dev123456.service-now.com)",
              "isRequired": true,
              "format": "string",
              "name": "SERVICENOW_INSTANCE_URL"
            },
            {
              "description": "ServiceNow username",
              "isRequired": true,
              "format": "string",
              "name": "SERVICENOW_USERNAME"
            },
            {
              "description": "ServiceNow password",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "SERVICENOW_PASSWORD"
            },
            {
              "description": "Authentication type (default: basic)",
              "format": "string",
              "name": "SERVICENOW_AUTH_TYPE"
            },
            {
              "description": "Specific instance name from config file (optional)",
              "format": "string",
              "name": "SERVICENOW_INSTANCE"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-17T15:13:28.900783Z",
        "updatedAt": "2025-10-17T15:13:28.900783Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.xorrkaz/cml-mcp",
      "description": "An MCP server that provides access to common Cisco Modeling Labs (CML) operations.",
      "title": "Cisco Modeling Labs (CML)",
      "repository": {
        "url": "https://github.com/xorrkaz/cml-mcp",
        "source": "github"
      },
      "version": "0.11.3",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "cml-mcp",
          "version": "0.11.3",
          "runtimeHint": "uvx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "URL for the CML Server",
              "isRequired": true,
              "format": "string",
              "name": "CML_URL"
            },
            {
              "description": "Username for CML authentication",
              "isRequired": true,
              "format": "string",
              "name": "CML_USERNAME"
            },
            {
              "description": "Password for CML authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CML_PASSWORD"
            },
            {
              "description": "Username for authentication to devices running in CML",
              "format": "string",
              "name": "PYATS_USERNAME"
            },
            {
              "description": "Password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_PASSWORD"
            },
            {
              "description": "Enable password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_AUTH_PASS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-17T15:36:22.78283Z",
        "updatedAt": "2025-10-17T15:36:22.78283Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.PrefectHQ/prefect-mcp-server",
      "description": "MCP server for Prefect. Monitor and debug workflows, deployments, and automations.",
      "title": "Prefect MCP Server",
      "repository": {},
      "version": "0.0.1-beta.7",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "prefect-mcp",
          "version": "0.0.1-beta.7",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-17T16:14:41.034179Z",
        "updatedAt": "2025-10-17T16:14:41.034179Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "finance.double.agent4/knowledge-base",
      "description": "AI-powered knowledge base for Double - Thank You with semantic search and question answering.",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://agent4.double.finance/mcp/message"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-17T17:23:13.832858Z",
        "updatedAt": "2025-10-17T17:23:13.832858Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "finance.double.agent4/knowledge-base",
      "description": "AI-powered knowledge base for Double - Thank You with semantic search and question answering.",
      "repository": {},
      "version": "1.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://agent4.double.finance/mcp/message"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-17T17:31:54.847262Z",
        "updatedAt": "2025-10-17T17:31:54.847262Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.sonatype/dependency-management-mcp-server",
      "description": "Sonatype component intelligence: versions, security analysis, and Trust Score recommendations",
      "repository": {},
      "version": "1.0.1",
      "websiteUrl": "https://www.sonatype.com",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.seaworthy.sonatype.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-17T18:06:34.430251Z",
        "updatedAt": "2025-10-17T18:06:34.430251Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.pga/pga-golf",
      "description": "PGA's official MCP Server for all things golf-related. Find a coach, play golf, improve your game.",
      "title": "PGA Golf",
      "repository": {},
      "version": "1.0.0",
      "websiteUrl": "https://mcp.pga.com",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.pga.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-17T21:37:35.455239Z",
        "updatedAt": "2025-10-17T21:37:35.455239Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.DollhouseMCP/mcp-server",
      "description": "OSS to create Personas, Skills, Templates, Agents, and Memories to customize your AI experience.",
      "title": "DollhouseMCP",
      "repository": {
        "url": "https://github.com/DollhouseMCP/mcp-server",
        "source": "github"
      },
      "version": "1.9.20",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@dollhousemcp/mcp-server",
          "version": "1.9.20",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-17T23:12:58.370286Z",
        "updatedAt": "2025-10-17T23:12:58.370286Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.linxule/lotus-wisdom",
      "description": "An MCP server for problem-solving using the Lotus Sutra's wisdom framework.",
      "repository": {
        "url": "https://github.com/linxule/lotus-wisdom-mcp",
        "source": "github",
        "id": "963596268"
      },
      "version": "0.2.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "lotus-wisdom-mcp",
          "version": "0.2.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-18T01:51:14.127747Z",
        "updatedAt": "2025-10-18T01:51:14.127747Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.linxule/lotus-wisdom",
      "description": "An MCP server for problem-solving using the Lotus Sutra's wisdom framework.",
      "title": "Lotus Wisdom",
      "repository": {
        "url": "https://github.com/linxule/lotus-wisdom-mcp",
        "source": "github",
        "id": "963596268"
      },
      "version": "0.2.1",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "lotus-wisdom-mcp",
          "version": "0.2.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-18T01:58:45.486328Z",
        "updatedAt": "2025-10-18T01:58:45.486328Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.wallet-connectors/wallet-verifier-mcp",
      "description": "MCP server for verifying EUDI/Talao wallet data via OIDC4VP (pull) for AI agents.",
      "repository": {
        "url": "https://github.com/TalaoDAO/connectors",
        "source": "github"
      },
      "version": "1.1.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://wallet-connectors.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-18T15:24:08.291615Z",
        "updatedAt": "2025-10-18T15:24:08.291615Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.Wolfe-Jam/claude-faf-mcp",
      "description": "Anthropic-Approved MCP Server. 33+ tools for .faf Project DNA. 3.6k downloads.",
      "repository": {
        "url": "https://github.com/Wolfe-Jam/claude-faf-mcp",
        "source": "github"
      },
      "version": "2.6.2",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "claude-faf-mcp",
          "version": "2.6.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-18T22:42:49.479189Z",
        "updatedAt": "2025-10-18T22:42:49.479189Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.xplusplusai/fo-semantic-mcp",
      "description": "Semantic search over 50,000+ Dynamics 365 F&O artifacts: tables, forms, classes, and more.",
      "title": "FO Semantic MCP",
      "repository": {},
      "version": "2.0.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "fo-semantic-mcp",
          "version": "2.0.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-19T07:31:09.443164Z",
        "updatedAt": "2025-10-19T07:31:09.443164Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.eat-pray-ai/yutu",
      "description": "A fully functional MCP server and CLI for YouTube",
      "title": "yutu",
      "repository": {
        "url": "https://github.com/eat-pray-ai/yutu",
        "source": "github",
        "id": "643163403"
      },
      "version": "v0.10.4-dev",
      "icons": [
        {
          "src": "https://raw.githubusercontent.com/eat-pray-ai/yutu/main/assets/yutu-ico.svg",
          "mimeType": "image/svg+xml",
          "sizes": [
            "any"
          ]
        }
      ],
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/eat-pray-ai/yutu:v0.10.4-dev",
          "runtimeHint": "docker",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:8216/mcp"
          },
          "runtimeArguments": [
            {
              "description": "Username or UID in docker (format: <name|uid>[:<group|gid>])",
              "value": "{user}:{group}",
              "variables": {
                "group": {
                  "description": "The current user's primary group, output of `id -g`"
                },
                "user": {
                  "description": "The current user, output of `id -u`"
                }
              },
              "type": "named",
              "name": "--user"
            },
            {
              "description": "Working directory inside the container",
              "value": "type=bind,source={hostPath},target=/app",
              "variables": {
                "hostPath": {
                  "description": "The directory containing `youtube.token.json` and `youtube.token.json`"
                }
              },
              "type": "named",
              "name": "--mount"
            },
            {
              "description": "Publish MCP server port",
              "isRequired": true,
              "value": "8216:8216",
              "type": "named",
              "name": "-p"
            }
          ],
          "packageArguments": [
            {
              "value": "mcp",
              "type": "positional"
            },
            {
              "value": "http",
              "type": "named",
              "name": "--mode"
            }
          ],
          "environmentVariables": [
            {
              "description": "GCP project credential for yutu, base64 encoded JSON or path to JSON file",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YUTU_CREDENTIAL"
            },
            {
              "description": "YouTube authentication token, base64 encoded JSON or path to JSON file",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YUTU_CACHE_TOKEN"
            },
            {
              "description": "Log level",
              "format": "string",
              "default": "INFO",
              "choices": [
                "DEBUG",
                "INFO",
                "WARNING",
                "ERROR"
              ],
              "name": "YUTU_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-19T10:17:44.60724Z",
        "updatedAt": "2025-10-19T10:17:44.60724Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "org.io-aerospace/mcp-server",
      "description": "MCP server for aerospace calculations: orbital mechanics, ephemeris, DSN operations, ...",
      "title": "IO Aerospace MCP Server",
      "repository": {
        "url": "https://github.com/IO-Aerospace-software-engineering/mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.io-aerospace.org"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-19T12:42:23.141647Z",
        "updatedAt": "2025-10-19T12:42:23.141647Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.Chris85appding/unified-offer-protocol",
      "description": "AI-powered e-commerce product search, affiliate links, and price negotiation",
      "title": "Unified Offer Protocol MCP Server",
      "repository": {
        "url": "https://github.com/UnifiedOffer/mcp-server-public",
        "source": "github"
      },
      "version": "2.0.6"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-19T13:04:28.249421Z",
        "updatedAt": "2025-10-19T13:04:28.249421Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.firecrawl/firecrawl-mcp-server",
      "description": "MCP server for Firecrawl web scraping, structured data extraction and web search integration.",
      "title": "Firecrawl MCP Server",
      "repository": {
        "url": "https://github.com/firecrawl/firecrawl-mcp-server.git",
        "source": "github"
      },
      "version": "3.5.1",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "firecrawl-mcp",
          "version": "3.5.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YOUR_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-19T15:06:55.12505Z",
        "updatedAt": "2025-10-19T15:06:55.12505Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.firecrawl/firecrawl-mcp-server",
      "description": "MCP server for Firecrawl web scraping, structured data extraction and web search integration.",
      "title": "Firecrawl MCP Server",
      "repository": {
        "url": "https://github.com/firecrawl/firecrawl-mcp-server.git",
        "source": "github"
      },
      "version": "3.5.2",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "firecrawl-mcp",
          "version": "3.5.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for Firecrawl",
              "format": "string",
              "isSecret": true,
              "name": "FIRECRAWL_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-19T15:09:17.646654Z",
        "updatedAt": "2025-10-19T15:09:17.646654Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.jkawamoto/mcp-bear",
      "description": "A MCP server for interacting with Bear note-taking software.",
      "repository": {
        "url": "https://github.com/jkawamoto/mcp-bear",
        "source": "github"
      },
      "version": "0.5.0",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/jkawamoto/mcp-bear/releases/download/v0.5.0/mcp-bear.mcpb",
          "fileSha256": "a6c2f13aa855a6a54f3e1377464af51338a7a69be76ca1ee2921ded456efde59",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Bear API token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BEAR_API_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-19T19:24:20.440182Z",
        "updatedAt": "2025-10-19T19:24:20.440182Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.ooples/token-optimizer-mcp",
      "description": "Intelligent token optimization achieving 95%+ reduction through caching, compression, and 80+ tools",
      "repository": {
        "url": "https://github.com/ooples/token-optimizer-mcp",
        "source": "github"
      },
      "version": "2.1.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "token-optimizer-mcp",
          "version": "2.1.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Directory path for cache storage (optional, defaults to ~/.token-optimizer-cache)",
              "format": "string",
              "name": "TOKEN_OPTIMIZER_CACHE_DIR"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-20T01:48:50.893358Z",
        "updatedAt": "2025-10-20T01:48:50.893358Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.team-earth/datagraph",
      "description": "Urban intelligence knowledge graph. Structured city data for civic problem-solving.",
      "title": "DataGraph",
      "repository": {},
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "datagraph-city-mcp-server",
          "version": "1.0.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-20T04:48:59.455888Z",
        "updatedAt": "2025-10-20T04:48:59.455888Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.team-earth/datagraph",
      "description": "Urban intelligence knowledge graph. Structured city data for civic problem-solving.",
      "title": "DataGraph",
      "repository": {},
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "datagraph-city-mcp-server",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-20T04:59:24.102366Z",
        "updatedAt": "2025-10-20T04:59:24.102366Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.yuna0x0/anilist-mcp",
      "description": "AniList MCP server for accessing AniList API data",
      "title": "AniList",
      "repository": {
        "url": "https://github.com/yuna0x0/anilist-mcp",
        "source": "github",
        "id": "952023806"
      },
      "version": "1.3.9",
      "icons": [
        {
          "src": "https://anilist.co/img/icons/icon.svg",
          "mimeType": "image/svg+xml",
          "sizes": [
            "any"
          ]
        }
      ],
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "anilist-mcp",
          "version": "1.3.9",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "AniList API token for authenticated requests",
              "format": "string",
              "isSecret": true,
              "name": "ANILIST_TOKEN"
            }
          ]
        },
        {
          "registryType": "oci",
          "identifier": "ghcr.io/yuna0x0/anilist-mcp:1.3.9",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "AniList API token for authenticated requests",
              "format": "string",
              "isSecret": true,
              "name": "ANILIST_TOKEN"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/yuna0x0/anilist-mcp/releases/download/v1.3.9/anilist-mcp-1.3.9.mcpb",
          "fileSha256": "e149213c661cd8473c5deb1f6a852e65db90dfdf90ff60890ebadd38a389b12e",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "AniList API token for authenticated requests",
              "format": "string",
              "isSecret": true,
              "name": "ANILIST_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-20T10:18:38.483744Z",
        "updatedAt": "2025-10-20T10:18:38.483744Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.yuna0x0/hackmd-mcp",
      "description": "A Model Context Protocol server for integrating HackMD's note-taking platform with AI assistants.",
      "title": "HackMD",
      "repository": {
        "url": "https://github.com/yuna0x0/hackmd-mcp",
        "source": "github",
        "id": "950658365"
      },
      "version": "1.5.5",
      "icons": [
        {
          "src": "https://hackmd.io/logo.svg",
          "mimeType": "image/svg+xml",
          "sizes": [
            "any"
          ]
        }
      ],
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "hackmd-mcp",
          "version": "1.5.5",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your HackMD API token for API authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "HACKMD_API_TOKEN"
            },
            {
              "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
              "format": "string",
              "default": "https://api.hackmd.io/v1",
              "name": "HACKMD_API_URL"
            }
          ]
        },
        {
          "registryType": "oci",
          "identifier": "ghcr.io/yuna0x0/hackmd-mcp:1.5.5",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your HackMD API token for API authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "HACKMD_API_TOKEN"
            },
            {
              "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
              "format": "string",
              "default": "https://api.hackmd.io/v1",
              "name": "HACKMD_API_URL"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/yuna0x0/hackmd-mcp/releases/download/v1.5.5/hackmd-mcp-1.5.5.mcpb",
          "fileSha256": "9b4cd85660c3a22eb2932c29ebb46f6ca4617dfb3ba20de34c612eeafcd10ec2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your HackMD API token for API authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "HACKMD_API_TOKEN"
            },
            {
              "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
              "format": "string",
              "default": "https://api.hackmd.io/v1",
              "name": "HACKMD_API_URL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-20T10:24:39.262572Z",
        "updatedAt": "2025-10-20T10:24:39.262572Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.thechandanbhagat/cv-forge",
      "description": "Forge powerful, ATS-friendly CVs tailored to any job - an MCP server for intelligent CV generation",
      "title": "CV Forge",
      "repository": {
        "url": "https://github.com/thechandanbhagat/cv-forge",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "cv-forge",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-20T11:44:12.747848Z",
        "updatedAt": "2025-10-20T11:44:12.747848Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.infobip/mcp",
      "description": "Infobip MCP server for omnichannel communication and messaging. SMS, RCS, WhatsApp, Viber and more.",
      "repository": {
        "url": "https://github.com/infobip/mcp",
        "source": "github"
      },
      "version": "2.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.infobip.com/sms",
          "headers": [
            {
              "description": "Infobip API key",
              "value": "App {INFOBIP_API_KEY}",
              "isSecret": true,
              "placeholder": "App xxxxxxxxxxxxxxxx",
              "variables": {
                "INFOBIP_API_KEY": {
                  "description": "Your Infobip API key",
                  "isRequired": true,
                  "isSecret": true
                }
              },
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://mcp.infobip.com/sms/sse",
          "headers": [
            {
              "description": "Infobip API key",
              "isRequired": true,
              "value": "App {INFOBIP_API_KEY}",
              "isSecret": true,
              "placeholder": "App xxxxxxxxxxxxxxxx",
              "variables": {
                "INFOBIP_API_KEY": {
                  "description": "Your Infobip API key",
                  "isRequired": true,
                  "isSecret": true
                }
              },
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.infobip.com/whatsapp",
          "headers": [
            {
              "description": "Infobip API key",
              "value": "App {INFOBIP_API_KEY}",
              "isSecret": true,
              "placeholder": "App xxxxxxxxxxxxxxxx",
              "variables": {
                "INFOBIP_API_KEY": {
                  "description": "Your Infobip API key",
                  "isRequired": true,
                  "isSecret": true
                }
              },
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://mcp.infobip.com/whatsapp/sse",
          "headers": [
            {
              "description": "Infobip API key",
              "isRequired": true,
              "value": "App {INFOBIP_API_KEY}",
              "isSecret": true,
              "placeholder": "App xxxxxxxxxxxxxxxx",
              "variables": {
                "INFOBIP_API_KEY": {
                  "description": "Your Infobip API key",
                  "isRequired": true,
                  "isSecret": true
                }
              },
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.infobip.com/viber",
          "headers": [
            {
              "description": "Infobip API key",
              "value": "App {INFOBIP_API_KEY}",
              "isSecret": true,
              "placeholder": "App xxxxxxxxxxxxxxxx",
              "variables": {
                "INFOBIP_API_KEY": {
                  "description": "Your Infobip API key",
                  "isRequired": true,
                  "isSecret": true
                }
              },
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://mcp.infobip.com/viber/sse",
          "headers": [
            {
              "description": "Infobip API key",
              "isRequired": true,
              "value": "App {INFOBIP_API_KEY}",
              "isSecret": true,
              "placeholder": "App xxxxxxxxxxxxxxxx",
              "variables": {
                "INFOBIP_API_KEY": {
                  "description": "Your Infobip API key",
                  "isRequired": true,
                  "isSecret": true
                }
              },
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.infobip.com/rcs",
          "headers": [
            {
              "description": "Infobip API key",
              "value": "App {INFOBIP_API_KEY}",
              "isSecret": true,
              "placeholder": "App xxxxxxxxxxxxxxxx",
              "variables": {
                "INFOBIP_API_KEY": {
                  "description": "Your Infobip API key",
                  "isRequired": true,
                  "isSecret": true
                }
              },
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://mcp.infobip.com/rcs/sse",
          "headers": [
            {
              "description": "Infobip API key",
              "isRequired": true,
              "value": "App {INFOBIP_API_KEY}",
              "isSecret": true,
              "placeholder": "App xxxxxxxxxxxxxxxx",
              "variables": {
                "INFOBIP_API_KEY": {
                  "description": "Your Infobip API key",
                  "isRequired": true,
                  "isSecret": true
                }
              },
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.infobip.com/2fa",
          "headers": [
            {
              "description": "Infobip API key",
              "value": "App {INFOBIP_API_KEY}",
              "isSecret": true,
              "placeholder": "App xxxxxxxxxxxxxxxx",
              "variables": {
                "INFOBIP_API_KEY": {
                  "description": "Your Infobip API key",
                  "isRequired": true,
                  "isSecret": true
                }
              },
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://mcp.infobip.com/2fa/sse",
          "headers": [
            {
              "description": "Infobip API key",
              "isRequired": true,
              "value": "App {INFOBIP_API_KEY}",
              "isSecret": true,
              "placeholder": "App xxxxxxxxxxxxxxxx",
              "variables": {
                "INFOBIP_API_KEY": {
                  "description": "Your Infobip API key",
                  "isRequired": true,
                  "isSecret": true
                }
              },
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.infobip.com/people",
          "headers": [
            {
              "description": "Infobip API key",
              "value": "App {INFOBIP_API_KEY}",
              "isSecret": true,
              "placeholder": "App xxxxxxxxxxxxxxxx",
              "variables": {
                "INFOBIP_API_KEY": {
                  "description": "Your Infobip API key",
                  "isRequired": true,
                  "isSecret": true
                }
              },
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://mcp.infobip.com/people/sse",
          "headers": [
            {
              "description": "Infobip API key",
              "isRequired": true,
              "value": "App {INFOBIP_API_KEY}",
              "isSecret": true,
              "placeholder": "App xxxxxxxxxxxxxxxx",
              "variables": {
                "INFOBIP_API_KEY": {
                  "description": "Your Infobip API key",
                  "isRequired": true,
                  "isSecret": true
                }
              },
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.infobip.com/account-management",
          "headers": [
            {
              "description": "Infobip API key",
              "value": "App {INFOBIP_API_KEY}",
              "isSecret": true,
              "placeholder": "App xxxxxxxxxxxxxxxx",
              "variables": {
                "INFOBIP_API_KEY": {
                  "description": "Your Infobip API key",
                  "isRequired": true,
                  "isSecret": true
                }
              },
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://mcp.infobip.com/account-management/sse",
          "headers": [
            {
              "description": "Infobip API key",
              "isRequired": true,
              "value": "App {INFOBIP_API_KEY}",
              "isSecret": true,
              "placeholder": "App xxxxxxxxxxxxxxxx",
              "variables": {
                "INFOBIP_API_KEY": {
                  "description": "Your Infobip API key",
                  "isRequired": true,
                  "isSecret": true
                }
              },
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.infobip.com/application-entity",
          "headers": [
            {
              "description": "Infobip API key",
              "value": "App {INFOBIP_API_KEY}",
              "isSecret": true,
              "placeholder": "App xxxxxxxxxxxxxxxx",
              "variables": {
                "INFOBIP_API_KEY": {
                  "description": "Your Infobip API key",
                  "isRequired": true,
                  "isSecret": true
                }
              },
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://mcp.infobip.com/application-entity/sse",
          "headers": [
            {
              "description": "Infobip API key",
              "isRequired": true,
              "value": "App {INFOBIP_API_KEY}",
              "isSecret": true,
              "placeholder": "App xxxxxxxxxxxxxxxx",
              "variables": {
                "INFOBIP_API_KEY": {
                  "description": "Your Infobip API key",
                  "isRequired": true,
                  "isSecret": true
                }
              },
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.infobip.com/search"
        },
        {
          "type": "sse",
          "url": "https://mcp.infobip.com/search/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-20T12:15:45.615833Z",
        "updatedAt": "2025-10-20T12:15:45.615833Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.rnaga/wp-mcp",
      "description": "MCP server for WordPress. Manage posts, users, comments, terms, metadata, and settings.",
      "title": "WordPress MCP Server",
      "repository": {},
      "version": "1.0.3",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@rnaga/wp-mcp",
          "version": "1.0.3",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "WordPress username to assume for capability checks",
              "isRequired": true,
              "name": "LOCAL_USERNAME"
            },
            {
              "description": "WordPress database host",
              "isRequired": true,
              "name": "WP_DB_HOST"
            },
            {
              "description": "WordPress database port",
              "default": "3306",
              "name": "WP_DB_PORT"
            },
            {
              "description": "WordPress database name",
              "isRequired": true,
              "name": "WP_DB_NAME"
            },
            {
              "description": "WordPress database user",
              "isRequired": true,
              "name": "WP_DB_USER"
            },
            {
              "description": "WordPress database password",
              "isRequired": true,
              "isSecret": true,
              "name": "WP_DB_PASSWORD"
            },
            {
              "description": "Enable WordPress multisite mode",
              "default": "false",
              "name": "LOCAL_MULTISITE"
            },
            {
              "description": "Default blog ID for multisite",
              "default": "1",
              "name": "LOCAL_DEFAULT_BLOG_ID"
            },
            {
              "description": "Default site ID for multisite",
              "default": "1",
              "name": "LOCAL_DEFAULT_SITE_ID"
            },
            {
              "description": "Enable SSL for database connection",
              "default": "false",
              "name": "LOCAL_SSL_ENABLED"
            },
            {
              "description": "Path to SSL CA certificate file",
              "name": "LOCAL_SSL_CA_FILEPATH"
            },
            {
              "description": "Path to SSL certificate file",
              "name": "LOCAL_SSL_CERT_FILEPATH"
            },
            {
              "description": "Path to SSL key file",
              "name": "LOCAL_SSL_KEY_FILEPATH"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-20T14:20:04.243053Z",
        "updatedAt": "2025-10-20T14:20:04.243053Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.Apoth3osis-ai/agent-payment-mcp",
      "description": "Secure MCP router providing access to AgentPMT's pay-per-use AI tools marketplace.",
      "repository": {
        "url": "https://github.com/Apoth3osis-ai/agent-payment-mcp",
        "source": "github"
      },
      "version": "1.0.8",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/Apoth3osis-ai/agent-payment-mcp/releases/download/v1.0.8/agent-payment-router-linux-amd64",
          "fileSha256": "1d23c4d6dd4ff951d5364514e4ebf25e23a5e18ac1aa3bf8c3c025c111c19bf0",
          "runtimeHint": "binary",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your AgentPMT API key for authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "x-api-key"
            },
            {
              "description": "Your AgentPMT budget key for spending control",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "x-budget-key"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/Apoth3osis-ai/agent-payment-mcp/releases/download/v1.0.8/agent-payment-router-darwin-amd64",
          "fileSha256": "33777d5ea962ea316baa4ee498894a562240cd668ebe870fa707930a798dc7ab",
          "runtimeHint": "binary",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your AgentPMT API key for authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "x-api-key"
            },
            {
              "description": "Your AgentPMT budget key for spending control",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "x-budget-key"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/Apoth3osis-ai/agent-payment-mcp/releases/download/v1.0.8/agent-payment-router-darwin-arm64",
          "fileSha256": "6808e19c1692da56c5d5319e2bc123d240ebaa0957284c61e483607b511e58f4",
          "runtimeHint": "binary",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your AgentPMT API key for authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "x-api-key"
            },
            {
              "description": "Your AgentPMT budget key for spending control",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "x-budget-key"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/Apoth3osis-ai/agent-payment-mcp/releases/download/v1.0.8/agent-payment-router-windows-amd64.exe",
          "fileSha256": "1c9b01fabb24bfd13f54acdc50fa4cc3e9dc205cf7ecd24c3fe36b672f56c67a",
          "runtimeHint": "binary",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your AgentPMT API key for authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "x-api-key"
            },
            {
              "description": "Your AgentPMT budget key for spending control",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "x-budget-key"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/Apoth3osis-ai/agent-payment-mcp/releases/download/v1.0.8/agent-payment-router-linux-arm64",
          "fileSha256": "ce12ec01f61516b75b6504f06a9c0a52fa32a9cb0927fae47992019b403e5034",
          "runtimeHint": "binary",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your AgentPMT API key for authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "x-api-key"
            },
            {
              "description": "Your AgentPMT budget key for spending control",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "x-budget-key"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-20T14:23:33.491554Z",
        "updatedAt": "2025-10-20T14:23:33.491554Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.xplusplusai/fo-semantic-mcp",
      "description": "Semantic search over 50,000+ Dynamics 365 F&O artifacts: tables, forms, classes, and more.",
      "title": "FO Semantic MCP",
      "repository": {},
      "version": "2.0.3",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "fo-semantic-mcp",
          "version": "2.0.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-20T15:12:53.217728Z",
        "updatedAt": "2025-10-20T15:12:53.217728Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.p1va/symbols",
      "description": "Read, inspect and navigate codebase symbols by connecting to a Language Server",
      "title": "Symbols MCP",
      "repository": {
        "url": "https://github.com/p1va/symbols",
        "source": "github"
      },
      "version": "0.0.17",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@p1va/symbols",
          "version": "0.0.17",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-20T16:49:08.427837Z",
        "updatedAt": "2025-10-20T16:49:08.427837Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.trunk/mcp-server",
      "description": "An MCP server that provides tools for Trunk CI Autopilot to apply fixes to failing tests.",
      "repository": {
        "url": "https://github.com/trunk-io/mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.trunk.io/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-20T21:38:03.992537Z",
        "updatedAt": "2025-10-20T21:38:03.992537Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.niradler/dependency-mcp",
      "description": "MCP server for checking package versions across multiple package managers",
      "repository": {
        "url": "https://github.com/niradler/dependency-mcp",
        "source": "github"
      },
      "version": "0.0.5",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "dependency-mcp",
          "version": "0.0.5",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-20T21:39:25.117876Z",
        "updatedAt": "2025-10-20T21:39:25.117876Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.simplemindedbot/mnemex",
      "description": "Temporal memory for AI with decay and reinforcement. Two-layer storage (JSONL + Markdown).",
      "repository": {
        "url": "https://github.com/simplemindedbot/mnemex",
        "source": "github"
      },
      "version": "0.5.2",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "mnemex",
          "version": "0.5.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Storage path for short-term memory JSONL files",
              "format": "string",
              "default": "~/.config/mnemex/jsonl",
              "name": "MNEMEX_STORAGE_PATH"
            },
            {
              "description": "Path to Obsidian vault for long-term memory",
              "format": "string",
              "name": "LTM_VAULT_PATH"
            },
            {
              "description": "Decay model: power_law (default), exponential, or two_component",
              "format": "string",
              "default": "power_law",
              "name": "MNEMEX_DECAY_MODEL"
            },
            {
              "description": "Half-life in days for power-law decay model",
              "format": "number",
              "default": "3.0",
              "name": "MNEMEX_PL_HALFLIFE_DAYS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-20T22:50:49.953818Z",
        "updatedAt": "2025-10-20T22:50:49.953818Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.rnaga/wp-mcp",
      "description": "MCP server for WordPress. Manage posts, users, comments, terms, metadata, and settings.",
      "title": "WordPress MCP Server",
      "repository": {
        "url": "https://github.com/rnaga/wp-mcp",
        "source": "github"
      },
      "version": "1.0.4",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@rnaga/wp-mcp",
          "version": "1.0.4",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "Automatically confirm npx package installation",
              "type": "named",
              "name": "-y"
            }
          ],
          "packageArguments": [
            {
              "description": "Command to run (local, remote, http, utils)",
              "value": "local",
              "type": "positional"
            },
            {
              "description": "Subcommand to start the local MCP server",
              "value": "start",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "WordPress username to assume for capability checks",
              "isRequired": true,
              "name": "LOCAL_USERNAME"
            },
            {
              "description": "WordPress database host",
              "isRequired": true,
              "name": "WP_DB_HOST"
            },
            {
              "description": "WordPress database port",
              "default": "3306",
              "name": "WP_DB_PORT"
            },
            {
              "description": "WordPress database name",
              "isRequired": true,
              "name": "WP_DB_NAME"
            },
            {
              "description": "WordPress database user",
              "isRequired": true,
              "name": "WP_DB_USER"
            },
            {
              "description": "WordPress database password",
              "isRequired": true,
              "isSecret": true,
              "name": "WP_DB_PASSWORD"
            },
            {
              "description": "Enable WordPress multisite mode",
              "default": "false",
              "name": "LOCAL_MULTISITE"
            },
            {
              "description": "Default blog ID for multisite",
              "default": "1",
              "name": "LOCAL_DEFAULT_BLOG_ID"
            },
            {
              "description": "Default site ID for multisite",
              "default": "1",
              "name": "LOCAL_DEFAULT_SITE_ID"
            },
            {
              "description": "Enable SSL for database connection",
              "default": "false",
              "name": "LOCAL_SSL_ENABLED"
            },
            {
              "description": "Path to SSL CA certificate file",
              "name": "LOCAL_SSL_CA_FILEPATH"
            },
            {
              "description": "Path to SSL certificate file",
              "name": "LOCAL_SSL_CERT_FILEPATH"
            },
            {
              "description": "Path to SSL key file",
              "name": "LOCAL_SSL_KEY_FILEPATH"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-21T00:13:20.720044Z",
        "updatedAt": "2025-10-21T00:13:20.720044Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.5.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.5.3",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.5.3",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-21T03:20:23.40321Z",
        "updatedAt": "2025-10-21T03:20:23.40321Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.5.4",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.5.4",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.5.4",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-21T05:01:08.413651Z",
        "updatedAt": "2025-10-21T05:01:08.413651Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.xplusplusai/fo-semantic-mcp",
      "description": "Semantic search over 50,000+ Dynamics 365 F&O artifacts: tables, forms, classes, and more.",
      "title": "FO Semantic MCP",
      "repository": {},
      "version": "2.0.7",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "fo-semantic-mcp",
          "version": "2.0.7",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-21T05:36:06.84871Z",
        "updatedAt": "2025-10-21T05:36:06.84871Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.xplusplusai/fo-semantic-mcp",
      "description": "Semantic search over 50,000+ Dynamics 365 F&O artifacts: tables, forms, classes, and more.",
      "title": "FO Semantic MCP",
      "repository": {},
      "version": "2.0.8",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "fo-semantic-mcp",
          "version": "2.0.8",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-21T06:10:48.210915Z",
        "updatedAt": "2025-10-21T06:10:48.210915Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.p1va/symbols",
      "description": "Read, inspect and navigate codebase symbols by connecting to a Language Server",
      "title": "Symbols MCP",
      "repository": {
        "url": "https://github.com/p1va/symbols",
        "source": "github"
      },
      "version": "0.0.18",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@p1va/symbols",
          "version": "0.0.18",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-21T11:53:38.250781Z",
        "updatedAt": "2025-10-21T11:53:38.250781Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.codescene/codescene-mcp-server",
      "description": "An MCP server that provides CodeScene Code Health analysis tools.",
      "repository": {
        "url": "https://github.com/codescene-oss/codescene-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/codescene/codescene-mcp:latest",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "CodeScene Access Token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CS_ACCESS_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-21T12:30:16.003976Z",
        "updatedAt": "2025-10-21T12:30:16.003976Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.predictleads/mcp",
      "description": "Company Insights: job postings, tech stack, news events, key customers, similar companies...",
      "title": "PredictLeads",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.predictleads.com/",
          "headers": [
            {
              "description": "API key for authentication",
              "isRequired": true,
              "isSecret": true,
              "name": "X-Api-Key"
            },
            {
              "description": "API token for authentication",
              "isRequired": true,
              "isSecret": true,
              "name": "X-Api-Token"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-21T12:42:58.519645Z",
        "updatedAt": "2025-10-21T12:42:58.519645Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.configcat/mcp-server",
      "description": "Enables AI agents to interact with ConfigCat, a feature flag service for teams.",
      "repository": {
        "url": "https://github.com/configcat/mcp-server",
        "source": "github"
      },
      "version": "0.1.3",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@configcat/mcp-server",
          "version": "0.1.3",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "ConfigCat Management API basic authentication username.",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CONFIGCAT_API_USER"
            },
            {
              "description": "ConfigCat Management API basic authentication password.",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CONFIGCAT_API_PASS"
            },
            {
              "description": "Base URL for the ConfigCat API. Defaults to `https://api.configcat.com`.",
              "format": "string",
              "name": "CONFIGCAT_BASE_URL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-21T13:01:53.585129Z",
        "updatedAt": "2025-10-21T13:01:53.585129Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.eat-pray-ai/yutu",
      "description": "A fully functional MCP server and CLI for YouTube",
      "title": "yutu",
      "repository": {
        "url": "https://github.com/eat-pray-ai/yutu",
        "source": "github",
        "id": "643163403"
      },
      "version": "v0.10.4-dev1",
      "icons": [
        {
          "src": "https://raw.githubusercontent.com/eat-pray-ai/yutu/main/assets/yutu-ico.svg",
          "mimeType": "image/svg+xml",
          "sizes": [
            "any"
          ]
        }
      ],
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/eat-pray-ai/yutu:v0.10.4-dev1",
          "runtimeHint": "docker",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:8216/mcp"
          },
          "runtimeArguments": [
            {
              "description": "Username or UID in docker (format: <name|uid>[:<group|gid>])",
              "value": "{user}:{group}",
              "variables": {
                "group": {
                  "description": "The current user's primary group, output of `id -g`"
                },
                "user": {
                  "description": "The current user, output of `id -u`"
                }
              },
              "type": "named",
              "name": "--user"
            },
            {
              "description": "Host directory containing YUTU credentials and token",
              "value": "type=bind,source={hostPath},target=/app",
              "variables": {
                "hostPath": {
                  "description": "The directory containing `youtube.token.json` and `youtube.token.json`"
                }
              },
              "type": "named",
              "name": "--mount"
            },
            {
              "description": "Publish MCP server port",
              "isRequired": true,
              "value": "8216:8216",
              "type": "named",
              "name": "-p"
            }
          ],
          "packageArguments": [
            {
              "value": "mcp",
              "type": "positional"
            },
            {
              "value": "http",
              "type": "named",
              "name": "--mode"
            }
          ],
          "environmentVariables": [
            {
              "description": "GCP project credential for yutu, base64 encoded JSON or path to JSON file",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YUTU_CREDENTIAL"
            },
            {
              "description": "YouTube authentication token, base64 encoded JSON or path to JSON file",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YUTU_CACHE_TOKEN"
            },
            {
              "description": "Log level",
              "format": "string",
              "default": "INFO",
              "choices": [
                "DEBUG",
                "INFO",
                "WARNING",
                "ERROR"
              ],
              "name": "YUTU_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-21T15:24:52.146201Z",
        "updatedAt": "2025-10-21T15:24:52.146201Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.gitkraken/gk-cli",
      "description": "The GitKraken MCP Server for managing repos, PRs, issues across GitHub, GitLab, Bitbucket and more.",
      "repository": {
        "url": "https://github.com/gitkraken/gk-cli",
        "source": "github"
      },
      "version": "3.1.43",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@gitkraken/gk",
          "version": "3.1.43",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "mcp",
              "type": "positional"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-21T15:39:27.879229Z",
        "updatedAt": "2025-10-21T15:39:27.879229Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.jonathanhefner/hello-mcp-registry",
      "description": "A simple MCP server.",
      "repository": {
        "url": "https://github.com/jonathanhefner/hello-mcp-registry",
        "source": "github"
      },
      "version": "0.1.1",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@jonathanhefner/hello-mcp-registry",
          "version": "0.1.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-21T16:42:43.411081Z",
        "updatedAt": "2025-10-21T16:42:43.411081Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.gitkraken/gk-cli",
      "description": "The GitKraken MCP Server for managing repos, PRs, issues across GitHub, GitLab, Bitbucket and more.",
      "repository": {
        "url": "https://github.com/gitkraken/gk-cli",
        "source": "github"
      },
      "version": "3.1.45",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@gitkraken/gk",
          "version": "3.1.45",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "mcp",
              "type": "positional"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-21T18:27:55.098714Z",
        "updatedAt": "2025-10-21T18:27:55.098714Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.atlassian/atlassian-mcp-server",
      "description": "Enables secure, permission-aware access to Atlassian Cloud products.",
      "title": "Atlassian Rovo MCP Server",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.atlassian.com/v1/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-22T01:37:12.669264Z",
        "updatedAt": "2025-10-22T01:37:12.669264Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.cashfree/cashfree-mcp",
      "description": "Cashfree MCP server for cashfree docs and APIs",
      "repository": {
        "url": "https://github.com/cashfree/cashfree-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cashfreepayments/cashfree-mcp",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Payment Gateway App Id",
              "format": "string",
              "isSecret": true,
              "name": "PAYMENTS_APP_ID"
            },
            {
              "description": "Payment Gateway App Secret",
              "format": "string",
              "isSecret": true,
              "name": "PAYMENTS_APP_SECRET"
            },
            {
              "description": "Payouts App Id",
              "format": "string",
              "isSecret": true,
              "name": "PAYOUTS_APP_ID"
            },
            {
              "description": "Payouts App Secret",
              "format": "string",
              "isSecret": true,
              "name": "PAYOUTS_APP_SECRET"
            },
            {
              "description": "Path to the PEM file containing the public key for verifying 2FA signatures",
              "format": "string",
              "name": "TWO_FA_PUBLIC_KEY_PEM_PATH"
            },
            {
              "description": "SecureId App Id",
              "format": "string",
              "isSecret": true,
              "name": "SECUREID_APP_ID"
            },
            {
              "description": "SecureId App Secret",
              "format": "string",
              "isSecret": true,
              "name": "SECUREID_APP_SECRET"
            },
            {
              "description": "Tools (Comma-separated list of modules to enable. Available options: pg, payouts, secureid)",
              "isRequired": true,
              "format": "string",
              "name": "TOOLS"
            },
            {
              "description": "Environment (production/sandbox default: sandbox)",
              "isRequired": true,
              "format": "string",
              "name": "ENV"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-22T04:58:24.004184Z",
        "updatedAt": "2025-10-22T04:58:24.004184Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.vercel/next-devtools-mcp",
      "description": "Next.js development tools MCP server with stdio transport",
      "repository": {
        "url": "https://github.com/vercel/next-devtools-mcp",
        "source": "github"
      },
      "version": "0.2.1",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "next-devtools-mcp",
          "version": "0.2.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-22T05:01:59.559737Z",
        "updatedAt": "2025-10-22T05:01:59.559737Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.AlvaroRamirezCastillo/greeting-mcp-server",
      "description": "An MCP server greeting",
      "repository": {
        "url": "https://github.com/AlvaroRamirezCastillo/greeting-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@jinba-ittai/greeting-mcp-server",
          "version": "1.0.7",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-22T05:02:15.662287Z",
        "updatedAt": "2025-10-22T05:02:15.662287Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.AlvaroRamirezCastillo/greeting-mcp-server",
      "description": "An MCP server greeting",
      "repository": {
        "url": "https://github.com/AlvaroRamirezCastillo/greeting-mcp-server",
        "source": "github"
      },
      "version": "1.0.8",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@jinba-ittai/greeting-mcp-server",
          "version": "1.0.8",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-22T05:23:02.269737Z",
        "updatedAt": "2025-10-22T05:23:02.269737Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.aribadernatal/sideways",
      "description": "Unexpected questions and lateral thinking prompts to break through mental blocks. 86 strategies.",
      "title": "Sideways",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://sideways.aribadernatal.com/mcp"
        },
        {
          "type": "sse",
          "url": "https://sideways.aribadernatal.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-22T06:51:20.015804Z",
        "updatedAt": "2025-10-22T06:51:20.015804Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aahl/mcp-aktools",
      "description": "MCP Server for stock and crypto",
      "title": "AkTools MCP Server",
      "repository": {},
      "version": "0.1.2",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "mcp-aktools",
          "version": "0.1.2",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aahl/mcp-aktools:latest",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-22T08:48:21.800891Z",
        "updatedAt": "2025-10-22T08:48:21.800891Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.vinur1992/testing_repo",
      "description": "An MCP server that created for demo",
      "repository": {
        "url": "https://github.com/vinur1992/testing_repo",
        "source": "github"
      },
      "version": "1.0.0"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-22T09:27:46.000897Z",
        "updatedAt": "2025-10-22T09:27:46.000897Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aahl/mcp-aktools",
      "description": "MCP Server for stock and crypto",
      "title": "AkTools MCP Server",
      "repository": {
        "url": "https://github.com/aahl/mcp-aktools",
        "source": "github"
      },
      "version": "0.1.3",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "mcp-aktools",
          "version": "0.1.3",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aahl/mcp-aktools:latest",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-22T10:29:05.431141Z",
        "updatedAt": "2025-10-22T10:29:05.431141Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "co.huggingface/hf-mcp-server",
      "description": "Connect to Hugging Face Hub and thousands of Gradio AI Applications",
      "title": "Hugging Face",
      "repository": {},
      "version": "0.2.33",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://huggingface.co/mcp?login"
        },
        {
          "type": "streamable-http",
          "url": "https://huggingface.co/mcp",
          "headers": [
            {
              "description": "Hugging Face API token for authentication",
              "isSecret": true,
              "placeholder": "Bearer hf_xxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://huggingface.co/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-22T10:55:52.98995Z",
        "updatedAt": "2025-10-22T10:55:52.98995Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.ChromeDevTools/chrome-devtools-mcp",
      "description": "MCP server for Chrome DevTools",
      "repository": {
        "url": "https://github.com/ChromeDevTools/chrome-devtools-mcp",
        "source": "github"
      },
      "version": "0.9.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "chrome-devtools-mcp",
          "version": "0.9.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-22T11:49:06.571748Z",
        "updatedAt": "2025-10-22T11:49:06.571748Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.kontent-ai/mcp-server",
      "description": "Connect to Kontent.ai to manage content, types, taxonomies, and workflows via natural language",
      "repository": {
        "url": "https://github.com/kontent-ai/mcp-server",
        "source": "github"
      },
      "version": "0.21.9",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@kontent-ai/mcp-server",
          "version": "0.21.9",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Kontent.ai Management API key",
              "isRequired": true,
              "isSecret": true,
              "name": "KONTENT_API_KEY"
            },
            {
              "description": "Kontent.ai environment ID",
              "isRequired": true,
              "name": "KONTENT_ENVIRONMENT_ID"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@kontent-ai/mcp-server",
          "version": "0.21.9",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3001/mcp"
          },
          "packageArguments": [
            {
              "value": "shttp",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Kontent.ai Management API key",
              "isRequired": true,
              "isSecret": true,
              "name": "KONTENT_API_KEY"
            },
            {
              "description": "Kontent.ai environment ID",
              "isRequired": true,
              "name": "KONTENT_ENVIRONMENT_ID"
            },
            {
              "description": "Server port for HTTP transport (shttp mode only)",
              "name": "PORT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-22T12:31:10.957827Z",
        "updatedAt": "2025-10-22T12:31:10.957827Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.dexpaprika/dexpaprika",
      "description": "Real-time DEX data, liquidity pools, token prices, and trading volumes across blockchain networks.",
      "title": "DexPaprika",
      "repository": {},
      "version": "1.1.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.dexpaprika.com/streamable-http"
        },
        {
          "type": "sse",
          "url": "https://mcp.dexpaprika.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-22T12:32:11.39855Z",
        "updatedAt": "2025-10-22T12:32:11.39855Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.github/github-mcp-server",
      "description": "Connect AI assistants to GitHub - manage repos, issues, PRs, and workflows through natural language.",
      "repository": {
        "url": "https://github.com/github/github-mcp-server",
        "source": "github"
      },
      "version": "0.19.1-test",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/github/github-mcp-server:0.19.1-test",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "GITHUB_PERSONAL_ACCESS_TOKEN",
              "type": "positional",
              "valueHint": "env_var_name"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/github/github-mcp-server",
              "type": "positional",
              "valueHint": "image_name"
            }
          ],
          "environmentVariables": [
            {
              "description": "Your GitHub personal access token with appropriate scopes.",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "GITHUB_PERSONAL_ACCESS_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-22T13:15:36.753831Z",
        "updatedAt": "2025-10-22T13:15:36.753831Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.github/github-mcp-server",
      "description": "Connect AI assistants to GitHub - manage repos, issues, PRs, and workflows through natural language.",
      "repository": {
        "url": "https://github.com/github/github-mcp-server",
        "source": "github"
      },
      "version": "0.19.1",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/github/github-mcp-server:0.19.1",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "GITHUB_PERSONAL_ACCESS_TOKEN",
              "type": "positional",
              "valueHint": "env_var_name"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/github/github-mcp-server",
              "type": "positional",
              "valueHint": "image_name"
            }
          ],
          "environmentVariables": [
            {
              "description": "Your GitHub personal access token with appropriate scopes.",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "GITHUB_PERSONAL_ACCESS_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-22T13:21:55.500708Z",
        "updatedAt": "2025-10-22T13:21:55.500708Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "dev.svelte/mcp",
      "description": "The official Svelte MCP server providing docs and autofixing tools for Svelte development",
      "repository": {
        "url": "https://github.com/sveltejs/mcp",
        "source": "github",
        "id": "1054419133",
        "subfolder": "packages/mcp-stdio"
      },
      "version": "0.1.9",
      "websiteUrl": "https://svelte.dev/docs/mcp/overview",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@sveltejs/mcp",
          "version": "0.1.9",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.svelte.dev/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-22T15:24:45.50308Z",
        "updatedAt": "2025-10-22T15:24:45.50308Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.picaos/mcp",
      "description": "A Model Context Protocol Server for Pica",
      "repository": {
        "url": "https://github.com/picahq/mcp",
        "source": "github"
      },
      "version": "2.0.3",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@picahq/mcp",
          "version": "2.0.3",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "PICA_SECRET"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-22T16:32:02.849272Z",
        "updatedAt": "2025-10-22T16:32:02.849272Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.Apoth3osis-ai/agent-payment-mcp",
      "description": "Secure MCP router providing access to AgentPMT's pay-per-use AI tools marketplace.",
      "repository": {
        "url": "https://github.com/Apoth3osis-ai/agent-payment-mcp",
        "source": "github"
      },
      "version": "1.0.9",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/Apoth3osis-ai/agent-payment-mcp/releases/download/v1.0.9/agent-payment-router-linux-amd64",
          "fileSha256": "4860de38d4a71c3719dbe131c896af11962c8ed35fb7d51ab214aa738aeac55c",
          "runtimeHint": "binary",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your AgentPMT API key for authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "x-api-key"
            },
            {
              "description": "Your AgentPMT budget key for spending control",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "x-budget-key"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/Apoth3osis-ai/agent-payment-mcp/releases/download/v1.0.9/agent-payment-router-darwin-amd64",
          "fileSha256": "4536e4ec0ef0899762fc5a50f44082f0456999a3f1e0c414004cea95fb6b9654",
          "runtimeHint": "binary",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your AgentPMT API key for authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "x-api-key"
            },
            {
              "description": "Your AgentPMT budget key for spending control",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "x-budget-key"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/Apoth3osis-ai/agent-payment-mcp/releases/download/v1.0.9/agent-payment-router-darwin-arm64",
          "fileSha256": "6b0623c43716eeac028d7441e757e7f6d3e5d78f25f27eba5ac94ce577781496",
          "runtimeHint": "binary",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your AgentPMT API key for authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "x-api-key"
            },
            {
              "description": "Your AgentPMT budget key for spending control",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "x-budget-key"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/Apoth3osis-ai/agent-payment-mcp/releases/download/v1.0.9/agent-payment-router-windows-amd64.exe",
          "fileSha256": "5a117b688dfd03e323ed3cb9f207ac19e52ea531b4c97383444674377dbae5d0",
          "runtimeHint": "binary",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your AgentPMT API key for authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "x-api-key"
            },
            {
              "description": "Your AgentPMT budget key for spending control",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "x-budget-key"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/Apoth3osis-ai/agent-payment-mcp/releases/download/v1.0.9/agent-payment-router-linux-arm64",
          "fileSha256": "56cdb0d58879ba744fe89e554df5dae4232c222183d2be28fab3138f252fbd9e",
          "runtimeHint": "binary",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your AgentPMT API key for authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "x-api-key"
            },
            {
              "description": "Your AgentPMT budget key for spending control",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "x-budget-key"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-22T17:23:24.013782Z",
        "updatedAt": "2025-10-22T17:23:24.013782Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.madhavi-opsera/bug-detector",
      "description": "Analyzes code for bugs, security vulnerabilities, and code smells",
      "title": "Bug Detector",
      "repository": {
        "url": "https://github.com/madhavi-opsera/bug-detector",
        "source": "github",
        "id": "madhavi-opsera/bug-detector"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/madhavi-opsera/bug-detector:1.0.0",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "value": "run",
              "type": "positional",
              "valueHint": "docker_command"
            },
            {
              "type": "named",
              "name": "--rm"
            },
            {
              "type": "named",
              "name": "-i"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-22T21:14:37.903337Z",
        "updatedAt": "2025-10-22T21:14:37.903337Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.upstash/context7",
      "description": "Up-to-date code docs for any prompt",
      "title": "Context7",
      "repository": {
        "url": "https://github.com/upstash/context7",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@upstash/context7-mcp",
          "version": "1.0.25",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "API key for authentication",
              "format": "string",
              "isSecret": true,
              "name": "CONTEXT7_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-22T21:31:44.631573Z",
        "updatedAt": "2025-10-22T21:31:44.631573Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.Apoth3osis-ai/agent-payment-mcp",
      "description": "Secure MCP router providing access to AgentPMT's pay-per-use AI tools marketplace.",
      "repository": {
        "url": "https://github.com/Apoth3osis-ai/agent-payment-mcp",
        "source": "github"
      },
      "version": "1.1.0",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/Apoth3osis-ai/agent-payment-mcp/releases/download/v1.1.0/agent-payment-router-linux-amd64",
          "fileSha256": "c3890c729a39ccde84d4ee59909caf1c69c58a20c0516342dbcea4ddc9147d1c",
          "runtimeHint": "binary",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your AgentPMT API key for authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "x-api-key"
            },
            {
              "description": "Your AgentPMT budget key for spending control",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "x-budget-key"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/Apoth3osis-ai/agent-payment-mcp/releases/download/v1.1.0/agent-payment-router-darwin-amd64",
          "fileSha256": "840ef61c0532fcbf34cc9abdb6797cf1ee411e37783d26eb666bc9a20cebe89d",
          "runtimeHint": "binary",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your AgentPMT API key for authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "x-api-key"
            },
            {
              "description": "Your AgentPMT budget key for spending control",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "x-budget-key"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/Apoth3osis-ai/agent-payment-mcp/releases/download/v1.1.0/agent-payment-router-darwin-arm64",
          "fileSha256": "6b6ff95bc57ea81e4287d006da29ab5386205c17f961cfbfefa6757cd5bbb0c1",
          "runtimeHint": "binary",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your AgentPMT API key for authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "x-api-key"
            },
            {
              "description": "Your AgentPMT budget key for spending control",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "x-budget-key"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/Apoth3osis-ai/agent-payment-mcp/releases/download/v1.1.0/agent-payment-router-windows-amd64.exe",
          "fileSha256": "c92d00ae7a42a8c40f036b239cc8d4c23e65203abe31809fdd791d93b7483575",
          "runtimeHint": "binary",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your AgentPMT API key for authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "x-api-key"
            },
            {
              "description": "Your AgentPMT budget key for spending control",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "x-budget-key"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/Apoth3osis-ai/agent-payment-mcp/releases/download/v1.1.0/agent-payment-router-linux-arm64",
          "fileSha256": "c6d89f423da80151faf83e5ca3fd253a0c0771d85ef7075c81d47251e6bba6d3",
          "runtimeHint": "binary",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your AgentPMT API key for authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "x-api-key"
            },
            {
              "description": "Your AgentPMT budget key for spending control",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "x-budget-key"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-22T23:35:22.309115Z",
        "updatedAt": "2025-10-22T23:35:22.309115Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.gjeltep/app-store-connect-mcp",
      "description": "Interact with Apple's App Store Connect API",
      "repository": {
        "url": "https://github.com/gjeltep/app-store-connect-mcp",
        "source": "github"
      },
      "version": "0.2.1",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "app-store-connect-mcp",
          "version": "0.2.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "App Store Connect API Key ID",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "APP_STORE_KEY_ID"
            },
            {
              "description": "App Store Connect Issuer ID",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "APP_STORE_ISSUER_ID"
            },
            {
              "description": "Path to the .p8 private key file for App Store Connect authentication",
              "isRequired": true,
              "format": "string",
              "name": "APP_STORE_PRIVATE_KEY_PATH"
            },
            {
              "description": "Default App ID for operations (optional)",
              "format": "string",
              "name": "APP_STORE_APP_ID"
            },
            {
              "description": "Key type: 'team' or 'individual' (defaults to 'team')",
              "format": "string",
              "name": "APP_STORE_KEY_TYPE"
            },
            {
              "description": "Comma-separated list of OAuth scopes (optional)",
              "format": "string",
              "name": "APP_STORE_SCOPE"
            },
            {
              "description": "Subject for individual keys (optional)",
              "format": "string",
              "name": "APP_STORE_SUBJECT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-23T00:29:46.200611Z",
        "updatedAt": "2025-10-23T00:29:46.200611Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.zzstoatzz/tangled-mcp",
      "description": "MCP server for Tangled git platform. Manage repositories, branches, and issues on tangled.org.",
      "title": "Tangled MCP",
      "repository": {},
      "version": "0.0.14",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "tangled-mcp",
          "version": "0.0.14",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-23T00:48:29.780257Z",
        "updatedAt": "2025-10-23T00:48:29.780257Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.kubeshop/testkube-mcp",
      "description": "MCP server for Testkube - Manage test workflows, executions, and artifacts via AI assistants",
      "repository": {
        "url": "https://github.com/kubeshop/testkube",
        "source": "github"
      },
      "version": "1.0.0",
      "icons": [
        {
          "src": "https://avatars.githubusercontent.com/u/82541796?v=4",
          "mimeType": "image/png",
          "sizes": [
            "any"
          ]
        }
      ],
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/testkube/mcp-server:test",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Testkube access token for authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "TK_ACCESS_TOKEN"
            },
            {
              "description": "Testkube organization ID",
              "isRequired": true,
              "format": "string",
              "name": "TK_ORG_ID"
            },
            {
              "description": "Testkube environment ID",
              "isRequired": true,
              "format": "string",
              "name": "TK_ENV_ID"
            },
            {
              "description": "Testkube Control Plane URL (default: https://api.testkube.io)",
              "format": "string",
              "name": "TK_CONTROL_PLANE_URL"
            },
            {
              "description": "Testkube Dashboard URL",
              "format": "string",
              "name": "TK_DASHBOARD_URL"
            },
            {
              "description": "Enable debug mode (default: false)",
              "format": "string",
              "name": "TK_DEBUG"
            },
            {
              "description": "MCP transport type: stdio or shttp (default: stdio)",
              "format": "string",
              "name": "TK_MCP_TRANSPORT"
            },
            {
              "description": "SHTTP host when using shttp transport",
              "format": "string",
              "name": "TK_MCP_SHTTP_HOST"
            },
            {
              "description": "SHTTP port when using shttp transport",
              "format": "string",
              "name": "TK_MCP_SHTTP_PORT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-23T01:37:19.06212Z",
        "updatedAt": "2025-10-23T01:37:19.06212Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.kubeshop/testkube-mcp",
      "description": "MCP server for Testkube - Manage test workflows, executions, and artifacts via AI assistants",
      "repository": {
        "url": "https://github.com/kubeshop/testkube",
        "source": "github"
      },
      "version": "1.0.1",
      "icons": [
        {
          "src": "https://avatars.githubusercontent.com/u/82541796?v=4",
          "mimeType": "image/png",
          "sizes": [
            "any"
          ]
        }
      ],
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/kubeshop/mcp-server:test",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Testkube access token for authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "TK_ACCESS_TOKEN"
            },
            {
              "description": "Testkube organization ID",
              "isRequired": true,
              "format": "string",
              "name": "TK_ORG_ID"
            },
            {
              "description": "Testkube environment ID",
              "isRequired": true,
              "format": "string",
              "name": "TK_ENV_ID"
            },
            {
              "description": "Testkube Control Plane URL (default: https://api.testkube.io)",
              "format": "string",
              "name": "TK_CONTROL_PLANE_URL"
            },
            {
              "description": "Testkube Dashboard URL",
              "format": "string",
              "name": "TK_DASHBOARD_URL"
            },
            {
              "description": "Enable debug mode (default: false)",
              "format": "string",
              "name": "TK_DEBUG"
            },
            {
              "description": "MCP transport type: stdio or shttp (default: stdio)",
              "format": "string",
              "name": "TK_MCP_TRANSPORT"
            },
            {
              "description": "SHTTP host when using shttp transport",
              "format": "string",
              "name": "TK_MCP_SHTTP_HOST"
            },
            {
              "description": "SHTTP port when using shttp transport",
              "format": "string",
              "name": "TK_MCP_SHTTP_PORT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-23T02:19:25.415809Z",
        "updatedAt": "2025-10-23T02:19:25.415809Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.jkawamoto/mcp-florence2",
      "description": "An MCP server for processing images using Florence-2",
      "repository": {
        "url": "https://github.com/jkawamoto/mcp-florence2",
        "source": "github"
      },
      "version": "0.3.4",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/jkawamoto/mcp-florence2/releases/download/v0.3.4/mcp-florence2.mcpb",
          "version": "0.3.4",
          "fileSha256": "23e1c7788144dc55e5e4795d71362c35627792b34f917faf3e7b81e08512f4e5",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-23T03:06:46.950005Z",
        "updatedAt": "2025-10-23T03:06:46.950005Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json#/definitions/ServerDetail",
      "name": "com.smartbear/smartbear-mcp",
      "description": "MCP server for AI access to SmartBear tools, including BugSnag, Reflect, API Hub, PactFlow.",
      "title": "SmartBear MCP",
      "repository": {
        "url": "https://github.com/SmartBear/smartbear-mcp",
        "source": "github"
      },
      "version": "0.9.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@smartbear/mcp",
          "version": "0.9.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "BugSnag auth token. Leave empty to disable BugSnag tools. Learn more: https://developer.smartbear.com/smartbear-mcp/docs/bugsnag-integration",
              "isSecret": true,
              "name": "BUGSNAG_AUTH_TOKEN"
            },
            {
              "description": "BugSnag project API key (optional; narrows interactions to a single project). Learn more: https://developer.smartbear.com/smartbear-mcp/docs/bugsnag-integration",
              "name": "BUGSNAG_PROJECT_API_KEY"
            },
            {
              "description": "Reflect API token. Leave empty to disable Reflect tools. Learn more: https://developer.smartbear.com/smartbear-mcp/docs/test-hub-integration",
              "isSecret": true,
              "name": "REFLECT_API_TOKEN"
            },
            {
              "description": "API Hub API key. Leave empty to disable API Hub tools. Learn more: https://developer.smartbear.com/smartbear-mcp/docs/api-hub-integration",
              "isSecret": true,
              "name": "API_HUB_API_KEY"
            },
            {
              "description": "PactFlow/Pact Broker base URL. Leave empty to disable Pact tools. Learn more: https://developer.smartbear.com/smartbear-mcp/docs/contract-testing-with-pactflow",
              "name": "PACT_BROKER_BASE_URL"
            },
            {
              "description": "PactFlow authentication token. Learn more: https://developer.smartbear.com/smartbear-mcp/docs/contract-testing-with-pactflow",
              "isSecret": true,
              "name": "PACT_BROKER_TOKEN"
            },
            {
              "description": "Pact Broker username (alternative to token). Learn more: https://developer.smartbear.com/smartbear-mcp/docs/contract-testing-with-pactflow",
              "name": "PACT_BROKER_USERNAME"
            },
            {
              "description": "Pact Broker password (alternative to token). Learn more: https://developer.smartbear.com/smartbear-mcp/docs/contract-testing-with-pactflow",
              "isSecret": true,
              "name": "PACT_BROKER_PASSWORD"
            },
            {
              "description": "The Zephyr Cloud API token for authentication. Learn more: https://support.smartbear.com/zephyr/docs/en/rest-api/api-access-tokens-management.html",
              "isSecret": true,
              "name": "ZEPHYR_API_TOKEN"
            },
            {
              "description": " The Zephyr Cloud API base url. Should be changed depending on the region of your Jira instance. Learn more: https://support.smartbear.com/zephyr-scale-cloud/api-docs/#section/Authentication/Accessing-the-API",
              "name": "ZEPHYR_BASE_URL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-23T09:02:53.292595Z",
        "updatedAt": "2025-10-23T09:02:53.292595Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aahl/mcp-aktools",
      "description": "MCP Server for stock and crypto",
      "title": "AkTools MCP Server",
      "repository": {
        "url": "https://github.com/aahl/mcp-aktools",
        "source": "github"
      },
      "version": "0.1.4",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "mcp-aktools",
          "version": "0.1.4",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aahl/mcp-aktools:latest",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-23T10:59:20.972551Z",
        "updatedAt": "2025-10-23T10:59:20.972551Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "directory.brick/mcp",
      "description": "Provides data for LEGO sets, minifigures, parts and elements. Not affiliated with LEGO® Group.",
      "title": "Brick Directory",
      "repository": {},
      "version": "2025.10.23.1321",
      "websiteUrl": "https://brick.directory",
      "icons": [
        {
          "src": "https://brick.directory/assets/logo.svg",
          "mimeType": "image/svg+xml"
        },
        {
          "src": "https://brick.directory/assets/logo-1024-transparent.png",
          "mimeType": "image/png",
          "sizes": [
            "1024x1024"
          ]
        },
        {
          "src": "https://brick.directory/assets/logo-512-transparent.png",
          "mimeType": "image/png",
          "sizes": [
            "512x512"
          ]
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.brick.directory/connect"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-23T13:21:29.97224Z",
        "updatedAt": "2025-10-23T13:21:29.97224Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.monday/monday.com",
      "description": "MCP server for monday.com integration.",
      "repository": {
        "url": "https://github.com/mondaycom/mcp",
        "source": "github"
      },
      "version": "0.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.monday.com/mcp",
          "headers": [
            {
              "description": "monday.com API token (format: 'Bearer your_token_here' or just 'your_token_here')",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://mcp.monday.com/sse",
          "headers": [
            {
              "description": "monday.com API token (format: 'Bearer your_token_here' or just 'your_token_here')",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-23T14:57:35.277178Z",
        "updatedAt": "2025-10-23T14:57:35.277178Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.brave/brave-search-mcp-server",
      "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.58",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brave/brave-search-mcp-server",
          "version": "2.0.58",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for the service",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BRAVE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-23T16:30:49.649573Z",
        "updatedAt": "2025-10-23T16:30:49.649573Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.Pranavj17/mcp-server-graylog",
      "description": "Search Graylog logs by timestamps, filter by streams, and debug production issues.",
      "repository": {},
      "version": "1.0.1"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-23T17:46:28.468102Z",
        "updatedAt": "2025-10-23T17:46:28.468102Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.Pranavj17/mcp-server-graylog",
      "description": "Search Graylog logs by timestamps, filter by streams, and debug production issues.",
      "repository": {},
      "version": "1.0.2"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-23T18:25:27.499311Z",
        "updatedAt": "2025-10-23T18:25:27.499311Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.streamlinehq/mcp",
      "description": "The Streamline MCP Server allow users to search, and download assets in PNG or SVG formats.",
      "title": "Streamline MCP Server",
      "repository": {
        "url": "https://github.com/webalys-hq/streamline-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://public-api.streamlinehq.com/mcp",
          "headers": [
            {
              "description": "API key for authentication",
              "isRequired": true,
              "isSecret": true,
              "name": "X-API-Key"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-23T19:42:49.484962Z",
        "updatedAt": "2025-10-23T19:42:49.484962Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.ProfessionalWiki/mediawiki-mcp-server",
      "description": "MCP server enabling AI clients to interact with any MediaWiki wiki through standard tools",
      "title": "MediaWiki MCP Server",
      "repository": {},
      "version": "0.2.1",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@professional-wiki/mediawiki-mcp-server",
          "version": "0.2.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-23T20:58:43.788191Z",
        "updatedAt": "2025-10-23T20:58:43.788191Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.hashicorp/terraform-mcp-server",
      "description": "Generate more accurate Terraform and automate workflows for HCP Terraform and Terraform Enterprise",
      "title": "Terraform",
      "repository": {
        "url": "https://github.com/hashicorp/terraform-mcp-server",
        "source": "github"
      },
      "version": "0.3.2",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/hashicorp/terraform-mcp-server:0.3.2",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "type": "named",
              "name": "--rm"
            },
            {
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e",
              "isRepeated": true
            },
            {
              "description": "Environment variable name",
              "value": "TFE_ADDRESS",
              "type": "positional",
              "valueHint": "env_var_name"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e",
              "isRepeated": true
            },
            {
              "description": "Environment variable name",
              "value": "TFE_TOKEN",
              "type": "positional",
              "valueHint": "env_var_name"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e",
              "isRepeated": true
            },
            {
              "description": "Environment variable name",
              "value": "ENABLE_TF_OPERATIONS",
              "type": "positional",
              "valueHint": "env_var_name"
            },
            {
              "description": "The container image to run",
              "value": "hashicorp/terraform-mcp-server:0.3.2",
              "type": "positional",
              "valueHint": "image_name"
            }
          ],
          "environmentVariables": [
            {
              "description": "HCP Terraform or Terraform Enterprise base URL.",
              "default": "https://app.terraform.io",
              "name": "TFE_ADDRESS"
            },
            {
              "description": "HCP Terraform or Terraform Enterprise API token used to authenticate requests.",
              "isSecret": true,
              "name": "TFE_TOKEN"
            },
            {
              "description": "Set to true to enable tools that execute Terraform operations requiring explicit approval.",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "ENABLE_TF_OPERATIONS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-24T05:01:45.035537Z",
        "updatedAt": "2025-10-24T05:01:45.035537Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "dev.svelte/mcp",
      "description": "The official Svelte MCP server providing docs and autofixing tools for Svelte development",
      "repository": {
        "url": "https://github.com/sveltejs/mcp",
        "source": "github",
        "id": "1054419133",
        "subfolder": "packages/mcp-stdio"
      },
      "version": "0.1.10",
      "websiteUrl": "https://svelte.dev/docs/mcp/overview",
      "icons": [
        {
          "src": "https://mcp.svelte.dev/logo.svg",
          "mimeType": "image/svg+xml"
        },
        {
          "src": "https://mcp.svelte.dev/logo.png",
          "mimeType": "image/png"
        }
      ],
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@sveltejs/mcp",
          "version": "0.1.10",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.svelte.dev/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-24T08:43:04.312406Z",
        "updatedAt": "2025-10-24T08:43:04.312406Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aahl/mcp-aktools",
      "description": "MCP Server for stock and crypto",
      "title": "AkTools MCP Server",
      "repository": {
        "url": "https://github.com/aahl/mcp-aktools",
        "source": "github"
      },
      "version": "0.1.5",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "mcp-aktools",
          "version": "0.1.5",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aahl/mcp-aktools:latest",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-24T08:44:54.065942Z",
        "updatedAt": "2025-10-24T08:44:54.065942Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.sharksalesinfo-blip/portfolio",
      "description": "Marketing strateeg portfolio met AI kennisbank voor marketing, sales en strategie inzichten.",
      "title": "SharkSales Portfolio & Kennisbank",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://sharksalesinfo-blip.github.io/mcp-server"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-24T09:20:18.252154Z",
        "updatedAt": "2025-10-24T09:20:18.252154Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.qualityclouds/mcp-server-qualityclouds",
      "description": "Secure MCP runtime server for scanning and autofixing code issues",
      "title": "LiveCheck AI",
      "repository": {
        "url": "https://github.com/qualityclouds/qc_mcp_server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.qualityclouds.com/mcp",
          "headers": [
            {
              "description": "API key for authentication",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://mcp.qualityclouds.com/mcp",
          "headers": [
            {
              "description": "API key for authentication",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-24T10:30:33.368142Z",
        "updatedAt": "2025-10-24T10:30:33.368142Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.mongodb-js/mongodb-mcp-server",
      "description": "MongoDB Model Context Protocol Server",
      "repository": {
        "url": "https://github.com/mongodb-js/mongodb-mcp-server",
        "source": "github"
      },
      "version": "1.2.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "mongodb-mcp-server",
          "version": "1.2.0",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "description": "Atlas API client ID for authentication. Required for running Atlas tools.",
              "type": "named",
              "name": "--apiClientId"
            },
            {
              "description": "Atlas API client secret for authentication. Required for running Atlas tools.",
              "type": "named",
              "name": "--apiClientSecret"
            },
            {
              "description": "Time in milliseconds that temporary database users created when connecting to MongoDB Atlas clusters will remain active before being automatically deleted.",
              "type": "named",
              "name": "--atlasTemporaryDatabaseUserLifetimeMs"
            },
            {
              "description": "An array of tool names that require user confirmation before execution. Requires the client to support elicitation.",
              "type": "named",
              "name": "--confirmationRequiredTools"
            },
            {
              "description": "MongoDB connection string for direct database connections. Optional, if not set, you'll need to call the connect tool before interacting with MongoDB data.",
              "type": "named",
              "name": "--connectionString"
            },
            {
              "description": "When set to true, disables validation of embeddings dimensions.",
              "format": "boolean",
              "type": "named",
              "name": "--disableEmbeddingsValidation"
            },
            {
              "description": "An array of tool names, operation types, and/or categories of tools that will be disabled.",
              "type": "named",
              "name": "--disabledTools"
            },
            {
              "description": "Time in milliseconds between export cleanup cycles that remove expired export files.",
              "type": "named",
              "name": "--exportCleanupIntervalMs"
            },
            {
              "description": "Time in milliseconds after which an export is considered expired and eligible for cleanup.",
              "type": "named",
              "name": "--exportTimeoutMs"
            },
            {
              "description": "Folder to store exported data files.",
              "type": "named",
              "name": "--exportsPath"
            },
            {
              "description": "Host address to bind the HTTP server to (only used when transport is 'http').",
              "type": "named",
              "name": "--httpHost"
            },
            {
              "description": "Port number for the HTTP server (only used when transport is 'http').",
              "type": "named",
              "name": "--httpPort"
            },
            {
              "description": "Idle timeout for a client to disconnect (only applies to http transport).",
              "type": "named",
              "name": "--idleTimeoutMs"
            },
            {
              "description": "When set to true, enforces that query operations must use an index, rejecting queries that perform a collection scan.",
              "format": "boolean",
              "type": "named",
              "name": "--indexCheck"
            },
            {
              "description": "Folder to store logs.",
              "type": "named",
              "name": "--logPath"
            },
            {
              "description": "Comma separated values, possible values are 'mcp', 'disk' and 'stderr'.",
              "type": "named",
              "name": "--loggers"
            },
            {
              "description": "The maximum size in bytes for results from a find or aggregate tool call. This serves as an upper bound for the responseBytesLimit parameter in those tools.",
              "format": "number",
              "type": "named",
              "name": "--maxBytesPerQuery"
            },
            {
              "description": "The maximum number of documents that can be returned by a find or aggregate tool call. For the find tool, the effective limit will be the smaller of this value and the tool's limit parameter.",
              "format": "number",
              "type": "named",
              "name": "--maxDocumentsPerQuery"
            },
            {
              "description": "Notification timeout for a client to be aware of disconnect (only applies to http transport).",
              "type": "named",
              "name": "--notificationTimeoutMs"
            },
            {
              "description": "When set to true, only allows read, connect, and metadata operation types, disabling create/update/delete operations.",
              "format": "boolean",
              "type": "named",
              "name": "--readOnly"
            },
            {
              "description": "When set to disabled, disables telemetry collection.",
              "type": "named",
              "name": "--telemetry"
            },
            {
              "description": "Either 'stdio' or 'http'.",
              "type": "named",
              "name": "--transport"
            },
            {
              "description": "API key for Voyage AI embeddings service (required for vector search operations with text-to-embedding conversion).",
              "type": "named",
              "name": "--voyageApiKey"
            }
          ],
          "environmentVariables": [
            {
              "description": "Atlas API client ID for authentication. Required for running Atlas tools.",
              "format": "string",
              "isSecret": true,
              "name": "MDB_MCP_API_CLIENT_ID"
            },
            {
              "description": "Atlas API client secret for authentication. Required for running Atlas tools.",
              "format": "string",
              "isSecret": true,
              "name": "MDB_MCP_API_CLIENT_SECRET"
            },
            {
              "description": "Time in milliseconds that temporary database users created when connecting to MongoDB Atlas clusters will remain active before being automatically deleted.",
              "format": "string",
              "name": "MDB_MCP_ATLAS_TEMPORARY_DATABASE_USER_LIFETIME_MS"
            },
            {
              "description": "An array of tool names that require user confirmation before execution. Requires the client to support elicitation.",
              "format": "string",
              "name": "MDB_MCP_CONFIRMATION_REQUIRED_TOOLS"
            },
            {
              "description": "MongoDB connection string for direct database connections. Optional, if not set, you'll need to call the connect tool before interacting with MongoDB data.",
              "format": "string",
              "isSecret": true,
              "name": "MDB_MCP_CONNECTION_STRING"
            },
            {
              "description": "When set to true, disables validation of embeddings dimensions.",
              "format": "boolean",
              "name": "MDB_MCP_DISABLE_EMBEDDINGS_VALIDATION"
            },
            {
              "description": "An array of tool names, operation types, and/or categories of tools that will be disabled.",
              "format": "string",
              "name": "MDB_MCP_DISABLED_TOOLS"
            },
            {
              "description": "Time in milliseconds between export cleanup cycles that remove expired export files.",
              "format": "string",
              "name": "MDB_MCP_EXPORT_CLEANUP_INTERVAL_MS"
            },
            {
              "description": "Time in milliseconds after which an export is considered expired and eligible for cleanup.",
              "format": "string",
              "name": "MDB_MCP_EXPORT_TIMEOUT_MS"
            },
            {
              "description": "Folder to store exported data files.",
              "format": "string",
              "name": "MDB_MCP_EXPORTS_PATH"
            },
            {
              "description": "Host address to bind the HTTP server to (only used when transport is 'http').",
              "format": "string",
              "name": "MDB_MCP_HTTP_HOST"
            },
            {
              "description": "Port number for the HTTP server (only used when transport is 'http').",
              "format": "string",
              "name": "MDB_MCP_HTTP_PORT"
            },
            {
              "description": "Idle timeout for a client to disconnect (only applies to http transport).",
              "format": "string",
              "name": "MDB_MCP_IDLE_TIMEOUT_MS"
            },
            {
              "description": "When set to true, enforces that query operations must use an index, rejecting queries that perform a collection scan.",
              "format": "boolean",
              "name": "MDB_MCP_INDEX_CHECK"
            },
            {
              "description": "Folder to store logs.",
              "format": "string",
              "name": "MDB_MCP_LOG_PATH"
            },
            {
              "description": "Comma separated values, possible values are 'mcp', 'disk' and 'stderr'.",
              "format": "string",
              "name": "MDB_MCP_LOGGERS"
            },
            {
              "description": "The maximum size in bytes for results from a find or aggregate tool call. This serves as an upper bound for the responseBytesLimit parameter in those tools.",
              "format": "number",
              "name": "MDB_MCP_MAX_BYTES_PER_QUERY"
            },
            {
              "description": "The maximum number of documents that can be returned by a find or aggregate tool call. For the find tool, the effective limit will be the smaller of this value and the tool's limit parameter.",
              "format": "number",
              "name": "MDB_MCP_MAX_DOCUMENTS_PER_QUERY"
            },
            {
              "description": "Notification timeout for a client to be aware of disconnect (only applies to http transport).",
              "format": "string",
              "name": "MDB_MCP_NOTIFICATION_TIMEOUT_MS"
            },
            {
              "description": "When set to true, only allows read, connect, and metadata operation types, disabling create/update/delete operations.",
              "format": "boolean",
              "name": "MDB_MCP_READ_ONLY"
            },
            {
              "description": "When set to disabled, disables telemetry collection.",
              "format": "string",
              "name": "MDB_MCP_TELEMETRY"
            },
            {
              "description": "Either 'stdio' or 'http'.",
              "format": "string",
              "name": "MDB_MCP_TRANSPORT"
            },
            {
              "description": "API key for Voyage AI embeddings service (required for vector search operations with text-to-embedding conversion).",
              "format": "string",
              "isSecret": true,
              "name": "MDB_MCP_VOYAGE_API_KEY"
            }
          ]
        },
        {
          "registryType": "oci",
          "identifier": "docker.io/mongodb/mongodb-mcp-server:1.2.0",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "description": "Atlas API client ID for authentication. Required for running Atlas tools.",
              "type": "named",
              "name": "--apiClientId"
            },
            {
              "description": "Atlas API client secret for authentication. Required for running Atlas tools.",
              "type": "named",
              "name": "--apiClientSecret"
            },
            {
              "description": "Time in milliseconds that temporary database users created when connecting to MongoDB Atlas clusters will remain active before being automatically deleted.",
              "type": "named",
              "name": "--atlasTemporaryDatabaseUserLifetimeMs"
            },
            {
              "description": "An array of tool names that require user confirmation before execution. Requires the client to support elicitation.",
              "type": "named",
              "name": "--confirmationRequiredTools"
            },
            {
              "description": "MongoDB connection string for direct database connections. Optional, if not set, you'll need to call the connect tool before interacting with MongoDB data.",
              "type": "named",
              "name": "--connectionString"
            },
            {
              "description": "When set to true, disables validation of embeddings dimensions.",
              "format": "boolean",
              "type": "named",
              "name": "--disableEmbeddingsValidation"
            },
            {
              "description": "An array of tool names, operation types, and/or categories of tools that will be disabled.",
              "type": "named",
              "name": "--disabledTools"
            },
            {
              "description": "Time in milliseconds between export cleanup cycles that remove expired export files.",
              "type": "named",
              "name": "--exportCleanupIntervalMs"
            },
            {
              "description": "Time in milliseconds after which an export is considered expired and eligible for cleanup.",
              "type": "named",
              "name": "--exportTimeoutMs"
            },
            {
              "description": "Folder to store exported data files.",
              "type": "named",
              "name": "--exportsPath"
            },
            {
              "description": "Host address to bind the HTTP server to (only used when transport is 'http').",
              "type": "named",
              "name": "--httpHost"
            },
            {
              "description": "Port number for the HTTP server (only used when transport is 'http').",
              "type": "named",
              "name": "--httpPort"
            },
            {
              "description": "Idle timeout for a client to disconnect (only applies to http transport).",
              "type": "named",
              "name": "--idleTimeoutMs"
            },
            {
              "description": "When set to true, enforces that query operations must use an index, rejecting queries that perform a collection scan.",
              "format": "boolean",
              "type": "named",
              "name": "--indexCheck"
            },
            {
              "description": "Folder to store logs.",
              "type": "named",
              "name": "--logPath"
            },
            {
              "description": "Comma separated values, possible values are 'mcp', 'disk' and 'stderr'.",
              "type": "named",
              "name": "--loggers"
            },
            {
              "description": "The maximum size in bytes for results from a find or aggregate tool call. This serves as an upper bound for the responseBytesLimit parameter in those tools.",
              "format": "number",
              "type": "named",
              "name": "--maxBytesPerQuery"
            },
            {
              "description": "The maximum number of documents that can be returned by a find or aggregate tool call. For the find tool, the effective limit will be the smaller of this value and the tool's limit parameter.",
              "format": "number",
              "type": "named",
              "name": "--maxDocumentsPerQuery"
            },
            {
              "description": "Notification timeout for a client to be aware of disconnect (only applies to http transport).",
              "type": "named",
              "name": "--notificationTimeoutMs"
            },
            {
              "description": "When set to true, only allows read, connect, and metadata operation types, disabling create/update/delete operations.",
              "format": "boolean",
              "type": "named",
              "name": "--readOnly"
            },
            {
              "description": "When set to disabled, disables telemetry collection.",
              "type": "named",
              "name": "--telemetry"
            },
            {
              "description": "Either 'stdio' or 'http'.",
              "type": "named",
              "name": "--transport"
            },
            {
              "description": "API key for Voyage AI embeddings service (required for vector search operations with text-to-embedding conversion).",
              "type": "named",
              "name": "--voyageApiKey"
            }
          ],
          "environmentVariables": [
            {
              "description": "Atlas API client ID for authentication. Required for running Atlas tools.",
              "format": "string",
              "isSecret": true,
              "name": "MDB_MCP_API_CLIENT_ID"
            },
            {
              "description": "Atlas API client secret for authentication. Required for running Atlas tools.",
              "format": "string",
              "isSecret": true,
              "name": "MDB_MCP_API_CLIENT_SECRET"
            },
            {
              "description": "Time in milliseconds that temporary database users created when connecting to MongoDB Atlas clusters will remain active before being automatically deleted.",
              "format": "string",
              "name": "MDB_MCP_ATLAS_TEMPORARY_DATABASE_USER_LIFETIME_MS"
            },
            {
              "description": "An array of tool names that require user confirmation before execution. Requires the client to support elicitation.",
              "format": "string",
              "name": "MDB_MCP_CONFIRMATION_REQUIRED_TOOLS"
            },
            {
              "description": "MongoDB connection string for direct database connections. Optional, if not set, you'll need to call the connect tool before interacting with MongoDB data.",
              "format": "string",
              "isSecret": true,
              "name": "MDB_MCP_CONNECTION_STRING"
            },
            {
              "description": "When set to true, disables validation of embeddings dimensions.",
              "format": "boolean",
              "name": "MDB_MCP_DISABLE_EMBEDDINGS_VALIDATION"
            },
            {
              "description": "An array of tool names, operation types, and/or categories of tools that will be disabled.",
              "format": "string",
              "name": "MDB_MCP_DISABLED_TOOLS"
            },
            {
              "description": "Time in milliseconds between export cleanup cycles that remove expired export files.",
              "format": "string",
              "name": "MDB_MCP_EXPORT_CLEANUP_INTERVAL_MS"
            },
            {
              "description": "Time in milliseconds after which an export is considered expired and eligible for cleanup.",
              "format": "string",
              "name": "MDB_MCP_EXPORT_TIMEOUT_MS"
            },
            {
              "description": "Folder to store exported data files.",
              "format": "string",
              "name": "MDB_MCP_EXPORTS_PATH"
            },
            {
              "description": "Host address to bind the HTTP server to (only used when transport is 'http').",
              "format": "string",
              "name": "MDB_MCP_HTTP_HOST"
            },
            {
              "description": "Port number for the HTTP server (only used when transport is 'http').",
              "format": "string",
              "name": "MDB_MCP_HTTP_PORT"
            },
            {
              "description": "Idle timeout for a client to disconnect (only applies to http transport).",
              "format": "string",
              "name": "MDB_MCP_IDLE_TIMEOUT_MS"
            },
            {
              "description": "When set to true, enforces that query operations must use an index, rejecting queries that perform a collection scan.",
              "format": "boolean",
              "name": "MDB_MCP_INDEX_CHECK"
            },
            {
              "description": "Folder to store logs.",
              "format": "string",
              "name": "MDB_MCP_LOG_PATH"
            },
            {
              "description": "Comma separated values, possible values are 'mcp', 'disk' and 'stderr'.",
              "format": "string",
              "name": "MDB_MCP_LOGGERS"
            },
            {
              "description": "The maximum size in bytes for results from a find or aggregate tool call. This serves as an upper bound for the responseBytesLimit parameter in those tools.",
              "format": "number",
              "name": "MDB_MCP_MAX_BYTES_PER_QUERY"
            },
            {
              "description": "The maximum number of documents that can be returned by a find or aggregate tool call. For the find tool, the effective limit will be the smaller of this value and the tool's limit parameter.",
              "format": "number",
              "name": "MDB_MCP_MAX_DOCUMENTS_PER_QUERY"
            },
            {
              "description": "Notification timeout for a client to be aware of disconnect (only applies to http transport).",
              "format": "string",
              "name": "MDB_MCP_NOTIFICATION_TIMEOUT_MS"
            },
            {
              "description": "When set to true, only allows read, connect, and metadata operation types, disabling create/update/delete operations.",
              "format": "boolean",
              "name": "MDB_MCP_READ_ONLY"
            },
            {
              "description": "When set to disabled, disables telemetry collection.",
              "format": "string",
              "name": "MDB_MCP_TELEMETRY"
            },
            {
              "description": "Either 'stdio' or 'http'.",
              "format": "string",
              "name": "MDB_MCP_TRANSPORT"
            },
            {
              "description": "API key for Voyage AI embeddings service (required for vector search operations with text-to-embedding conversion).",
              "format": "string",
              "isSecret": true,
              "name": "MDB_MCP_VOYAGE_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-24T10:32:48.053911Z",
        "updatedAt": "2025-10-24T10:32:48.053911Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.teamwork/mcp",
      "description": "The Teamwork.com official MCP server helps teams efficiently manage client projects with AI.",
      "repository": {
        "url": "https://github.com/teamwork/mcp",
        "source": "github"
      },
      "version": "1.6.7",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/teamwork/mcp:v1.6.7",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "TW_MCP_BEARER_TOKEN"
            },
            {
              "description": "Choose log output format between 'text' or 'json'. Default is 'text'.",
              "format": "string",
              "name": "TW_MCP_LOG_FORMAT"
            },
            {
              "description": "Choose log level between 'debug', 'info', 'warn' or 'error'. Default is 'info'.",
              "format": "string",
              "name": "TW_MCP_LOG_LEVEL"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-24T10:51:50.627707Z",
        "updatedAt": "2025-10-24T10:51:50.627707Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.qualityclouds/mcp-server-qualityclouds",
      "description": "Secure MCP runtime server for scanning and autofixing code issues",
      "title": "LiveCheck AI",
      "repository": {
        "url": "https://github.com/qualityclouds/qc_mcp_server",
        "source": "github"
      },
      "version": "1.0.1º",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://qualityclouds.com/mcp",
          "headers": [
            {
              "description": "API key for authentication",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://qualityclouds.com/mcp",
          "headers": [
            {
              "description": "API key for authentication",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-24T11:01:41.18621Z",
        "updatedAt": "2025-10-24T11:01:41.18621Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.wonderwhy-er/desktop-commander",
      "description": "MCP server for terminal commands, file operations, and process management",
      "title": "Desktop Commander",
      "repository": {
        "url": "https://github.com/wonderwhy-er/DesktopCommanderMCP",
        "source": "github"
      },
      "version": "0.2.19",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@wonderwhy-er/desktop-commander",
          "version": "0.2.19",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-24T12:13:10.633681Z",
        "updatedAt": "2025-10-24T12:13:10.633681Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.files/python-mcp",
      "description": "Securely give LLMs controlled access to real-world operations inside your Files.com environment",
      "repository": {
        "url": "https://github.com/Files-com/files-mcp",
        "source": "github"
      },
      "version": "1.0.40",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "files-com-mcp",
          "version": "1.0.40",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Files.com API Key. Create at <your-site>.files.com/ui/apiKeys.",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "FILES_COM_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-24T12:42:02.065355Z",
        "updatedAt": "2025-10-24T12:42:02.065355Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.gattjoe/ACMS",
      "description": "Apple Container MCP Server (ACMS) provides access to Apple's container CLI tool on macOS",
      "repository": {
        "url": "https://github.com/gattjoe/ACMS",
        "source": "github"
      },
      "version": "0.0.3",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "ACMS",
          "version": "0.0.3",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:8765/mcp"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-24T14:03:45.710535Z",
        "updatedAt": "2025-10-24T14:03:45.710535Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.eat-pray-ai/yutu",
      "description": "A fully functional MCP server and CLI for YouTube",
      "title": "yutu",
      "repository": {
        "url": "https://github.com/eat-pray-ai/yutu",
        "source": "github",
        "id": "643163403"
      },
      "version": "v0.10.4-dev2",
      "icons": [
        {
          "src": "https://raw.githubusercontent.com/eat-pray-ai/yutu/main/assets/yutu-ico.svg",
          "mimeType": "image/svg+xml",
          "sizes": [
            "any"
          ]
        }
      ],
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/eat-pray-ai/yutu:v0.10.4-dev2",
          "runtimeHint": "docker",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:8216/mcp"
          },
          "runtimeArguments": [
            {
              "description": "UID and GID in the container to match host user",
              "value": "{user}:{group}",
              "variables": {
                "group": {
                  "description": "The current user's primary group, output of `id -g`"
                },
                "user": {
                  "description": "The current user, output of `id -u`"
                }
              },
              "type": "named",
              "name": "--user"
            },
            {
              "description": "Mount host directory containing credentials and token",
              "value": "type=bind,source={hostPath},target=/app",
              "variables": {
                "hostPath": {
                  "description": "The directory containing `client_secret.json` and `youtube.token.json`"
                }
              },
              "type": "named",
              "name": "--mount"
            },
            {
              "description": "Publish MCP server port",
              "isRequired": true,
              "value": "8216:8216",
              "type": "named",
              "name": "-p"
            }
          ],
          "packageArguments": [
            {
              "value": "mcp",
              "type": "positional"
            },
            {
              "value": "http",
              "type": "named",
              "name": "--mode"
            }
          ],
          "environmentVariables": [
            {
              "description": "GCP project credential for yutu, base64 encoded JSON or path to JSON file",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YUTU_CREDENTIAL"
            },
            {
              "description": "YouTube authentication token, base64 encoded JSON or path to JSON file",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "YUTU_CACHE_TOKEN"
            },
            {
              "description": "Log level",
              "format": "string",
              "default": "INFO",
              "choices": [
                "DEBUG",
                "INFO",
                "WARNING",
                "ERROR"
              ],
              "name": "YUTU_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-24T16:04:41.256746Z",
        "updatedAt": "2025-10-24T16:04:41.256746Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "co.thisdot.docusign-navigator/mcp",
      "description": "Secure Docusign Navigator integration for AI assistants to access and analyze agreement data.",
      "repository": {
        "url": "https://github.com/thisdot/docusign-navigator-mcp",
        "source": "github"
      },
      "version": "1.0.2",
      "websiteUrl": "https://docusign-navigator.thisdot.co",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://docusign-navigator.thisdot.co/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-24T16:26:39.380072Z",
        "updatedAt": "2025-10-24T16:26:39.380072Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "co.thisdot.docusign-navigator/mcp",
      "description": "Secure Docusign Navigator integration for AI assistants to access and analyze agreement data.",
      "repository": {
        "url": "https://github.com/thisdot/docusign-navigator-mcp",
        "source": "github"
      },
      "version": "1.0.3",
      "websiteUrl": "https://docusign-navigator.thisdot.co",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://docusign-navigator.thisdot.co/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-24T17:17:01.342559Z",
        "updatedAt": "2025-10-24T17:17:01.342559Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.teamwork/mcp",
      "description": "The Teamwork.com official MCP server helps teams efficiently manage client projects with AI.",
      "repository": {
        "url": "https://github.com/teamwork/mcp",
        "source": "github"
      },
      "version": "1.6.8",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/teamwork/mcp:v1.6.8",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "TW_MCP_BEARER_TOKEN"
            },
            {
              "description": "Choose log output format between 'text' or 'json'. Default is 'text'.",
              "format": "string",
              "name": "TW_MCP_LOG_FORMAT"
            },
            {
              "description": "Choose log level between 'debug', 'info', 'warn' or 'error'. Default is 'info'.",
              "format": "string",
              "name": "TW_MCP_LOG_LEVEL"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-24T17:23:59.80231Z",
        "updatedAt": "2025-10-24T17:23:59.80231Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "co.thisdot.docusign-navigator/mcp",
      "description": "Secure Docusign Navigator integration for AI assistants to access and analyze agreement data.",
      "repository": {
        "url": "https://github.com/thisdot/docusign-navigator-mcp",
        "source": "github"
      },
      "version": "1.2.0",
      "websiteUrl": "https://docusign-navigator.thisdot.co",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://docusign-navigator.thisdot.co/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-24T18:56:55.468815Z",
        "updatedAt": "2025-10-24T18:56:55.468815Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "co.thisdot.docusign-navigator/mcp",
      "description": "Secure Docusign Navigator integration for AI assistants to access and analyze agreement data.",
      "repository": {
        "url": "https://github.com/thisdot/docusign-navigator-mcp",
        "source": "github"
      },
      "version": "1.2.1",
      "websiteUrl": "https://docusign-navigator.thisdot.co",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://docusign-navigator.thisdot.co/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-24T19:02:09.947846Z",
        "updatedAt": "2025-10-24T19:02:09.947846Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "co.thisdot.docusign-navigator/mcp",
      "description": "Secure Docusign Navigator integration for AI assistants to access and analyze agreement data.",
      "repository": {
        "url": "https://github.com/thisdot/docusign-navigator-mcp",
        "source": "github"
      },
      "version": "1.2.2",
      "websiteUrl": "https://docusign-navigator.thisdot.co",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://docusign-navigator.thisdot.co/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-24T19:29:43.069098Z",
        "updatedAt": "2025-10-24T19:29:43.069098Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.tjhop/prometheus-mcp-server",
      "description": "An API-complete MCP server to manage Prometheus-compatible backends via comprehensive tools.",
      "repository": {
        "url": "https://github.com/tjhop/prometheus-mcp-server",
        "source": "github"
      },
      "version": "0.9.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/tjhop/prometheus-mcp-server:0.9.0",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "PROMETHEUS_MCP_SERVER_PROMETHEUS_URL",
              "type": "positional",
              "valueHint": "env_var_name"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/tjhop/prometheus-mcp-server",
              "type": "positional",
              "valueHint": "image_name"
            }
          ],
          "environmentVariables": [
            {
              "description": "URL of the Prometheus instance to connect to (default: \"http://127.0.0.1:9090\")",
              "isRequired": true,
              "format": "string",
              "name": "PROMETHEUS_MCP_SERVER_PROMETHEUS_URL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-24T21:10:24.101786Z",
        "updatedAt": "2025-10-24T21:10:24.101786Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.cyanheads/git-mcp-server",
      "description": "Comprehensive Git MCP server enabling native git tools including clone, commit, worktree, & more.",
      "repository": {
        "url": "https://github.com/cyanheads/git-mcp-server",
        "source": "github"
      },
      "version": "2.5.5",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.5.5",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Optional absolute path to restrict all git operations to a specific directory tree. Provides security sandboxing for multi-tenant or shared environments.",
              "format": "string",
              "name": "GIT_BASE_DIR"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.5.5",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3015/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3015",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Optional absolute path to restrict all git operations to a specific directory tree. Provides security sandboxing for multi-tenant or shared environments.",
              "format": "string",
              "name": "GIT_BASE_DIR"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-25T00:32:05.142067Z",
        "updatedAt": "2025-10-25T00:32:05.142067Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.cyanheads/git-mcp-server",
      "description": "Comprehensive Git MCP server enabling native git tools including clone, commit, worktree, & more.",
      "repository": {
        "url": "https://github.com/cyanheads/git-mcp-server",
        "source": "github"
      },
      "version": "2.5.6",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.5.6",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Optional absolute path to restrict all git operations to a specific directory tree. Provides security sandboxing for multi-tenant or shared environments.",
              "format": "string",
              "name": "GIT_BASE_DIR"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.5.6",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3015/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3015",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Optional absolute path to restrict all git operations to a specific directory tree. Provides security sandboxing for multi-tenant or shared environments.",
              "format": "string",
              "name": "GIT_BASE_DIR"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-25T00:44:26.754736Z",
        "updatedAt": "2025-10-25T00:44:26.754736Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.cyanheads/git-mcp-server",
      "description": "Comprehensive Git MCP server enabling native git tools including clone, commit, worktree, & more.",
      "repository": {
        "url": "https://github.com/cyanheads/git-mcp-server",
        "source": "github"
      },
      "version": "2.5.7",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.5.7",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Optional absolute path to restrict all git operations to a specific directory tree. Provides security sandboxing for multi-tenant or shared environments.",
              "format": "string",
              "name": "GIT_BASE_DIR"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.5.7",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3015/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3015",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Optional absolute path to restrict all git operations to a specific directory tree. Provides security sandboxing for multi-tenant or shared environments.",
              "format": "string",
              "name": "GIT_BASE_DIR"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-25T01:16:34.098631Z",
        "updatedAt": "2025-10-25T01:16:34.098631Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.benhuang21828/pdfkit",
      "description": "AI-powered PDF tools: fill forms, merge, extract data, and split PDFs",
      "title": "PDF Kit",
      "repository": {},
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "pdfkit-mcp",
          "version": "1.0.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-25T01:19:07.257293Z",
        "updatedAt": "2025-10-25T01:19:07.257293Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.benhuang21828/pdfkit",
      "description": "AI-powered PDF tools: fill forms, merge, extract data, and split PDFs",
      "title": "PDF Kit",
      "repository": {},
      "version": "1.0.2",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "pdfkit-mcp",
          "version": "1.0.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-25T01:41:56.111014Z",
        "updatedAt": "2025-10-25T01:41:56.111014Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.hellobasestation/pdfkit",
      "description": "AI-powered PDF tools: fill forms, merge, extract data, and split PDFs",
      "title": "PDF Kit",
      "repository": {},
      "version": "1.0.3",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "pdfkit-mcp",
          "version": "1.0.3",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.hellobasestation.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-25T02:26:04.673056Z",
        "updatedAt": "2025-10-25T02:26:04.673056Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.JustinBeckwith/linkinator-mcp",
      "description": "MCP server for link checking using linkinator",
      "repository": {
        "url": "https://github.com/JustinBeckwith/linkinator-mcp",
        "source": "github"
      },
      "version": "0.2.1",
      "icons": [
        {
          "src": "https://raw.githubusercontent.com/JustinBeckwith/linkinator-mcp/main/site/linkinator-mcp.webp",
          "mimeType": "image/webp",
          "sizes": [
            "any"
          ]
        }
      ],
      "packages": [
        {
          "registryType": "npm",
          "identifier": "linkinator-mcp",
          "version": "0.2.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-25T02:41:35.647944Z",
        "updatedAt": "2025-10-25T02:41:35.647944Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.jztan/redmine-mcp-server",
      "description": "Production-ready MCP server for Redmine with security, pagination, and enterprise features",
      "repository": {
        "url": "https://github.com/jztan/redmine-mcp-server",
        "source": "github"
      },
      "version": "0.6.0",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "redmine-mcp-server",
          "version": "0.6.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "URL of your Redmine server (e.g., https://your-redmine-server.com)",
              "isRequired": true,
              "format": "string",
              "name": "REDMINE_URL"
            },
            {
              "description": "Redmine username for authentication (alternative to API key)",
              "format": "string",
              "name": "REDMINE_USERNAME"
            },
            {
              "description": "Redmine password for authentication (alternative to API key)",
              "format": "string",
              "isSecret": true,
              "name": "REDMINE_PASSWORD"
            },
            {
              "description": "Redmine API key for authentication (alternative to username/password)",
              "format": "string",
              "isSecret": true,
              "name": "REDMINE_API_KEY"
            },
            {
              "description": "Host address for the MCP server (default: 0.0.0.0)",
              "format": "string",
              "default": "0.0.0.0",
              "name": "SERVER_HOST"
            },
            {
              "description": "Port for the MCP server (default: 8000)",
              "format": "number",
              "default": "8000",
              "name": "SERVER_PORT"
            },
            {
              "description": "Public hostname for file download URLs (default: localhost)",
              "format": "string",
              "default": "localhost",
              "name": "PUBLIC_HOST"
            },
            {
              "description": "Public port for file download URLs (default: 8000)",
              "format": "number",
              "default": "8000",
              "name": "PUBLIC_PORT"
            },
            {
              "description": "Directory for storing downloaded attachments (default: ./attachments)",
              "format": "string",
              "default": "./attachments",
              "name": "ATTACHMENTS_DIR"
            },
            {
              "description": "Enable automatic cleanup of expired files (default: true)",
              "format": "boolean",
              "default": "true",
              "name": "AUTO_CLEANUP_ENABLED"
            },
            {
              "description": "Interval between cleanup runs in minutes (default: 10)",
              "format": "number",
              "default": "10",
              "name": "CLEANUP_INTERVAL_MINUTES"
            },
            {
              "description": "Default expiry time for attachments in minutes (default: 60)",
              "format": "number",
              "default": "60",
              "name": "ATTACHMENT_EXPIRES_MINUTES"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-25T04:36:04.299156Z",
        "updatedAt": "2025-10-25T04:36:04.299156Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.kevinkells/datagraph",
      "description": "Urban data for civic problem-solving: NYC subway, loneliness programs, violence prevention.",
      "title": "DataGraph",
      "repository": {},
      "version": "1.1.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "datagraph-city-mcp-server",
          "version": "1.1.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-25T04:43:03.802472Z",
        "updatedAt": "2025-10-25T04:43:03.802472Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.hellobasestation/pdfkit",
      "description": "AI-powered PDF tools: fill forms, merge, extract data, and split PDFs",
      "title": "PDF Kit",
      "repository": {},
      "version": "1.0.4",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "pdfkit-mcp",
          "version": "1.0.4",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.hellobasestation.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-25T04:49:13.281628Z",
        "updatedAt": "2025-10-25T04:49:13.281628Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.team-earth/datagraph",
      "description": "Urban data for civic problem-solving: NYC subway, loneliness programs, violence prevention.",
      "title": "DataGraph",
      "repository": {},
      "version": "1.1.6",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "datagraph-city-mcp-server",
          "version": "1.1.6",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-25T05:47:47.503794Z",
        "updatedAt": "2025-10-25T05:47:47.503794Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aahl/mcp-notify",
      "description": "MCP Server for notify",
      "title": "Notify MCP Server",
      "repository": {
        "url": "https://github.com/aahl/mcp-notify",
        "source": "github"
      },
      "version": "0.1.1",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "mcp-notify",
          "version": "0.1.1",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aahl/mcp-notify:main",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-25T06:49:53.931626Z",
        "updatedAt": "2025-10-25T06:49:53.931626Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.taylorleese/mcp-toolz",
      "description": "Context management, todo persistence, and multi-AI perspectives for Claude Code",
      "repository": {
        "url": "https://github.com/taylorleese/mcp-toolz",
        "source": "github"
      },
      "version": "0.3.2",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "mcp-toolz",
          "version": "0.3.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "OpenAI API key for ChatGPT second opinions",
              "format": "string",
              "isSecret": true,
              "name": "OPENAI_API_KEY"
            },
            {
              "description": "Anthropic API key for Claude second opinions",
              "format": "string",
              "isSecret": true,
              "name": "ANTHROPIC_API_KEY"
            },
            {
              "description": "Google API key for Gemini second opinions",
              "format": "string",
              "isSecret": true,
              "name": "GOOGLE_API_KEY"
            },
            {
              "description": "DeepSeek API key for DeepSeek second opinions",
              "format": "string",
              "isSecret": true,
              "name": "DEEPSEEK_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-25T08:26:43.645862Z",
        "updatedAt": "2025-10-25T08:26:43.645862Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "ai.smithery/brave",
      "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
      "repository": {
        "url": "https://github.com/brave/brave-search-mcp-server",
        "source": "github"
      },
      "version": "2.0.58",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/brave/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-25T09:09:32.842127Z",
        "updatedAt": "2025-10-25T09:09:32.842127Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.srprasanna/mcp-skills-server",
      "description": "MCP server that loads and serves skills from a mounted directory with hot reload.",
      "title": "MCP Skills Server",
      "repository": {
        "url": "https://github.com/srprasanna/mcp-skill-hub",
        "source": "github"
      },
      "version": "1.0.0",
      "websiteUrl": "https://srprasanna.github.io/mcp-skill-hub",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/srprasanna/mcp-skills-server:1.0.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Root directory containing skill folders",
              "default": "/skills",
              "name": "MCP_SKILLS_DIR"
            },
            {
              "description": "Enable automatic reloading when SKILL.md files change",
              "default": "true",
              "name": "MCP_SKILLS_HOT_RELOAD"
            },
            {
              "description": "Logging verbosity: DEBUG, INFO, WARNING, ERROR, CRITICAL",
              "default": "INFO",
              "name": "MCP_SKILLS_LOG_LEVEL"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/publisher-provided": {
          "migratedFrom": "https://registry.modelcontextprotocol.io/schema/server.json"
        }
      }
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-25T14:59:09.640181Z",
        "updatedAt": "2025-10-25T14:59:09.640181Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "dev.svelte/mcp",
      "description": "The official Svelte MCP server providing docs and autofixing tools for Svelte development",
      "repository": {
        "url": "https://github.com/sveltejs/mcp",
        "source": "github",
        "id": "1054419133",
        "subfolder": "packages/mcp-stdio"
      },
      "version": "0.1.11",
      "websiteUrl": "https://svelte.dev/docs/mcp/overview",
      "icons": [
        {
          "src": "https://mcp.svelte.dev/logo.svg",
          "mimeType": "image/svg+xml"
        },
        {
          "src": "https://mcp.svelte.dev/logo.png",
          "mimeType": "image/png"
        }
      ],
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@sveltejs/mcp",
          "version": "0.1.11",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          }
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.svelte.dev/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-25T15:08:23.261174Z",
        "updatedAt": "2025-10-25T15:08:23.261174Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.srprasanna/mcp-skill-hub",
      "description": "MCP server that loads and serves skills from a mounted directory with hot reload.",
      "title": "MCP Skills Server",
      "repository": {
        "url": "https://github.com/srprasanna/mcp-skill-hub",
        "source": "github"
      },
      "version": "1.0.0",
      "websiteUrl": "https://srprasanna.github.io/mcp-skill-hub",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/srprasanna/mcp-skill-hub:1.0.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Root directory containing skill folders",
              "default": "/skills",
              "name": "MCP_SKILLS_DIR"
            },
            {
              "description": "Enable automatic reloading when SKILL.md files change",
              "default": "true",
              "name": "MCP_SKILLS_HOT_RELOAD"
            },
            {
              "description": "Logging verbosity: DEBUG, INFO, WARNING, ERROR, CRITICAL",
              "default": "INFO",
              "name": "MCP_SKILLS_LOG_LEVEL"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/publisher-provided": {
          "migratedFrom": "https://registry.modelcontextprotocol.io/schema/server.json"
        }
      }
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-25T15:26:18.722975Z",
        "updatedAt": "2025-10-25T15:26:18.722975Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.xorrkaz/cml-mcp",
      "description": "An MCP server that provides access to common Cisco Modeling Labs (CML) operations.",
      "title": "Cisco Modeling Labs (CML)",
      "repository": {
        "url": "https://github.com/xorrkaz/cml-mcp",
        "source": "github"
      },
      "version": "0.11.4",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "cml-mcp",
          "version": "0.11.4",
          "runtimeHint": "uvx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "URL for the CML Server",
              "isRequired": true,
              "format": "string",
              "name": "CML_URL"
            },
            {
              "description": "Username for CML authentication",
              "isRequired": true,
              "format": "string",
              "name": "CML_USERNAME"
            },
            {
              "description": "Password for CML authentication",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "CML_PASSWORD"
            },
            {
              "description": "Username for authentication to devices running in CML",
              "format": "string",
              "name": "PYATS_USERNAME"
            },
            {
              "description": "Password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_PASSWORD"
            },
            {
              "description": "Enable password for authentication to devices running in CML",
              "format": "string",
              "isSecret": true,
              "name": "PYATS_AUTH_PASS"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-25T20:00:28.362753Z",
        "updatedAt": "2025-10-25T20:00:28.362753Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "ai.smithery/ScrapeGraphAI-scrapegraph-mcp",
      "description": "Enable language models to perform advanced AI-powered web scraping with enterprise-grade reliabili…",
      "repository": {
        "url": "https://github.com/ScrapeGraphAI/scrapegraph-mcp",
        "source": "github"
      },
      "version": "1.16.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@ScrapeGraphAI/scrapegraph-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-25T21:42:44.755249Z",
        "updatedAt": "2025-10-25T21:42:44.755249Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.meloncafe/chromadb-remote-mcp",
      "description": "Remote ChromaDB vector database MCP server with streamable HTTP transport",
      "title": "ChromaDB Remote MCP Server",
      "repository": {
        "url": "https://github.com/meloncafe/chromadb-remote-mcp",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "devsaurus/chromadb-remote-mcp:latest",
          "runtimeHint": "docker",
          "transport": {
            "type": "streamable-http",
            "url": "https://meloncafe.github.io/chromadb-remote-mcp/mcp"
          },
          "runtimeArguments": [
            {
              "value": "8080:8080",
              "type": "named",
              "name": "-p"
            },
            {
              "value": "MCP_AUTH_TOKEN={MCP_AUTH_TOKEN}",
              "type": "named",
              "name": "-e"
            }
          ],
          "environmentVariables": [
            {
              "description": "URL of your deployed ChromaDB Remote MCP server",
              "isRequired": true,
              "placeholder": "https://your-server.example.com/mcp",
              "name": "CHROMADB_MCP_URL"
            },
            {
              "description": "Authentication token for the MCP server (if enabled)",
              "isSecret": true,
              "name": "MCP_AUTH_TOKEN"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://meloncafe.github.io/chromadb-remote-mcp/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-26T00:24:14.294094Z",
        "updatedAt": "2025-10-26T00:24:14.294094Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.domdomegg/time-mcp-pypi",
      "description": "Get the current UTC time in RFC 3339 format.",
      "title": "Time MCP Server",
      "repository": {
        "url": "https://github.com/domdomegg/time-mcp-pypi.git",
        "source": "github"
      },
      "version": "1.1.1",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "time-mcp-pypi",
          "version": "1.1.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-26T01:45:58.147685Z",
        "updatedAt": "2025-10-26T01:45:58.147685Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.domdomegg/time-mcp-nuget",
      "description": "Get the current UTC time in RFC 3339 format.",
      "title": "Time MCP Server",
      "repository": {},
      "version": "1.1.1",
      "packages": [
        {
          "registryType": "nuget",
          "identifier": "TimeMcpServer",
          "version": "1.1.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-26T01:55:24.492663Z",
        "updatedAt": "2025-10-26T01:55:24.492663Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.domdomegg/airtable-mcp-server",
      "description": "Read and write access to Airtable database schemas, tables, and records.",
      "repository": {
        "url": "https://github.com/domdomegg/airtable-mcp-server.git",
        "source": "github"
      },
      "version": "1.9.4",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "airtable-mcp-server",
          "version": "1.9.4",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Airtable personal access token (e.g., pat123.abc123). Create at https://airtable.com/create/tokens/new with scopes: schema.bases:read, data.records:read, and optionally schema.bases:write and data.records:write.",
              "isRequired": true,
              "isSecret": true,
              "name": "AIRTABLE_API_KEY"
            }
          ]
        },
        {
          "registryType": "oci",
          "identifier": "docker.io/domdomegg/airtable-mcp-server:1.9.4",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Airtable personal access token (e.g., pat123.abc123). Create at https://airtable.com/create/tokens/new with scopes: schema.bases:read, data.records:read, and optionally schema.bases:write and data.records:write.",
              "isRequired": true,
              "isSecret": true,
              "name": "AIRTABLE_API_KEY"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/domdomegg/airtable-mcp-server/releases/download/v1.9.4/airtable-mcp-server.mcpb",
          "version": "1.9.4",
          "fileSha256": "16474be7f95c22c7575cb6c98490fa8744b6637dc528c787490b5adf56d43d96",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-26T02:11:39.865561Z",
        "updatedAt": "2025-10-26T02:11:39.865561Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.usesideways/sideways",
      "description": "Unexpected questions and lateral thinking prompts to break through mental blocks. 86 strategies.",
      "title": "Sideways",
      "repository": {},
      "version": "1.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://usesideways.com/mcp"
        },
        {
          "type": "sse",
          "url": "https://usesideways.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-26T02:35:47.403797Z",
        "updatedAt": "2025-10-26T02:35:47.403797Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.usesideways/sideways",
      "description": "Unexpected questions and lateral thinking prompts to break through mental blocks. 86 strategies.",
      "title": "Sideways",
      "repository": {},
      "version": "1.0.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://usesideways.com/mcp"
        },
        {
          "type": "sse",
          "url": "https://usesideways.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-26T02:43:18.623373Z",
        "updatedAt": "2025-10-26T02:43:18.623373Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.usesideways/sideways",
      "description": "Use Sideways for unexpected questions and lateral thinking prompts to break through mental blocks.",
      "title": "Sideways",
      "repository": {},
      "version": "1.0.3",
      "websiteUrl": "https://usesideways.com",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://usesideways.com/mcp"
        },
        {
          "type": "sse",
          "url": "https://usesideways.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-26T02:54:18.226547Z",
        "updatedAt": "2025-10-26T02:54:18.226547Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.rghsoftware/linux-filesystem",
      "description": "Enhanced Linux filesystem access with symlinks, permissions, and chmod support",
      "title": "Linux Filesystem",
      "repository": {},
      "version": "1.2.1",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/rghsoftware/linux-filesystem-extension/releases/download/v1.2.1/linux-filesystem.mcpb",
          "fileSha256": "3174a623da8d3da7013467bb877dde5591a8f6e04dad0430b2784303ecbfedfe",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-26T04:07:30.533036Z",
        "updatedAt": "2025-10-26T04:07:30.533036Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aahl/mcp-notify",
      "description": "MCP Server for notify",
      "title": "Notify MCP Server",
      "repository": {
        "url": "https://github.com/aahl/mcp-notify",
        "source": "github"
      },
      "version": "0.1.2",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "mcp-notify",
          "version": "0.1.2",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aahl/mcp-notify:latest",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-26T06:14:08.128472Z",
        "updatedAt": "2025-10-26T06:14:08.128472Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.5.6",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.5.6",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.5.6",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-26T06:49:36.241376Z",
        "updatedAt": "2025-10-26T06:49:36.241376Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.jfrog/jfrog-mcp-server",
      "description": "MCP Server for JFrog, providing tools for development and artifact management.",
      "title": "JFrog Remote MCP Server",
      "repository": {
        "url": "https://github.com/jfrog/jfrog-mcp-server",
        "source": "github"
      },
      "version": "0.1.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://myPlatform.jfrog.github.io/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-26T10:06:33.573722Z",
        "updatedAt": "2025-10-26T10:06:33.573722Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.ai-mcpower/mcpower-proxy",
      "description": "Security proxy that wraps MCP servers with real-time monitoring and policy enforcement",
      "title": "MCPower Security Proxy",
      "repository": {
        "url": "https://github.com/MCPower-Security/mcpower-proxy",
        "source": "github"
      },
      "version": "0.0.60",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "mcpower-proxy",
          "version": "0.0.60",
          "runtimeHint": "uvx",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-26T10:48:12.216781Z",
        "updatedAt": "2025-10-26T10:48:12.216781Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.jfrog/jfrog-mcp-server",
      "description": "MCP Server for JFrog, providing tools for development and artifact management.",
      "title": "JFrog Remote MCP Server",
      "repository": {
        "url": "https://github.com/jfrog/jfrog-mcp-server",
        "source": "github"
      },
      "version": "0.1.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://myPlatform.jfrog.github.io/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-26T11:26:09.107883Z",
        "updatedAt": "2025-10-26T11:26:09.107883Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.usesideways/sideways",
      "description": "Use Sideways for unexpected questions and lateral thinking prompts to break through mental blocks.",
      "title": "Sideways",
      "repository": {},
      "version": "1.0.4",
      "websiteUrl": "https://usesideways.com",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://usesideways.com/mcp"
        },
        {
          "type": "sse",
          "url": "https://usesideways.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-27T00:43:55.782489Z",
        "updatedAt": "2025-10-27T00:43:55.782489Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.usesideways/sideways",
      "description": "Use Sideways for unexpected questions and lateral thinking prompts to break through mental blocks.",
      "title": "Sideways",
      "repository": {},
      "version": "1.0.5",
      "websiteUrl": "https://usesideways.com",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://usesideways.com/mcp"
        },
        {
          "type": "sse",
          "url": "https://usesideways.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-27T00:43:56.0838Z",
        "updatedAt": "2025-10-27T00:43:56.0838Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.njlnaet/coderswap-mcp-server",
      "description": "Build searchable AI research knowledge bases with hybrid vector search directly in Claude Desktop.",
      "title": "CoderSwap MCP Server",
      "repository": {
        "url": "https://github.com/njlnaet/mcp-server",
        "source": "github"
      },
      "version": "0.1.2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@coderswap/mcp-server",
          "version": "0.1.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-27T02:31:39.41927Z",
        "updatedAt": "2025-10-27T02:31:39.41927Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.usesideways/sideways",
      "description": "Use Sideways for unexpected questions and lateral thinking prompts to break through mental blocks.",
      "title": "Sideways",
      "repository": {},
      "version": "1.0.6",
      "websiteUrl": "https://usesideways.com",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://usesideways.com/mcp"
        },
        {
          "type": "sse",
          "url": "https://usesideways.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-27T03:29:30.799578Z",
        "updatedAt": "2025-10-27T03:29:30.799578Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.robotmcp/ros-mcp-server",
      "description": "Connect AI models like Claude & ChatGPT with ROS robots using MCP",
      "repository": {
        "url": "https://github.com/robotmcp/ros-mcp-server",
        "source": "github"
      },
      "version": "2.1.8",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "ros-mcp",
          "version": "2.1.8",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-27T05:29:41.770164Z",
        "updatedAt": "2025-10-27T05:29:41.770164Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.github/github-mcp-server",
      "description": "Connect AI assistants to GitHub - manage repos, issues, PRs, and workflows through natural language.",
      "repository": {
        "url": "https://github.com/github/github-mcp-server",
        "source": "github"
      },
      "version": "0.20.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/github/github-mcp-server:0.20.0",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "isRequired": true,
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "isRequired": true,
              "format": "boolean",
              "value": "true",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "format": "boolean",
              "value": "true",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Set an environment variable in the runtime",
              "isRequired": true,
              "value": "GITHUB_PERSONAL_ACCESS_TOKEN={token}",
              "variables": {
                "token": {
                  "isRequired": true,
                  "format": "string",
                  "isSecret": true
                }
              },
              "type": "named",
              "name": "-e"
            },
            {
              "description": "The container image to run",
              "isRequired": true,
              "value": "ghcr.io/github/github-mcp-server",
              "type": "positional",
              "valueHint": "image_name"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-27T09:07:29.295012Z",
        "updatedAt": "2025-10-27T09:07:29.295012Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "ai.smithery/LinkupPlatform-linkup-mcp-server",
      "description": "Search the web in real time to get trustworthy, source-backed answers. Find the latest news and co…",
      "repository": {
        "url": "https://github.com/LinkupPlatform/linkup-mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@LinkupPlatform/linkup-mcp-server/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-27T11:25:12.402429Z",
        "updatedAt": "2025-10-27T11:25:12.402429Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.DollhouseMCP/mcp-server",
      "description": "OSS to create Personas, Skills, Templates, Agents, and Memories to customize your AI experience.",
      "title": "DollhouseMCP",
      "repository": {
        "url": "https://github.com/DollhouseMCP/mcp-server",
        "source": "github"
      },
      "version": "1.9.23",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@dollhousemcp/mcp-server",
          "version": "1.9.23",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-27T12:41:32.986434Z",
        "updatedAt": "2025-10-27T12:41:32.986434Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.medusajs/medusa-mcp",
      "description": "Retrieve information from the Medusa documentation to assist you with your Medusa development.",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://docs.medusajs.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-27T14:16:17.087598Z",
        "updatedAt": "2025-10-27T14:16:17.087598Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.github/github-mcp-server",
      "description": "Connect AI assistants to GitHub - manage repos, issues, PRs, and workflows through natural language.",
      "repository": {
        "url": "https://github.com/github/github-mcp-server",
        "source": "github"
      },
      "version": "0.20.1",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/github/github-mcp-server:0.20.1",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "isRequired": true,
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "isRequired": true,
              "format": "boolean",
              "value": "true",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "format": "boolean",
              "value": "true",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Set an environment variable in the runtime",
              "isRequired": true,
              "value": "GITHUB_PERSONAL_ACCESS_TOKEN={token}",
              "variables": {
                "token": {
                  "isRequired": true,
                  "format": "string",
                  "isSecret": true
                }
              },
              "type": "named",
              "name": "-e"
            },
            {
              "description": "The container image to run",
              "isRequired": true,
              "value": "ghcr.io/github/github-mcp-server",
              "type": "positional",
              "valueHint": "image_name"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-27T15:36:10.895783Z",
        "updatedAt": "2025-10-27T15:36:10.895783Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "co.thisdot.docusign-navigator/mcp",
      "description": "Secure Docusign Navigator integration for AI assistants to access and analyze agreement data.",
      "title": "Docusign Navigator",
      "repository": {
        "url": "https://github.com/thisdot/docusign-navigator-mcp",
        "source": "github"
      },
      "version": "1.3.0",
      "websiteUrl": "https://docusign-navigator.thisdot.co",
      "icons": [
        {
          "src": "https://docusign-navigator.thisdot.co/thisdot-labs-logo.png",
          "mimeType": "image/png",
          "sizes": [
            "500x122"
          ]
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://docusign-navigator.thisdot.co/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-27T15:57:26.278297Z",
        "updatedAt": "2025-10-27T15:57:26.278297Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.allstacks/allstacks-mcp",
      "description": "Provides 208+ tools for AI-native engineering intelligence via Allstacks API.",
      "title": "Allstacks Analytics MCP Server",
      "repository": {},
      "version": "0.1.0",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "allstacks-mcp",
          "version": "0.1.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-27T16:43:42.575778Z",
        "updatedAt": "2025-10-27T16:43:42.575778Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.allstacks/allstacks-mcp",
      "description": "Provides 208+ tools for AI-native engineering intelligence via Allstacks API.",
      "title": "Allstacks Analytics MCP Server",
      "repository": {},
      "version": "0.1.1",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "allstacks-mcp",
          "version": "0.1.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-27T16:50:37.013013Z",
        "updatedAt": "2025-10-27T16:50:37.013013Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "moda.ai/remote-camera",
      "description": "Capture photos remotely from mobile devices via S3-backed upload URLs",
      "title": "Remote Camera",
      "repository": {},
      "version": "1.0.0",
      "websiteUrl": "https://www.ai.moda/mcp-servers/remote-camera/",
      "icons": [
        {
          "src": "https://remote-camera-mcp.email.ai.moda/bimi/logo.svg",
          "mimeType": "image/svg+xml",
          "sizes": [
            "any"
          ]
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://www.ai.moda/mcp-servers/remote-camera/mcp",
          "headers": [
            {
              "description": "S3 credentials token in format: Bearer <base64-encoded-json>. The JSON should contain: {s3Url, accessKeyId, secretAccessKey, region}. Visit https://www.ai.moda/mcp-servers/remote-camera/ to set up your S3 auth token.",
              "isRequired": true,
              "isSecret": true,
              "placeholder": "Bearer eyJzM1VybCI6Imh0dHBzOi8vczMu...",
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-27T19:16:27.548449Z",
        "updatedAt": "2025-10-27T19:16:27.548449Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.allstacks/allstacks-mcp",
      "description": "Provides 208+ tools for AI-native engineering intelligence via Allstacks API.",
      "title": "Allstacks Analytics MCP Server",
      "repository": {},
      "version": "0.1.2",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "allstacks-mcp",
          "version": "0.1.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-27T19:33:41.052283Z",
        "updatedAt": "2025-10-27T19:33:41.052283Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.allstacks/allstacks-mcp",
      "description": "Provides 208+ tools for AI-native engineering intelligence via Allstacks API.",
      "title": "Allstacks Analytics MCP Server",
      "repository": {},
      "version": "0.1.3",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "allstacks-mcp",
          "version": "0.1.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-27T19:42:56.515336Z",
        "updatedAt": "2025-10-27T19:42:56.515336Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "dev.openfeature/mcp",
      "description": "MCP server providing OpenFeature SDK installation guides and OFREP flag evaluation",
      "repository": {},
      "version": "0.0.16",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@openfeature/mcp",
          "version": "0.0.16",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-27T19:50:28.668605Z",
        "updatedAt": "2025-10-27T19:50:28.668605Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.webflow/mcp",
      "description": "AI-powered design and management for Webflow Sites",
      "repository": {
        "url": "https://github.com/webflow/mcp-server",
        "source": "github"
      },
      "version": "2.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.webflow.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-27T21:00:28.378216Z",
        "updatedAt": "2025-10-27T21:00:28.378216Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.joelverhagen.mcp/Knapcode.SampleMcpServer",
      "description": "A sample MCP server using the MCP C# SDK. Generates random numbers and random weather.",
      "repository": {
        "url": "https://github.com/joelverhagen/Knapcode.SampleMcpServer",
        "source": "github"
      },
      "version": "0.10.0-beta.10",
      "packages": [
        {
          "registryType": "nuget",
          "registryBaseUrl": "https://api.nuget.org",
          "identifier": "Knapcode.SampleMcpServer",
          "version": "0.10.0-beta.10",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "mcp",
              "type": "positional"
            },
            {
              "value": "start",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "value": "{weather_choices}",
              "variables": {
                "weather_choices": {
                  "description": "Comma separated list of weather descriptions to randomly select."
                }
              },
              "name": "WEATHER_CHOICES"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-27T21:07:31.921876Z",
        "updatedAt": "2025-10-27T21:07:31.921876Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.josefdc/uniprot-mcp",
      "description": "Read-only UniProtKB via MCP (entries, sequences, features, GO, taxonomy, ID mapping).",
      "title": "UniProt MCP",
      "repository": {},
      "version": "0.1.0",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "uniprot-mcp",
          "version": "0.1.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-27T23:22:21.911346Z",
        "updatedAt": "2025-10-27T23:22:21.911346Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.ProfessionalWiki/mediawiki-mcp-server",
      "description": "MCP server enabling AI clients to interact with any MediaWiki wiki through standard tools",
      "title": "MediaWiki MCP Server",
      "repository": {
        "url": "https://github.com/ProfessionalWiki/MediaWiki-MCP-Server",
        "source": "github"
      },
      "version": "0.3.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@professional-wiki/mediawiki-mcp-server",
          "version": "0.3.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Path to your configuration file",
              "format": "filepath",
              "default": "config.json",
              "name": "CONFIG"
            },
            {
              "description": "Type of MCP server transport",
              "default": "stdio",
              "choices": [
                "stdio",
                "http"
              ],
              "name": "MCP_TRANSPORT"
            },
            {
              "description": "Port used for StreamableHTTP transport",
              "format": "number",
              "default": "3000",
              "name": "PORT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-27T23:27:02.224441Z",
        "updatedAt": "2025-10-27T23:27:02.224441Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.gattjoe/ACMS",
      "description": "Apple Container MCP Server (ACMS) provides access to Apple's container CLI tool on macOS",
      "repository": {
        "url": "https://github.com/gattjoe/ACMS",
        "source": "github"
      },
      "version": "0.0.4",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "ACMS",
          "version": "0.0.4",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:8765/mcp"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T00:39:35.755478Z",
        "updatedAt": "2025-10-28T00:39:35.755478Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.adspirer/ads",
      "description": "Remote MCP for cross-platform ad creation (Google Ads, TikTok). OAuth 2.1 with progress streaming.",
      "repository": {
        "url": "https://github.com/amekala/ads-mcp",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.adspirer.com/"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T02:00:45.758066Z",
        "updatedAt": "2025-10-28T02:00:45.758066Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "tools.ref/ref-tools-mcp",
      "description": "Token-efficient search for coding agents over public and private documentation.",
      "repository": {
        "url": "https://github.com/ref-tools/ref-tools-mcp",
        "source": "github"
      },
      "version": "3.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://api.ref.tools/mcp",
          "headers": [
            {
              "description": "API key for authentication",
              "name": "X-Ref-Api-Key"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T04:00:29.042576Z",
        "updatedAt": "2025-10-28T04:00:29.042576Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "ai.smithery/ref-tools-ref-tools-mcp",
      "description": "Provide your AI coding tools with token-efficient access to up-to-date technical documentation for…",
      "repository": {
        "url": "https://github.com/ref-tools/ref-tools-mcp",
        "source": "github"
      },
      "version": "3.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://server.smithery.ai/@ref-tools/ref-tools-mcp/mcp",
          "headers": [
            {
              "description": "Bearer token for Smithery authentication",
              "isRequired": true,
              "value": "Bearer {smithery_api_key}",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T04:05:07.66948Z",
        "updatedAt": "2025-10-28T04:05:07.66948Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.TranThienTrong/asset-auto-generator",
      "description": "An MCP server that provides asset auto generator",
      "repository": {
        "url": "https://github.com/TranThienTrong/asset-auto-generator.git",
        "source": "github"
      },
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://TranThienTrong.github.io/mcp/asset-auto-generator"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T04:09:28.205607Z",
        "updatedAt": "2025-10-28T04:09:28.205607Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.cyanheads/mcp-ts-template",
      "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
      "repository": {
        "url": "https://github.com/cyanheads/mcp-ts-template",
        "source": "github"
      },
      "version": "2.5.7",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.5.7",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-ts-template",
          "version": "2.5.7",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3010/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3010",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T05:14:33.048918Z",
        "updatedAt": "2025-10-28T05:14:33.048918Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aahl/mcp-notify",
      "description": "MCP Server for notify",
      "title": "Notify MCP Server",
      "repository": {
        "url": "https://github.com/aahl/mcp-notify",
        "source": "github"
      },
      "version": "0.1.3",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "mcp-notify",
          "version": "0.1.3",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aahl/mcp-notify:latest",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T06:07:06.819101Z",
        "updatedAt": "2025-10-28T06:07:06.819101Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.cyanheads/git-mcp-server",
      "description": "Comprehensive Git MCP server enabling native git tools including clone, commit, worktree, & more.",
      "repository": {
        "url": "https://github.com/cyanheads/git-mcp-server",
        "source": "github"
      },
      "version": "2.5.8",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.5.8",
          "runtimeHint": "bun",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:stdio",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Optional absolute path to restrict all git operations to a specific directory tree. Provides security sandboxing for multi-tenant or shared environments.",
              "format": "string",
              "name": "GIT_BASE_DIR"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@cyanheads/git-mcp-server",
          "version": "2.5.8",
          "runtimeHint": "bun",
          "transport": {
            "type": "streamable-http",
            "url": "http://localhost:3015/mcp"
          },
          "packageArguments": [
            {
              "value": "run",
              "type": "positional"
            },
            {
              "value": "start:http",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "The hostname for the HTTP server.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "MCP_HTTP_HOST"
            },
            {
              "description": "The port to run the HTTP server on.",
              "format": "string",
              "default": "3015",
              "name": "MCP_HTTP_PORT"
            },
            {
              "description": "The endpoint path for the MCP server.",
              "format": "string",
              "default": "/mcp",
              "name": "MCP_HTTP_ENDPOINT_PATH"
            },
            {
              "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
              "format": "string",
              "default": "none",
              "name": "MCP_AUTH_MODE"
            },
            {
              "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
              "format": "string",
              "default": "info",
              "name": "MCP_LOG_LEVEL"
            },
            {
              "description": "Optional absolute path to restrict all git operations to a specific directory tree. Provides security sandboxing for multi-tenant or shared environments.",
              "format": "string",
              "name": "GIT_BASE_DIR"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T06:16:07.27445Z",
        "updatedAt": "2025-10-28T06:16:07.27445Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.ggozad/haiku-rag",
      "description": "Agentic Retrieval Augmented Generation (RAG) with LanceDB",
      "repository": {
        "url": "https://github.com/ggozad/haiku.rag",
        "source": "github"
      },
      "version": "0.13.1",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "haiku-rag",
          "version": "0.13.1",
          "runtimeHint": "uvx",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "value": "serve",
              "type": "positional"
            },
            {
              "type": "named",
              "name": "--mcp"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T07:51:56.809146Z",
        "updatedAt": "2025-10-28T07:51:56.809146Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.brightdata/brightdata-mcp",
      "description": "Bright Data's Web MCP server enabling AI agents to search, extract & navigate the web",
      "repository": {
        "url": "https://github.com/brightdata/brightdata-mcp",
        "source": "github"
      },
      "version": "2.6.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@brightdata/mcp",
          "version": "2.6.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your API key for Bright Data",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "API_TOKEN"
            },
            {
              "description": "Your unlocker zone name",
              "format": "string",
              "name": "WEB_UNLOCKER_ZONE"
            },
            {
              "description": "Your browser zone name",
              "format": "string",
              "name": "BROWSER_ZONE"
            },
            {
              "description": "To enable PRO_MODE - set to true",
              "format": "boolean",
              "name": "PRO_MODE"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T08:30:39.0378Z",
        "updatedAt": "2025-10-28T08:30:39.0378Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "biz.icecat/mcp",
      "description": "Icecat Product Content",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.icecat.biz"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T09:28:57.58134Z",
        "updatedAt": "2025-10-28T09:28:57.58134Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.tech-sushant/calculator-mcp",
      "description": "A simple Model Context Protocol calculator server",
      "repository": {
        "url": "https://github.com/tech-sushant/calculator-mcp",
        "source": "github"
      },
      "version": "1.0.1",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@tech-sushant/calculator-mcp",
          "version": "1.0.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T10:11:16.657015Z",
        "updatedAt": "2025-10-28T10:11:16.657015Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.TranThienTrong/asset-auto-picker",
      "description": "An MCP server that provides [describe what your server does]",
      "repository": {
        "url": "https://github.com/TranThienTrong/asset_auto_picker",
        "source": "github"
      },
      "version": "1.2.0",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "asset-auto-picker",
          "version": "1.2.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T10:30:25.101235Z",
        "updatedAt": "2025-10-28T10:30:25.101235Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "biz.icecat/mcp",
      "description": "Retrieve product specifications, descriptions, and technical details from Icecat's database",
      "repository": {},
      "version": "1.0.1",
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.icecat.biz"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T12:17:03.803095Z",
        "updatedAt": "2025-10-28T12:17:03.803095Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.newrelic/mcp-server",
      "description": "Access New Relic observability data through MCP - query metrics, logs, traces, entities, and more",
      "title": "New Relic MCP Server",
      "repository": {},
      "version": "0.1.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.newrelic.com/mcp",
          "headers": [
            {
              "description": "New Relic API Key (User Key starting with NRAK-)",
              "isRequired": true,
              "isSecret": true,
              "name": "api-key"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T12:41:00.264589Z",
        "updatedAt": "2025-10-28T12:41:00.264589Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.browserstack/mcp-server",
      "description": "BrowserStack's Official MCP Server",
      "repository": {
        "url": "https://github.com/browserstack/mcp-server",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@browserstack/mcp-server",
          "version": "1.2.7",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "BrowserStack Username",
              "isRequired": true,
              "format": "string",
              "name": "BROWSERSTACK_USERNAME"
            },
            {
              "description": "BrowserStack Access Key",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "BROWSERSTACK_ACCESS_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T14:01:41.033363Z",
        "updatedAt": "2025-10-28T14:01:41.033363Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.vercel/next-devtools-mcp",
      "description": "Next.js development tools MCP server with stdio transport",
      "repository": {
        "url": "https://github.com/vercel/next-devtools-mcp",
        "source": "github"
      },
      "version": "0.2.2",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "next-devtools-mcp",
          "version": "0.2.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T14:43:50.724253Z",
        "updatedAt": "2025-10-28T14:43:50.724253Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.ONLYOFFICE/docspace",
      "description": "A room-based collaborative platform",
      "repository": {
        "url": "https://github.com/ONLYOFFICE/docspace-mcp",
        "source": "github",
        "id": "962498237"
      },
      "version": "3.0.1",
      "websiteUrl": "https://ONLYOFFICE.github.io/",
      "packages": [
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/ONLYOFFICE/docspace-mcp/releases/download/v3.0.1/onlyoffice-docspace-mcp-3.0.1.mcpb",
          "version": "3.0.1",
          "fileSha256": "da55ff4195410dd9eed05ebfa490608a0bbda6119b232a31b57a7c715882850c",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "The base URL of the DocSpace instance for API requests.",
              "format": "string",
              "name": "DOCSPACE_BASE_URL"
            },
            {
              "description": "The API key for accessing the DocSpace API.",
              "format": "string",
              "isSecret": true,
              "name": "DOCSPACE_API_KEY"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@onlyoffice/docspace-mcp",
          "version": "3.0.1",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "The transport protocol to use for communication with the DocSpace MCP server.",
              "format": "string",
              "default": "stdio",
              "choices": [
                "stdio",
                "sse",
                "streamable-http",
                "http"
              ],
              "name": "DOCSPACE_TRANSPORT"
            },
            {
              "description": "The flag that indicates whether the DocSpace MCP server should use meta tools.",
              "format": "boolean",
              "default": "false",
              "name": "DOCSPACE_DYNAMIC"
            },
            {
              "description": "The list of toolsets to enable for the DocSpace MCP server.",
              "format": "string",
              "default": "all",
              "choices": [
                "all",
                "files",
                "folders",
                "rooms",
                "people"
              ],
              "name": "DOCSPACE_TOOLSETS"
            },
            {
              "description": "The list of tools to enable for the DocSpace MCP server.",
              "format": "string",
              "choices": [
                "delete_file",
                "get_file_info",
                "update_file",
                "copy_batch_items",
                "move_batch_items",
                "download_file_as_text",
                "upload_file",
                "create_folder",
                "delete_folder",
                "get_folder_content",
                "get_folder_info",
                "rename_folder",
                "get_my_folder",
                "create_room",
                "get_room_info",
                "update_room",
                "archive_room",
                "set_room_security",
                "get_room_security_info",
                "get_rooms_folder",
                "get_room_types",
                "get_room_access_levels",
                "get_all_people"
              ],
              "name": "DOCSPACE_ENABLED_TOOLS"
            },
            {
              "description": "The list of tools to disable for the DocSpace MCP server.",
              "format": "string",
              "choices": [
                "delete_file",
                "get_file_info",
                "update_file",
                "copy_batch_items",
                "move_batch_items",
                "download_file_as_text",
                "upload_file",
                "create_folder",
                "delete_folder",
                "get_folder_content",
                "get_folder_info",
                "rename_folder",
                "get_my_folder",
                "create_room",
                "get_room_info",
                "update_room",
                "archive_room",
                "set_room_security",
                "get_room_security_info",
                "get_rooms_folder",
                "get_room_types",
                "get_room_access_levels",
                "get_all_people"
              ],
              "name": "DOCSPACE_DISABLED_TOOLS"
            },
            {
              "description": "The user agent to include in the `User-Agent` header for DocSpace API requests.",
              "format": "string",
              "default": "@onlyoffice/docspace-mcp v3.0.1",
              "name": "DOCSPACE_USER_AGENT"
            },
            {
              "description": "The base URL of the DocSpace instance for API requests.",
              "format": "string",
              "name": "DOCSPACE_BASE_URL"
            },
            {
              "description": "The raw value to include in the Authorization header for DocSpace API requests.",
              "format": "string",
              "isSecret": true,
              "name": "DOCSPACE_AUTHORIZATION"
            },
            {
              "description": "The API key for accessing the DocSpace API.",
              "format": "string",
              "isSecret": true,
              "name": "DOCSPACE_API_KEY"
            },
            {
              "description": "The Personal Access Token (PAT) for accessing the DocSpace API.",
              "format": "string",
              "isSecret": true,
              "name": "DOCSPACE_AUTH_TOKEN"
            },
            {
              "description": "The username for accessing the DocSpace API using basic authentication.",
              "format": "string",
              "name": "DOCSPACE_USERNAME"
            },
            {
              "description": "The password for accessing the DocSpace API using basic authentication.",
              "format": "string",
              "isSecret": true,
              "name": "DOCSPACE_PASSWORD"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@onlyoffice/docspace-mcp",
          "version": "3.0.1",
          "runtimeHint": "npx",
          "transport": {
            "type": "sse",
            "url": "https://example.com/sse",
            "headers": [
              {
                "description": "The flag that indicates whether the DocSpace MCP server should use meta tools.",
                "format": "boolean",
                "default": "false",
                "name": "X-Mcp-Dynamic"
              },
              {
                "description": "The list of toolsets to enable for the DocSpace MCP server.",
                "format": "string",
                "default": "all",
                "choices": [
                  "all",
                  "files",
                  "folders",
                  "rooms",
                  "people"
                ],
                "name": "X-Mcp-Toolsets"
              },
              {
                "description": "The list of tools to enable for the DocSpace MCP server.",
                "format": "string",
                "choices": [
                  "delete_file",
                  "get_file_info",
                  "update_file",
                  "copy_batch_items",
                  "move_batch_items",
                  "download_file_as_text",
                  "upload_file",
                  "create_folder",
                  "delete_folder",
                  "get_folder_content",
                  "get_folder_info",
                  "rename_folder",
                  "get_my_folder",
                  "create_room",
                  "get_room_info",
                  "update_room",
                  "archive_room",
                  "set_room_security",
                  "get_room_security_info",
                  "get_rooms_folder",
                  "get_room_types",
                  "get_room_access_levels",
                  "get_all_people"
                ],
                "name": "X-Mcp-Enabled-Tools"
              },
              {
                "description": "The list of tools to disable for the DocSpace MCP server.",
                "format": "string",
                "choices": [
                  "delete_file",
                  "get_file_info",
                  "update_file",
                  "copy_batch_items",
                  "move_batch_items",
                  "download_file_as_text",
                  "upload_file",
                  "create_folder",
                  "delete_folder",
                  "get_folder_content",
                  "get_folder_info",
                  "rename_folder",
                  "get_my_folder",
                  "create_room",
                  "get_room_info",
                  "update_room",
                  "archive_room",
                  "set_room_security",
                  "get_room_security_info",
                  "get_rooms_folder",
                  "get_room_types",
                  "get_room_access_levels",
                  "get_all_people"
                ],
                "name": "X-Mcp-Disabled-Tools"
              },
              {
                "description": "The base URL of the DocSpace instance for API requests.",
                "format": "string",
                "name": "X-Mcp-Base-Url"
              },
              {
                "description": "The API key for accessing the DocSpace API.",
                "format": "string",
                "isSecret": true,
                "name": "X-Mcp-Api-Key"
              },
              {
                "description": "The Personal Access Token (PAT) for accessing the DocSpace API.",
                "format": "string",
                "isSecret": true,
                "name": "X-Mcp-Auth-Token"
              },
              {
                "description": "The username for accessing the DocSpace API using basic authentication.",
                "format": "string",
                "name": "X-Mcp-Username"
              },
              {
                "description": "The password for accessing the DocSpace API using basic authentication.",
                "format": "string",
                "isSecret": true,
                "name": "X-Mcp-Password"
              }
            ]
          },
          "environmentVariables": [
            {
              "description": "The transport protocol to use for communication with the DocSpace MCP server.",
              "format": "string",
              "default": "stdio",
              "choices": [
                "stdio",
                "sse",
                "streamable-http",
                "http"
              ],
              "name": "DOCSPACE_TRANSPORT"
            },
            {
              "description": "The flag that indicates whether the DocSpace MCP server should use meta tools.",
              "format": "boolean",
              "default": "false",
              "name": "DOCSPACE_DYNAMIC"
            },
            {
              "description": "The list of toolsets to enable for the DocSpace MCP server.",
              "format": "string",
              "default": "all",
              "choices": [
                "all",
                "files",
                "folders",
                "rooms",
                "people"
              ],
              "name": "DOCSPACE_TOOLSETS"
            },
            {
              "description": "The list of tools to enable for the DocSpace MCP server.",
              "format": "string",
              "choices": [
                "delete_file",
                "get_file_info",
                "update_file",
                "copy_batch_items",
                "move_batch_items",
                "download_file_as_text",
                "upload_file",
                "create_folder",
                "delete_folder",
                "get_folder_content",
                "get_folder_info",
                "rename_folder",
                "get_my_folder",
                "create_room",
                "get_room_info",
                "update_room",
                "archive_room",
                "set_room_security",
                "get_room_security_info",
                "get_rooms_folder",
                "get_room_types",
                "get_room_access_levels",
                "get_all_people"
              ],
              "name": "DOCSPACE_ENABLED_TOOLS"
            },
            {
              "description": "The list of tools to disable for the DocSpace MCP server.",
              "format": "string",
              "choices": [
                "delete_file",
                "get_file_info",
                "update_file",
                "copy_batch_items",
                "move_batch_items",
                "download_file_as_text",
                "upload_file",
                "create_folder",
                "delete_folder",
                "get_folder_content",
                "get_folder_info",
                "rename_folder",
                "get_my_folder",
                "create_room",
                "get_room_info",
                "update_room",
                "archive_room",
                "set_room_security",
                "get_room_security_info",
                "get_rooms_folder",
                "get_room_types",
                "get_room_access_levels",
                "get_all_people"
              ],
              "name": "DOCSPACE_DISABLED_TOOLS"
            },
            {
              "description": "The time-to-live (TTL) for HTTP sessions in milliseconds.",
              "format": "number",
              "default": "28800000",
              "name": "DOCSPACE_SESSION_TTL"
            },
            {
              "description": "The interval for checking HTTP sessions for expiration in milliseconds.",
              "format": "number",
              "default": "240000",
              "name": "DOCSPACE_SESSION_INTERVAL"
            },
            {
              "description": "The user agent to include in the `User-Agent` header for DocSpace API requests.",
              "format": "string",
              "default": "@onlyoffice/docspace-mcp v3.0.1",
              "name": "DOCSPACE_USER_AGENT"
            },
            {
              "description": "The base URL of the DocSpace instance for API requests.",
              "format": "string",
              "name": "DOCSPACE_BASE_URL"
            },
            {
              "description": "The raw value to include in the Authorization header for DocSpace API requests.",
              "format": "string",
              "isSecret": true,
              "name": "DOCSPACE_AUTHORIZATION"
            },
            {
              "description": "The API key for accessing the DocSpace API.",
              "format": "string",
              "isSecret": true,
              "name": "DOCSPACE_API_KEY"
            },
            {
              "description": "The Personal Access Token (PAT) for accessing the DocSpace API.",
              "format": "string",
              "isSecret": true,
              "name": "DOCSPACE_AUTH_TOKEN"
            },
            {
              "description": "The username for accessing the DocSpace API using basic authentication.",
              "format": "string",
              "name": "DOCSPACE_USERNAME"
            },
            {
              "description": "The password for accessing the DocSpace API using basic authentication.",
              "format": "string",
              "isSecret": true,
              "name": "DOCSPACE_PASSWORD"
            },
            {
              "description": "The host to bind the DocSpace MCP server to.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "DOCSPACE_HOST"
            },
            {
              "description": "The port to bind the DocSpace MCP server to.",
              "format": "number",
              "default": "8080",
              "name": "DOCSPACE_PORT"
            },
            {
              "description": "The number of proxy servers between the DocSpace MCP server and the client.",
              "format": "number",
              "default": "0",
              "name": "DOCSPACE_SERVER_PROXY_HOPS"
            },
            {
              "description": "The list of allowed origins to include in the Access-Control-Allow-Origin header for CORS requests to MCP endpoints.",
              "format": "string",
              "default": "*",
              "name": "DOCSPACE_SERVER_CORS_MCP_ORIGIN"
            },
            {
              "description": "The maximum age in milliseconds to include in the Access-Control-Max-Age header for CORS requests to MCP endpoints.",
              "format": "number",
              "default": "86400000",
              "name": "DOCSPACE_SERVER_CORS_MCP_MAX_AGE"
            },
            {
              "description": "The maximum number of requests allowed per window for the MCP endpoints.",
              "format": "number",
              "default": "1000",
              "name": "DOCSPACE_SERVER_RATE_LIMITS_MCP_CAPACITY"
            },
            {
              "description": "The time window in milliseconds for the rate limit for the MCP endpoints.",
              "format": "number",
              "default": "1000",
              "name": "DOCSPACE_SERVER_RATE_LIMITS_MCP_WINDOW"
            },
            {
              "description": "The flag that indicates whether the DocSpace MCP server should accept configuration via query parameters in incoming requests.",
              "format": "boolean",
              "default": "true",
              "name": "DOCSPACE_REQUEST_QUERY"
            },
            {
              "description": "The flag that indicates whether the DocSpace MCP server should check for the Authorization header in incoming requests.",
              "format": "boolean",
              "default": "true",
              "name": "DOCSPACE_REQUEST_AUTHORIZATION_HEADER"
            },
            {
              "description": "The prefix to use with custom configuration headers for the DocSpace MCP server.",
              "format": "string",
              "default": "x-mcp-",
              "name": "DOCSPACE_REQUEST_HEADER_PREFIX"
            }
          ]
        },
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@onlyoffice/docspace-mcp",
          "version": "3.0.1",
          "runtimeHint": "npx",
          "transport": {
            "type": "streamable-http",
            "url": "https://example.com/mcp",
            "headers": [
              {
                "description": "The flag that indicates whether the DocSpace MCP server should use meta tools.",
                "format": "boolean",
                "default": "false",
                "name": "X-Mcp-Dynamic"
              },
              {
                "description": "The list of toolsets to enable for the DocSpace MCP server.",
                "format": "string",
                "default": "all",
                "choices": [
                  "all",
                  "files",
                  "folders",
                  "rooms",
                  "people"
                ],
                "name": "X-Mcp-Toolsets"
              },
              {
                "description": "The list of tools to enable for the DocSpace MCP server.",
                "format": "string",
                "choices": [
                  "delete_file",
                  "get_file_info",
                  "update_file",
                  "copy_batch_items",
                  "move_batch_items",
                  "download_file_as_text",
                  "upload_file",
                  "create_folder",
                  "delete_folder",
                  "get_folder_content",
                  "get_folder_info",
                  "rename_folder",
                  "get_my_folder",
                  "create_room",
                  "get_room_info",
                  "update_room",
                  "archive_room",
                  "set_room_security",
                  "get_room_security_info",
                  "get_rooms_folder",
                  "get_room_types",
                  "get_room_access_levels",
                  "get_all_people"
                ],
                "name": "X-Mcp-Enabled-Tools"
              },
              {
                "description": "The list of tools to disable for the DocSpace MCP server.",
                "format": "string",
                "choices": [
                  "delete_file",
                  "get_file_info",
                  "update_file",
                  "copy_batch_items",
                  "move_batch_items",
                  "download_file_as_text",
                  "upload_file",
                  "create_folder",
                  "delete_folder",
                  "get_folder_content",
                  "get_folder_info",
                  "rename_folder",
                  "get_my_folder",
                  "create_room",
                  "get_room_info",
                  "update_room",
                  "archive_room",
                  "set_room_security",
                  "get_room_security_info",
                  "get_rooms_folder",
                  "get_room_types",
                  "get_room_access_levels",
                  "get_all_people"
                ],
                "name": "X-Mcp-Disabled-Tools"
              },
              {
                "description": "The base URL of the DocSpace instance for API requests.",
                "format": "string",
                "name": "X-Mcp-Base-Url"
              },
              {
                "description": "The API key for accessing the DocSpace API.",
                "format": "string",
                "isSecret": true,
                "name": "X-Mcp-Api-Key"
              },
              {
                "description": "The Personal Access Token (PAT) for accessing the DocSpace API.",
                "format": "string",
                "isSecret": true,
                "name": "X-Mcp-Auth-Token"
              },
              {
                "description": "The username for accessing the DocSpace API using basic authentication.",
                "format": "string",
                "name": "X-Mcp-Username"
              },
              {
                "description": "The password for accessing the DocSpace API using basic authentication.",
                "format": "string",
                "isSecret": true,
                "name": "X-Mcp-Password"
              }
            ]
          },
          "environmentVariables": [
            {
              "description": "The transport protocol to use for communication with the DocSpace MCP server.",
              "format": "string",
              "default": "stdio",
              "choices": [
                "stdio",
                "sse",
                "streamable-http",
                "http"
              ],
              "name": "DOCSPACE_TRANSPORT"
            },
            {
              "description": "The flag that indicates whether the DocSpace MCP server should use meta tools.",
              "format": "boolean",
              "default": "false",
              "name": "DOCSPACE_DYNAMIC"
            },
            {
              "description": "The list of toolsets to enable for the DocSpace MCP server.",
              "format": "string",
              "default": "all",
              "choices": [
                "all",
                "files",
                "folders",
                "rooms",
                "people"
              ],
              "name": "DOCSPACE_TOOLSETS"
            },
            {
              "description": "The list of tools to enable for the DocSpace MCP server.",
              "format": "string",
              "choices": [
                "delete_file",
                "get_file_info",
                "update_file",
                "copy_batch_items",
                "move_batch_items",
                "download_file_as_text",
                "upload_file",
                "create_folder",
                "delete_folder",
                "get_folder_content",
                "get_folder_info",
                "rename_folder",
                "get_my_folder",
                "create_room",
                "get_room_info",
                "update_room",
                "archive_room",
                "set_room_security",
                "get_room_security_info",
                "get_rooms_folder",
                "get_room_types",
                "get_room_access_levels",
                "get_all_people"
              ],
              "name": "DOCSPACE_ENABLED_TOOLS"
            },
            {
              "description": "The list of tools to disable for the DocSpace MCP server.",
              "format": "string",
              "choices": [
                "delete_file",
                "get_file_info",
                "update_file",
                "copy_batch_items",
                "move_batch_items",
                "download_file_as_text",
                "upload_file",
                "create_folder",
                "delete_folder",
                "get_folder_content",
                "get_folder_info",
                "rename_folder",
                "get_my_folder",
                "create_room",
                "get_room_info",
                "update_room",
                "archive_room",
                "set_room_security",
                "get_room_security_info",
                "get_rooms_folder",
                "get_room_types",
                "get_room_access_levels",
                "get_all_people"
              ],
              "name": "DOCSPACE_DISABLED_TOOLS"
            },
            {
              "description": "The time-to-live (TTL) for HTTP sessions in milliseconds.",
              "format": "number",
              "default": "28800000",
              "name": "DOCSPACE_SESSION_TTL"
            },
            {
              "description": "The interval for checking HTTP sessions for expiration in milliseconds.",
              "format": "number",
              "default": "240000",
              "name": "DOCSPACE_SESSION_INTERVAL"
            },
            {
              "description": "The user agent to include in the `User-Agent` header for DocSpace API requests.",
              "format": "string",
              "default": "@onlyoffice/docspace-mcp v3.0.1",
              "name": "DOCSPACE_USER_AGENT"
            },
            {
              "description": "The base URL of the DocSpace instance for API requests.",
              "format": "string",
              "name": "DOCSPACE_BASE_URL"
            },
            {
              "description": "The raw value to include in the Authorization header for DocSpace API requests.",
              "format": "string",
              "isSecret": true,
              "name": "DOCSPACE_AUTHORIZATION"
            },
            {
              "description": "The API key for accessing the DocSpace API.",
              "format": "string",
              "isSecret": true,
              "name": "DOCSPACE_API_KEY"
            },
            {
              "description": "The Personal Access Token (PAT) for accessing the DocSpace API.",
              "format": "string",
              "isSecret": true,
              "name": "DOCSPACE_AUTH_TOKEN"
            },
            {
              "description": "The username for accessing the DocSpace API using basic authentication.",
              "format": "string",
              "name": "DOCSPACE_USERNAME"
            },
            {
              "description": "The password for accessing the DocSpace API using basic authentication.",
              "format": "string",
              "isSecret": true,
              "name": "DOCSPACE_PASSWORD"
            },
            {
              "description": "The host to bind the DocSpace MCP server to.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "DOCSPACE_HOST"
            },
            {
              "description": "The port to bind the DocSpace MCP server to.",
              "format": "number",
              "default": "8080",
              "name": "DOCSPACE_PORT"
            },
            {
              "description": "The number of proxy servers between the DocSpace MCP server and the client.",
              "format": "number",
              "default": "0",
              "name": "DOCSPACE_SERVER_PROXY_HOPS"
            },
            {
              "description": "The list of allowed origins to include in the Access-Control-Allow-Origin header for CORS requests to MCP endpoints.",
              "format": "string",
              "default": "*",
              "name": "DOCSPACE_SERVER_CORS_MCP_ORIGIN"
            },
            {
              "description": "The maximum age in milliseconds to include in the Access-Control-Max-Age header for CORS requests to MCP endpoints.",
              "format": "number",
              "default": "86400000",
              "name": "DOCSPACE_SERVER_CORS_MCP_MAX_AGE"
            },
            {
              "description": "The maximum number of requests allowed per window for the MCP endpoints.",
              "format": "number",
              "default": "1000",
              "name": "DOCSPACE_SERVER_RATE_LIMITS_MCP_CAPACITY"
            },
            {
              "description": "The time window in milliseconds for the rate limit for the MCP endpoints.",
              "format": "number",
              "default": "1000",
              "name": "DOCSPACE_SERVER_RATE_LIMITS_MCP_WINDOW"
            },
            {
              "description": "The flag that indicates whether the DocSpace MCP server should accept configuration via query parameters in incoming requests.",
              "format": "boolean",
              "default": "true",
              "name": "DOCSPACE_REQUEST_QUERY"
            },
            {
              "description": "The flag that indicates whether the DocSpace MCP server should check for the Authorization header in incoming requests.",
              "format": "boolean",
              "default": "true",
              "name": "DOCSPACE_REQUEST_AUTHORIZATION_HEADER"
            },
            {
              "description": "The prefix to use with custom configuration headers for the DocSpace MCP server.",
              "format": "string",
              "default": "x-mcp-",
              "name": "DOCSPACE_REQUEST_HEADER_PREFIX"
            }
          ]
        },
        {
          "registryType": "oci",
          "identifier": "docker.io/onlyoffice/docspace-mcp:3.0.1",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "The transport protocol to use for communication with the DocSpace MCP server.",
              "format": "string",
              "default": "stdio",
              "choices": [
                "stdio",
                "sse",
                "streamable-http",
                "http"
              ],
              "name": "DOCSPACE_TRANSPORT"
            },
            {
              "description": "The flag that indicates whether the DocSpace MCP server should use meta tools.",
              "format": "boolean",
              "default": "false",
              "name": "DOCSPACE_DYNAMIC"
            },
            {
              "description": "The list of toolsets to enable for the DocSpace MCP server.",
              "format": "string",
              "default": "all",
              "choices": [
                "all",
                "files",
                "folders",
                "rooms",
                "people"
              ],
              "name": "DOCSPACE_TOOLSETS"
            },
            {
              "description": "The list of tools to enable for the DocSpace MCP server.",
              "format": "string",
              "choices": [
                "delete_file",
                "get_file_info",
                "update_file",
                "copy_batch_items",
                "move_batch_items",
                "download_file_as_text",
                "upload_file",
                "create_folder",
                "delete_folder",
                "get_folder_content",
                "get_folder_info",
                "rename_folder",
                "get_my_folder",
                "create_room",
                "get_room_info",
                "update_room",
                "archive_room",
                "set_room_security",
                "get_room_security_info",
                "get_rooms_folder",
                "get_room_types",
                "get_room_access_levels",
                "get_all_people"
              ],
              "name": "DOCSPACE_ENABLED_TOOLS"
            },
            {
              "description": "The list of tools to disable for the DocSpace MCP server.",
              "format": "string",
              "choices": [
                "delete_file",
                "get_file_info",
                "update_file",
                "copy_batch_items",
                "move_batch_items",
                "download_file_as_text",
                "upload_file",
                "create_folder",
                "delete_folder",
                "get_folder_content",
                "get_folder_info",
                "rename_folder",
                "get_my_folder",
                "create_room",
                "get_room_info",
                "update_room",
                "archive_room",
                "set_room_security",
                "get_room_security_info",
                "get_rooms_folder",
                "get_room_types",
                "get_room_access_levels",
                "get_all_people"
              ],
              "name": "DOCSPACE_DISABLED_TOOLS"
            },
            {
              "description": "The user agent to include in the `User-Agent` header for DocSpace API requests.",
              "format": "string",
              "default": "@onlyoffice/docspace-mcp v3.0.1",
              "name": "DOCSPACE_USER_AGENT"
            },
            {
              "description": "The base URL of the DocSpace instance for API requests.",
              "format": "string",
              "name": "DOCSPACE_BASE_URL"
            },
            {
              "description": "The raw value to include in the Authorization header for DocSpace API requests.",
              "format": "string",
              "isSecret": true,
              "name": "DOCSPACE_AUTHORIZATION"
            },
            {
              "description": "The API key for accessing the DocSpace API.",
              "format": "string",
              "isSecret": true,
              "name": "DOCSPACE_API_KEY"
            },
            {
              "description": "The Personal Access Token (PAT) for accessing the DocSpace API.",
              "format": "string",
              "isSecret": true,
              "name": "DOCSPACE_AUTH_TOKEN"
            },
            {
              "description": "The username for accessing the DocSpace API using basic authentication.",
              "format": "string",
              "name": "DOCSPACE_USERNAME"
            },
            {
              "description": "The password for accessing the DocSpace API using basic authentication.",
              "format": "string",
              "isSecret": true,
              "name": "DOCSPACE_PASSWORD"
            }
          ]
        },
        {
          "registryType": "oci",
          "identifier": "docker.io/onlyoffice/docspace-mcp:3.0.1",
          "runtimeHint": "docker",
          "transport": {
            "type": "sse",
            "url": "https://example.com/mcp",
            "headers": [
              {
                "description": "The flag that indicates whether the DocSpace MCP server should use meta tools.",
                "format": "boolean",
                "default": "false",
                "name": "X-Mcp-Dynamic"
              },
              {
                "description": "The list of toolsets to enable for the DocSpace MCP server.",
                "format": "string",
                "default": "all",
                "choices": [
                  "all",
                  "files",
                  "folders",
                  "rooms",
                  "people"
                ],
                "name": "X-Mcp-Toolsets"
              },
              {
                "description": "The list of tools to enable for the DocSpace MCP server.",
                "format": "string",
                "choices": [
                  "delete_file",
                  "get_file_info",
                  "update_file",
                  "copy_batch_items",
                  "move_batch_items",
                  "download_file_as_text",
                  "upload_file",
                  "create_folder",
                  "delete_folder",
                  "get_folder_content",
                  "get_folder_info",
                  "rename_folder",
                  "get_my_folder",
                  "create_room",
                  "get_room_info",
                  "update_room",
                  "archive_room",
                  "set_room_security",
                  "get_room_security_info",
                  "get_rooms_folder",
                  "get_room_types",
                  "get_room_access_levels",
                  "get_all_people"
                ],
                "name": "X-Mcp-Enabled-Tools"
              },
              {
                "description": "The list of tools to disable for the DocSpace MCP server.",
                "format": "string",
                "choices": [
                  "delete_file",
                  "get_file_info",
                  "update_file",
                  "copy_batch_items",
                  "move_batch_items",
                  "download_file_as_text",
                  "upload_file",
                  "create_folder",
                  "delete_folder",
                  "get_folder_content",
                  "get_folder_info",
                  "rename_folder",
                  "get_my_folder",
                  "create_room",
                  "get_room_info",
                  "update_room",
                  "archive_room",
                  "set_room_security",
                  "get_room_security_info",
                  "get_rooms_folder",
                  "get_room_types",
                  "get_room_access_levels",
                  "get_all_people"
                ],
                "name": "X-Mcp-Disabled-Tools"
              },
              {
                "description": "The base URL of the DocSpace instance for API requests.",
                "format": "string",
                "name": "X-Mcp-Base-Url"
              },
              {
                "description": "The API key for accessing the DocSpace API.",
                "format": "string",
                "isSecret": true,
                "name": "X-Mcp-Api-Key"
              },
              {
                "description": "The Personal Access Token (PAT) for accessing the DocSpace API.",
                "format": "string",
                "isSecret": true,
                "name": "X-Mcp-Auth-Token"
              },
              {
                "description": "The username for accessing the DocSpace API using basic authentication.",
                "format": "string",
                "name": "X-Mcp-Username"
              },
              {
                "description": "The password for accessing the DocSpace API using basic authentication.",
                "format": "string",
                "isSecret": true,
                "name": "X-Mcp-Password"
              }
            ]
          },
          "environmentVariables": [
            {
              "description": "The transport protocol to use for communication with the DocSpace MCP server.",
              "format": "string",
              "default": "stdio",
              "choices": [
                "stdio",
                "sse",
                "streamable-http",
                "http"
              ],
              "name": "DOCSPACE_TRANSPORT"
            },
            {
              "description": "The flag that indicates whether the DocSpace MCP server should use meta tools.",
              "format": "boolean",
              "default": "false",
              "name": "DOCSPACE_DYNAMIC"
            },
            {
              "description": "The list of toolsets to enable for the DocSpace MCP server.",
              "format": "string",
              "default": "all",
              "choices": [
                "all",
                "files",
                "folders",
                "rooms",
                "people"
              ],
              "name": "DOCSPACE_TOOLSETS"
            },
            {
              "description": "The list of tools to enable for the DocSpace MCP server.",
              "format": "string",
              "choices": [
                "delete_file",
                "get_file_info",
                "update_file",
                "copy_batch_items",
                "move_batch_items",
                "download_file_as_text",
                "upload_file",
                "create_folder",
                "delete_folder",
                "get_folder_content",
                "get_folder_info",
                "rename_folder",
                "get_my_folder",
                "create_room",
                "get_room_info",
                "update_room",
                "archive_room",
                "set_room_security",
                "get_room_security_info",
                "get_rooms_folder",
                "get_room_types",
                "get_room_access_levels",
                "get_all_people"
              ],
              "name": "DOCSPACE_ENABLED_TOOLS"
            },
            {
              "description": "The list of tools to disable for the DocSpace MCP server.",
              "format": "string",
              "choices": [
                "delete_file",
                "get_file_info",
                "update_file",
                "copy_batch_items",
                "move_batch_items",
                "download_file_as_text",
                "upload_file",
                "create_folder",
                "delete_folder",
                "get_folder_content",
                "get_folder_info",
                "rename_folder",
                "get_my_folder",
                "create_room",
                "get_room_info",
                "update_room",
                "archive_room",
                "set_room_security",
                "get_room_security_info",
                "get_rooms_folder",
                "get_room_types",
                "get_room_access_levels",
                "get_all_people"
              ],
              "name": "DOCSPACE_DISABLED_TOOLS"
            },
            {
              "description": "The time-to-live (TTL) for HTTP sessions in milliseconds.",
              "format": "number",
              "default": "28800000",
              "name": "DOCSPACE_SESSION_TTL"
            },
            {
              "description": "The interval for checking HTTP sessions for expiration in milliseconds.",
              "format": "number",
              "default": "240000",
              "name": "DOCSPACE_SESSION_INTERVAL"
            },
            {
              "description": "The user agent to include in the `User-Agent` header for DocSpace API requests.",
              "format": "string",
              "default": "@onlyoffice/docspace-mcp v3.0.1",
              "name": "DOCSPACE_USER_AGENT"
            },
            {
              "description": "The base URL of the DocSpace instance for API requests.",
              "format": "string",
              "name": "DOCSPACE_BASE_URL"
            },
            {
              "description": "The raw value to include in the Authorization header for DocSpace API requests.",
              "format": "string",
              "isSecret": true,
              "name": "DOCSPACE_AUTHORIZATION"
            },
            {
              "description": "The API key for accessing the DocSpace API.",
              "format": "string",
              "isSecret": true,
              "name": "DOCSPACE_API_KEY"
            },
            {
              "description": "The Personal Access Token (PAT) for accessing the DocSpace API.",
              "format": "string",
              "isSecret": true,
              "name": "DOCSPACE_AUTH_TOKEN"
            },
            {
              "description": "The username for accessing the DocSpace API using basic authentication.",
              "format": "string",
              "name": "DOCSPACE_USERNAME"
            },
            {
              "description": "The password for accessing the DocSpace API using basic authentication.",
              "format": "string",
              "isSecret": true,
              "name": "DOCSPACE_PASSWORD"
            },
            {
              "description": "The host to bind the DocSpace MCP server to.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "DOCSPACE_HOST"
            },
            {
              "description": "The port to bind the DocSpace MCP server to.",
              "format": "number",
              "default": "8080",
              "name": "DOCSPACE_PORT"
            },
            {
              "description": "The number of proxy servers between the DocSpace MCP server and the client.",
              "format": "number",
              "default": "0",
              "name": "DOCSPACE_SERVER_PROXY_HOPS"
            },
            {
              "description": "The list of allowed origins to include in the Access-Control-Allow-Origin header for CORS requests to MCP endpoints.",
              "format": "string",
              "default": "*",
              "name": "DOCSPACE_SERVER_CORS_MCP_ORIGIN"
            },
            {
              "description": "The maximum age in milliseconds to include in the Access-Control-Max-Age header for CORS requests to MCP endpoints.",
              "format": "number",
              "default": "86400000",
              "name": "DOCSPACE_SERVER_CORS_MCP_MAX_AGE"
            },
            {
              "description": "The maximum number of requests allowed per window for the MCP endpoints.",
              "format": "number",
              "default": "1000",
              "name": "DOCSPACE_SERVER_RATE_LIMITS_MCP_CAPACITY"
            },
            {
              "description": "The time window in milliseconds for the rate limit for the MCP endpoints.",
              "format": "number",
              "default": "1000",
              "name": "DOCSPACE_SERVER_RATE_LIMITS_MCP_WINDOW"
            },
            {
              "description": "The flag that indicates whether the DocSpace MCP server should accept configuration via query parameters in incoming requests.",
              "format": "boolean",
              "default": "true",
              "name": "DOCSPACE_REQUEST_QUERY"
            },
            {
              "description": "The flag that indicates whether the DocSpace MCP server should check for the Authorization header in incoming requests.",
              "format": "boolean",
              "default": "true",
              "name": "DOCSPACE_REQUEST_AUTHORIZATION_HEADER"
            },
            {
              "description": "The prefix to use with custom configuration headers for the DocSpace MCP server.",
              "format": "string",
              "default": "x-mcp-",
              "name": "DOCSPACE_REQUEST_HEADER_PREFIX"
            }
          ]
        },
        {
          "registryType": "oci",
          "identifier": "docker.io/onlyoffice/docspace-mcp:3.0.1",
          "runtimeHint": "docker",
          "transport": {
            "type": "streamable-http",
            "url": "https://example.com/mcp",
            "headers": [
              {
                "description": "The flag that indicates whether the DocSpace MCP server should use meta tools.",
                "format": "boolean",
                "default": "false",
                "name": "X-Mcp-Dynamic"
              },
              {
                "description": "The list of toolsets to enable for the DocSpace MCP server.",
                "format": "string",
                "default": "all",
                "choices": [
                  "all",
                  "files",
                  "folders",
                  "rooms",
                  "people"
                ],
                "name": "X-Mcp-Toolsets"
              },
              {
                "description": "The list of tools to enable for the DocSpace MCP server.",
                "format": "string",
                "choices": [
                  "delete_file",
                  "get_file_info",
                  "update_file",
                  "copy_batch_items",
                  "move_batch_items",
                  "download_file_as_text",
                  "upload_file",
                  "create_folder",
                  "delete_folder",
                  "get_folder_content",
                  "get_folder_info",
                  "rename_folder",
                  "get_my_folder",
                  "create_room",
                  "get_room_info",
                  "update_room",
                  "archive_room",
                  "set_room_security",
                  "get_room_security_info",
                  "get_rooms_folder",
                  "get_room_types",
                  "get_room_access_levels",
                  "get_all_people"
                ],
                "name": "X-Mcp-Enabled-Tools"
              },
              {
                "description": "The list of tools to disable for the DocSpace MCP server.",
                "format": "string",
                "choices": [
                  "delete_file",
                  "get_file_info",
                  "update_file",
                  "copy_batch_items",
                  "move_batch_items",
                  "download_file_as_text",
                  "upload_file",
                  "create_folder",
                  "delete_folder",
                  "get_folder_content",
                  "get_folder_info",
                  "rename_folder",
                  "get_my_folder",
                  "create_room",
                  "get_room_info",
                  "update_room",
                  "archive_room",
                  "set_room_security",
                  "get_room_security_info",
                  "get_rooms_folder",
                  "get_room_types",
                  "get_room_access_levels",
                  "get_all_people"
                ],
                "name": "X-Mcp-Disabled-Tools"
              },
              {
                "description": "The base URL of the DocSpace instance for API requests.",
                "format": "string",
                "name": "X-Mcp-Base-Url"
              },
              {
                "description": "The API key for accessing the DocSpace API.",
                "format": "string",
                "isSecret": true,
                "name": "X-Mcp-Api-Key"
              },
              {
                "description": "The Personal Access Token (PAT) for accessing the DocSpace API.",
                "format": "string",
                "isSecret": true,
                "name": "X-Mcp-Auth-Token"
              },
              {
                "description": "The username for accessing the DocSpace API using basic authentication.",
                "format": "string",
                "name": "X-Mcp-Username"
              },
              {
                "description": "The password for accessing the DocSpace API using basic authentication.",
                "format": "string",
                "isSecret": true,
                "name": "X-Mcp-Password"
              }
            ]
          },
          "environmentVariables": [
            {
              "description": "The transport protocol to use for communication with the DocSpace MCP server.",
              "format": "string",
              "default": "stdio",
              "choices": [
                "stdio",
                "sse",
                "streamable-http",
                "http"
              ],
              "name": "DOCSPACE_TRANSPORT"
            },
            {
              "description": "The flag that indicates whether the DocSpace MCP server should use meta tools.",
              "format": "boolean",
              "default": "false",
              "name": "DOCSPACE_DYNAMIC"
            },
            {
              "description": "The list of toolsets to enable for the DocSpace MCP server.",
              "format": "string",
              "default": "all",
              "choices": [
                "all",
                "files",
                "folders",
                "rooms",
                "people"
              ],
              "name": "DOCSPACE_TOOLSETS"
            },
            {
              "description": "The list of tools to enable for the DocSpace MCP server.",
              "format": "string",
              "choices": [
                "delete_file",
                "get_file_info",
                "update_file",
                "copy_batch_items",
                "move_batch_items",
                "download_file_as_text",
                "upload_file",
                "create_folder",
                "delete_folder",
                "get_folder_content",
                "get_folder_info",
                "rename_folder",
                "get_my_folder",
                "create_room",
                "get_room_info",
                "update_room",
                "archive_room",
                "set_room_security",
                "get_room_security_info",
                "get_rooms_folder",
                "get_room_types",
                "get_room_access_levels",
                "get_all_people"
              ],
              "name": "DOCSPACE_ENABLED_TOOLS"
            },
            {
              "description": "The list of tools to disable for the DocSpace MCP server.",
              "format": "string",
              "choices": [
                "delete_file",
                "get_file_info",
                "update_file",
                "copy_batch_items",
                "move_batch_items",
                "download_file_as_text",
                "upload_file",
                "create_folder",
                "delete_folder",
                "get_folder_content",
                "get_folder_info",
                "rename_folder",
                "get_my_folder",
                "create_room",
                "get_room_info",
                "update_room",
                "archive_room",
                "set_room_security",
                "get_room_security_info",
                "get_rooms_folder",
                "get_room_types",
                "get_room_access_levels",
                "get_all_people"
              ],
              "name": "DOCSPACE_DISABLED_TOOLS"
            },
            {
              "description": "The time-to-live (TTL) for HTTP sessions in milliseconds.",
              "format": "number",
              "default": "28800000",
              "name": "DOCSPACE_SESSION_TTL"
            },
            {
              "description": "The interval for checking HTTP sessions for expiration in milliseconds.",
              "format": "number",
              "default": "240000",
              "name": "DOCSPACE_SESSION_INTERVAL"
            },
            {
              "description": "The user agent to include in the `User-Agent` header for DocSpace API requests.",
              "format": "string",
              "default": "@onlyoffice/docspace-mcp v3.0.1",
              "name": "DOCSPACE_USER_AGENT"
            },
            {
              "description": "The base URL of the DocSpace instance for API requests.",
              "format": "string",
              "name": "DOCSPACE_BASE_URL"
            },
            {
              "description": "The raw value to include in the Authorization header for DocSpace API requests.",
              "format": "string",
              "isSecret": true,
              "name": "DOCSPACE_AUTHORIZATION"
            },
            {
              "description": "The API key for accessing the DocSpace API.",
              "format": "string",
              "isSecret": true,
              "name": "DOCSPACE_API_KEY"
            },
            {
              "description": "The Personal Access Token (PAT) for accessing the DocSpace API.",
              "format": "string",
              "isSecret": true,
              "name": "DOCSPACE_AUTH_TOKEN"
            },
            {
              "description": "The username for accessing the DocSpace API using basic authentication.",
              "format": "string",
              "name": "DOCSPACE_USERNAME"
            },
            {
              "description": "The password for accessing the DocSpace API using basic authentication.",
              "format": "string",
              "isSecret": true,
              "name": "DOCSPACE_PASSWORD"
            },
            {
              "description": "The host to bind the DocSpace MCP server to.",
              "format": "string",
              "default": "127.0.0.1",
              "name": "DOCSPACE_HOST"
            },
            {
              "description": "The port to bind the DocSpace MCP server to.",
              "format": "number",
              "default": "8080",
              "name": "DOCSPACE_PORT"
            },
            {
              "description": "The number of proxy servers between the DocSpace MCP server and the client.",
              "format": "number",
              "default": "0",
              "name": "DOCSPACE_SERVER_PROXY_HOPS"
            },
            {
              "description": "The list of allowed origins to include in the Access-Control-Allow-Origin header for CORS requests to MCP endpoints.",
              "format": "string",
              "default": "*",
              "name": "DOCSPACE_SERVER_CORS_MCP_ORIGIN"
            },
            {
              "description": "The maximum age in milliseconds to include in the Access-Control-Max-Age header for CORS requests to MCP endpoints.",
              "format": "number",
              "default": "86400000",
              "name": "DOCSPACE_SERVER_CORS_MCP_MAX_AGE"
            },
            {
              "description": "The maximum number of requests allowed per window for the MCP endpoints.",
              "format": "number",
              "default": "1000",
              "name": "DOCSPACE_SERVER_RATE_LIMITS_MCP_CAPACITY"
            },
            {
              "description": "The time window in milliseconds for the rate limit for the MCP endpoints.",
              "format": "number",
              "default": "1000",
              "name": "DOCSPACE_SERVER_RATE_LIMITS_MCP_WINDOW"
            },
            {
              "description": "The flag that indicates whether the DocSpace MCP server should accept configuration via query parameters in incoming requests.",
              "format": "boolean",
              "default": "true",
              "name": "DOCSPACE_REQUEST_QUERY"
            },
            {
              "description": "The flag that indicates whether the DocSpace MCP server should check for the Authorization header in incoming requests.",
              "format": "boolean",
              "default": "true",
              "name": "DOCSPACE_REQUEST_AUTHORIZATION_HEADER"
            },
            {
              "description": "The prefix to use with custom configuration headers for the DocSpace MCP server.",
              "format": "string",
              "default": "x-mcp-",
              "name": "DOCSPACE_REQUEST_HEADER_PREFIX"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T14:50:18.185782Z",
        "updatedAt": "2025-10-28T14:50:18.185782Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.Snowflake-Labs/mcp",
      "description": "MCP Server for Snowflake from Snowflake Labs",
      "title": "OSS Snowflake MCP Server",
      "repository": {
        "url": "https://github.com/Snowflake-Labs/mcp",
        "source": "github"
      },
      "version": "1.3.5",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "snowflake-labs-mcp",
          "version": "1.3.5",
          "transport": {
            "type": "stdio"
          },
          "packageArguments": [
            {
              "description": "Path to service specification file",
              "isRequired": true,
              "type": "named",
              "name": "--service-config-file"
            },
            {
              "description": "Account identifier (e.g. xy12345.us-east-1)",
              "type": "named",
              "name": "--account"
            },
            {
              "description": "Snowflake host URL",
              "type": "named",
              "name": "--host"
            },
            {
              "description": "Username for authentication",
              "type": "named",
              "name": "--user"
            },
            {
              "description": "Password or programmatic access token",
              "type": "named",
              "name": "--password"
            },
            {
              "description": "Role to use for connection",
              "type": "named",
              "name": "--role"
            },
            {
              "description": "Warehouse to use for queries",
              "type": "named",
              "name": "--warehouse"
            },
            {
              "description": "Whether passcode is embedded in password",
              "type": "named",
              "name": "--passcode-in-password"
            },
            {
              "description": "MFA passcode for authentication",
              "type": "named",
              "name": "--passcode"
            },
            {
              "description": "Private key for key pair authentication",
              "type": "named",
              "name": "--private-key"
            },
            {
              "description": "Path to private key file",
              "type": "named",
              "name": "--private-key-file"
            },
            {
              "description": "Password for encrypted private key",
              "type": "named",
              "name": "--private-key-file-pwd"
            },
            {
              "description": "Authentication type",
              "default": "snowflake",
              "type": "named",
              "name": "--authenticator"
            },
            {
              "description": "Name of connection from connections.toml (or config.toml) file",
              "type": "named",
              "name": "--connection-name"
            },
            {
              "description": "Transport for the MCP server",
              "default": "stdio",
              "choices": [
                "stdio",
                "http",
                "sse",
                "streamable-http"
              ],
              "type": "named",
              "name": "--transport"
            },
            {
              "description": "Host address to bind the server to (default: 0.0.0.0)",
              "default": "0.0.0.0",
              "type": "named",
              "name": "--server-host"
            },
            {
              "description": "Port number for the server to listen on (default: 9000)",
              "default": "9000",
              "type": "named",
              "name": "--port"
            },
            {
              "description": "Custom endpoint path for HTTP transports",
              "default": "/mcp",
              "type": "named",
              "name": "--endpoint"
            }
          ],
          "environmentVariables": [
            {
              "description": "Account identifier (e.g. xy12345.us-east-1)",
              "format": "string",
              "name": "SNOWFLAKE_ACCOUNT"
            },
            {
              "description": "Snowflake host URL",
              "format": "string",
              "name": "SNOWFLAKE_HOST"
            },
            {
              "description": "Username for authentication",
              "format": "string",
              "name": "SNOWFLAKE_USER"
            },
            {
              "description": "Password or programmatic access token",
              "format": "string",
              "isSecret": true,
              "name": "SNOWFLAKE_PASSWORD"
            },
            {
              "description": "Role to use for connection",
              "format": "string",
              "name": "SNOWFLAKE_ROLE"
            },
            {
              "description": "Warehouse to use for queries",
              "format": "string",
              "name": "SNOWFLAKE_WAREHOUSE"
            },
            {
              "description": "MFA passcode for authentication",
              "format": "string",
              "name": "SNOWFLAKE_PASSCODE"
            },
            {
              "description": "Private key for key pair authentication",
              "format": "string",
              "isSecret": true,
              "name": "SNOWFLAKE_PRIVATE_KEY"
            },
            {
              "description": "Path to private key file",
              "format": "string",
              "name": "SNOWFLAKE_PRIVATE_KEY_FILE"
            },
            {
              "description": "Password for encrypted private key",
              "format": "string",
              "name": "SNOWFLAKE_PRIVATE_KEY_FILE_PWD"
            },
            {
              "description": "Host address to bind the server to (default: 0.0.0.0)",
              "format": "string",
              "name": "SNOWFLAKE_MCP_HOST"
            },
            {
              "description": "Port number for the server to listen on (default: 9000)",
              "format": "number",
              "name": "SNOWFLAKE_MCP_PORT"
            },
            {
              "description": "Endpoint path for the MCP server (default: /mcp)",
              "format": "string",
              "name": "SNOWFLAKE_MCP_ENDPOINT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T15:19:33.176334Z",
        "updatedAt": "2025-10-28T15:19:33.176334Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.wrenchpilot/it-tools-mcp",
      "description": "MCP server exposing 100+ IT tools and utilities for developers and system administrators.",
      "repository": {
        "url": "https://github.com/wrenchpilot/it-tools-mcp",
        "source": "github"
      },
      "version": "5.2.8",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "it-tools-mcp",
          "version": "5.2.8",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T16:06:38.491691Z",
        "updatedAt": "2025-10-28T16:06:38.491691Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.mapbox/mcp-devkit-server",
      "description": "Provides AI assistants with direct access to Mapbox developer APIs and documentation.",
      "repository": {
        "url": "https://github.com/mapbox/mcp-devkit-server",
        "source": "github"
      },
      "version": "0.4.6-dev-2",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@mapbox/mcp-devkit-server",
          "version": "0.4.6-dev-2",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your Mapbox access token. See docs for required scopes.",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "MAPBOX_ACCESS_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T17:28:27.230289Z",
        "updatedAt": "2025-10-28T17:28:27.230289Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.SigNoz/signoz-mcp-server",
      "description": "SigNoz MCP server: access metrics, traces, logs, alerts, and dashboards via AI assistants",
      "title": "SigNoz MCP Server",
      "repository": {},
      "version": "0.0.1",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "signoz/signoz-mcp-server:latest",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T17:59:22.34318Z",
        "updatedAt": "2025-10-28T17:59:22.34318Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.mapbox/mcp-devkit-server",
      "description": "Provides AI assistants with direct access to Mapbox developer APIs and documentation.",
      "repository": {
        "url": "https://github.com/mapbox/mcp-devkit-server",
        "source": "github"
      },
      "version": "0.4.6",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@mapbox/mcp-devkit-server",
          "version": "0.4.6",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your Mapbox access token. See docs for required scopes.",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "MAPBOX_ACCESS_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T18:49:44.946194Z",
        "updatedAt": "2025-10-28T18:49:44.946194Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.mapbox/mcp-server",
      "description": "Geospatial intelligence with Mapbox APIs like geocoding, POI search, directions, isochrones, etc.",
      "repository": {
        "url": "https://github.com/mapbox/mcp-server",
        "source": "github"
      },
      "version": "0.6.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "@mapbox/mcp-server",
          "version": "0.6.1",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your Mapbox access token",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "MAPBOX_ACCESS_TOKEN"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T18:58:37.446204Z",
        "updatedAt": "2025-10-28T18:58:37.446204Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.paypal/paypal-mcp-server",
      "description": "A command line tool for setting up PayPal MCP server",
      "repository": {
        "url": "https://github.com/paypal/paypal-mcp-server",
        "source": "github"
      },
      "version": "1.8.1",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@paypal/mcp",
          "version": "1.8.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "YOUR_PAYPAL_ACCESS_TOKEN ref: https://docs.paypal.ai/developer/how-to/api/get-started ",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "PAYPAL_ACCESS_TOKEN"
            },
            {
              "description": "'SANDBOX' or 'LIVE'",
              "isRequired": true,
              "format": "string",
              "name": "PAYPAL_ENVIRONMENT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T19:13:46.508171Z",
        "updatedAt": "2025-10-28T19:13:46.508171Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.paypal.mcp/mcp",
      "description": "PayPal MCP server provides access to PayPal services and operations for AI assistants",
      "repository": {},
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.paypal.com/mcp",
          "headers": [
            {
              "description": "OAuth Bearer token for API authentication (format: Bearer <token>)",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "sse",
          "url": "https://mcp.paypal.com/sse",
          "headers": [
            {
              "description": "OAuth Bearer token for API authentication (format: Bearer <token>)",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ],
      "_meta": {}
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T19:34:19.455268Z",
        "updatedAt": "2025-10-28T19:34:19.455268Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.rogiervdbrnk/mcp-real-estate-server",
      "description": "Dutch real estate data with KRK Makelaars report generation.",
      "repository": {
        "url": "https://github.com/rogiervdbrnk/mcp-server",
        "source": "github"
      },
      "version": "1.2.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/rogiervdbrnk/mcp-real-estate-server:v1.2.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T20:37:10.280163Z",
        "updatedAt": "2025-10-28T20:37:10.280163Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.tjhop/prometheus-mcp-server",
      "description": "An API-complete MCP server to manage Prometheus-compatible backends via comprehensive tools.",
      "repository": {
        "url": "https://github.com/tjhop/prometheus-mcp-server",
        "source": "github"
      },
      "version": "0.10.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/tjhop/prometheus-mcp-server:0.10.0",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "PROMETHEUS_MCP_SERVER_PROMETHEUS_URL",
              "type": "positional",
              "valueHint": "env_var_name"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/tjhop/prometheus-mcp-server",
              "type": "positional",
              "valueHint": "image_name"
            }
          ],
          "environmentVariables": [
            {
              "description": "URL of the Prometheus instance to connect to (default: \"http://127.0.0.1:9090\")",
              "isRequired": true,
              "format": "string",
              "name": "PROMETHEUS_MCP_SERVER_PROMETHEUS_URL"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T20:46:27.92086Z",
        "updatedAt": "2025-10-28T20:46:27.92086Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.pab1it0/prometheus-mcp-server",
      "description": "MCP server providing Prometheus metrics access and PromQL query execution for AI assistants",
      "repository": {
        "url": "https://github.com/pab1it0/prometheus-mcp-server",
        "source": "github"
      },
      "version": "1.4.4",
      "websiteUrl": "https://pab1it0.github.io/prometheus-mcp-server",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/pab1it0/prometheus-mcp-server:1.4.4",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Prometheus server URL (e.g., http://localhost:9090)",
              "isRequired": true,
              "format": "string",
              "name": "PROMETHEUS_URL"
            },
            {
              "description": "Set to False to disable SSL verification",
              "format": "boolean",
              "name": "PROMETHEUS_URL_SSL_VERIFY"
            },
            {
              "description": "Set to True to disable Prometheus UI links in query results (saves context tokens in MCP clients)",
              "format": "boolean",
              "name": "PROMETHEUS_DISABLE_LINKS"
            },
            {
              "description": "Username for Prometheus basic authentication",
              "format": "string",
              "name": "PROMETHEUS_USERNAME"
            },
            {
              "description": "Password for Prometheus basic authentication",
              "format": "string",
              "isSecret": true,
              "name": "PROMETHEUS_PASSWORD"
            },
            {
              "description": "Bearer token for Prometheus authentication",
              "format": "string",
              "isSecret": true,
              "name": "PROMETHEUS_TOKEN"
            },
            {
              "description": "Organization ID for multi-tenant Prometheus setups",
              "format": "string",
              "name": "ORG_ID"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T21:16:10.944717Z",
        "updatedAt": "2025-10-28T21:16:10.944717Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.stripe/mcp",
      "description": "MCP server integrating with Stripe - tools for customers, products, payments, and more.",
      "repository": {
        "url": "https://github.com/stripe/agent-toolkit",
        "source": "github"
      },
      "version": "0.2.4",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.stripe.com"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T22:06:18.495159Z",
        "updatedAt": "2025-10-28T22:06:18.495159Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.pab1it0/prometheus-mcp-server",
      "description": "MCP server providing Prometheus metrics access and PromQL query execution for AI assistants",
      "repository": {
        "url": "https://github.com/pab1it0/prometheus-mcp-server",
        "source": "github"
      },
      "version": "1.4.6",
      "websiteUrl": "https://pab1it0.github.io/prometheus-mcp-server",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/pab1it0/prometheus-mcp-server:1.4.6",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Prometheus server URL (e.g., http://localhost:9090)",
              "isRequired": true,
              "format": "string",
              "name": "PROMETHEUS_URL"
            },
            {
              "description": "Set to False to disable SSL verification",
              "format": "boolean",
              "name": "PROMETHEUS_URL_SSL_VERIFY"
            },
            {
              "description": "Set to True to disable Prometheus UI links in query results (saves context tokens in MCP clients)",
              "format": "boolean",
              "name": "PROMETHEUS_DISABLE_LINKS"
            },
            {
              "description": "Username for Prometheus basic authentication",
              "format": "string",
              "name": "PROMETHEUS_USERNAME"
            },
            {
              "description": "Password for Prometheus basic authentication",
              "format": "string",
              "isSecret": true,
              "name": "PROMETHEUS_PASSWORD"
            },
            {
              "description": "Bearer token for Prometheus authentication",
              "format": "string",
              "isSecret": true,
              "name": "PROMETHEUS_TOKEN"
            },
            {
              "description": "Organization ID for multi-tenant Prometheus setups",
              "format": "string",
              "name": "ORG_ID"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-28T22:21:35.640285Z",
        "updatedAt": "2025-10-28T22:21:35.640285Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aahl/mcp-aktools",
      "description": "MCP Server for stock and crypto",
      "title": "AkTools MCP Server",
      "repository": {
        "url": "https://github.com/aahl/mcp-aktools",
        "source": "github"
      },
      "version": "0.1.6",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "mcp-aktools",
          "version": "0.1.6",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aahl/mcp-aktools:latest",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-29T06:46:41.825744Z",
        "updatedAt": "2025-10-29T06:46:41.825744Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.Fannon/u-he-preset-randomizer",
      "description": "Generate, randomize, explain, and manage u-he synthesizer presets via the Model Context Protocol.",
      "title": "u-he Preset Randomizer",
      "repository": {
        "url": "https://github.com/Fannon/u-he-preset-randomizer",
        "source": "github"
      },
      "version": "1.1.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "u-he-preset-randomizer",
          "version": "1.1.1",
          "runtimeHint": "npx",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "value": "--yes",
              "type": "positional"
            },
            {
              "value": "u-he-preset-randomizer@1.1.1",
              "type": "positional"
            },
            {
              "value": "u-he-mcp-server",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "Optional override for preset root discovery when synths are stored outside default locations.",
              "name": "UHE_CUSTOM_FOLDER"
            },
            {
              "description": "Enable verbose logging for troubleshooting.",
              "default": "false",
              "name": "DEBUG"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-29T07:11:29.765209Z",
        "updatedAt": "2025-10-29T07:11:29.765209Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.ggozad/haiku-rag",
      "description": "Agentic Retrieval Augmented Generation (RAG) with LanceDB",
      "repository": {
        "url": "https://github.com/ggozad/haiku.rag",
        "source": "github"
      },
      "version": "0.13.2",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "haiku-rag",
          "version": "0.13.2",
          "runtimeHint": "uvx",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "value": "serve",
              "type": "positional"
            },
            {
              "type": "named",
              "name": "--mcp"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-29T10:21:27.256197Z",
        "updatedAt": "2025-10-29T10:21:27.256197Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.vaadin/docs-mcp",
      "description": "Provides Vaadin Documentation and help with development tasks",
      "repository": {
        "url": "https://github.com/vaadin/vaadin-documentation-services",
        "source": "github"
      },
      "version": "1.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.vaadin.com/docs/"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-29T10:21:35.912202Z",
        "updatedAt": "2025-10-29T10:21:35.912202Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.rogiervdbrnk/mcp-real-estate-server",
      "description": "Dutch real estate data with KRK Makelaars report generation.",
      "repository": {
        "url": "https://github.com/rogiervdbrnk/mcp-server",
        "source": "github"
      },
      "version": "1.3.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/rogiervdbrnk/mcp-real-estate-server:v1.3.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-29T11:09:48.740899Z",
        "updatedAt": "2025-10-29T11:09:48.740899Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aimoda/rigol-dho824-mcp",
      "description": "Control and query Rigol DHO824 oscilloscope for waveform capture and measurements",
      "title": "Rigol DHO824 Oscilloscope",
      "repository": {},
      "version": "0.1.0-1.main.9ad1203",
      "websiteUrl": "https://aimoda.github.io/rigol-dho824-mcp/",
      "icons": [
        {
          "src": "https://rigol-dho824-mcp.email.ai.moda/bimi/logo.svg",
          "mimeType": "image/svg+xml",
          "sizes": [
            "any"
          ]
        }
      ],
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aimoda/rigol-dho824-mcp:0.1.0-1.main.9ad1203",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Bind mount a host directory into the container",
              "type": "named",
              "name": "-v"
            },
            {
              "description": "Bind mount path for waveform and screenshot data",
              "value": "/tmp/rigol-data:/tmp/rigol",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_RESOURCE",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "VISA_TIMEOUT",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_BEEPER_ENABLED",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_TEMP_DIR",
              "type": "positional"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/aimoda/rigol-dho824-mcp",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "VISA resource string for connecting to the oscilloscope (e.g., 'TCPIP0::192.168.1.100::inst0::INSTR'). Leave empty for auto-discovery.",
              "placeholder": "TCPIP0::192.168.1.100::inst0::INSTR",
              "name": "RIGOL_RESOURCE"
            },
            {
              "description": "Communication timeout in milliseconds",
              "format": "number",
              "default": "30000",
              "name": "VISA_TIMEOUT"
            },
            {
              "description": "Enable or disable oscilloscope beeper sounds",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "RIGOL_BEEPER_ENABLED"
            },
            {
              "description": "Custom directory for temporary files (waveforms, screenshots). Required for Docker if you need to access captured data outside the container. Mount a volume to this path.",
              "format": "filepath",
              "placeholder": "/tmp/rigol",
              "name": "RIGOL_TEMP_DIR"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-29T12:37:11.981294Z",
        "updatedAt": "2025-10-29T12:37:11.981294Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.rogiervdbrnk/mcp-real-estate-server",
      "description": "Dutch real estate data with KRK Makelaars report generation.",
      "repository": {
        "url": "https://github.com/rogiervdbrnk/mcp-server",
        "source": "github"
      },
      "version": "1.3.1",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/rogiervdbrnk/mcp-real-estate-server:v1.3.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-29T13:29:13.434209Z",
        "updatedAt": "2025-10-29T13:29:13.434209Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.rogiervdbrnk/mcp-real-estate-server",
      "description": "Dutch real estate data with KRK Makelaars report generation.",
      "repository": {
        "url": "https://github.com/rogiervdbrnk/mcp-server",
        "source": "github"
      },
      "version": "1.3.2",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/rogiervdbrnk/mcp-real-estate-server:v1.3.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-29T13:49:51.421588Z",
        "updatedAt": "2025-10-29T13:49:51.421588Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aimoda/rigol-dho824-mcp",
      "description": "Control and query Rigol DHO824 oscilloscope for waveform capture and measurements",
      "title": "Rigol DHO824 Oscilloscope",
      "repository": {
        "url": "https://github.com/aimoda/rigol-dho824-mcp",
        "source": "github",
        "id": "1043349028"
      },
      "version": "0.1.0-1.main.0648815",
      "websiteUrl": "https://aimoda.github.io/rigol-dho824-mcp/",
      "icons": [
        {
          "src": "https://rigol-dho824-mcp.email.ai.moda/bimi/logo.svg",
          "mimeType": "image/svg+xml",
          "sizes": [
            "any"
          ]
        }
      ],
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aimoda/rigol-dho824-mcp:0.1.0-1.main.0648815",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Bind mount a host directory into the container",
              "type": "named",
              "name": "-v"
            },
            {
              "description": "Bind mount path for waveform and screenshot data",
              "value": "/tmp/rigol-data:/tmp/rigol",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_RESOURCE",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "VISA_TIMEOUT",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_BEEPER_ENABLED",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_TEMP_DIR",
              "type": "positional"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/aimoda/rigol-dho824-mcp",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "VISA resource string for connecting to the oscilloscope (e.g., 'TCPIP0::192.168.1.100::inst0::INSTR'). Leave empty for auto-discovery.",
              "placeholder": "TCPIP0::192.168.1.100::inst0::INSTR",
              "name": "RIGOL_RESOURCE"
            },
            {
              "description": "Communication timeout in milliseconds",
              "format": "number",
              "default": "30000",
              "name": "VISA_TIMEOUT"
            },
            {
              "description": "Enable or disable oscilloscope beeper sounds",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "RIGOL_BEEPER_ENABLED"
            },
            {
              "description": "Custom directory for temporary files (waveforms, screenshots). Required for Docker if you need to access captured data outside the container. Mount a volume to this path.",
              "format": "filepath",
              "placeholder": "/tmp/rigol",
              "name": "RIGOL_TEMP_DIR"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/publisher-provided": {
          "buildInfo": {
            "imageSha256": "f27d960ec7cba84c53c49e78e9fb4c296de02b8079dbf286788c7b64b047298c"
          },
          "tool": "github-actions",
          "version": "1.0.0"
        }
      }
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-29T14:02:35.895205Z",
        "updatedAt": "2025-10-29T14:02:35.895205Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aimoda/rigol-dho824-mcp",
      "description": "Control and query Rigol DHO824 oscilloscope for waveform capture and measurements",
      "title": "Rigol DHO824 Oscilloscope",
      "repository": {
        "url": "https://github.com/aimoda/rigol-dho824-mcp",
        "source": "github",
        "id": "1043349028"
      },
      "version": "0.1.0-92.main.fae1443",
      "websiteUrl": "https://aimoda.github.io/rigol-dho824-mcp/",
      "icons": [
        {
          "src": "https://rigol-dho824-mcp.email.ai.moda/bimi/logo.svg",
          "mimeType": "image/svg+xml",
          "sizes": [
            "any"
          ]
        }
      ],
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aimoda/rigol-dho824-mcp:0.1.0-92.main.fae1443",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Bind mount a host directory into the container",
              "type": "named",
              "name": "-v"
            },
            {
              "description": "Bind mount path for waveform and screenshot data",
              "value": "/tmp/rigol-data:/tmp/rigol",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_RESOURCE",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "VISA_TIMEOUT",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_BEEPER_ENABLED",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_TEMP_DIR",
              "type": "positional"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/aimoda/rigol-dho824-mcp",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "VISA resource string for connecting to the oscilloscope (e.g., 'TCPIP0::192.168.1.100::inst0::INSTR'). Leave empty for auto-discovery.",
              "placeholder": "TCPIP0::192.168.1.100::inst0::INSTR",
              "name": "RIGOL_RESOURCE"
            },
            {
              "description": "Communication timeout in milliseconds",
              "format": "number",
              "default": "30000",
              "name": "VISA_TIMEOUT"
            },
            {
              "description": "Enable or disable oscilloscope beeper sounds",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "RIGOL_BEEPER_ENABLED"
            },
            {
              "description": "Custom directory for temporary files (waveforms, screenshots). Required for Docker if you need to access captured data outside the container. Mount a volume to this path.",
              "format": "filepath",
              "placeholder": "/tmp/rigol",
              "name": "RIGOL_TEMP_DIR"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/publisher-provided": {
          "buildInfo": {
            "imageSha256": "c5326a37299f2f43f468ceb607377f9346525e0d83ef989da1edb27667fc3137"
          },
          "tool": "github-actions",
          "version": "1.0.0"
        }
      }
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-29T14:11:27.69012Z",
        "updatedAt": "2025-10-29T14:11:27.69012Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "dev.openfeature/mcp",
      "description": "MCP server providing OpenFeature SDK installation guides and OFREP flag evaluation",
      "repository": {},
      "version": "0.0.17",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@openfeature/mcp",
          "version": "0.0.17",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-29T14:17:20.136382Z",
        "updatedAt": "2025-10-29T14:17:20.136382Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.rogiervdbrnk/mcp-real-estate-server",
      "description": "Dutch real estate data with KRK Makelaars report generation.",
      "repository": {
        "url": "https://github.com/rogiervdbrnk/mcp-server",
        "source": "github"
      },
      "version": "1.3.3",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/rogiervdbrnk/mcp-real-estate-server:v1.3.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-29T14:29:32.451192Z",
        "updatedAt": "2025-10-29T14:29:32.451192Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.ignission/mcp",
      "description": "TikTok video data analytics and content strategy tools",
      "repository": {
        "url": "https://github.com/ignission-io/mcp",
        "source": "github"
      },
      "version": "2.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.ignission.io/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-29T15:33:36.208188Z",
        "updatedAt": "2025-10-29T15:33:36.208188Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aimoda/rigol-dho824-mcp",
      "description": "Control and query Rigol DHO824 oscilloscope for waveform capture and measurements",
      "title": "Rigol DHO824 Oscilloscope",
      "repository": {
        "url": "https://github.com/aimoda/rigol-dho824-mcp",
        "source": "github",
        "id": "1043349028"
      },
      "version": "0.1.0-93.main.de67259",
      "websiteUrl": "https://aimoda.github.io/rigol-dho824-mcp/",
      "icons": [
        {
          "src": "https://rigol-dho824-mcp.email.ai.moda/bimi/logo.svg",
          "mimeType": "image/svg+xml",
          "sizes": [
            "any"
          ]
        }
      ],
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aimoda/rigol-dho824-mcp:0.1.0-93.main.de67259",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Bind mount a host directory into the container",
              "type": "named",
              "name": "-v"
            },
            {
              "description": "Bind mount path for waveform and screenshot data",
              "value": "/tmp/rigol-data:/tmp/rigol",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_RESOURCE",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "VISA_TIMEOUT",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_BEEPER_ENABLED",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_TEMP_DIR",
              "type": "positional"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/aimoda/rigol-dho824-mcp",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "VISA resource string for connecting to the oscilloscope (e.g., 'TCPIP0::192.168.1.100::inst0::INSTR'). Leave empty for auto-discovery.",
              "placeholder": "TCPIP0::192.168.1.100::inst0::INSTR",
              "name": "RIGOL_RESOURCE"
            },
            {
              "description": "Communication timeout in milliseconds",
              "format": "number",
              "default": "30000",
              "name": "VISA_TIMEOUT"
            },
            {
              "description": "Enable or disable oscilloscope beeper sounds",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "RIGOL_BEEPER_ENABLED"
            },
            {
              "description": "Custom directory for temporary files (waveforms, screenshots). Required for Docker if you need to access captured data outside the container. Mount a volume to this path.",
              "format": "filepath",
              "placeholder": "/tmp/rigol",
              "name": "RIGOL_TEMP_DIR"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/publisher-provided": {
          "buildInfo": {
            "imageSha256": "da218728a79239b045c58d27ec4e4b8311f833e0b78337f07b048f35e7ba3717"
          },
          "tool": "github-actions",
          "version": "1.0.0"
        }
      }
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-29T16:15:20.178612Z",
        "updatedAt": "2025-10-29T16:15:20.178612Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aimoda/rigol-dho824-mcp",
      "description": "Control and query Rigol DHO824 oscilloscope for waveform capture and measurements",
      "title": "Rigol DHO824 Oscilloscope",
      "repository": {
        "url": "https://github.com/aimoda/rigol-dho824-mcp",
        "source": "github",
        "id": "1043349028"
      },
      "version": "0.1.0-97.main.212375d",
      "websiteUrl": "https://aimoda.github.io/rigol-dho824-mcp/",
      "icons": [
        {
          "src": "https://rigol-dho824-mcp.email.ai.moda/bimi/logo.svg",
          "mimeType": "image/svg+xml",
          "sizes": [
            "any"
          ]
        }
      ],
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aimoda/rigol-dho824-mcp:0.1.0-97.main.212375d",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Bind mount a host directory into the container",
              "type": "named",
              "name": "-v"
            },
            {
              "description": "Bind mount path for waveform and screenshot data",
              "value": "/tmp/rigol-data:/tmp/rigol",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_RESOURCE",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "VISA_TIMEOUT",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_BEEPER_ENABLED",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_TEMP_DIR",
              "type": "positional"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/aimoda/rigol-dho824-mcp",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "VISA resource string for connecting to the oscilloscope (e.g., 'TCPIP0::192.168.1.100::inst0::INSTR'). Leave empty for auto-discovery.",
              "placeholder": "TCPIP0::192.168.1.100::inst0::INSTR",
              "name": "RIGOL_RESOURCE"
            },
            {
              "description": "Communication timeout in milliseconds",
              "format": "number",
              "default": "30000",
              "name": "VISA_TIMEOUT"
            },
            {
              "description": "Enable or disable oscilloscope beeper sounds",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "RIGOL_BEEPER_ENABLED"
            },
            {
              "description": "Custom directory for temporary files (waveforms, screenshots). Required for Docker if you need to access captured data outside the container. Mount a volume to this path.",
              "format": "filepath",
              "placeholder": "/tmp/rigol",
              "name": "RIGOL_TEMP_DIR"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/publisher-provided": {
          "buildInfo": {
            "imageSha256": "e6972bdd5f97184f28b226c24bdd69c740966b03edd3a014fdf0e58cca8f90de"
          },
          "tool": "github-actions",
          "version": "1.0.0"
        }
      }
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-29T17:30:46.259927Z",
        "updatedAt": "2025-10-29T17:30:46.259927Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.davidalbertonogueira/redshift-mcp-server",
      "description": "Secure, read-only access to Amazon Redshift with schema introspection and smart sampling",
      "title": "Redshift MCP Server",
      "repository": {},
      "version": "1.0.5",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@davidalbertonogueira/redshift-mcp-server",
          "version": "1.0.5",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-29T18:36:27.686074Z",
        "updatedAt": "2025-10-29T18:36:27.686074Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aimoda/rigol-dho824-mcp",
      "description": "Control and query Rigol DHO824 oscilloscope for waveform capture and measurements",
      "title": "Rigol DHO824 Oscilloscope",
      "repository": {
        "url": "https://github.com/aimoda/rigol-dho824-mcp",
        "source": "github",
        "id": "1043349028"
      },
      "version": "0.1.0-98.main.f005b31",
      "websiteUrl": "https://aimoda.github.io/rigol-dho824-mcp/",
      "icons": [
        {
          "src": "https://rigol-dho824-mcp.email.ai.moda/bimi/logo.svg",
          "mimeType": "image/svg+xml",
          "sizes": [
            "any"
          ]
        }
      ],
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aimoda/rigol-dho824-mcp:0.1.0-98.main.f005b31",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Bind mount a host directory into the container",
              "type": "named",
              "name": "-v"
            },
            {
              "description": "Bind mount path for waveform and screenshot data",
              "value": "/tmp/rigol-data:/tmp/rigol",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_RESOURCE",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "VISA_TIMEOUT",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_BEEPER_ENABLED",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_TEMP_DIR",
              "type": "positional"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/aimoda/rigol-dho824-mcp",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "VISA resource string for connecting to the oscilloscope (e.g., 'TCPIP0::192.168.1.100::inst0::INSTR'). Leave empty for auto-discovery.",
              "placeholder": "TCPIP0::192.168.1.100::inst0::INSTR",
              "name": "RIGOL_RESOURCE"
            },
            {
              "description": "Communication timeout in milliseconds",
              "format": "number",
              "default": "30000",
              "name": "VISA_TIMEOUT"
            },
            {
              "description": "Enable or disable oscilloscope beeper sounds",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "RIGOL_BEEPER_ENABLED"
            },
            {
              "description": "Host-side path for returned file paths. The container writes to /tmp/rigol internally and translates paths to this value in responses. Must match the host path in your -v mount. Required for Docker usage.",
              "isRequired": true,
              "format": "filepath",
              "placeholder": "/tmp/rigol-data",
              "name": "RIGOL_TEMP_DIR"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/publisher-provided": {
          "buildInfo": {
            "imageSha256": "f7cd34acb304e11e466e2d5f3148f6df3726f0df364f93d494239d2faa4bc3ba"
          },
          "tool": "github-actions",
          "version": "1.0.0"
        }
      }
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-29T19:41:06.521502Z",
        "updatedAt": "2025-10-29T19:41:06.521502Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.vercel/next-devtools-mcp",
      "description": "Next.js development tools MCP server with stdio transport",
      "repository": {
        "url": "https://github.com/vercel/next-devtools-mcp",
        "source": "github"
      },
      "version": "0.2.3",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "next-devtools-mcp",
          "version": "0.2.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-29T20:57:38.232542Z",
        "updatedAt": "2025-10-29T20:57:38.232542Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aimoda/rigol-dho824-mcp",
      "description": "Control and query Rigol DHO824 oscilloscope for waveform capture and measurements",
      "title": "Rigol DHO824 Oscilloscope",
      "repository": {
        "url": "https://github.com/aimoda/rigol-dho824-mcp",
        "source": "github",
        "id": "1043349028"
      },
      "version": "0.1.0-100.main.d0ed832",
      "websiteUrl": "https://aimoda.github.io/rigol-dho824-mcp/",
      "icons": [
        {
          "src": "https://rigol-dho824-mcp.email.ai.moda/bimi/logo.svg",
          "mimeType": "image/svg+xml",
          "sizes": [
            "any"
          ]
        }
      ],
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aimoda/rigol-dho824-mcp:0.1.0-100.main.d0ed832",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Bind mount a host directory into the container",
              "type": "named",
              "name": "-v"
            },
            {
              "description": "Bind mount path for waveform and screenshot data",
              "value": "/tmp/rigol-data:/tmp/rigol",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_RESOURCE",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "VISA_TIMEOUT",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_BEEPER_ENABLED",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_TEMP_DIR",
              "type": "positional"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/aimoda/rigol-dho824-mcp",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "VISA resource string for connecting to the oscilloscope (e.g., 'TCPIP0::192.168.1.100::inst0::INSTR'). Leave empty for auto-discovery.",
              "placeholder": "TCPIP0::192.168.1.100::inst0::INSTR",
              "name": "RIGOL_RESOURCE"
            },
            {
              "description": "Communication timeout in milliseconds",
              "format": "number",
              "default": "30000",
              "name": "VISA_TIMEOUT"
            },
            {
              "description": "Enable or disable oscilloscope beeper sounds",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "RIGOL_BEEPER_ENABLED"
            },
            {
              "description": "Host-side path for returned file paths. The container writes to /tmp/rigol internally and translates paths to this value in responses. Must match the host path in your -v mount. Required for Docker usage.",
              "isRequired": true,
              "format": "filepath",
              "placeholder": "/tmp/rigol-data",
              "name": "RIGOL_TEMP_DIR"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/publisher-provided": {
          "buildInfo": {
            "imageSha256": "94835cc132ec19be9214182e721d3a94c377c768b55d814ebf172e24ce827f28"
          },
          "tool": "github-actions",
          "version": "1.0.0"
        }
      }
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-29T22:59:48.095899Z",
        "updatedAt": "2025-10-29T22:59:48.095899Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aimoda/rigol-dho824-mcp",
      "description": "Control and query Rigol DHO824 oscilloscope for waveform capture and measurements",
      "title": "Rigol DHO824 Oscilloscope",
      "repository": {
        "url": "https://github.com/aimoda/rigol-dho824-mcp",
        "source": "github",
        "id": "1043349028"
      },
      "version": "0.1.0-101.main.1389f1e",
      "websiteUrl": "https://aimoda.github.io/rigol-dho824-mcp/",
      "icons": [
        {
          "src": "https://rigol-dho824-mcp.email.ai.moda/bimi/logo.svg",
          "mimeType": "image/svg+xml",
          "sizes": [
            "any"
          ]
        }
      ],
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aimoda/rigol-dho824-mcp:0.1.0-101.main.1389f1e",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Bind mount a host directory into the container",
              "type": "named",
              "name": "-v"
            },
            {
              "description": "Bind mount path for waveform and screenshot data",
              "value": "/tmp/rigol-data:/tmp/rigol",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_RESOURCE",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "VISA_TIMEOUT",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_BEEPER_ENABLED",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_TEMP_DIR",
              "type": "positional"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/aimoda/rigol-dho824-mcp",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "VISA resource string for connecting to the oscilloscope (e.g., 'TCPIP0::192.168.1.100::inst0::INSTR'). Leave empty for auto-discovery.",
              "placeholder": "TCPIP0::192.168.1.100::inst0::INSTR",
              "name": "RIGOL_RESOURCE"
            },
            {
              "description": "Communication timeout in milliseconds",
              "format": "number",
              "default": "30000",
              "name": "VISA_TIMEOUT"
            },
            {
              "description": "Enable or disable oscilloscope beeper sounds",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "RIGOL_BEEPER_ENABLED"
            },
            {
              "description": "Host-side path for returned file paths. The container writes to /tmp/rigol internally and translates paths to this value in responses. Must match the host path in your -v mount. Required for Docker usage.",
              "isRequired": true,
              "format": "filepath",
              "placeholder": "/tmp/rigol-data",
              "name": "RIGOL_TEMP_DIR"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/publisher-provided": {
          "buildInfo": {
            "imageSha256": "0f4ec8a7e51b41dbcbdfc0caf4d8b0f76fdf978e29b4ba64aee831cd12442d52"
          },
          "tool": "github-actions",
          "version": "1.0.0"
        }
      }
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T00:58:11.433045Z",
        "updatedAt": "2025-10-30T00:58:11.433045Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aimoda/rigol-dho824-mcp",
      "description": "Control and query Rigol DHO824 oscilloscope for waveform capture and measurements",
      "title": "Rigol DHO824 Oscilloscope",
      "repository": {
        "url": "https://github.com/aimoda/rigol-dho824-mcp",
        "source": "github",
        "id": "1043349028"
      },
      "version": "0.1.0-102.main.bf104e9",
      "websiteUrl": "https://aimoda.github.io/rigol-dho824-mcp/",
      "icons": [
        {
          "src": "https://rigol-dho824-mcp.email.ai.moda/bimi/logo.svg",
          "mimeType": "image/svg+xml",
          "sizes": [
            "any"
          ]
        }
      ],
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aimoda/rigol-dho824-mcp:0.1.0-102.main.bf104e9",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Bind mount a host directory into the container",
              "type": "named",
              "name": "-v"
            },
            {
              "description": "Bind mount path for waveform and screenshot data",
              "value": "/tmp/rigol-data:/tmp/rigol",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_RESOURCE",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "VISA_TIMEOUT",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_BEEPER_ENABLED",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_TEMP_DIR",
              "type": "positional"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/aimoda/rigol-dho824-mcp",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "VISA resource string for connecting to the oscilloscope (e.g., 'TCPIP0::192.168.1.100::inst0::INSTR'). Leave empty for auto-discovery.",
              "placeholder": "TCPIP0::192.168.1.100::inst0::INSTR",
              "name": "RIGOL_RESOURCE"
            },
            {
              "description": "Communication timeout in milliseconds",
              "format": "number",
              "default": "30000",
              "name": "VISA_TIMEOUT"
            },
            {
              "description": "Enable or disable oscilloscope beeper sounds",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "RIGOL_BEEPER_ENABLED"
            },
            {
              "description": "Host-side path for returned file paths. The container writes to /tmp/rigol internally and translates paths to this value in responses. Must match the host path in your -v mount. Required for Docker usage.",
              "isRequired": true,
              "format": "filepath",
              "placeholder": "/tmp/rigol-data",
              "name": "RIGOL_TEMP_DIR"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/publisher-provided": {
          "buildInfo": {
            "imageSha256": "fe7d9c8391b7099f225d87ea69b9359f1c2a1f6b9beff26c2328db6ef71953e8"
          },
          "tool": "github-actions",
          "version": "1.0.0"
        }
      }
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T01:32:22.229901Z",
        "updatedAt": "2025-10-30T01:32:22.229901Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aimoda/rigol-dho824-mcp",
      "description": "Control and query Rigol DHO824 oscilloscope for waveform capture and measurements",
      "title": "Rigol DHO824 Oscilloscope",
      "repository": {
        "url": "https://github.com/aimoda/rigol-dho824-mcp",
        "source": "github",
        "id": "1043349028"
      },
      "version": "0.1.0-104.main.ea735ad",
      "websiteUrl": "https://aimoda.github.io/rigol-dho824-mcp/",
      "icons": [
        {
          "src": "https://rigol-dho824-mcp.email.ai.moda/bimi/logo.svg",
          "mimeType": "image/svg+xml",
          "sizes": [
            "any"
          ]
        }
      ],
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aimoda/rigol-dho824-mcp:0.1.0-104.main.ea735ad",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Bind mount a host directory into the container",
              "type": "named",
              "name": "-v"
            },
            {
              "description": "Bind mount path for waveform and screenshot data",
              "value": "/tmp/rigol-data:/tmp/rigol",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_RESOURCE",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "VISA_TIMEOUT",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_BEEPER_ENABLED",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_TEMP_DIR",
              "type": "positional"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/aimoda/rigol-dho824-mcp",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "VISA resource string for connecting to the oscilloscope (e.g., 'TCPIP0::192.168.1.100::inst0::INSTR'). Leave empty for auto-discovery.",
              "placeholder": "TCPIP0::192.168.1.100::inst0::INSTR",
              "name": "RIGOL_RESOURCE"
            },
            {
              "description": "Communication timeout in milliseconds",
              "format": "number",
              "default": "30000",
              "name": "VISA_TIMEOUT"
            },
            {
              "description": "Enable or disable oscilloscope beeper sounds",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "RIGOL_BEEPER_ENABLED"
            },
            {
              "description": "Host-side path for returned file paths. The container writes to /tmp/rigol internally and translates paths to this value in responses. Must match the host path in your -v mount. Required for Docker usage.",
              "isRequired": true,
              "format": "filepath",
              "placeholder": "/tmp/rigol-data",
              "name": "RIGOL_TEMP_DIR"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/publisher-provided": {
          "buildInfo": {
            "imageSha256": "7e553ec66c53dc7e2ab44cf1b073b3c368163d99522580fd98cf490f763213df"
          },
          "tool": "github-actions",
          "version": "1.0.0"
        }
      }
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T04:36:41.419993Z",
        "updatedAt": "2025-10-30T04:36:41.419993Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aahl/mcp-aktools",
      "description": "MCP Server for stock and crypto",
      "title": "AkTools MCP Server",
      "repository": {
        "url": "https://github.com/aahl/mcp-aktools",
        "source": "github"
      },
      "version": "0.1.7",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "mcp-aktools",
          "version": "0.1.7",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aahl/mcp-aktools:latest",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T04:42:10.303601Z",
        "updatedAt": "2025-10-30T04:42:10.303601Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aahl/mcp-aktools",
      "description": "MCP Server for stock and crypto",
      "title": "AkTools MCP Server",
      "repository": {
        "url": "https://github.com/aahl/mcp-aktools",
        "source": "github"
      },
      "version": "0.1.8",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "mcp-aktools",
          "version": "0.1.8",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aahl/mcp-aktools:latest",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T08:13:12.314947Z",
        "updatedAt": "2025-10-30T08:13:12.314947Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.consulatehq/consulate",
      "description": "Automated payment dispute resolution. Regulation E compliant. 5 pricing tiers.",
      "title": "Consulate Agentic Dispute Resolution",
      "version": "1.0.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://api.consulatehq.com",
          "headers": [
            {
              "description": "Bearer token authentication using Consulate API keys (starts with csk_live_ or csk_test_)",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T09:39:22.987064Z",
        "updatedAt": "2025-10-30T09:39:22.987064Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.consulatehq/consulate",
      "description": "Dispute resolution: payments, service, contracts, SLAs. Regulation E. For platforms & agents.",
      "title": "Consulate Agentic Dispute Resolution",
      "version": "1.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://api.consulatehq.com",
          "headers": [
            {
              "description": "Bearer token authentication using Consulate API keys (starts with csk_live_ or csk_test_)",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T10:02:19.152984Z",
        "updatedAt": "2025-10-30T10:02:19.152984Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.VictoriaMetrics-Community/mcp-victoriametrics",
      "description": "MCP Server for VictoriaMetrics. Provides integration with VictoriaMetrics API and documentation",
      "repository": {
        "url": "https://github.com/VictoriaMetrics-Community/mcp-victoriametrics",
        "source": "github"
      },
      "version": "1.16.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/victoriametrics-community/mcp-victoriametrics:1.16.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "URL to VictoriaMetrics instance (it should be root URL of vmsingle or vmselect), for example http://localhost:8428 or https://play.victoriametrics.com",
              "isRequired": true,
              "format": "string",
              "name": "VM_INSTANCE_ENTRYPOINT"
            },
            {
              "description": "Type of VictoriaMetrics instance (single / cluster)",
              "isRequired": true,
              "format": "string",
              "name": "VM_INSTANCE_TYPE"
            },
            {
              "description": "Authentication token for VictoriaMetrics API",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "VM_INSTANCE_BEARER_TOKEN"
            },
            {
              "description": "Optional: API key from VictoriaMetrics Cloud Console (if you have deployment in VictoriaMetrics Cloud)",
              "format": "string",
              "isSecret": true,
              "name": "VMC_API_KEY"
            },
            {
              "description": "Comma-separated list of tools to disable",
              "format": "string",
              "name": "MCP_DISABLED_TOOLS"
            },
            {
              "description": "Disable all resources (documentation tool will continue to work)",
              "format": "boolean",
              "name": "MCP_DISABLE_RESOURCES"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T10:06:41.713108Z",
        "updatedAt": "2025-10-30T10:06:41.713108Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.consulatehq/consulate",
      "description": "Dispute arbitration: payments, service, contracts, SLAs. Regulation E. For platforms & agents.",
      "title": "Consulate Agentic Dispute Resolution",
      "version": "1.0.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://api.consulatehq.com",
          "headers": [
            {
              "description": "Bearer token authentication using Consulate API keys (starts with csk_live_ or csk_test_)",
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T10:16:01.258582Z",
        "updatedAt": "2025-10-30T10:16:01.258582Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "ai.exa/exa",
      "description": "Fast, intelligent web search and web crawling.\n\nNew mcp tool: Exa-code is a context tool for coding ",
      "repository": {
        "url": "https://github.com/exa-labs/exa-mcp-server",
        "source": "github"
      },
      "version": "3.0.7",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.exa.ai/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T10:19:26.892476Z",
        "updatedAt": "2025-10-30T10:19:26.892476Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aimoda/rigol-dho824-mcp",
      "description": "Control and query Rigol DHO824 oscilloscope for waveform capture and measurements",
      "title": "Rigol DHO824 Oscilloscope",
      "repository": {
        "url": "https://github.com/aimoda/rigol-dho824-mcp",
        "source": "github",
        "id": "1043349028"
      },
      "version": "0.1.0-106.main.d668b15",
      "websiteUrl": "https://aimoda.github.io/rigol-dho824-mcp/",
      "icons": [
        {
          "src": "https://rigol-dho824-mcp.email.ai.moda/bimi/logo.svg",
          "mimeType": "image/svg+xml",
          "sizes": [
            "any"
          ]
        }
      ],
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aimoda/rigol-dho824-mcp:0.1.0-106.main.d668b15",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Bind mount a host directory into the container",
              "type": "named",
              "name": "-v"
            },
            {
              "description": "Bind mount path for waveform and screenshot data",
              "value": "/tmp/rigol-data:/tmp/rigol",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_RESOURCE",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "VISA_TIMEOUT",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_BEEPER_ENABLED",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_TEMP_DIR",
              "type": "positional"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/aimoda/rigol-dho824-mcp",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "VISA resource string for connecting to the oscilloscope (e.g., 'TCPIP0::192.168.1.100::inst0::INSTR'). Leave empty for auto-discovery.",
              "placeholder": "TCPIP0::192.168.1.100::inst0::INSTR",
              "name": "RIGOL_RESOURCE"
            },
            {
              "description": "Communication timeout in milliseconds",
              "format": "number",
              "default": "30000",
              "name": "VISA_TIMEOUT"
            },
            {
              "description": "Enable or disable oscilloscope beeper sounds",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "RIGOL_BEEPER_ENABLED"
            },
            {
              "description": "Host-side path for returned file paths. The container writes to /tmp/rigol internally and translates paths to this value in responses. Must match the host path in your -v mount. Required for Docker usage.",
              "isRequired": true,
              "format": "filepath",
              "placeholder": "/tmp/rigol-data",
              "name": "RIGOL_TEMP_DIR"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/publisher-provided": {
          "buildInfo": {
            "imageSha256": "e3d8dca53d29342083005880d502502f3b6daf4222fc834a4c5a0748f9b4697a"
          },
          "tool": "github-actions",
          "version": "1.0.0"
        }
      }
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T11:40:27.79709Z",
        "updatedAt": "2025-10-30T11:40:27.79709Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aimoda/rigol-dho824-mcp",
      "description": "Control and query Rigol DHO824 oscilloscope for waveform capture and measurements",
      "title": "Rigol DHO824 Oscilloscope",
      "repository": {
        "url": "https://github.com/aimoda/rigol-dho824-mcp",
        "source": "github",
        "id": "1043349028"
      },
      "version": "0.1.0-107.main.59da529",
      "websiteUrl": "https://aimoda.github.io/rigol-dho824-mcp/",
      "icons": [
        {
          "src": "https://rigol-dho824-mcp.email.ai.moda/bimi/logo.svg",
          "mimeType": "image/svg+xml",
          "sizes": [
            "any"
          ]
        }
      ],
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aimoda/rigol-dho824-mcp:0.1.0-107.main.59da529",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Bind mount a host directory into the container",
              "type": "named",
              "name": "-v"
            },
            {
              "description": "Bind mount path for waveform and screenshot data",
              "value": "/tmp/rigol-data:/tmp/rigol",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_RESOURCE",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "VISA_TIMEOUT",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_BEEPER_ENABLED",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_TEMP_DIR",
              "type": "positional"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/aimoda/rigol-dho824-mcp",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "VISA resource string for connecting to the oscilloscope (e.g., 'TCPIP0::192.168.1.100::inst0::INSTR'). Leave empty for auto-discovery.",
              "placeholder": "TCPIP0::192.168.1.100::inst0::INSTR",
              "name": "RIGOL_RESOURCE"
            },
            {
              "description": "Communication timeout in milliseconds",
              "format": "number",
              "default": "30000",
              "name": "VISA_TIMEOUT"
            },
            {
              "description": "Enable or disable oscilloscope beeper sounds",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "RIGOL_BEEPER_ENABLED"
            },
            {
              "description": "Host-side path for returned file paths. The container writes to /tmp/rigol internally and translates paths to this value in responses. Must match the host path in your -v mount. Required for Docker usage.",
              "isRequired": true,
              "format": "filepath",
              "placeholder": "/tmp/rigol-data",
              "name": "RIGOL_TEMP_DIR"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/publisher-provided": {
          "buildInfo": {
            "imageSha256": "d719745c88775d5bdd5a11a50e0556db033f1ed130ee9c8b81b22ca06cad1112"
          },
          "tool": "github-actions",
          "version": "1.0.0"
        }
      }
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T12:08:26.699084Z",
        "updatedAt": "2025-10-30T12:08:26.699084Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.sbroenne/mcp-server-excel",
      "description": "Excel COM automation - Power Query, DAX measures, VBA, Tables, ranges, connections",
      "title": "Excel COM Automation",
      "repository": {
        "url": "https://github.com/sbroenne/mcp-server-excel",
        "source": "github"
      },
      "version": "1.0.0",
      "packages": [
        {
          "registryType": "nuget",
          "identifier": "Sbroenne.ExcelMcp.McpServer",
          "version": "1.1.7",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T13:07:46.033914Z",
        "updatedAt": "2025-10-30T13:07:46.033914Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aimoda/rigol-dho824-mcp",
      "description": "Control and query Rigol DHO824 oscilloscope for waveform capture and measurements",
      "title": "Rigol DHO824 Oscilloscope",
      "repository": {
        "url": "https://github.com/aimoda/rigol-dho824-mcp",
        "source": "github",
        "id": "1043349028"
      },
      "version": "0.1.0-111.main.1ebb6e8",
      "websiteUrl": "https://aimoda.github.io/rigol-dho824-mcp/",
      "icons": [
        {
          "src": "https://rigol-dho824-mcp.email.ai.moda/bimi/logo.svg",
          "mimeType": "image/svg+xml",
          "sizes": [
            "any"
          ]
        }
      ],
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aimoda/rigol-dho824-mcp:0.1.0-111.main.1ebb6e8",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Bind mount a host directory into the container",
              "type": "named",
              "name": "-v"
            },
            {
              "description": "Bind mount path for waveform and screenshot data",
              "value": "/tmp/rigol-data:/tmp/rigol",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_RESOURCE",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "VISA_TIMEOUT",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_BEEPER_ENABLED",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_TEMP_DIR",
              "type": "positional"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/aimoda/rigol-dho824-mcp",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "VISA resource string for connecting to the oscilloscope (e.g., 'TCPIP0::192.168.1.100::inst0::INSTR'). Leave empty for auto-discovery.",
              "placeholder": "TCPIP0::192.168.1.100::inst0::INSTR",
              "name": "RIGOL_RESOURCE"
            },
            {
              "description": "Communication timeout in milliseconds",
              "format": "number",
              "default": "30000",
              "name": "VISA_TIMEOUT"
            },
            {
              "description": "Enable or disable oscilloscope beeper sounds",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "RIGOL_BEEPER_ENABLED"
            },
            {
              "description": "Host-side path for returned file paths. The container writes to /tmp/rigol internally and translates paths to this value in responses. Must match the host path in your -v mount. Required for Docker usage.",
              "isRequired": true,
              "format": "filepath",
              "placeholder": "/tmp/rigol-data",
              "name": "RIGOL_TEMP_DIR"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/publisher-provided": {
          "buildInfo": {
            "imageSha256": "11e00f7c8d8f8ae59f2eac4866ca988fedb5cc268c0ef08935dea07e3763cbab"
          },
          "tool": "github-actions",
          "version": "1.0.0"
        }
      }
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T14:40:31.784082Z",
        "updatedAt": "2025-10-30T14:40:31.784082Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.respawn-app/tool-filter-mcp",
      "description": "MCP proxy server that filters tools from upstream MCP servers via regex-based deny list",
      "title": "Tool Filter MCP",
      "version": "0.4.1",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@respawn-app/tool-filter-mcp",
          "version": "0.4.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T14:57:55.874537Z",
        "updatedAt": "2025-10-30T14:57:55.874537Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.ggozad/haiku-rag",
      "description": "Agentic Retrieval Augmented Generation (RAG) with LanceDB",
      "repository": {
        "url": "https://github.com/ggozad/haiku.rag",
        "source": "github"
      },
      "version": "0.13.3",
      "packages": [
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "haiku-rag",
          "version": "0.13.3",
          "runtimeHint": "uvx",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "value": "serve",
              "type": "positional"
            },
            {
              "type": "named",
              "name": "--mcp"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T14:58:52.352045Z",
        "updatedAt": "2025-10-30T14:58:52.352045Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aimoda/rigol-dho824-mcp",
      "description": "Control and query Rigol DHO824 oscilloscope for waveform capture and measurements",
      "title": "Rigol DHO824 Oscilloscope",
      "repository": {
        "url": "https://github.com/aimoda/rigol-dho824-mcp",
        "source": "github",
        "id": "1043349028"
      },
      "version": "0.1.0-114.main.2134233",
      "websiteUrl": "https://aimoda.github.io/rigol-dho824-mcp/",
      "icons": [
        {
          "src": "https://rigol-dho824-mcp.email.ai.moda/bimi/logo.svg",
          "mimeType": "image/svg+xml",
          "sizes": [
            "any"
          ]
        }
      ],
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aimoda/rigol-dho824-mcp:0.1.0-114.main.2134233",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Bind mount a host directory into the container",
              "type": "named",
              "name": "-v"
            },
            {
              "description": "Bind mount path for waveform and screenshot data",
              "value": "/tmp/rigol-data:/tmp/rigol",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_RESOURCE",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "VISA_TIMEOUT",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_BEEPER_ENABLED",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_TEMP_DIR",
              "type": "positional"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/aimoda/rigol-dho824-mcp",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "VISA resource string for connecting to the oscilloscope (e.g., 'TCPIP0::192.168.1.100::inst0::INSTR'). Leave empty for auto-discovery.",
              "placeholder": "TCPIP0::192.168.1.100::inst0::INSTR",
              "name": "RIGOL_RESOURCE"
            },
            {
              "description": "Communication timeout in milliseconds",
              "format": "number",
              "default": "30000",
              "name": "VISA_TIMEOUT"
            },
            {
              "description": "Enable or disable oscilloscope beeper sounds",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "RIGOL_BEEPER_ENABLED"
            },
            {
              "description": "Host-side path for returned file paths. The container writes to /tmp/rigol internally and translates paths to this value in responses. Must match the host path in your -v mount. Required for Docker usage.",
              "isRequired": true,
              "format": "filepath",
              "placeholder": "/tmp/rigol-data",
              "name": "RIGOL_TEMP_DIR"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/publisher-provided": {
          "buildInfo": {
            "imageSha256": "acf79484c68b0076759655ceb1a0ba34194bb7c4e7711ef692c294d2c3a8cc09"
          },
          "tool": "github-actions",
          "version": "1.0.0"
        }
      }
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T16:04:07.86397Z",
        "updatedAt": "2025-10-30T16:04:07.86397Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.ProfessionalWiki/mediawiki-mcp-server",
      "description": "MCP server enabling AI clients to interact with any MediaWiki wiki through standard tools",
      "title": "MediaWiki MCP Server",
      "repository": {
        "url": "https://github.com/ProfessionalWiki/MediaWiki-MCP-Server",
        "source": "github"
      },
      "version": "0.4.0",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@professional-wiki/mediawiki-mcp-server",
          "version": "0.4.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Path to your configuration file",
              "format": "filepath",
              "default": "config.json",
              "name": "CONFIG"
            },
            {
              "description": "Type of MCP server transport",
              "default": "stdio",
              "choices": [
                "stdio",
                "http"
              ],
              "name": "MCP_TRANSPORT"
            },
            {
              "description": "Port used for StreamableHTTP transport",
              "format": "number",
              "default": "3000",
              "name": "PORT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T16:10:16.47041Z",
        "updatedAt": "2025-10-30T16:10:16.47041Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.altmetric/altmetric-mcp",
      "description": "MCP server for Altmetric APIs - track research attention across news, policy, social media, and more",
      "repository": {
        "url": "https://github.com/altmetric/altmetric-mcp",
        "source": "github"
      },
      "version": "0.1.1",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "altmetric-mcp",
          "version": "0.1.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "API key for Altmetric Details Page API. At least one credential set required: either this key OR both Explorer API credentials",
              "format": "string",
              "isSecret": true,
              "name": "ALTMETRIC_DETAILS_API_KEY"
            },
            {
              "description": "API key for Altmetric Explorer API (requires ALTMETRIC_EXPLORER_API_SECRET). At least one credential set required",
              "format": "string",
              "isSecret": true,
              "name": "ALTMETRIC_EXPLORER_API_KEY"
            },
            {
              "description": "API secret for Altmetric Explorer API HMAC authentication (requires ALTMETRIC_EXPLORER_API_KEY)",
              "format": "string",
              "isSecret": true,
              "name": "ALTMETRIC_EXPLORER_API_SECRET"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T16:55:05.94022Z",
        "updatedAt": "2025-10-30T16:55:05.94022Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.ivisa.www/mcp",
      "description": "Check visa requirements and travel documents for international travel destinations.",
      "title": "iVisa MCP Server",
      "version": "0.0.1",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://www.ivisa.com/mcp"
        },
        {
          "type": "sse",
          "url": "https://www.ivisa.com/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T18:25:25.57272Z",
        "updatedAt": "2025-10-30T18:25:25.57272Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aimoda/rigol-dho824-mcp",
      "description": "Control and query Rigol DHO824 oscilloscope for waveform capture and measurements",
      "title": "Rigol DHO824 Oscilloscope",
      "repository": {
        "url": "https://github.com/aimoda/rigol-dho824-mcp",
        "source": "github",
        "id": "1043349028"
      },
      "version": "0.1.0-117.main.6346d8c",
      "websiteUrl": "https://aimoda.github.io/rigol-dho824-mcp/",
      "icons": [
        {
          "src": "https://rigol-dho824-mcp.email.ai.moda/bimi/logo.svg",
          "mimeType": "image/svg+xml",
          "sizes": [
            "any"
          ]
        }
      ],
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aimoda/rigol-dho824-mcp:0.1.0-117.main.6346d8c",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Bind mount a host directory into the container",
              "type": "named",
              "name": "-v"
            },
            {
              "description": "Bind mount path for waveform and screenshot data",
              "value": "/tmp/rigol-data:/tmp/rigol",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_RESOURCE",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "VISA_TIMEOUT",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_BEEPER_ENABLED",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_TEMP_DIR",
              "type": "positional"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/aimoda/rigol-dho824-mcp",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "VISA resource string for connecting to the oscilloscope (e.g., 'TCPIP0::192.168.1.100::inst0::INSTR'). Leave empty for auto-discovery.",
              "placeholder": "TCPIP0::192.168.1.100::inst0::INSTR",
              "name": "RIGOL_RESOURCE"
            },
            {
              "description": "Communication timeout in milliseconds",
              "format": "number",
              "default": "30000",
              "name": "VISA_TIMEOUT"
            },
            {
              "description": "Enable or disable oscilloscope beeper sounds",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "RIGOL_BEEPER_ENABLED"
            },
            {
              "description": "Host-side path for returned file paths. The container writes to /tmp/rigol internally and translates paths to this value in responses. Must match the host path in your -v mount. Required for Docker usage.",
              "isRequired": true,
              "format": "filepath",
              "placeholder": "/tmp/rigol-data",
              "name": "RIGOL_TEMP_DIR"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/publisher-provided": {
          "buildInfo": {
            "imageSha256": "f20493b68e7a3d7cd002d1d1360369cc9967ed45cf61b81f41802f0eca0021c5"
          },
          "tool": "github-actions",
          "version": "1.0.0"
        }
      }
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T18:37:26.284684Z",
        "updatedAt": "2025-10-30T18:37:26.284684Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.ivisa.www/mcp",
      "description": "Check visa requirements and travel documents for international travel destinations.",
      "title": "iVisa MCP Server",
      "version": "0.0.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://www.ivisa.com/mcp"
        },
        {
          "type": "sse",
          "url": "https://www.ivisa.com/mcp"
        },
        {
          "type": "streamable-http",
          "url": "https://www.ivisa.com/mcp/chatgpt"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T18:49:54.925381Z",
        "updatedAt": "2025-10-30T18:49:54.925381Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aimoda/rigol-dho824-mcp",
      "description": "Control and query Rigol DHO824 oscilloscope for waveform capture and measurements",
      "title": "Rigol DHO824 Oscilloscope",
      "repository": {
        "url": "https://github.com/aimoda/rigol-dho824-mcp",
        "source": "github",
        "id": "1043349028"
      },
      "version": "0.1.118-118.main.df546a7",
      "websiteUrl": "https://aimoda.github.io/rigol-dho824-mcp/",
      "icons": [
        {
          "src": "https://rigol-dho824-mcp.email.ai.moda/bimi/logo.svg",
          "mimeType": "image/svg+xml",
          "sizes": [
            "any"
          ]
        }
      ],
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aimoda/rigol-dho824-mcp:0.1.118-118.main.df546a7",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Bind mount a host directory into the container",
              "type": "named",
              "name": "-v"
            },
            {
              "description": "Bind mount path for waveform and screenshot data",
              "value": "/tmp/rigol-data:/tmp/rigol",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_RESOURCE",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "VISA_TIMEOUT",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_BEEPER_ENABLED",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_TEMP_DIR",
              "type": "positional"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/aimoda/rigol-dho824-mcp",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "VISA resource string for connecting to the oscilloscope (e.g., 'TCPIP0::192.168.1.100::inst0::INSTR'). Leave empty for auto-discovery.",
              "placeholder": "TCPIP0::192.168.1.100::inst0::INSTR",
              "name": "RIGOL_RESOURCE"
            },
            {
              "description": "Communication timeout in milliseconds",
              "format": "number",
              "default": "30000",
              "name": "VISA_TIMEOUT"
            },
            {
              "description": "Enable or disable oscilloscope beeper sounds",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "RIGOL_BEEPER_ENABLED"
            },
            {
              "description": "Host-side path for returned file paths. The container writes to /tmp/rigol internally and translates paths to this value in responses. Must match the host path in your -v mount. Required for Docker usage.",
              "isRequired": true,
              "format": "filepath",
              "placeholder": "/tmp/rigol-data",
              "name": "RIGOL_TEMP_DIR"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/publisher-provided": {
          "buildInfo": {
            "imageSha256": "675e14e357e06b24929b1cd059d3918171fefd65cf328a76f4cb006951156ebe"
          },
          "tool": "github-actions",
          "version": "1.0.0"
        }
      }
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T18:55:08.458563Z",
        "updatedAt": "2025-10-30T18:55:08.458563Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aimoda/rigol-dho824-mcp",
      "description": "Control and query Rigol DHO824 oscilloscope for waveform capture and measurements",
      "title": "Rigol DHO824 Oscilloscope",
      "repository": {
        "url": "https://github.com/aimoda/rigol-dho824-mcp",
        "source": "github",
        "id": "1043349028"
      },
      "version": "0.1.121-121.main.38c1947",
      "websiteUrl": "https://aimoda.github.io/rigol-dho824-mcp/",
      "icons": [
        {
          "src": "https://rigol-dho824-mcp.email.ai.moda/bimi/logo.svg",
          "mimeType": "image/svg+xml",
          "sizes": [
            "any"
          ]
        }
      ],
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aimoda/rigol-dho824-mcp:0.1.121-121.main.38c1947",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Bind mount a host directory into the container",
              "type": "named",
              "name": "-v"
            },
            {
              "description": "Bind mount path for waveform and screenshot data",
              "value": "/tmp/rigol-data:/tmp/rigol",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_RESOURCE",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "VISA_TIMEOUT",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_BEEPER_ENABLED",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_TEMP_DIR",
              "type": "positional"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/aimoda/rigol-dho824-mcp",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "VISA resource string for connecting to the oscilloscope (e.g., 'TCPIP0::192.168.1.100::inst0::INSTR'). Leave empty for auto-discovery.",
              "placeholder": "TCPIP0::192.168.1.100::inst0::INSTR",
              "name": "RIGOL_RESOURCE"
            },
            {
              "description": "Communication timeout in milliseconds",
              "format": "number",
              "default": "30000",
              "name": "VISA_TIMEOUT"
            },
            {
              "description": "Enable or disable oscilloscope beeper sounds",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "RIGOL_BEEPER_ENABLED"
            },
            {
              "description": "Host-side path for returned file paths. The container writes to /tmp/rigol internally and translates paths to this value in responses. Must match the host path in your -v mount. Required for Docker usage.",
              "isRequired": true,
              "format": "filepath",
              "placeholder": "/tmp/rigol-data",
              "name": "RIGOL_TEMP_DIR"
            }
          ]
        },
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "rigol-dho824-mcp",
          "version": "0.1.121",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "VISA resource string for connecting to the oscilloscope (e.g., 'TCPIP0::192.168.1.100::inst0::INSTR'). Leave empty for auto-discovery.",
              "placeholder": "TCPIP0::192.168.1.100::inst0::INSTR",
              "name": "RIGOL_RESOURCE"
            },
            {
              "description": "Communication timeout in milliseconds",
              "format": "number",
              "default": "30000",
              "name": "VISA_TIMEOUT"
            },
            {
              "description": "Enable or disable oscilloscope beeper sounds",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "RIGOL_BEEPER_ENABLED"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/publisher-provided": {
          "buildInfo": {
            "imageSha256": "90967a8924edb6a5105fe32daa42b3dd1cd4bfbddf21498ba49e03ec3d08539a"
          },
          "tool": "github-actions",
          "version": "1.0.0"
        }
      }
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T19:25:53.760957Z",
        "updatedAt": "2025-10-30T19:25:53.760957Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aimoda/rigol-dho824-mcp",
      "description": "Control and query Rigol DHO824 oscilloscope for waveform capture and measurements",
      "title": "Rigol DHO824 Oscilloscope",
      "repository": {
        "url": "https://github.com/aimoda/rigol-dho824-mcp",
        "source": "github",
        "id": "1043349028"
      },
      "version": "0.1.125-main.d6241ab",
      "websiteUrl": "https://aimoda.github.io/rigol-dho824-mcp/",
      "icons": [
        {
          "src": "https://rigol-dho824-mcp.email.ai.moda/bimi/logo.svg",
          "mimeType": "image/svg+xml",
          "sizes": [
            "any"
          ]
        }
      ],
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aimoda/rigol-dho824-mcp:0.1.125-main.d6241ab",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Bind mount a host directory into the container",
              "type": "named",
              "name": "-v"
            },
            {
              "description": "Bind mount path for waveform and screenshot data",
              "value": "/tmp/rigol-data:/tmp/rigol",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_RESOURCE",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "VISA_TIMEOUT",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_BEEPER_ENABLED",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_TEMP_DIR",
              "type": "positional"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/aimoda/rigol-dho824-mcp",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "VISA resource string for connecting to the oscilloscope (e.g., 'TCPIP0::192.168.1.100::inst0::INSTR').",
              "isRequired": true,
              "placeholder": "TCPIP0::192.168.1.100::inst0::INSTR",
              "name": "RIGOL_RESOURCE"
            },
            {
              "description": "Communication timeout in milliseconds",
              "format": "number",
              "default": "30000",
              "name": "VISA_TIMEOUT"
            },
            {
              "description": "Enable or disable oscilloscope beeper sounds",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "RIGOL_BEEPER_ENABLED"
            },
            {
              "description": "Host-side path for returned file paths. The container writes to /tmp/rigol internally and translates paths to this value in responses. Must match the host path in your -v mount. Required for Docker usage.",
              "isRequired": true,
              "format": "filepath",
              "placeholder": "/tmp/rigol-data",
              "name": "RIGOL_TEMP_DIR"
            }
          ]
        },
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "rigol-dho824-mcp",
          "version": "0.1.125",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "VISA resource string for connecting to the oscilloscope (e.g., 'TCPIP0::192.168.1.100::inst0::INSTR').",
              "isRequired": true,
              "placeholder": "TCPIP0::192.168.1.100::inst0::INSTR",
              "name": "RIGOL_RESOURCE"
            },
            {
              "description": "Communication timeout in milliseconds",
              "format": "number",
              "default": "30000",
              "name": "VISA_TIMEOUT"
            },
            {
              "description": "Enable or disable oscilloscope beeper sounds",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "RIGOL_BEEPER_ENABLED"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/publisher-provided": {
          "buildInfo": {
            "imageSha256": "d19816a9046b8f6ac6680368c447e960d43808fed1e674025f6a209472a701e9"
          },
          "tool": "github-actions",
          "version": "1.0.0"
        }
      }
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T19:42:45.086163Z",
        "updatedAt": "2025-10-30T19:42:45.086163Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.devcycle/mcp",
      "description": "DevCycle MCP server for feature flag management",
      "repository": {
        "url": "https://github.com/DevCycleHQ/cli",
        "source": "github"
      },
      "version": "6.1.4",
      "websiteUrl": "https://docs.devcycle.com/cli-mcp/mcp-getting-started",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.devcycle.com/mcp"
        },
        {
          "type": "sse",
          "url": "https://mcp.devcycle.com/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T20:40:55.161821Z",
        "updatedAt": "2025-10-30T20:40:55.161821Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "org.aquaview/aquaview-mcp",
      "description": "AQUAVIEW MCP Server - Search and access global oceanographic and environmental datasets.",
      "repository": {
        "url": "https://github.com/AQUAVIEW-DAH/aquaview-mcp",
        "source": "github"
      },
      "version": "0.1.0"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T22:15:22.969244Z",
        "updatedAt": "2025-10-30T22:15:22.969244Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "org.aquaview/aquaview-mcp",
      "description": "AQUAVIEW MCP Server - Search and access global oceanographic and environmental datasets.",
      "version": "0.1.1"
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T22:26:00.098844Z",
        "updatedAt": "2025-10-30T22:26:00.098844Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "org.aquaview/aquaview-mcp",
      "description": "AQUAVIEW MCP Server - Search and access global oceanographic and environmental datasets.",
      "version": "0.1.2",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.aquaview.org/mcp"
        },
        {
          "type": "sse",
          "url": "https://mcp.aquaview.org/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T22:39:48.596774Z",
        "updatedAt": "2025-10-30T22:39:48.596774Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.teamwork/mcp",
      "description": "The Teamwork.com official MCP server helps teams efficiently manage client projects with AI.",
      "repository": {
        "url": "https://github.com/teamwork/mcp",
        "source": "github"
      },
      "version": "1.6.9",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/teamwork/mcp:v1.6.9",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "TW_MCP_BEARER_TOKEN"
            },
            {
              "description": "Choose log output format between 'text' or 'json'. Default is 'text'.",
              "format": "string",
              "name": "TW_MCP_LOG_FORMAT"
            },
            {
              "description": "Choose log level between 'debug', 'info', 'warn' or 'error'. Default is 'info'.",
              "format": "string",
              "name": "TW_MCP_LOG_LEVEL"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "sse",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.ai.teamwork.com",
          "headers": [
            {
              "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T22:39:54.408029Z",
        "updatedAt": "2025-10-30T22:39:54.408029Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.pubnub/mcp-server",
      "description": "PubNub MCP for Real-time messaging. API Access and SDK documentation.",
      "repository": {
        "url": "https://github.com/pubnub/pubnub-mcp-server",
        "source": "github"
      },
      "version": "1.0.121",
      "websiteUrl": "https://pubnub.github.io/pubnub-mcp-server",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@pubnub/mcp",
          "version": "1.0.121",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-30T23:27:30.284395Z",
        "updatedAt": "2025-10-30T23:27:30.284395Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "org.aquaview/aquaview-mcp",
      "description": "AQUAVIEW MCP Server - Search and access global oceanographic and environmental datasets.",
      "version": "0.2.0",
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.aquaview.org/mcp"
        },
        {
          "type": "sse",
          "url": "https://mcp.aquaview.org/sse"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-31T00:14:26.751185Z",
        "updatedAt": "2025-10-31T00:14:26.751185Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.zloeber/terraform-ingest",
      "description": "Ingest and analyze Terraform modules from multiple repositories for AI RAG systems",
      "title": "Terraform Ingest MCP",
      "version": "0.1.15",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "terraform-ingest",
          "version": "0.1.15",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-31T00:54:19.165235Z",
        "updatedAt": "2025-10-31T00:54:19.165235Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aahl/mcp-aktools",
      "description": "MCP Server for stock and crypto",
      "title": "AkTools MCP Server",
      "repository": {
        "url": "https://github.com/aahl/mcp-aktools",
        "source": "github"
      },
      "version": "0.1.9",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "mcp-aktools",
          "version": "0.1.9",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aahl/mcp-aktools:latest",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-31T03:37:12.444286Z",
        "updatedAt": "2025-10-31T03:37:12.444286Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.Seey215/tavily-mcp",
      "description": "MCP server for advanced web search using Tavily API.",
      "title": "Tavily MCP Server",
      "repository": {
        "url": "https://github.com/Seey215/tavily-mcp",
        "source": "github"
      },
      "version": "0.2.9",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@toolsdk.ai/tavily-mcp",
          "version": "0.2.9",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Your TAVILY_API_KEY",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "TAVILY_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-31T03:43:52.592661Z",
        "updatedAt": "2025-10-31T03:43:52.592661Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.ariroffe72/zmanim-mcp-server",
      "description": "MCP server providing Jewish prayer times (zmanim) calculations for any location worldwide.",
      "title": "Zmanim MCP Server",
      "repository": {
        "url": "https://github.com/ariroffe72/zmanim-mcp-server.git",
        "source": "github"
      },
      "version": "0.2.0",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "zmanim-mcp-server",
          "version": "0.2.0",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-31T04:43:46.570232Z",
        "updatedAt": "2025-10-31T04:43:46.570232Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.meloncafe/chromadb-remote-mcp",
      "description": "Remote ChromaDB vector database MCP server with streamable HTTP transport",
      "title": "ChromaDB Remote MCP Server",
      "repository": {
        "url": "https://github.com/meloncafe/chromadb-remote-mcp",
        "source": "github"
      },
      "version": "1.0.2",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "devsaurus/chromadb-remote-mcp:latest",
          "runtimeHint": "docker",
          "transport": {
            "type": "streamable-http",
            "url": "https://meloncafe.github.io/chromadb-remote-mcp/mcp"
          },
          "runtimeArguments": [
            {
              "value": "8080:8080",
              "type": "named",
              "name": "-p"
            },
            {
              "value": "MCP_AUTH_TOKEN={MCP_AUTH_TOKEN}",
              "type": "named",
              "name": "-e"
            }
          ],
          "environmentVariables": [
            {
              "description": "URL of your deployed ChromaDB Remote MCP server",
              "isRequired": true,
              "placeholder": "https://your-server.example.com/mcp",
              "name": "CHROMADB_MCP_URL"
            },
            {
              "description": "Authentication token for the MCP server (if enabled)",
              "isSecret": true,
              "name": "MCP_AUTH_TOKEN"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://meloncafe.github.io/chromadb-remote-mcp/mcp"
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-31T06:12:13.693488Z",
        "updatedAt": "2025-10-31T06:12:13.693488Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.pi22by7/in-memoria",
      "description": "Persistent codebase intelligence that gives AI assistants memory across sessions",
      "version": "0.5.7",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "in-memoria",
          "version": "0.5.7",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Optional OpenAI API key for embeddings (falls back to local transformers.js)",
              "isSecret": true,
              "name": "OPENAI_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-31T07:23:07.83562Z",
        "updatedAt": "2025-10-31T07:23:07.83562Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.rogiervdbrnk/mcp-real-estate-server",
      "description": "Dutch real estate data with KRK Makelaars report generation.",
      "repository": {
        "url": "https://github.com/rogiervdbrnk/mcp-server",
        "source": "github"
      },
      "version": "1.3.4",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/rogiervdbrnk/mcp-real-estate-server:v1.3.4",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-31T09:38:19.362302Z",
        "updatedAt": "2025-10-31T09:38:19.362302Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.rogiervdbrnk/mcp-real-estate-server",
      "description": "Dutch real estate data with KRK Makelaars report generation.",
      "repository": {
        "url": "https://github.com/rogiervdbrnk/mcp-server",
        "source": "github"
      },
      "version": "1.3.5",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/rogiervdbrnk/mcp-real-estate-server:v1.3.5",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-31T10:05:08.252148Z",
        "updatedAt": "2025-10-31T10:05:08.252148Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aahl/mcp-aktools",
      "description": "MCP Server for stock and crypto",
      "title": "AkTools MCP Server",
      "repository": {
        "url": "https://github.com/aahl/mcp-aktools",
        "source": "github"
      },
      "version": "0.1.10",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "mcp-aktools",
          "version": "0.1.10",
          "transport": {
            "type": "stdio"
          }
        },
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aahl/mcp-aktools:latest",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-31T11:02:37.233096Z",
        "updatedAt": "2025-10-31T11:02:37.233096Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.rogiervdbrnk/mcp-real-estate-server",
      "description": "Dutch real estate data with KRK Makelaars report generation.",
      "repository": {
        "url": "https://github.com/rogiervdbrnk/mcp-server",
        "source": "github"
      },
      "version": "1.3.6",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/rogiervdbrnk/mcp-real-estate-server:v1.3.6",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-31T11:36:05.869134Z",
        "updatedAt": "2025-10-31T11:36:05.869134Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.postman/postman-mcp-server",
      "description": "A basic MCP server to operate on the Postman API.",
      "repository": {
        "url": "https://github.com/postmanlabs/postman-mcp-server",
        "source": "github"
      },
      "version": "2.4.2",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@postman/postman-mcp-server",
          "version": "2.4.2",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "A valid Postman API key.",
              "isRequired": true,
              "isSecret": true,
              "name": "POSTMAN_API_KEY"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/postmanlabs/postman-mcp-server/releases/download/v2.3.7/postman-mcp-server-minimal.mcpb",
          "fileSha256": "141d04ea82f35bd140ba8c73fa87b1f746260b9c11ee0623fc04b6012056985f",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "A valid Postman API key.",
              "isRequired": true,
              "isSecret": true,
              "name": "POSTMAN_API_KEY"
            }
          ]
        },
        {
          "registryType": "mcpb",
          "identifier": "https://github.com/postmanlabs/postman-mcp-server/releases/download/v2.3.7/postman-mcp-server-full.mcpb",
          "fileSha256": "8ec132046ecf970a52ae056628a9187bdcabad89dff7b4b6ea3f91769f360aeb",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "A valid Postman API key.",
              "isRequired": true,
              "isSecret": true,
              "name": "POSTMAN_API_KEY"
            }
          ]
        }
      ],
      "remotes": [
        {
          "type": "streamable-http",
          "url": "https://mcp.postman.com/mcp",
          "headers": [
            {
              "description": "A Bearer token and a valid Postman API key for authentication.",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.postman.com/minimal",
          "headers": [
            {
              "description": "A Bearer token and a valid Postman API key for authentication.",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.eu.postman.com/mcp",
          "headers": [
            {
              "description": "A Bearer token and a valid Postman API key for authentication.",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        },
        {
          "type": "streamable-http",
          "url": "https://mcp.eu.postman.com/minimal",
          "headers": [
            {
              "description": "A Bearer token and a valid Postman API key for authentication.",
              "isRequired": true,
              "isSecret": true,
              "name": "Authorization"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-31T11:39:18.79638Z",
        "updatedAt": "2025-10-31T11:39:18.79638Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aimoda/rigol-dho824-mcp",
      "description": "Control and query Rigol DHO824 oscilloscope for waveform capture and measurements",
      "title": "Rigol DHO824 Oscilloscope",
      "repository": {
        "url": "https://github.com/aimoda/rigol-dho824-mcp",
        "source": "github",
        "id": "1043349028"
      },
      "version": "0.1.127-main.0123ed6",
      "websiteUrl": "https://aimoda.github.io/rigol-dho824-mcp/",
      "icons": [
        {
          "src": "https://rigol-dho824-mcp.email.ai.moda/bimi/logo.svg",
          "mimeType": "image/svg+xml",
          "sizes": [
            "any"
          ]
        }
      ],
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aimoda/rigol-dho824-mcp:0.1.127-main.0123ed6",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Bind mount a host directory into the container",
              "type": "named",
              "name": "-v"
            },
            {
              "description": "Bind mount path for waveform and screenshot data",
              "value": "/tmp/rigol-data:/tmp/rigol",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_RESOURCE",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "VISA_TIMEOUT",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_BEEPER_ENABLED",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_TEMP_DIR",
              "type": "positional"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/aimoda/rigol-dho824-mcp",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "VISA resource string for connecting to the oscilloscope (e.g., 'TCPIP0::192.168.1.100::inst0::INSTR').",
              "isRequired": true,
              "placeholder": "TCPIP0::192.168.1.100::inst0::INSTR",
              "name": "RIGOL_RESOURCE"
            },
            {
              "description": "Communication timeout in milliseconds",
              "format": "number",
              "default": "30000",
              "name": "VISA_TIMEOUT"
            },
            {
              "description": "Enable or disable oscilloscope beeper sounds",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "RIGOL_BEEPER_ENABLED"
            },
            {
              "description": "Host-side path for returned file paths. The container writes to /tmp/rigol internally and translates paths to this value in responses. Must match the host path in your -v mount. Required for Docker usage.",
              "isRequired": true,
              "format": "filepath",
              "placeholder": "/tmp/rigol-data",
              "name": "RIGOL_TEMP_DIR"
            }
          ]
        },
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "rigol-dho824-mcp",
          "version": "0.1.127",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "VISA resource string for connecting to the oscilloscope (e.g., 'TCPIP0::192.168.1.100::inst0::INSTR').",
              "isRequired": true,
              "placeholder": "TCPIP0::192.168.1.100::inst0::INSTR",
              "name": "RIGOL_RESOURCE"
            },
            {
              "description": "Communication timeout in milliseconds",
              "format": "number",
              "default": "30000",
              "name": "VISA_TIMEOUT"
            },
            {
              "description": "Enable or disable oscilloscope beeper sounds",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "RIGOL_BEEPER_ENABLED"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/publisher-provided": {
          "buildInfo": {
            "imageSha256": "ddacf88815dafd8f488f9d7a62fd6b2bf4a3d73aeb8318a4c9012667010b0123"
          },
          "tool": "github-actions",
          "version": "1.0.0"
        }
      }
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-31T13:39:33.892531Z",
        "updatedAt": "2025-10-31T13:39:33.892531Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.TharanaBope/sql-server-mcp",
      "description": "SQL Server MCP with RAG capabilities for Windows (native ODBC support)",
      "title": "SQL Server MCP (Windows)",
      "repository": {
        "url": "https://github.com/TharanaBope/SQL-MCP-Mac-Windows",
        "source": "github"
      },
      "version": "1.0.3",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@tharanabopearachchi/sql-server-mcp",
          "version": "1.0.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-31T14:52:08.983083Z",
        "updatedAt": "2025-10-31T14:52:08.983083Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.TharanaBope/sql-server-mcp-macos",
      "description": "SQL Server MCP with RAG capabilities for macOS (Docker SQL Server support)",
      "title": "SQL Server MCP (macOS)",
      "repository": {
        "url": "https://github.com/TharanaBope/SQL-MCP-Mac-Windows",
        "source": "github"
      },
      "version": "1.0.3",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "@tharanabopearachchi/sql-server-mcp-macos",
          "version": "1.0.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-31T14:52:24.602908Z",
        "updatedAt": "2025-10-31T14:52:24.602908Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.KSAklfszf921/skolverket-mcp",
      "description": "MCP server for Skolverket's open APIs - Curriculum, School Units, and Adult Education",
      "title": "Skolverket MCP",
      "repository": {
        "url": "https://github.com/KSAklfszf921/skolverket-mcp",
        "source": "github"
      },
      "version": "2.1.1",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "skolverket-mcp",
          "version": "2.1.1",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-31T14:56:50.103701Z",
        "updatedAt": "2025-10-31T14:56:50.103701Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.KSAklfszf921/skolverket-mcp",
      "description": "MCP server for Skolverket's open APIs - Curriculum, School Units, and Adult Education",
      "title": "Skolverket MCP",
      "repository": {
        "url": "https://github.com/KSAklfszf921/skolverket-mcp",
        "source": "github"
      },
      "version": "2.1.2",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "skolverket-mcp",
          "version": "2.1.2",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-31T15:14:42.55191Z",
        "updatedAt": "2025-10-31T15:14:42.55191Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.KSAklfszf921/skolverket-mcp",
      "description": "MCP server for Skolverket's open APIs - Curriculum, School Units, and Adult Education",
      "title": "Skolverket MCP",
      "repository": {
        "url": "https://github.com/KSAklfszf921/skolverket-mcp",
        "source": "github"
      },
      "version": "2.1.3",
      "packages": [
        {
          "registryType": "npm",
          "identifier": "skolverket-mcp",
          "version": "2.1.3",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-31T16:14:12.916822Z",
        "updatedAt": "2025-10-31T16:14:12.916822Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aimoda/rigol-dho824-mcp",
      "description": "Control and query Rigol DHO824 oscilloscope for waveform capture and measurements",
      "title": "Rigol DHO824 Oscilloscope",
      "repository": {
        "url": "https://github.com/aimoda/rigol-dho824-mcp",
        "source": "github",
        "id": "1043349028"
      },
      "version": "0.1.128-main.bf65a5d",
      "websiteUrl": "https://aimoda.github.io/rigol-dho824-mcp/",
      "icons": [
        {
          "src": "https://rigol-dho824-mcp.email.ai.moda/bimi/logo.svg",
          "mimeType": "image/svg+xml",
          "sizes": [
            "any"
          ]
        }
      ],
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aimoda/rigol-dho824-mcp:0.1.128-main.bf65a5d",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Bind mount a host directory into the container",
              "type": "named",
              "name": "-v"
            },
            {
              "description": "Bind mount path for waveform and screenshot data",
              "value": "/tmp/rigol-data:/tmp/rigol",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_RESOURCE",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "VISA_TIMEOUT",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_BEEPER_ENABLED",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_TEMP_DIR",
              "type": "positional"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/aimoda/rigol-dho824-mcp",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "VISA resource string for connecting to the oscilloscope (e.g., 'TCPIP0::192.168.1.100::inst0::INSTR').",
              "isRequired": true,
              "placeholder": "TCPIP0::192.168.1.100::inst0::INSTR",
              "name": "RIGOL_RESOURCE"
            },
            {
              "description": "Communication timeout in milliseconds",
              "format": "number",
              "default": "30000",
              "name": "VISA_TIMEOUT"
            },
            {
              "description": "Enable or disable oscilloscope beeper sounds",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "RIGOL_BEEPER_ENABLED"
            },
            {
              "description": "Host-side path for returned file paths. The container writes to /tmp/rigol internally and translates paths to this value in responses. Must match the host path in your -v mount. Required for Docker usage.",
              "isRequired": true,
              "format": "filepath",
              "placeholder": "/tmp/rigol-data",
              "name": "RIGOL_TEMP_DIR"
            }
          ]
        },
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "rigol-dho824-mcp",
          "version": "0.1.128",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "VISA resource string for connecting to the oscilloscope (e.g., 'TCPIP0::192.168.1.100::inst0::INSTR').",
              "isRequired": true,
              "placeholder": "TCPIP0::192.168.1.100::inst0::INSTR",
              "name": "RIGOL_RESOURCE"
            },
            {
              "description": "Communication timeout in milliseconds",
              "format": "number",
              "default": "30000",
              "name": "VISA_TIMEOUT"
            },
            {
              "description": "Enable or disable oscilloscope beeper sounds",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "RIGOL_BEEPER_ENABLED"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/publisher-provided": {
          "buildInfo": {
            "imageSha256": "8a5393eaa19ada47a7826475de3274ed0d4b5c62f50b4787c11f8630f2286111"
          },
          "tool": "github-actions",
          "version": "1.0.0"
        }
      }
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-31T16:45:35.882545Z",
        "updatedAt": "2025-10-31T16:45:35.882545Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.sunshad0w/html2md",
      "description": "Converts HTML to clean Markdown. Supports Playwright for JavaScript-heavy pages.",
      "title": "HTML to Markdown MCP Server",
      "repository": {
        "url": "https://github.com/sunshad0w/html2md-mcp",
        "source": "github"
      },
      "version": "0.2.0",
      "packages": [
        {
          "registryType": "oci",
          "identifier": "docker.io/sunshad0w/html2md-mcp",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-31T16:51:46.971363Z",
        "updatedAt": "2025-10-31T16:51:46.971363Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.zloeber/terraform-ingest",
      "description": "Ingest and analyze Terraform modules from multiple repositories for AI RAG systems",
      "title": "Terraform Ingest MCP",
      "version": "0.1.16",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "terraform-ingest",
          "version": "0.1.16",
          "transport": {
            "type": "stdio"
          }
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-31T17:03:08.707318Z",
        "updatedAt": "2025-10-31T17:03:08.707318Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.shinpr/mcp-local-rag",
      "description": "Easy-to-setup local RAG server with minimal configuration",
      "repository": {
        "url": "https://github.com/shinpr/mcp-local-rag",
        "source": "github"
      },
      "version": "0.1.1",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-local-rag",
          "version": "0.1.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Base directory for document storage (defaults to current working directory)",
              "format": "string",
              "name": "BASE_DIR"
            },
            {
              "description": "Path to LanceDB database directory (defaults to ./lancedb/)",
              "format": "string",
              "name": "DB_PATH"
            },
            {
              "description": "Directory where Transformers.js models are cached (defaults to ./models/)",
              "format": "string",
              "name": "CACHE_DIR"
            },
            {
              "description": "Embedding model name (defaults to Xenova/all-MiniLM-L6-v2)",
              "format": "string",
              "name": "MODEL_NAME"
            },
            {
              "description": "Maximum file size in bytes (defaults to 104857600 / 100MB)",
              "format": "string",
              "name": "MAX_FILE_SIZE"
            },
            {
              "description": "Text chunk size for splitting documents (defaults to 512)",
              "format": "string",
              "name": "CHUNK_SIZE"
            },
            {
              "description": "Overlap between consecutive chunks (defaults to 100)",
              "format": "string",
              "name": "CHUNK_OVERLAP"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-31T17:18:11.820928Z",
        "updatedAt": "2025-10-31T17:18:11.820928Z",
        "isLatest": false
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.aimoda/rigol-dho824-mcp",
      "description": "Control and query Rigol DHO824 oscilloscope for waveform capture and measurements",
      "title": "Rigol DHO824 Oscilloscope",
      "repository": {
        "url": "https://github.com/aimoda/rigol-dho824-mcp",
        "source": "github",
        "id": "1043349028"
      },
      "version": "0.1.129-main.66abb60",
      "websiteUrl": "https://aimoda.github.io/rigol-dho824-mcp/",
      "icons": [
        {
          "src": "https://rigol-dho824-mcp.email.ai.moda/bimi/logo.svg",
          "mimeType": "image/svg+xml",
          "sizes": [
            "any"
          ]
        }
      ],
      "packages": [
        {
          "registryType": "oci",
          "identifier": "ghcr.io/aimoda/rigol-dho824-mcp:0.1.129-main.66abb60",
          "runtimeHint": "docker",
          "transport": {
            "type": "stdio"
          },
          "runtimeArguments": [
            {
              "description": "The runtime command to execute",
              "value": "run",
              "type": "positional"
            },
            {
              "description": "Run container in interactive mode",
              "type": "named",
              "name": "-i"
            },
            {
              "description": "Automatically remove the container when it exits",
              "type": "named",
              "name": "--rm"
            },
            {
              "description": "Bind mount a host directory into the container",
              "type": "named",
              "name": "-v"
            },
            {
              "description": "Bind mount path for waveform and screenshot data",
              "value": "/tmp/rigol-data:/tmp/rigol",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_RESOURCE",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "VISA_TIMEOUT",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_BEEPER_ENABLED",
              "type": "positional"
            },
            {
              "description": "Set an environment variable in the runtime",
              "type": "named",
              "name": "-e"
            },
            {
              "description": "Environment variable name",
              "value": "RIGOL_TEMP_DIR",
              "type": "positional"
            },
            {
              "description": "The container image to run",
              "value": "ghcr.io/aimoda/rigol-dho824-mcp",
              "type": "positional"
            }
          ],
          "environmentVariables": [
            {
              "description": "VISA resource string for connecting to the oscilloscope (e.g., 'TCPIP0::192.168.1.100::inst0::INSTR').",
              "isRequired": true,
              "placeholder": "TCPIP0::192.168.1.100::inst0::INSTR",
              "name": "RIGOL_RESOURCE"
            },
            {
              "description": "Communication timeout in milliseconds",
              "format": "number",
              "default": "30000",
              "name": "VISA_TIMEOUT"
            },
            {
              "description": "Enable or disable oscilloscope beeper sounds",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "RIGOL_BEEPER_ENABLED"
            },
            {
              "description": "Host-side path for returned file paths. The container writes to /tmp/rigol internally and translates paths to this value in responses. Must match the host path in your -v mount. Required for Docker usage.",
              "isRequired": true,
              "format": "filepath",
              "placeholder": "/tmp/rigol-data",
              "name": "RIGOL_TEMP_DIR"
            }
          ]
        },
        {
          "registryType": "pypi",
          "registryBaseUrl": "https://pypi.org",
          "identifier": "rigol-dho824-mcp",
          "version": "0.1.129",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "VISA resource string for connecting to the oscilloscope (e.g., 'TCPIP0::192.168.1.100::inst0::INSTR').",
              "isRequired": true,
              "placeholder": "TCPIP0::192.168.1.100::inst0::INSTR",
              "name": "RIGOL_RESOURCE"
            },
            {
              "description": "Communication timeout in milliseconds",
              "format": "number",
              "default": "30000",
              "name": "VISA_TIMEOUT"
            },
            {
              "description": "Enable or disable oscilloscope beeper sounds",
              "format": "boolean",
              "default": "false",
              "choices": [
                "true",
                "false"
              ],
              "name": "RIGOL_BEEPER_ENABLED"
            }
          ]
        }
      ],
      "_meta": {
        "io.modelcontextprotocol.registry/publisher-provided": {
          "buildInfo": {
            "imageSha256": "bd99773c8c5b1ec790ecd032bcb0e36419b771fbd30018369e5198dfe2a3cfd0"
          },
          "tool": "github-actions",
          "version": "1.0.0"
        }
      }
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-31T17:30:24.990462Z",
        "updatedAt": "2025-10-31T17:30:24.990462Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.shinpr/mcp-local-rag",
      "description": "Easy-to-setup local RAG server with minimal configuration",
      "repository": {
        "url": "https://github.com/shinpr/mcp-local-rag",
        "source": "github"
      },
      "version": "0.1.3",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-local-rag",
          "version": "0.1.3",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Base directory for document storage (defaults to current working directory)",
              "format": "string",
              "name": "BASE_DIR"
            },
            {
              "description": "Path to LanceDB database directory (defaults to ./lancedb/)",
              "format": "string",
              "name": "DB_PATH"
            },
            {
              "description": "Directory where Transformers.js models are cached (defaults to ./models/)",
              "format": "string",
              "name": "CACHE_DIR"
            },
            {
              "description": "Embedding model name (defaults to Xenova/all-MiniLM-L6-v2)",
              "format": "string",
              "name": "MODEL_NAME"
            },
            {
              "description": "Maximum file size in bytes (defaults to 104857600 / 100MB)",
              "format": "string",
              "name": "MAX_FILE_SIZE"
            },
            {
              "description": "Text chunk size for splitting documents (defaults to 512)",
              "format": "string",
              "name": "CHUNK_SIZE"
            },
            {
              "description": "Overlap between consecutive chunks (defaults to 100)",
              "format": "string",
              "name": "CHUNK_OVERLAP"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-31T17:51:46.571565Z",
        "updatedAt": "2025-10-31T17:51:46.571565Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "io.github.shinpr/mcp-image",
      "description": "AI image generation MCP server using Nano Banana with intelligent prompt enhancement",
      "repository": {
        "url": "https://github.com/shinpr/mcp-image",
        "source": "github"
      },
      "version": "0.3.0",
      "packages": [
        {
          "registryType": "npm",
          "registryBaseUrl": "https://registry.npmjs.org",
          "identifier": "mcp-image",
          "version": "0.3.0",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "Google Gemini API key for image generation (get from https://aistudio.google.com/apikey)",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "GEMINI_API_KEY"
            },
            {
              "description": "Absolute path to directory where generated images will be saved (defaults to ./output)",
              "format": "string",
              "name": "IMAGE_OUTPUT_DIR"
            },
            {
              "description": "Set to 'true' to disable automatic prompt optimization and use direct prompts",
              "format": "boolean",
              "name": "SKIP_PROMPT_ENHANCEMENT"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-31T18:04:03.448221Z",
        "updatedAt": "2025-10-31T18:04:03.448221Z",
        "isLatest": true
      }
    }
  },
  {
    "server": {
      "$schema": "https://static.modelcontextprotocol.io/schemas/2025-10-17/server.schema.json",
      "name": "com.stackhawk/stackhawk",
      "description": "An MCP server that provides interaction with StackHawk's security scanning platform.",
      "repository": {
        "url": "https://github.com/stackhawk/stackhawk-mcp",
        "source": "github"
      },
      "version": "1.1.1",
      "packages": [
        {
          "registryType": "pypi",
          "identifier": "stackhawk-mcp",
          "version": "1.1.1",
          "transport": {
            "type": "stdio"
          },
          "environmentVariables": [
            {
              "description": "StackHawk API key",
              "isRequired": true,
              "format": "string",
              "isSecret": true,
              "name": "STACKHAWK_API_KEY"
            }
          ]
        }
      ]
    },
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "status": "active",
        "publishedAt": "2025-10-31T19:05:59.539949Z",
        "updatedAt": "2025-10-31T19:05:59.539949Z",
        "isLatest": true
      }
    }
  }
]