[
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "app.getdialer/dialer",
    "description": "An MCP server that provides your you make outbound phone calls using your own phone number",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://getdialer.app/mcp"
      },
      {
        "type": "sse",
        "url": "https://getdialer.app/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c8eaffb8-57a8-4d66-8a32-fa6e25f5bcb9",
        "versionId": "04f25b17-331d-48d7-b08b-37baece208a7",
        "publishedAt": "2025-09-08T23:47:09.452137971Z",
        "updatedAt": "2025-09-09T00:16:49.162620072Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "app.getdialer/dialer",
    "description": "An MCP server that provides lets you make outbound phone calls using your own phone number",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://getdialer.app/mcp"
      },
      {
        "type": "sse",
        "url": "https://getdialer.app/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c8eaffb8-57a8-4d66-8a32-fa6e25f5bcb9",
        "versionId": "faa26cb9-3aad-415e-aece-f715fff5fe5e",
        "publishedAt": "2025-09-09T00:16:49.107842808Z",
        "updatedAt": "2025-09-09T00:16:49.107842808Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.king-of-the-grackles/reddit-research-mcp",
    "description": "Turn Reddit's chaos into structured insights with full citations - MCP server for Reddit research",
    "status": "active",
    "repository": {
      "url": "https://github.com/king-of-the-grackles/reddit-research-mcp",
      "source": "github"
    },
    "version": "0.1.1",
    "packages": [
      {
        "registryType": "pypi",
        "identifier": "reddit-research-mcp",
        "version": "0.1.1",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "6a863ccf-8152-40c9-9805-3d66ce2d2366",
        "versionId": "195f28fb-411d-4e9b-8b97-0ee69c44c7d6",
        "publishedAt": "2025-09-09T03:30:11.721350071Z",
        "updatedAt": "2025-09-09T03:30:11.721350071Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.tickettailor/mcp",
    "description": "Provides event organisers with tools to interact with a Ticket Tailor box office account.",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.tickettailor.ai/mcp"
      },
      {
        "type": "sse",
        "url": "https://mcp.tickettailor.ai/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b0042856-e49d-4ba6-b594-f0c09fc246a4",
        "versionId": "5fae66cd-f99b-40e6-a097-3990537cd513",
        "publishedAt": "2025-09-12T10:10:54.1887638Z",
        "updatedAt": "2025-09-12T10:10:54.1887638Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.pulsemcp.servers/pulse-fetch",
    "description": "MCP server that extracts clean, structured content from web pages with anti-bot bypass capabilities.",
    "status": "active",
    "repository": {
      "url": "https://github.com/pulsemcp/mcp-servers",
      "source": "github",
      "subfolder": "productionized/pulse-fetch"
    },
    "version": "0.2.14",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@pulsemcp/pulse-fetch",
        "version": "0.2.14",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "API key for Firecrawl service to bypass anti-bot measures",
            "isSecret": true,
            "name": "FIRECRAWL_API_KEY"
          },
          {
            "description": "Bearer token for BrightData Web Unlocker service",
            "isSecret": true,
            "name": "BRIGHTDATA_API_KEY"
          },
          {
            "description": "Path to markdown file containing scraping strategy configuration",
            "default": "/tmp/pulse-fetch/strategy.md",
            "name": "STRATEGY_CONFIG_PATH"
          },
          {
            "description": "Optimization strategy for scraping: cost or speed",
            "default": "cost",
            "choices": [
              "cost",
              "speed"
            ],
            "name": "OPTIMIZE_FOR"
          },
          {
            "description": "Storage backend for saved resources: memory or filesystem",
            "default": "memory",
            "choices": [
              "memory",
              "filesystem"
            ],
            "name": "MCP_RESOURCE_STORAGE"
          },
          {
            "description": "Directory for filesystem storage (only used with filesystem type)",
            "default": "/tmp/pulse-fetch/resources",
            "name": "MCP_RESOURCE_FILESYSTEM_ROOT"
          },
          {
            "description": "Skip API authentication health checks at startup",
            "format": "boolean",
            "default": "false",
            "name": "SKIP_HEALTH_CHECKS"
          },
          {
            "description": "LLM provider for extract feature: anthropic, openai, openai-compatible",
            "choices": [
              "anthropic",
              "openai",
              "openai-compatible"
            ],
            "name": "LLM_PROVIDER"
          },
          {
            "description": "API key for the chosen LLM provider",
            "isSecret": true,
            "name": "LLM_API_KEY"
          },
          {
            "description": "Base URL for OpenAI-compatible providers",
            "name": "LLM_API_BASE_URL"
          },
          {
            "description": "Specific model to use for extraction",
            "name": "LLM_MODEL"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "5274418d-6904-4543-a020-17a61466fd2a",
        "versionId": "91091a5c-39bf-499b-a706-7036631faff1",
        "publishedAt": "2025-09-09T00:19:19.119117909Z",
        "updatedAt": "2025-09-09T00:19:19.119117909Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/smithery-ai-national-weather-service",
    "description": "Provide real-time and forecast weather information for locations in the United States using natura…",
    "status": "active",
    "repository": {
      "url": "https://github.com/smithery-ai/mcp-servers",
      "source": "github",
      "subfolder": "weather"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@smithery-ai/national-weather-service/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b9c2130f-a35c-44ac-afea-412d4631814d",
        "versionId": "2bfeb809-2c63-4a03-94b6-5a9e316cda41",
        "publishedAt": "2025-09-11T02:29:56.9281054Z",
        "updatedAt": "2025-09-11T02:29:56.9281054Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.ycjcl868/mcp-server-fear-greed",
    "description": "An MCP server for mcp-server-fear-greed",
    "status": "active",
    "repository": {
      "url": "https://github.com/ycjcl868/mcp-server-fear-greed",
      "source": "github"
    },
    "version": "1.0.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-server-fear-greed",
        "version": "1.0.1",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "44863cea-e132-4d11-a92d-e6f1d531b079",
        "versionId": "d1378e5e-f1cf-4eeb-bbb1-9e9527654acf",
        "publishedAt": "2025-09-09T03:01:43.052528327Z",
        "updatedAt": "2025-09-09T04:08:35.763104718Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.savhascelik/meta-api-mcp-server",
    "description": "A configuration-driven Meta API Gateway server for the Model Context Protocol (MCP).",
    "status": "active",
    "repository": {
      "url": "https://github.com/savhascelik/meta-api-mcp-server",
      "source": "github"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "meta-api-mcp-server",
        "version": "1.0.4",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "If the api you are connecting to requires api_key, you can use this variable and you can also define different variables",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "YOUR_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "0c6c810c-c7b3-48ce-b343-dce410026b01",
        "versionId": "8d2ec6b3-7e55-40b9-8d76-7e45f5063e29",
        "publishedAt": "2025-09-09T04:02:19.493255754Z",
        "updatedAt": "2025-09-09T04:14:51.989316259Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.macuse-app/macuse",
    "description": "Bridges AI assistants with native macOS functionality through the Model Context Protocol (MCP).",
    "status": "active",
    "repository": {
      "url": "https://github.com/macuse-app/macuse",
      "source": "github"
    },
    "version": "1.0.1",
    "packages": [
      {
        "registryType": "mcpb",
        "identifier": "https://github.com/macuse-app/macuse/releases/download/v1.0.1/macuse-1.0.1.mcpb",
        "version": "1.0.1",
        "fileSha256": "9e3444c567c66a57d15657dca437dbdb9560d16f00e6d4ac3d95ea795b9b482e",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a455293b-e253-41df-b711-6569dc5eb957",
        "versionId": "f243a724-e41c-4616-887e-93520187cf34",
        "publishedAt": "2025-09-18T05:18:13.769559Z",
        "updatedAt": "2025-09-18T05:18:13.769559Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.ycjcl868/mcp-server-fear-greed",
    "description": "An MCP server for mcp-server-fear-greed",
    "status": "active",
    "repository": {
      "url": "https://github.com/ycjcl868/mcp-server-fear-greed",
      "source": "github"
    },
    "version": "1.0.2",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-server-fear-greed",
        "version": "latest",
        "transport": {
          "type": "stdio"
        }
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-server-fear-greed",
        "version": "latest",
        "runtimeHint": "npx",
        "transport": {
          "type": "sse",
          "url": "http://127.0.0.1:{port}/sse"
        },
        "packageArguments": [
          {
            "description": "Server port number",
            "isRequired": true,
            "format": "number",
            "default": "8089",
            "type": "named",
            "name": "port"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-server-fear-greed",
        "version": "latest",
        "runtimeHint": "npx",
        "transport": {
          "type": "streamable-http",
          "url": "http://127.0.0.1:{port}/mcp"
        },
        "packageArguments": [
          {
            "description": "Server port number",
            "isRequired": true,
            "format": "number",
            "default": "8089",
            "type": "named",
            "name": "port"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "44863cea-e132-4d11-a92d-e6f1d531b079",
        "versionId": "5996e50e-d147-4b9d-ab2e-c771cd7dc73d",
        "publishedAt": "2025-09-09T04:08:35.601637811Z",
        "updatedAt": "2025-09-09T04:08:35.601637811Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.savhascelik/meta-api-mcp-server",
    "description": "You can connect any API to LLMs. This enables AI to interact directly with APIs",
    "status": "active",
    "repository": {
      "url": "https://github.com/savhascelik/meta-api-mcp-server",
      "source": "github"
    },
    "version": "1.0.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "meta-api-mcp-server",
        "version": "1.0.4",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "If the api you are connecting to requires api_key, you can use this variable and you can also define different variables",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "YOUR_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "0c6c810c-c7b3-48ce-b343-dce410026b01",
        "versionId": "3e81fe2c-e973-4e0e-8aa1-d4c20b9aa106",
        "publishedAt": "2025-09-09T04:14:51.983727698Z",
        "updatedAt": "2025-09-09T04:14:51.983727698Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.domdomegg/airtable-mcp-server",
    "description": "Read and write access to Airtable database schemas, tables, and records.",
    "status": "active",
    "repository": {
      "url": "https://github.com/domdomegg/airtable-mcp-server.git",
      "source": "github"
    },
    "version": "1.7.2",
    "packages": [
      {
        "registryType": "npm",
        "identifier": "airtable-mcp-server",
        "version": "1.7.2",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Airtable personal access token (e.g., pat123.abc123). Create at https://airtable.com/create/tokens/new with scopes: schema.bases:read, data.records:read, and optionally schema.bases:write and data.records:write.",
            "isRequired": true,
            "isSecret": true,
            "name": "AIRTABLE_API_KEY"
          }
        ]
      },
      {
        "registryType": "oci",
        "identifier": "domdomegg/airtable-mcp-server",
        "version": "1.7.2",
        "runtimeHint": "docker",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Airtable personal access token (e.g., pat123.abc123). Create at https://airtable.com/create/tokens/new with scopes: schema.bases:read, data.records:read, and optionally schema.bases:write and data.records:write.",
            "isRequired": true,
            "isSecret": true,
            "name": "AIRTABLE_API_KEY"
          }
        ]
      },
      {
        "registryType": "mcpb",
        "identifier": "https://github.com/domdomegg/airtable-mcp-server/releases/download/v1.7.2/airtable-mcp-server.mcpb",
        "version": "1.7.2",
        "fileSha256": "8220de07a08ebe908f04da139ea03dbfe29758141347e945da60535fb7bcca20",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c4d153eb-b252-4e8e-832b-fe3684fe47ec",
        "versionId": "16e0a153-bf00-44e1-9eec-80c7c82d4773",
        "publishedAt": "2025-09-09T04:31:18.387709537Z",
        "updatedAt": "2025-09-12T03:19:04.504086728Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.stefanoamorelli/fred-mcp-server",
    "description": "Federal Reserve Economic Data (FRED) MCP Server - Access all 800,000+ economic time series",
    "status": "active",
    "repository": {
      "url": "https://github.com/stefanoamorelli/fred-mcp-server",
      "source": "github"
    },
    "version": "1.0.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "fred-mcp-server",
        "version": "1.0.1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your FRED API key to access the API",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "FRED_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a5d0ce37-1375-4d4e-ba5a-2fc31c5083a0",
        "versionId": "b5251106-16c6-40e7-89d7-b123841d18ea",
        "publishedAt": "2025-09-14T11:16:38.3334627Z",
        "updatedAt": "2025-09-14T11:16:38.3334627Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.formulahendry/code-runner",
    "description": "Code Runner MCP Server which can run code in various programming languages.",
    "status": "active",
    "repository": {
      "url": "https://github.com/formulahendry/mcp-server-code-runner",
      "source": "github"
    },
    "version": "0.1.8",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-server-code-runner",
        "version": "0.1.8",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b835c535-cd49-4a14-85b0-88f2aa27738d",
        "versionId": "25a214da-4b05-45e3-832e-601fd8092aa1",
        "publishedAt": "2025-09-09T04:42:11.802682449Z",
        "updatedAt": "2025-09-09T04:42:11.802682449Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.tuannvm/mcp-trino",
    "description": "MCP server for Trino distributed SQL query engine access",
    "status": "active",
    "repository": {
      "url": "https://github.com/tuannvm/mcp-trino",
      "source": "github"
    },
    "version": "2.2.1",
    "packages": [
      {
        "registryType": "mcpb",
        "identifier": "https://github.com/tuannvm/mcp-trino/releases/download/v2.2.1/mcp-trino_2.2.1_darwin_arm64.tar.gz",
        "version": "2.2.1",
        "fileSha256": "1a18882ab43243e17420f3562118a4c3e7fff12bc6b145066ae64b90b2dc0159",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Trino server hostname",
            "isRequired": true,
            "format": "string",
            "name": "TRINO_HOST"
          },
          {
            "description": "Trino server port",
            "format": "string",
            "name": "TRINO_PORT"
          },
          {
            "description": "Trino username",
            "isRequired": true,
            "format": "string",
            "name": "TRINO_USER"
          },
          {
            "description": "Trino password",
            "format": "string",
            "isSecret": true,
            "name": "TRINO_PASSWORD"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "42f447f0-a20c-4afd-ac20-2819cd4e1c5c",
        "versionId": "b092f116-9b0c-4ffd-abb2-a3d2e554c4fc",
        "publishedAt": "2025-09-09T05:26:17.749412364Z",
        "updatedAt": "2025-09-09T05:26:17.749412364Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.marianfoo/mcp-sap-docs",
    "description": "Fast MCP server for unified SAP docs search (SAPUI5, CAP, OpenUI5, wdi5) with BM25 full-text search",
    "status": "active",
    "repository": {
      "url": "https://github.com/marianfoo/mcp-sap-docs",
      "source": "github"
    },
    "version": "0.3.9",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-sap-docs",
        "version": "0.3.9",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "6d9592fe-b3ec-44ce-b2ce-ad889cdfe291",
        "versionId": "4f89957c-7ca9-46a2-82b6-088c1124ffb4",
        "publishedAt": "2025-09-09T05:59:06.222569167Z",
        "updatedAt": "2025-09-09T05:59:06.222569167Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.surendranb/google-analytics-mcp",
    "description": "An MCP server that provides [describe what your server does]",
    "status": "active",
    "repository": {
      "url": "https://github.com/surendranb/google-analytics-mcp",
      "source": "github"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "google-analytics-mcp",
        "version": "1.2.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your API key for the service",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "YOUR_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "16f9d16c-962b-44b7-904d-c9df1000fbf1",
        "versionId": "89606265-25b6-4e44-8c36-0988fd23211c",
        "publishedAt": "2025-09-09T06:10:41.49026764Z",
        "updatedAt": "2025-09-09T06:10:41.49026764Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.bytedance/mcp-server-browser",
    "description": "MCP server for browser use access",
    "status": "active",
    "repository": {
      "url": "https://github.com/bytedance/UI-TARS-desktop",
      "source": "github",
      "subfolder": "packages/agent-infra/mcp-servers/browser"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@agent-infra/mcp-server-browser",
        "version": "latest",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "description": "browser or chrome channel to use, possible values: chrome, edge, firefox.",
            "format": "string",
            "type": "named",
            "name": "browser"
          },
          {
            "description": "Chrome DevTools Protocol endpoint URL",
            "format": "string",
            "type": "named",
            "name": "cdp-endpoint"
          },
          {
            "description": "WebSocket endpoint to connect to, for example",
            "format": "string",
            "type": "named",
            "name": "ws-endpoint"
          },
          {
            "description": "Path to the browser executable",
            "format": "string",
            "type": "named",
            "name": "executable-path"
          },
          {
            "description": "Path to the output directory",
            "format": "string",
            "type": "named",
            "name": "output-dir"
          },
          {
            "description": "Comma-separated list of patterns to bypass the proxy",
            "format": "string",
            "type": "named",
            "name": "proxy-bypass"
          },
          {
            "description": "Proxy server address",
            "format": "string",
            "type": "named",
            "name": "proxy-server"
          },
          {
            "description": "Run server that uses screenshots (Aria snapshots are used by default)",
            "format": "boolean",
            "type": "named",
            "name": "vision"
          }
        ],
        "environmentVariables": [
          {
            "description": "DISPLAY environment variable for browser rendering",
            "format": "string",
            "name": "DISPLAY"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@agent-infra/mcp-server-browser",
        "version": "latest",
        "runtimeHint": "npx",
        "transport": {
          "type": "sse",
          "url": "http://127.0.0.1:{port}/sse"
        },
        "packageArguments": [
          {
            "description": "Server port number",
            "isRequired": true,
            "format": "number",
            "default": "8089",
            "type": "named",
            "name": "port"
          },
          {
            "description": "browser or chrome channel to use, possible values: chrome, edge, firefox.",
            "format": "string",
            "type": "named",
            "name": "browser"
          },
          {
            "description": "Chrome DevTools Protocol endpoint URL",
            "format": "string",
            "type": "named",
            "name": "cdp-endpoint"
          },
          {
            "description": "WebSocket endpoint to connect to, for example",
            "format": "string",
            "type": "named",
            "name": "ws-endpoint"
          },
          {
            "description": "Path to the browser executable",
            "format": "string",
            "type": "named",
            "name": "executable-path"
          },
          {
            "description": "Path to the output directory",
            "format": "string",
            "type": "named",
            "name": "output-dir"
          },
          {
            "description": "Comma-separated list of patterns to bypass the proxy",
            "format": "string",
            "type": "named",
            "name": "proxy-bypass"
          },
          {
            "description": "Proxy server address",
            "format": "string",
            "type": "named",
            "name": "proxy-server"
          },
          {
            "description": "Run server that uses screenshots (Aria snapshots are used by default)",
            "format": "boolean",
            "type": "named",
            "name": "vision"
          }
        ],
        "environmentVariables": [
          {
            "description": "DISPLAY environment variable for browser rendering",
            "format": "string",
            "name": "DISPLAY"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@agent-infra/mcp-server-browser",
        "version": "latest",
        "runtimeHint": "npx",
        "transport": {
          "type": "streamable-http",
          "url": "http://127.0.0.1:{port}/mcp"
        },
        "packageArguments": [
          {
            "description": "Server port number",
            "isRequired": true,
            "format": "number",
            "default": "8089",
            "type": "named",
            "name": "port"
          },
          {
            "description": "browser or chrome channel to use, possible values: chrome, edge, firefox.",
            "format": "string",
            "type": "named",
            "name": "browser"
          },
          {
            "description": "Chrome DevTools Protocol endpoint URL",
            "format": "string",
            "type": "named",
            "name": "cdp-endpoint"
          },
          {
            "description": "WebSocket endpoint to connect to, for example",
            "format": "string",
            "type": "named",
            "name": "ws-endpoint"
          },
          {
            "description": "Path to the browser executable",
            "format": "string",
            "type": "named",
            "name": "executable-path"
          },
          {
            "description": "Path to the output directory",
            "format": "string",
            "type": "named",
            "name": "output-dir"
          },
          {
            "description": "Comma-separated list of patterns to bypass the proxy",
            "format": "string",
            "type": "named",
            "name": "proxy-bypass"
          },
          {
            "description": "Proxy server address",
            "format": "string",
            "type": "named",
            "name": "proxy-server"
          },
          {
            "description": "Run server that uses screenshots (Aria snapshots are used by default)",
            "format": "boolean",
            "type": "named",
            "name": "vision"
          }
        ],
        "environmentVariables": [
          {
            "description": "DISPLAY environment variable for browser rendering",
            "format": "string",
            "name": "DISPLAY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "74f08407-83aa-447a-8044-df93d6bfb0c2",
        "versionId": "34d352da-6c0f-4348-8cb5-f1c44f7eb7dd",
        "publishedAt": "2025-09-09T06:16:24.728252874Z",
        "updatedAt": "2025-09-09T06:16:24.728252874Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.bytedance/mcp-server-commands",
    "description": "An MCP server to run arbitrary commands",
    "status": "active",
    "repository": {
      "url": "https://github.com/bytedance/UI-TARS-desktop",
      "source": "github",
      "subfolder": "packages/agent-infra/mcp-servers/commands"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@agent-infra/mcp-server-commands",
        "version": "latest",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "description": "current working directory",
            "format": "string",
            "type": "named",
            "name": "cwd"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@agent-infra/mcp-server-commands",
        "version": "latest",
        "runtimeHint": "npx",
        "transport": {
          "type": "sse",
          "url": "http://127.0.0.1:{port}/sse"
        },
        "packageArguments": [
          {
            "description": "current working directory",
            "format": "string",
            "type": "named",
            "name": "cwd"
          },
          {
            "description": "Server port number",
            "isRequired": true,
            "format": "number",
            "default": "8089",
            "type": "named",
            "name": "port"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@agent-infra/mcp-server-commands",
        "version": "latest",
        "runtimeHint": "npx",
        "transport": {
          "type": "streamable-http",
          "url": "http://127.0.0.1:{port}/mcp"
        },
        "runtimeArguments": [
          {
            "description": "current working directory",
            "format": "string",
            "type": "named",
            "name": "cwd"
          }
        ],
        "packageArguments": [
          {
            "description": "Server port number",
            "isRequired": true,
            "format": "number",
            "default": "8089",
            "type": "named",
            "name": "port"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "8f14d34c-2dbb-4632-b0db-bc2a1d023ff4",
        "versionId": "97337d30-5e47-421e-9599-30487d21ea45",
        "publishedAt": "2025-09-09T06:16:30.41372415Z",
        "updatedAt": "2025-09-09T06:16:30.41372415Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.bytedance/mcp-server-filesystem",
    "description": "MCP server for filesystem access",
    "status": "active",
    "repository": {
      "url": "https://github.com/bytedance/UI-TARS-desktop",
      "source": "github",
      "subfolder": "packages/agent-infra/mcp-servers/filesystem"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@agent-infra/mcp-server-filesystem",
        "version": "latest",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "description": "Comma-separated list of allowed directories for file operations",
            "isRequired": true,
            "format": "string",
            "type": "named",
            "name": "allowed-directories"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@agent-infra/mcp-server-filesystem",
        "version": "latest",
        "runtimeHint": "npx",
        "transport": {
          "type": "sse",
          "url": "http://127.0.0.1:{port}/sse"
        },
        "packageArguments": [
          {
            "description": "Comma-separated list of allowed directories for file operations",
            "isRequired": true,
            "format": "string",
            "type": "named",
            "name": "allowed-directories"
          },
          {
            "description": "Server port number",
            "isRequired": true,
            "format": "number",
            "default": "8089",
            "type": "named",
            "name": "port"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@agent-infra/mcp-server-filesystem",
        "version": "latest",
        "runtimeHint": "npx",
        "transport": {
          "type": "streamable-http",
          "url": "http://127.0.0.1:{port}/mcp"
        },
        "packageArguments": [
          {
            "description": "Comma-separated list of allowed directories for file operations",
            "isRequired": true,
            "format": "string",
            "type": "named",
            "name": "allowed-directories"
          },
          {
            "description": "Server port number",
            "isRequired": true,
            "format": "number",
            "default": "8089",
            "type": "named",
            "name": "port"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "86863c74-2ae5-4430-8880-5474e7ae2155",
        "versionId": "987b074f-a2ca-493d-9830-7ccb0b5bd165",
        "publishedAt": "2025-09-09T06:16:36.369747535Z",
        "updatedAt": "2025-09-09T06:16:36.369747535Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.bytedance/mcp-server-search",
    "description": "MCP server for web search operations",
    "status": "active",
    "repository": {
      "url": "https://github.com/bytedance/UI-TARS-desktop",
      "source": "github",
      "subfolder": "packages/agent-infra/mcp-servers/search"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@agent-infra/mcp-server-search",
        "version": "latest",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "description": "Search engine to use for browser search (default: google)",
            "format": "string",
            "default": "google",
            "type": "named",
            "name": "engine"
          },
          {
            "description": "API key for the search provider",
            "format": "string",
            "type": "named",
            "name": "api-key"
          },
          {
            "description": "Base URL for the search provider",
            "format": "string",
            "type": "named",
            "name": "base-url"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@agent-infra/mcp-server-search",
        "version": "latest",
        "runtimeHint": "npx",
        "transport": {
          "type": "sse",
          "url": "http://127.0.0.1:{port}/sse"
        },
        "packageArguments": [
          {
            "description": "Search engine to use for browser search (default: google)",
            "format": "string",
            "default": "google",
            "type": "named",
            "name": "engine"
          },
          {
            "description": "API key for the search provider",
            "format": "string",
            "type": "named",
            "name": "api-key"
          },
          {
            "description": "Base URL for the search provider",
            "format": "string",
            "type": "named",
            "name": "base-url"
          },
          {
            "description": "Server port number",
            "isRequired": true,
            "format": "number",
            "default": "8089",
            "type": "named",
            "name": "port"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@agent-infra/mcp-server-search",
        "version": "latest",
        "runtimeHint": "npx",
        "transport": {
          "type": "streamable-http",
          "url": "http://127.0.0.1:{port}/mcp"
        },
        "packageArguments": [
          {
            "description": "Search engine to use for browser search (default: google)",
            "format": "string",
            "default": "google",
            "type": "named",
            "name": "engine"
          },
          {
            "description": "API key for the search provider",
            "format": "string",
            "type": "named",
            "name": "api-key"
          },
          {
            "description": "Base URL for the search provider",
            "format": "string",
            "type": "named",
            "name": "base-url"
          },
          {
            "description": "Server port number",
            "isRequired": true,
            "format": "number",
            "default": "8089",
            "type": "named",
            "name": "port"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "cc89f0d3-8836-41e2-ad87-1955f41a047e",
        "versionId": "3ee8a0e0-fb00-4d94-b983-4aa4a9bfdd8f",
        "publishedAt": "2025-09-09T06:16:40.975101309Z",
        "updatedAt": "2025-09-09T06:16:40.975101309Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.mobile-next/mobile-mcp",
    "description": "MCP server for iOS and Android Mobile Development, Automation and Testing",
    "status": "active",
    "repository": {
      "url": "https://github.com/mobile-next/mobile-mcp",
      "source": "github"
    },
    "version": "0.0.26",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@mobilenext/mobile-mcp",
        "version": "0.0.26",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "name": ""
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "0813f771-b958-4cbd-a4c1-67f97312db8b",
        "versionId": "89304685-3f90-4915-9b41-7742cf94b56a",
        "publishedAt": "2025-09-09T06:51:49.988573415Z",
        "updatedAt": "2025-09-09T06:51:49.988573415Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "md.install/try",
    "description": "Create guides to instruct coding agents to use your software (SDK, library, framework, API, etc).",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "0.1.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://install.md/mcp/try"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "ecdd3eae-3d64-477d-acb8-26f1e523ab54",
        "versionId": "95109f0a-8fb4-45ef-93d1-8c38874c2be7",
        "publishedAt": "2025-09-09T07:04:48.602631925Z",
        "updatedAt": "2025-09-09T07:10:11.210375884Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.stefanoamorelli/sec-edgar-mcp",
    "description": "SEC EDGAR MCP server that provides access to the US public filings through the US SEC EDGAR API",
    "status": "active",
    "repository": {
      "url": "https://github.com/stefanoamorelli/sec-edgar-mcp",
      "source": "github"
    },
    "version": "1.0.5",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "sec-edgar-mcp",
        "version": "1.0.5",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "The user agent to access the SEC EDGAR API",
            "isRequired": true,
            "format": "string",
            "name": "SEC_EDGAR_USER_AGENT"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "3f9d168d-8b11-4737-87f4-8397667c84eb",
        "versionId": "526b6940-2ff7-4b65-a4b4-03439dd8e4d4",
        "publishedAt": "2025-09-09T07:06:26.344648212Z",
        "updatedAt": "2025-09-09T07:06:26.344648212Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "md.install/try",
    "description": "Create guides as MCP servers to instruct coding agents to use your software (library, API, etc).",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "0.1.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://install.md/mcp/try"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "ecdd3eae-3d64-477d-acb8-26f1e523ab54",
        "versionId": "66c173f7-0916-4751-a250-eafd1433af94",
        "publishedAt": "2025-09-09T07:10:11.156679866Z",
        "updatedAt": "2025-09-09T07:10:11.156679866Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.LinuxSuRen/atest-mcp-server",
    "description": "Auto-download & launch https://github.com/LinuxSuRen/atest-mcp-server",
    "status": "active",
    "repository": {
      "url": "https://github.com/LinuxSuRen/atest-mcp-server",
      "source": "github"
    },
    "version": "1.0.2",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "atest-mcp-server-launcher",
        "version": "1.0.2",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "374be861-2966-4300-934d-a7f47011a94a",
        "versionId": "4356c3f4-4a0c-4d2c-970e-213eef76ce21",
        "publishedAt": "2025-09-09T07:37:00.342793911Z",
        "updatedAt": "2025-09-09T07:37:00.342793911Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.priyankark/lighthouse-mcp",
    "description": "MCP server for Google Lighthouse performance metrics",
    "status": "active",
    "repository": {
      "url": "https://github.com/priyankark/lighthouse-mcp",
      "source": "github"
    },
    "version": "0.1.7",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "lighthouse-mcp",
        "version": "0.1.7",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "00115c3f-4478-431b-9752-a6438a66cadc",
        "versionId": "edc83edd-076f-4b36-ab2b-be86395d1486",
        "publishedAt": "2025-09-09T08:43:00.133473658Z",
        "updatedAt": "2025-09-09T10:02:57.251229005Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.priyankark/lighthouse-mcp",
    "description": "MCP server for Google Lighthouse performance metrics",
    "status": "active",
    "repository": {
      "url": "https://github.com/priyankark/lighthouse-mcp",
      "source": "github"
    },
    "version": "0.1.9",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "lighthouse-mcp",
        "version": "0.1.9",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "00115c3f-4478-431b-9752-a6438a66cadc",
        "versionId": "94d6b736-48d0-46f1-909f-9ce1dd82851e",
        "publishedAt": "2025-09-09T10:02:57.086660409Z",
        "updatedAt": "2025-09-09T10:02:57.086660409Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.shawndurrani/mcp-merchant",
    "description": "Search-only commerce MCP server backed by Stripe (test)",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "0.1.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-merchant",
        "version": "0.1.0",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Stripe secret key (test mode)",
            "isRequired": true,
            "isSecret": true,
            "name": "STRIPE_SECRET_KEY"
          },
          {
            "description": "Max products to cache",
            "default": "100",
            "name": "PRODUCT_LIMIT"
          },
          {
            "description": "Catalog refresh interval in seconds",
            "default": "600",
            "name": "REFRESH_INTERVAL_SEC"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "8681fb6c-725d-4896-b15e-1088ffe74743",
        "versionId": "cfe9b2c3-e001-4c33-8cb8-1a6aca43b309",
        "publishedAt": "2025-09-09T10:36:46.541849731Z",
        "updatedAt": "2025-09-14T02:22:00.59735517Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.chris-schra/mcp-funnel",
    "description": "MCP proxy that aggregates multiple servers with tool filtering and customization",
    "status": "active",
    "repository": {
      "url": "https://github.com/chris-schra/mcp-funnel",
      "source": "github"
    },
    "version": "0.0.6",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-funnel",
        "version": "0.0.6",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "1efb077e-f618-4258-8924-6e3dae14ef8b",
        "versionId": "a8a5c761-c1dc-4d1d-9100-b57df4c9ec0d",
        "publishedAt": "2025-09-17T18:33:35.912597Z",
        "updatedAt": "2025-09-17T18:55:31.893305521Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.letta/memory-mcp",
    "description": "MCP server for AI memory management using Letta - Standard MCP format",
    "status": "active",
    "repository": {
      "url": "https://github.com/letta-ai/memory-mcp",
      "source": "github"
    },
    "version": "2.0.2",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@letta-ai/memory-mcp",
        "version": "2.0.2",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Letta API key for memory operations",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "LETTA_API_KEY"
          },
          {
            "description": "Unique user identifier for associated memories",
            "format": "string",
            "name": "LETTA_USER_ID"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "47424db0-5d42-47d0-a0b4-6e2e6728728a",
        "versionId": "b305e6df-7c51-4067-a28c-d5964c68bd74",
        "publishedAt": "2025-09-09T06:28:26.340372855Z",
        "updatedAt": "2025-09-09T06:28:26.340372855Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.remote-mcp/registry-mcp",
    "description": "An MCP server that serves informtaion from the official MCP registry",
    "status": "active",
    "repository": {
      "url": "https://github.com/jaw9c/mcp-registry-mcp",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://registry-mcp.remote-mcp.com"
      },
      {
        "type": "sse",
        "url": "https://registry-mcp.remote-mcp.com/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b90f6378-c952-4081-8c7b-2865bf8409bb",
        "versionId": "17de8cb0-997b-43c7-9bef-b3f1a59c188c",
        "publishedAt": "2025-09-09T11:30:24.582712708Z",
        "updatedAt": "2025-09-09T11:30:24.582712708Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.Flightradar24/fr24api-mcp",
    "description": "MCP server providing access to the Flightradar24 API for real-time and historical flight data",
    "status": "active",
    "repository": {
      "url": "https://github.com/Flightradar24/fr24api-mcp",
      "source": "github"
    },
    "version": "1.0.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@flightradar24/fr24api-mcp",
        "version": "1.0.1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your API key for Flightradar24 API",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "FR24_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "9c0f92fa-4fe3-453f-897a-21670c834a15",
        "versionId": "69c0381a-387b-4398-af92-294377ecb5ec",
        "publishedAt": "2025-09-09T11:42:51.309275268Z",
        "updatedAt": "2025-09-09T11:42:51.309275268Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.waystation/mcp",
    "description": "Ultimate toolbox to connect your LLM to popular productivity tools such as Monday, AirTable, Slack",
    "status": "active",
    "repository": {
      "url": "https://github.com/waystation-ai/mcp",
      "source": "github"
    },
    "version": "0.3.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://waystation.ai/mcp"
      },
      {
        "type": "sse",
        "url": "https://waystation.ai/mcp/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "cfa6ee14-19e7-4d65-b5f5-ac103c484bed",
        "versionId": "48932704-6cfe-4708-b935-50c82afb3d42",
        "publishedAt": "2025-09-09T12:10:02.487930463Z",
        "updatedAt": "2025-09-09T12:10:02.487930463Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.DeanWard/HAL",
    "description": "HAL (HTTP API Layer) - An MCP server that provides HTTP API capabilities to Large Language Models",
    "status": "active",
    "repository": {
      "url": "https://github.com/DeanWard/HAL",
      "source": "github"
    },
    "version": "1.0.14",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "hal-mcp",
        "version": "1.0.14",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "ffe90b1f-e0e3-4999-aa8b-022e4e2187a6",
        "versionId": "10d39bdb-2500-4fbc-a54d-e651d6aa05f4",
        "publishedAt": "2025-09-09T13:04:11.860929514Z",
        "updatedAt": "2025-09-09T13:04:11.860929514Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.variflight/variflight-mcp",
    "description": "Variflight MCP Server",
    "status": "active",
    "repository": {
      "url": "https://github.com/variflight/variflight-mcp",
      "source": "github"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@variflight-ai/variflight-mcp",
        "version": "1.0.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your API key for the service",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "VARIFLIGHT_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "314291ab-1ff5-4c6b-9879-9a236748c272",
        "versionId": "c41fdf1c-b9b0-4101-ba38-7584f2e6135a",
        "publishedAt": "2025-09-09T13:30:29.381063731Z",
        "updatedAt": "2025-09-09T13:43:56.537303875Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.variflight/variflight-mcp",
    "description": "Variflight MCP Server",
    "status": "active",
    "repository": {
      "url": "https://github.com/variflight/variflight-mcp",
      "source": "github"
    },
    "version": "1.0.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@variflight-ai/variflight-mcp",
        "version": "1.0.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your API key for the service",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "VARIFLIGHT_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "314291ab-1ff5-4c6b-9879-9a236748c272",
        "versionId": "3d452687-9ce1-4b5e-98b9-2fbf1fb7abb7",
        "publishedAt": "2025-09-09T13:43:56.480560569Z",
        "updatedAt": "2025-09-12T07:06:18.911110007Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.waystation/slack",
    "description": "Send messages, access channels, and manage files in your Slack workspace.",
    "status": "active",
    "repository": {
      "url": "https://github.com/waystation-ai/mcp",
      "source": "github"
    },
    "version": "0.3.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://waystation.ai/slack/mcp"
      },
      {
        "type": "sse",
        "url": "https://waystation.ai/slack/mcp/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c202d96c-de6b-469f-ad60-2426beb1e06d",
        "versionId": "7a6efd6d-130c-4586-9399-376f11836b1a",
        "publishedAt": "2025-09-09T14:32:49.571767151Z",
        "updatedAt": "2025-09-09T14:32:49.571767151Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.waystation/office",
    "description": "Create, edit, and collaborate on Office documents and spreadsheets.",
    "status": "active",
    "repository": {
      "url": "https://github.com/waystation-ai/mcp",
      "source": "github"
    },
    "version": "0.3.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://waystation.ai/office/mcp"
      },
      {
        "type": "sse",
        "url": "https://waystation.ai/office/mcp/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "96e1826b-4ed0-4c59-8002-4edbce687046",
        "versionId": "94689419-d526-4008-b0df-d79635930fa1",
        "publishedAt": "2025-09-09T14:32:54.33420243Z",
        "updatedAt": "2025-09-09T14:32:54.33420243Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.waystation/postgres",
    "description": "Connect to your PostgreSQL database to query data and schemas.",
    "status": "active",
    "repository": {
      "url": "https://github.com/waystation-ai/mcp",
      "source": "github"
    },
    "version": "0.3.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://waystation.ai/postgres/mcp"
      },
      {
        "type": "sse",
        "url": "https://waystation.ai/postgres/mcp/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "2587da38-df7c-4131-bf77-c33cb6ce7ba7",
        "versionId": "0e8d3570-c4fa-485a-87a0-b978a16f7910",
        "publishedAt": "2025-09-09T14:46:09.489651945Z",
        "updatedAt": "2025-09-09T14:46:09.489651945Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.karanb192/reddit-buddy-mcp",
    "description": "Reddit MCP server - browse posts, search content, analyze users.",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.6-test.7",
    "packages": [
      {
        "registryType": "npm",
        "identifier": "@karanb192/reddit-buddy-mcp",
        "version": "1.0.6-test.7",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "9b13d420-4d1e-424e-9af2-bc9336c12892",
        "versionId": "37a73b98-7065-4144-8bd2-9b7aa57340a5",
        "publishedAt": "2025-09-15T07:27:45.7983415Z",
        "updatedAt": "2025-09-15T07:27:45.7983415Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.waystation/monday",
    "description": "Access and manage your Monday.com boards, items, and updates seamlessly",
    "status": "active",
    "repository": {
      "url": "https://github.com/waystation-ai/mcp",
      "source": "github"
    },
    "version": "0.3.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://waystation.ai/monday/mcp"
      },
      {
        "type": "sse",
        "url": "https://waystation.ai/monday/mcp/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "106108da-a505-40bd-b8df-7f82b7cb1d48",
        "versionId": "aaf0e62a-eaa9-49d9-a6f1-c10cf459274e",
        "publishedAt": "2025-09-09T14:20:40.836347203Z",
        "updatedAt": "2025-09-09T14:20:40.836347203Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.waystation/miro",
    "description": "Collaborate on visual boards with your team using Miro integration.",
    "status": "active",
    "repository": {
      "url": "https://github.com/waystation-ai/mcp",
      "source": "github"
    },
    "version": "0.3.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://waystation.ai/miro/mcp"
      },
      {
        "type": "sse",
        "url": "https://waystation.ai/miro/mcp/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "cb55e211-c76f-4ebd-bc1c-c51de032ec76",
        "versionId": "54131da0-99e1-4d90-a5d3-e0333a265843",
        "publishedAt": "2025-09-09T14:32:52.805916164Z",
        "updatedAt": "2025-09-09T14:32:52.805916164Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.jkakar/recipe-mcp",
    "description": "Generate and remix recipes using cookwith.co",
    "status": "active",
    "repository": {
      "url": "https://github.com/blaideinc/recipe-mcp",
      "source": "github"
    },
    "version": "1.0.3",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@cookwith/recipe-mcp",
        "version": "1.0.3",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c3b3c3c7-4e0d-4529-bc19-85c18239baf4",
        "versionId": "94e6cd5b-6def-4054-bf2d-91c8c31205a5",
        "publishedAt": "2025-09-11T18:30:58.5302013Z",
        "updatedAt": "2025-09-11T18:33:51.807883948Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.zhongweili/nanobanana-mcp-server",
    "description": "An MCP server that provides image generation and editing capabilities",
    "status": "active",
    "repository": {
      "url": "https://github.com/zhongweili/nanobanana-mcp-server",
      "source": "github"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "nanobanana-mcp-server",
        "version": "1.0.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your Gemini API key",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "GEMINI_API_KEY"
          },
          {
            "description": "The image output directory",
            "format": "string",
            "name": "IMAGE_OUTPUT_DIR"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "879d5644-ec2a-4627-9918-8043302684a4",
        "versionId": "c339f751-fd5c-487a-b5c2-14971011acb4",
        "publishedAt": "2025-09-09T13:45:29.896269404Z",
        "updatedAt": "2025-09-09T13:45:29.896269404Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.pshivapr/selenium-mcp",
    "description": "Selenium Tools for MCP",
    "status": "active",
    "repository": {
      "url": "https://github.com/pshivapr/selenium-mcp",
      "source": "github"
    },
    "version": "0.3.8",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "selenium-webdriver-mcp",
        "version": "0.3.8",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your API key for the service",
            "format": "string",
            "isSecret": true,
            "name": "YOUR_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "e6648a72-6a2f-4b64-991e-4be3ed59ed3c",
        "versionId": "2e84c83f-1672-4916-a337-84e76d93b4e2",
        "publishedAt": "2025-09-09T13:53:12.051952089Z",
        "updatedAt": "2025-09-09T19:08:26.438447364Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.waystation/airtable",
    "description": "Access and manage your Airtable bases, tables, and records seamlessly",
    "status": "active",
    "repository": {
      "url": "https://github.com/waystation-ai/mcp",
      "source": "github"
    },
    "version": "0.3.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://waystation.ai/airtable/mcp"
      },
      {
        "type": "sse",
        "url": "https://waystation.ai/airtable/mcp/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "161a89b9-90f0-4307-ad04-ebd7e916a760",
        "versionId": "45c4154d-8dbe-4452-aff1-739b8107d11b",
        "publishedAt": "2025-09-09T14:23:23.086629092Z",
        "updatedAt": "2025-09-09T14:23:23.086629092Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.Selenium39/mcp-server-tempmail",
    "description": "MCP server for temporary email management using ChatTempMail API",
    "status": "active",
    "repository": {
      "url": "https://github.com/Selenium39/mcp-server-tempmail",
      "source": "github"
    },
    "version": "1.0.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-server-tempmail",
        "version": "1.0.1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "API key for ChatTempMail service",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "TEMPMAIL_API_KEY"
          },
          {
            "description": "Base URL for ChatTempMail API (optional, defaults to https://chat-tempmail.com)",
            "format": "string",
            "name": "TEMPMAIL_BASE_URL"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "d6d7bbab-70c9-450d-93e0-771bf2d8cebe",
        "versionId": "9b7b9ce9-886b-4281-9e3e-8b5d45998edb",
        "publishedAt": "2025-09-09T14:44:19.170379822Z",
        "updatedAt": "2025-09-09T14:44:19.170379822Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.waystation/jira",
    "description": "Track issues, manage projects, and streamline workflows in Jira.",
    "status": "active",
    "repository": {
      "url": "https://github.com/waystation-ai/mcp",
      "source": "github"
    },
    "version": "0.3.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://waystation.ai/jira/mcp"
      },
      {
        "type": "sse",
        "url": "https://waystation.ai/jira/mcp/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b0896fc4-bb5e-4847-a0bf-7c3f1af17911",
        "versionId": "62854e83-941a-464c-8798-2f3ae4908410",
        "publishedAt": "2025-09-09T14:46:07.210890661Z",
        "updatedAt": "2025-09-09T14:46:07.210890661Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.waystation/gmail",
    "description": "Read emails, send messages, and manage labels in your Gmail account.",
    "status": "active",
    "repository": {
      "url": "https://github.com/waystation-ai/mcp",
      "source": "github"
    },
    "version": "0.3.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://waystation.ai/gmail/mcp"
      },
      {
        "type": "sse",
        "url": "https://waystation.ai/gmail/mcp/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c8058a02-9f65-448b-9301-209d429efd74",
        "versionId": "00b9d4aa-56ab-4f32-9f9f-3b9d48ed023f",
        "publishedAt": "2025-09-09T14:46:07.969809594Z",
        "updatedAt": "2025-09-09T14:46:07.969809594Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.waystation/teams",
    "description": "Collaborate, chat, and manage meetings in Microsoft Teams.",
    "status": "active",
    "repository": {
      "url": "https://github.com/waystation-ai/mcp",
      "source": "github"
    },
    "version": "0.3.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://waystation.ai/teams/mcp"
      },
      {
        "type": "sse",
        "url": "https://waystation.ai/teams/mcp/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "f617c9ab-5185-49e8-af21-6276c37db6c4",
        "versionId": "9dcd9a6c-b7b1-45f0-98a7-3fd8d3c49d51",
        "publishedAt": "2025-09-09T14:46:08.709922175Z",
        "updatedAt": "2025-09-09T14:46:08.709922175Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.enigma/enigma-mcp-server",
    "description": "An MCP server that provides access to trusted data about business identity and activity",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.enigma.com/http"
      },
      {
        "type": "streamable-http",
        "url": "https://mcp.enigma.com/http-token",
        "headers": [
          {
            "description": "Bearer token of Enigma API key. Used to enable authentication without presenting the user with an oAuth login.",
            "isRequired": true,
            "isSecret": true,
            "name": "X-API-Key"
          }
        ]
      },
      {
        "type": "sse",
        "url": "https://mcp.enigma.com/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "2a1822b0-c0d6-414c-9ee2-ea1851f35f28",
        "versionId": "98f794d9-0a3c-432d-a8d2-3c5cb80eae2d",
        "publishedAt": "2025-09-10T19:14:36.3625643Z",
        "updatedAt": "2025-09-10T19:14:36.3625643Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.waystation/wrike",
    "description": "Manage projects, tasks, and workflows with Wrike project management.",
    "status": "active",
    "repository": {
      "url": "https://github.com/waystation-ai/mcp",
      "source": "github"
    },
    "version": "0.3.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://waystation.ai/wrike/mcp"
      },
      {
        "type": "sse",
        "url": "https://waystation.ai/wrike/mcp/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "5fccc166-4608-4928-b6a6-df708e455cd0",
        "versionId": "d2fa299a-65ac-4c2d-8d48-b30826140fb3",
        "publishedAt": "2025-09-09T14:37:01.216778711Z",
        "updatedAt": "2025-09-09T14:37:01.216778711Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.waystation/supabase",
    "description": "Connect to your Supabase database to query data and schemas.",
    "status": "active",
    "repository": {
      "url": "https://github.com/waystation-ai/mcp",
      "source": "github"
    },
    "version": "0.3.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://waystation.ai/supabase/mcp"
      },
      {
        "type": "sse",
        "url": "https://waystation.ai/supabase/mcp/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "731d8422-a4d1-4783-95aa-1e17b05099b2",
        "versionId": "bc101c44-3702-449a-b569-74f3078eac9d",
        "publishedAt": "2025-09-09T14:46:10.221625416Z",
        "updatedAt": "2025-09-09T14:46:10.221625416Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.rbonestell/ap-mcp-server",
    "description": "Model Context Protocol (MCP) server for the Associated Press Media API",
    "status": "active",
    "repository": {
      "url": "https://github.com/rbonestell/ap-mcp-server",
      "source": "github"
    },
    "version": "1.2.6",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "ap-mcp-server",
        "version": "1.2.6",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your API key for the service",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "YOUR_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "15b5d5c8-7445-4376-a09b-d1951dccc90b",
        "versionId": "d50ffd11-3650-48ce-ba9b-6aaaea10ee1c",
        "publishedAt": "2025-09-09T14:57:28.79470971Z",
        "updatedAt": "2025-09-09T14:57:28.79470971Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.huoshuiai42/huoshui-file-search",
    "description": "An MCP server that provides fast Spotlight file search capabilities for macOS",
    "status": "active",
    "repository": {
      "url": "https://github.com/huoshuiai42/huoshui-file-search",
      "source": "github"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "huoshui-file-search",
        "version": "1.0.0",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "6e5033a3-e2e4-41a7-87ed-f80a9c1a49ce",
        "versionId": "0733c292-e9cd-42f4-8260-3886dd762460",
        "publishedAt": "2025-09-09T15:19:22.241726816Z",
        "updatedAt": "2025-09-09T15:19:22.241726816Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.globalping/mcp",
    "description": "Interact with a global network measurement platform.Run network commands from any point in the world",
    "status": "active",
    "repository": {
      "url": "https://github.com/jsdelivr/globalping-mcp-server",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "sse",
        "url": "https://mcp.globalping.io/sse"
      },
      {
        "type": "streamable-http",
        "url": "https://mcp.globalping.io/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "e640fcfa-70f4-4b61-b8c2-b385454f22da",
        "versionId": "b30f06c4-c3de-4734-8996-88c9d13ad12c",
        "publishedAt": "2025-09-09T15:58:08.139458885Z",
        "updatedAt": "2025-09-09T15:58:08.139458885Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.GLips/Figma-Context-MCP",
    "description": "Give your coding agent access to your Figma data. Implement designs in any framework in one-shot.",
    "status": "active",
    "repository": {
      "url": "https://github.com/GLips/Figma-Context-MCP",
      "source": "github"
    },
    "version": "0.6.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "figma-developer-mcp",
        "version": "0.6.0",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "value": "--stdio",
            "type": "positional"
          }
        ],
        "environmentVariables": [
          {
            "description": "Your Figma Personal Access Token, learn more here: https://www.figma.com/developers/api#access-tokens",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "FIGMA_API_KEY"
          },
          {
            "description": "Start the server in stdio mode, keep as CLI",
            "default": "cli",
            "name": "NODE_ENV"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "fa424c9b-7b21-4ea7-a75b-4ef0bbb6aad5",
        "versionId": "8e307ce2-4847-4aa9-952f-22017f14f7ef",
        "publishedAt": "2025-09-09T16:40:36.136529165Z",
        "updatedAt": "2025-09-09T16:40:36.136529165Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.onkernel/kernel-mcp-server",
    "description": "Access Kernel's cloud-based browsers and app actions via MCP (remote HTTP + OAuth).",
    "status": "active",
    "repository": {
      "url": "https://github.com/onkernel/kernel-mcp-server",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.onkernel.com/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "8ca49743-b469-46be-a7ca-df1d3cf14d94",
        "versionId": "95fc358c-7c94-4f0f-ad50-e7e516940dba",
        "publishedAt": "2025-09-09T18:04:37.61770657Z",
        "updatedAt": "2025-09-09T18:04:37.61770657Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.close/close-mcp",
    "description": "Close CRM to manage your sales pipeline. Learn more at https://close.com or https://mcp.close.com",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.close.com/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "770f5812-1f2f-46c7-bef9-e05f6d62f304",
        "versionId": "c9fdc775-1ff6-4c60-a696-58b5a07ab59e",
        "publishedAt": "2025-09-09T18:15:23.108331317Z",
        "updatedAt": "2025-09-22T21:07:57.610560832Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.cameroncooke/XcodeBuildMCP",
    "description": "XcodeBuildMCP provides tools for Xcode project management, simulator management, and app utilities.",
    "status": "active",
    "repository": {
      "url": "https://github.com/cameroncooke/XcodeBuildMCP",
      "source": "github"
    },
    "version": "1.12.7",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "xcodebuildmcp",
        "version": "1.12.7",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "18e95b25-4c50-4d4f-836b-0d47f4ef98f4",
        "versionId": "0db74a8b-5a5f-49de-8f78-fd983d4a9c11",
        "publishedAt": "2025-09-09T19:05:37.138310617Z",
        "updatedAt": "2025-09-09T19:54:23.231288713Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.pshivapr/selenium-mcp",
    "description": "Selenium Tools for MCP",
    "status": "active",
    "repository": {
      "url": "https://github.com/pshivapr/selenium-mcp",
      "source": "github"
    },
    "version": "0.3.9",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "selenium-webdriver-mcp",
        "version": "0.3.9",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your API key for the service",
            "format": "string",
            "isSecret": true,
            "name": "YOUR_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "e6648a72-6a2f-4b64-991e-4be3ed59ed3c",
        "versionId": "cc6f63b8-d592-4ca8-9440-9e3be35be2c8",
        "publishedAt": "2025-09-09T19:08:26.435100548Z",
        "updatedAt": "2025-09-11T13:43:51.367329854Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.mintmcp/gmail",
    "description": "A MintMCP server for Gmail that lets you search, read, and draft emails and replies.",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://gmail.mintmcp.com/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "108ee330-287d-40a7-98c6-6806dbb9eeac",
        "versionId": "77c15324-cc34-417a-800f-673c2c44909b",
        "publishedAt": "2025-09-09T19:20:31.788880118Z",
        "updatedAt": "2025-09-09T19:25:39.937486339Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.mintmcp/gmail",
    "description": "A MintMCP server for Gmail that lets you search, read, and draft emails and replies.",
    "status": "active",
    "repository": {
      "url": "https://github.com/mintmcp/mcp",
      "source": "github"
    },
    "version": "1.0.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://gmail.mintmcp.com/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "108ee330-287d-40a7-98c6-6806dbb9eeac",
        "versionId": "3bd6e07f-df97-48f4-8ae1-58c1682f3255",
        "publishedAt": "2025-09-09T19:25:39.933995125Z",
        "updatedAt": "2025-09-09T19:44:30.666451776Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.mintmcp/gcal",
    "description": "A MintMCP server that works with Google Calendar to manage event listing, reading, and updates.",
    "status": "active",
    "repository": {
      "url": "https://github.com/mintmcp/mcp",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://gcal.mintmcp.com/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "7b265ff1-5cd1-43fe-92c4-54cc6a0fd4d7",
        "versionId": "a7aa8d87-ead3-4ee3-9021-f41edf303f72",
        "publishedAt": "2025-09-09T19:28:43.15437668Z",
        "updatedAt": "2025-09-09T19:35:28.126060102Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.mintmcp/gcal",
    "description": "A MintMCP server that works with Google Calendar to manage event listing, reading, and updates.",
    "status": "active",
    "repository": {
      "url": "https://github.com/mintmcp/mcp",
      "source": "github"
    },
    "version": "1.0.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://gcal.mintmcp.com/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "7b265ff1-5cd1-43fe-92c4-54cc6a0fd4d7",
        "versionId": "3295b540-5655-4ddd-9726-8dd060e7e05a",
        "publishedAt": "2025-09-09T19:35:28.121701943Z",
        "updatedAt": "2025-09-09T19:36:28.010860991Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.mintmcp/gcal",
    "description": "A MCP server that works with Google Calendar to manage event listing, reading, and updates.",
    "status": "active",
    "repository": {
      "url": "https://github.com/mintmcp/mcp",
      "source": "github"
    },
    "version": "1.0.2",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://gcal.mintmcp.com/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "7b265ff1-5cd1-43fe-92c4-54cc6a0fd4d7",
        "versionId": "899391c2-e787-4df6-9788-0fcb0e1f086d",
        "publishedAt": "2025-09-09T19:36:27.962358954Z",
        "updatedAt": "2025-09-09T19:42:00.468110436Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.mintmcp/gcal",
    "description": "A MCP server that works with Google Calendar to manage event listing, reading, and updates.",
    "status": "active",
    "repository": {
      "url": "https://github.com/mintmcp/servers",
      "source": "github"
    },
    "version": "1.0.3",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://gcal.mintmcp.com/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "7b265ff1-5cd1-43fe-92c4-54cc6a0fd4d7",
        "versionId": "bde26216-0984-4c1d-bc1c-7d9096688a79",
        "publishedAt": "2025-09-09T19:42:00.464295781Z",
        "updatedAt": "2025-09-09T19:49:54.017385171Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.mintmcp/gmail",
    "description": "A MCP server server for Gmail that lets you search, read, and draft emails and replies.",
    "status": "active",
    "repository": {
      "url": "https://github.com/mintmcp/servers",
      "source": "github"
    },
    "version": "1.0.3",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://gmail.mintmcp.com/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "108ee330-287d-40a7-98c6-6806dbb9eeac",
        "versionId": "16f913d5-3f6f-450c-b786-76d38d374b10",
        "publishedAt": "2025-09-09T19:44:30.662664985Z",
        "updatedAt": "2025-09-09T19:49:24.179849796Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.mintmcp/gmail",
    "description": "A MCP server for Gmail that lets you search, read, and draft emails and replies.",
    "status": "active",
    "repository": {
      "url": "https://github.com/mintmcp/servers",
      "source": "github"
    },
    "version": "1.0.4",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://gmail.mintmcp.com/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "108ee330-287d-40a7-98c6-6806dbb9eeac",
        "versionId": "f2712336-6ab8-4d62-8e75-63b1da189866",
        "publishedAt": "2025-09-09T19:49:24.175897882Z",
        "updatedAt": "2025-09-09T19:53:13.48979916Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.mintmcp/gcal",
    "description": "A MCP server that works with Google Calendar to manage event listing, reading, and updates.",
    "status": "active",
    "repository": {
      "url": "https://github.com/mintmcp/servers",
      "source": "github"
    },
    "version": "1.0.4",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://gcal.mintmcp.com/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "7b265ff1-5cd1-43fe-92c4-54cc6a0fd4d7",
        "versionId": "56080a46-21d6-48d2-91ff-ae1b9cb378b5",
        "publishedAt": "2025-09-09T19:49:54.013255259Z",
        "updatedAt": "2025-09-09T19:49:54.013255259Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.mintmcp/gmail",
    "description": "A MCP server for Gmail that lets you search, read, and draft emails and replies.",
    "status": "active",
    "repository": {
      "url": "https://github.com/mintmcp/servers",
      "source": "github"
    },
    "version": "1.0.5",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://gmail.mintmcp.com/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "108ee330-287d-40a7-98c6-6806dbb9eeac",
        "versionId": "095ef563-ac9f-46d0-bc67-8b0f122ab4f9",
        "publishedAt": "2025-09-09T19:53:13.486381454Z",
        "updatedAt": "2025-09-09T19:53:13.486381454Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.cameroncooke/XcodeBuildMCP",
    "description": "XcodeBuildMCP provides tools for Xcode project management, simulator management, and app utilities.",
    "status": "active",
    "repository": {
      "url": "https://github.com/cameroncooke/XcodeBuildMCP",
      "source": "github"
    },
    "version": "1.12.8",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "xcodebuildmcp",
        "version": "1.12.8",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "18e95b25-4c50-4d4f-836b-0d47f4ef98f4",
        "versionId": "c6f34744-715a-490d-996c-7e87596b8681",
        "publishedAt": "2025-09-09T19:54:23.228606748Z",
        "updatedAt": "2025-09-09T19:54:23.228606748Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.mintmcp/outlook-email",
    "description": "A MCP server for Outlook email that lets you search, read, and draft emails and replies.",
    "status": "active",
    "repository": {
      "url": "https://github.com/mintmcp/servers",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://outlook-email.mintmcp.com/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c331c604-5fd3-409f-b076-7790b9acbb20",
        "versionId": "881c11dc-c6c4-4bdb-8baf-17c32f1e611b",
        "publishedAt": "2025-09-09T19:59:31.832251453Z",
        "updatedAt": "2025-09-09T20:02:38.029140257Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.kevint-cerebras/cerebras-code-mcp",
    "description": "Model Context Protocol (MCP) server for Cerebras to make coding faster in AI-first IDEs",
    "status": "active",
    "repository": {
      "url": "https://github.com/kevint-cerebras/cerebras-code-mcp",
      "source": "github"
    },
    "version": "1.3.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "cerebras-code-mcp",
        "version": "1.3.1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your Cerebras API key from cloud.cerebras.ai",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "CEREBRAS_API_KEY"
          },
          {
            "description": "Optional OpenRouter API key for fallback when Cerebras rate limits are hit",
            "format": "string",
            "isSecret": true,
            "name": "OPENROUTER_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "cf2775c1-2d0e-49b1-b5b0-119dd6523ed3",
        "versionId": "86627f06-52cf-41a8-8121-b1cfbea8f542",
        "publishedAt": "2025-09-09T19:59:53.502109932Z",
        "updatedAt": "2025-09-09T19:59:53.502109932Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.mintmcp/outlook-email",
    "description": "A MCP server for Outlook email that lets you search, read, and draft emails and replies.",
    "status": "active",
    "repository": {
      "url": "https://github.com/mintmcp/servers",
      "source": "github"
    },
    "version": "1.0.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://outlook-email.mintmcp.com/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c331c604-5fd3-409f-b076-7790b9acbb20",
        "versionId": "29029c32-4067-48c0-b831-058bc34623a1",
        "publishedAt": "2025-09-09T20:02:38.025522049Z",
        "updatedAt": "2025-09-09T20:02:38.025522049Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.mintmcp/outlook-calendar",
    "description": "A MCP server that works with Outlook Calendar to manage event listing, reading, and updates.",
    "status": "active",
    "repository": {
      "url": "https://github.com/mintmcp/servers",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://outlook-calendar.mintmcp.com/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "293ca7df-05a9-4490-b0d8-955adeb97385",
        "versionId": "31a850e0-2f62-4d61-b128-6c4bca76bdd1",
        "publishedAt": "2025-09-09T20:03:56.940660247Z",
        "updatedAt": "2025-09-09T20:03:56.940660247Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.ref-tools/ref-tools-mcp",
    "description": "Token efficient search for coding agents over public and private documentation.",
    "status": "active",
    "repository": {
      "url": "https://github.com/ref-tools/ref-tools-mcp",
      "source": "github"
    },
    "version": "3.0.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "ref-tools-mcp",
        "version": "3.0.1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your API key for Ref",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "REF_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "9cae00f1-5399-4189-836a-537b154e31a6",
        "versionId": "1cc2e5dc-cf3d-48d2-bd0b-79c31dd6edd7",
        "publishedAt": "2025-09-09T20:04:16.022584551Z",
        "updatedAt": "2025-09-09T20:04:16.022584551Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.zine/mcp",
    "description": "Your memory, everywhere AI goes. Build knowledge once, access it via MCP anywhere.",
    "status": "active",
    "repository": {
      "url": "https://github.com/graphlit/graphlit-mcp-server",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://www.zine.ai/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "4ebda2a7-88c7-4ff1-8333-09bca54fecbf",
        "versionId": "b082814d-7200-439d-9ebf-9683529e2b33",
        "publishedAt": "2025-09-09T20:16:56.788715831Z",
        "updatedAt": "2025-09-10T18:02:28.779912076Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.zenml-io/mcp-zenml",
    "description": "MCP server for ZenML - browse stacks, pipelines, runs, artifacts & trigger pipeline runs via API",
    "status": "active",
    "repository": {
      "url": "https://github.com/zenml-io/mcp-zenml",
      "source": "github"
    },
    "version": "1.0.3",
    "packages": [
      {
        "registryType": "oci",
        "registryBaseUrl": "https://docker.io",
        "identifier": "zenmldocker/mcp-zenml",
        "version": "1.0.3",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Base URL of your ZenML server (e.g., https://<workspace-id>-zenml.cloudinfra.zenml.io).",
            "isRequired": true,
            "format": "string",
            "name": "ZENML_STORE_URL"
          },
          {
            "description": "API key used to authenticate with your ZenML server (ideally a service account key).",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "ZENML_STORE_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "6d64bd95-ee87-476c-8bc3-a36e65cfcee2",
        "versionId": "f15adbff-4318-4751-acbe-8361dfb17f1f",
        "publishedAt": "2025-09-10T13:56:29.446726607Z",
        "updatedAt": "2025-09-18T20:48:56.233589049Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.burningion/video-editing-mcp",
    "description": "An MCP server that provides [describe what your server does]",
    "status": "active",
    "repository": {
      "url": "https://github.com/burningion/video-editing-mcp",
      "source": "github"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "video-editor-mcp",
        "version": "1.0.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Video Jungle API Key (found at https://www.video-jungle.com/user/settings)",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "VJ_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "456da657-9a02-4b87-9e16-4eee6db55092",
        "versionId": "b8b7c038-1a6f-4152-9282-6de6ea3fe0ff",
        "publishedAt": "2025-09-10T13:57:16.410605636Z",
        "updatedAt": "2025-09-12T12:58:23.995884425Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.alpic.test/test-mcp-server",
    "description": "Alpic Test MCP Server - great server!",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "0.0.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://test.alpic.ai/"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "ff57c512-4e0d-497a-ae0c-18c093c3da6a",
        "versionId": "309d5dbf-3f27-4235-ae4d-56a1bb0285d1",
        "publishedAt": "2025-09-10T13:57:43.256738808Z",
        "updatedAt": "2025-09-10T13:57:43.256738808Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/arjunkmrm-perplexity-search",
    "description": "Enable AI assistants to perform web searches using Perplexity's Sonar Pro.",
    "status": "active",
    "repository": {
      "url": "https://github.com/arjunkmrm/perplexity-search",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@arjunkmrm/perplexity-search/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "e931a883-4772-46cc-a9a7-dd1bc42e5cc4",
        "versionId": "19236d9d-7d7e-40ea-bcb8-5ab23a75d4a7",
        "publishedAt": "2025-09-10T13:59:26.758557156Z",
        "updatedAt": "2025-09-10T13:59:26.758557156Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "app.zenable/zenable",
    "description": "Zenable cleans up sloppy AI code and prevents vulnerabilities with deterministic guardrails",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "sse",
        "url": "https://mcp.www.zenable.app/"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "06d38121-a76a-47ba-9827-dc181b7cc167",
        "versionId": "18d8185d-62e2-4d83-bbbc-37675b55ef26",
        "publishedAt": "2025-09-10T14:04:47.647565515Z",
        "updatedAt": "2025-09-28T22:41:40.003484173Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.florentine-ai/mcp",
    "description": "MCP server for Florentine.ai - Natural language to MongoDB aggregations",
    "status": "active",
    "repository": {
      "url": "https://github.com/florentine-ai/mcp",
      "source": "github"
    },
    "version": "0.1.4",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@florentine-ai/mcp",
        "version": "0.1.4",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        },
        "runtimeArguments": [
          {
            "isRequired": true,
            "value": "@florentine-ai/mcp@latest",
            "type": "named",
            "name": "-y"
          }
        ],
        "packageArguments": [
          {
            "description": "The mode to run the MCP server in ('static' or 'dynamic')",
            "isRequired": true,
            "value": "static",
            "type": "named",
            "name": "--mode"
          },
          {
            "description": "Set to true to enable debug logging",
            "format": "boolean",
            "type": "named",
            "name": "--debug"
          },
          {
            "description": "The path to the log file, must be provided if debug is true",
            "format": "filepath",
            "type": "named",
            "name": "--logpath"
          }
        ],
        "environmentVariables": [
          {
            "description": "Your Florentine.ai API key, get it from https://florentine.ai/dashboard",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "FLORENTINE_TOKEN"
          },
          {
            "description": "The LLM service to use, one of 'openai', 'anthropic', 'google' or 'deepseek' (must only be provided if you did not set it in your Florentine.ai account)",
            "format": "string",
            "name": "LLM_SERVICE"
          },
          {
            "description": "Your API key for the LLM service (must only be provided if you did not set it in your Florentine.ai account)",
            "format": "string",
            "isSecret": true,
            "name": "LLM_KEY"
          },
          {
            "description": "Session ID for maintaining server-side context across requests",
            "format": "string",
            "name": "SESSION_ID"
          },
          {
            "description": "Stringified JSON array of return types for the response",
            "format": "string",
            "name": "RETURN_TYPES"
          },
          {
            "description": "Stringified JSON array of values for required inputs keys",
            "format": "string",
            "name": "REQUIRED_INPUTS"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "1c220829-98d0-47a3-8b2e-09d7d5314f02",
        "versionId": "142bc4e2-698d-494c-b700-ae62b468fbb7",
        "publishedAt": "2025-09-10T14:43:00.786960372Z",
        "updatedAt": "2025-09-19T10:37:43.039348731Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "net.gepuro.mcp-company-lens-v1/company-lens-mcp-registry",
    "description": "Search Japanese company database",
    "status": "active",
    "repository": {
      "url": "https://github.com/gepuro/company-lens-mcp-registry",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp-company-lens-v1.gepuro.net/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "67d420d6-f9da-4488-b264-88c4d6126171",
        "versionId": "87793efe-79b4-4e91-8012-6a5cc6abe61e",
        "publishedAt": "2025-09-13T02:14:01.9221662Z",
        "updatedAt": "2025-09-13T02:14:01.9221662Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.timheuer/sampledotnetmcpserver",
    "description": "Sample .NET MCP Server",
    "repository": {
      "url": "https://github.com/timheuer/sampledotnetmcpserver",
      "source": "github"
    },
    "version": "",
    "packages": [
      {
        "registryType": "nuget",
        "identifier": "TimHeuer.SampleDotnetMcpServer",
        "version": "0.1.11-beta",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "98619929-a570-46c1-8e35-4cde888731ee",
        "versionId": "55cfffa3-6f27-4010-97ce-7946cd76cad2",
        "publishedAt": "2025-09-10T13:58:00.558767962Z",
        "updatedAt": "2025-09-10T15:31:23.618984633Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.overstarry/qweather-mcp",
    "description": "a qweather mcp server",
    "status": "active",
    "repository": {
      "url": "https://github.com/overstarry/qweather-mcp",
      "source": "github"
    },
    "version": "1.0.12",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "qweather-mcp",
        "version": "1.0.12",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your qweather api host",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "QWEATHER_API_BASE"
          },
          {
            "description": "Your qweather api key",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "QWEATHER_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "76511fb8-3c99-44cd-903a-fe5ef2370b03",
        "versionId": "d19619da-84d8-4b62-a2f4-766eca866ea2",
        "publishedAt": "2025-09-10T14:28:10.30769765Z",
        "updatedAt": "2025-09-10T14:28:10.30769765Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.xcodebuildmcp/XcodeBuildMCP",
    "description": "XcodeBuildMCP provides tools for Xcode project management, simulator management, and app utilities.",
    "status": "active",
    "repository": {
      "url": "https://github.com/cameroncooke/XcodeBuildMCP",
      "source": "github",
      "id": "945551361"
    },
    "version": "1.12.10",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "xcodebuildmcp",
        "version": "1.12.10",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Enable experimental xcodemake incremental builds (true/false or 1/0).",
            "format": "boolean",
            "default": "false",
            "choices": [
              "true",
              "false",
              "1",
              "0"
            ],
            "name": "INCREMENTAL_BUILDS_ENABLED"
          },
          {
            "description": "Enable AI-powered dynamic tool discovery to load only relevant workflows.",
            "format": "boolean",
            "default": "false",
            "choices": [
              "true",
              "false"
            ],
            "name": "XCODEBUILDMCP_DYNAMIC_TOOLS"
          },
          {
            "description": "Comma-separated list of workflows to load in Static Mode (e.g., 'simulator,device,project-discovery').",
            "format": "string",
            "name": "XCODEBUILDMCP_ENABLED_WORKFLOWS"
          },
          {
            "description": "Disable Sentry error reporting (preferred flag).",
            "format": "boolean",
            "default": "false",
            "choices": [
              "true",
              "false"
            ],
            "name": "XCODEBUILDMCP_SENTRY_DISABLED"
          },
          {
            "description": "Enable verbose debug logging from the server.",
            "format": "boolean",
            "default": "false",
            "choices": [
              "true",
              "false"
            ],
            "name": "XCODEBUILDMCP_DEBUG"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "be9105fb-f8cb-4151-b6f8-21b49fd71fed",
        "versionId": "288ccf72-1fde-4754-8d0e-9d67a9795125",
        "publishedAt": "2025-09-10T14:44:46.398091571Z",
        "updatedAt": "2025-09-22T20:19:27.627630397Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.ryaker/appstore-connect-mcp",
    "description": "MCP server for Apple Store Connect API integration with OAuth authentication support",
    "status": "active",
    "repository": {
      "url": "https://github.com/ryaker/appstore-connect-mcp",
      "source": "github"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@ryaker/appstore-connect-mcp",
        "version": "1.0.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Apple App Store Connect API Key ID",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "APPLE_KEY_ID"
          },
          {
            "description": "Apple App Store Connect Issuer ID",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "APPLE_ISSUER_ID"
          },
          {
            "description": "Apple App Store Connect Private Key (base64 encoded or raw)",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "APPLE_PRIVATE_KEY"
          },
          {
            "description": "Optional: Specific Bundle ID to filter apps",
            "format": "string",
            "name": "APPLE_BUNDLE_ID"
          },
          {
            "description": "Optional: Specific App Store ID",
            "format": "string",
            "name": "APPLE_APP_STORE_ID"
          },
          {
            "description": "Enable OAuth authentication (true/false)",
            "format": "string",
            "name": "OAUTH_ENABLED"
          },
          {
            "description": "OAuth issuer URL (e.g., https://your-tenant.auth0.com)",
            "format": "string",
            "name": "OAUTH_ISSUER"
          },
          {
            "description": "OAuth audience URL",
            "format": "string",
            "name": "OAUTH_AUDIENCE"
          },
          {
            "description": "OAuth JWKS URI for token validation",
            "format": "string",
            "name": "OAUTH_JWKS_URI"
          },
          {
            "description": "Server URL for OAuth deployment",
            "format": "string",
            "name": "SERVER_URL"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "299d46c6-fbdb-47ec-936a-0ec9eec30178",
        "versionId": "783d46a6-9456-412b-bce2-2d9c5a26dada",
        "publishedAt": "2025-09-10T14:59:09.11988275Z",
        "updatedAt": "2025-09-10T14:59:09.11988275Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.shalevshalit/image-recongnition-mcp",
    "description": "MCP server for AI-powered image recognition and description using OpenAI vision models.",
    "status": "active",
    "repository": {
      "url": "https://github.com/mcp-s-ai/image-recongnition-mcp",
      "source": "github"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "image-recongnition-mcp",
        "version": "1.0.4",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your OpenAI API key for image recognition and description services",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "OPENAI_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "6b4a29ed-11be-48b4-8266-d57669e90b25",
        "versionId": "98c4bba3-1c5d-4981-8ba5-6cda90f78c32",
        "publishedAt": "2025-09-10T15:01:36.626715571Z",
        "updatedAt": "2025-09-10T15:01:36.626715571Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.MasonChow/source-map-parser-mcp",
    "description": "Parse JavaScript error stack traces back to original source code using source maps",
    "status": "active",
    "repository": {
      "url": "https://github.com/MasonChow/source-map-parser-mcp",
      "source": "github"
    },
    "version": "1.3.2",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "source-map-parser-mcp",
        "version": "1.3.2",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Context lines around error locations in source code",
            "format": "string",
            "name": "SOURCE_MAP_PARSER_CONTEXT_OFFSET_LINE"
          },
          {
            "description": "Maximum memory cache size in MB for source maps",
            "format": "string",
            "name": "SOURCE_MAP_PARSER_RESOURCE_CACHE_MAX_SIZE"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c3b2f423-320c-4bee-8463-ec298459b767",
        "versionId": "26bccebb-a881-4993-b339-5d2ea18fd2cb",
        "publishedAt": "2025-09-10T15:03:12.048715379Z",
        "updatedAt": "2025-09-10T15:03:12.048715379Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.indragiek/uniprof",
    "description": "Universal CPU profiler designed for humans and AI agents",
    "status": "active",
    "repository": {
      "url": "https://github.com/indragiek/uniprof",
      "source": "github"
    },
    "version": "0.3.3",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "uniprof",
        "version": "0.3.3",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "value": "mcp",
            "type": "positional"
          },
          {
            "value": "run",
            "type": "positional"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "8c32fd44-3a81-4866-9f18-4b7af91690e0",
        "versionId": "ef18922c-2269-41c8-9e37-770f5dc2fbb6",
        "publishedAt": "2025-09-10T15:16:37.815857232Z",
        "updatedAt": "2025-09-11T00:59:36.881548344Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.shalevshalit/image-recognition-mcp",
    "description": "MCP server for AI-powered image recognition and description using OpenAI vision models.",
    "status": "active",
    "repository": {
      "url": "https://github.com/mcp-s-ai/image-recognition-mcp",
      "source": "github"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "image-recognition-mcp",
        "version": "1.0.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your OpenAI API key for image recognition and description services",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "OPENAI_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b50c16a4-57a0-4f1f-a0f6-3081e2a8cccc",
        "versionId": "2d6c8c1c-bbd0-4bd1-8a22-1fbb8c23014b",
        "publishedAt": "2025-09-10T15:18:06.73756302Z",
        "updatedAt": "2025-09-10T15:18:06.73756302Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.JustasMonkev/mcp-accessibility-scanner",
    "description": "MCP server for automated web accessibility scanning with Playwright and Axe-core.",
    "status": "active",
    "repository": {
      "url": "https://github.com/JustasMonkev/mcp-accessibility-scanner",
      "source": "github"
    },
    "version": "1.1.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-accessibility-scanner",
        "version": "1.1.1",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "ea401f8e-2bc1-4042-a8d0-3339441a3ace",
        "versionId": "6f372f99-089b-4cc7-a9b6-b3fcbd39074b",
        "publishedAt": "2025-09-10T15:19:19.721714851Z",
        "updatedAt": "2025-09-10T15:19:19.721714851Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.dockersamples/mcp-docker-release-information",
    "description": "MCP server providing Docker Desktop release notes and security information.",
    "status": "active",
    "repository": {
      "url": "https://github.com/dockersamples/mcp-docker-release-information",
      "source": "github"
    },
    "version": "0.2.0",
    "packages": [
      {
        "registryType": "oci",
        "identifier": "dockersamples/mcp-docker-release-information",
        "version": "0.2.0",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "fe7a5c36-265f-4e7b-a3ad-ef2c4c95f241",
        "versionId": "d8cd8b14-0050-458f-9a86-2ecd60df7b1b",
        "publishedAt": "2025-09-10T15:23:14.335332844Z",
        "updatedAt": "2025-09-10T18:54:52.777673838Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.timheuer/sampledotnetmcpserver",
    "description": "Sample .NET MCP Server",
    "repository": {
      "url": "https://github.com/timheuer/sampledotnetmcpserver",
      "source": "github"
    },
    "version": "0.1.18-beta",
    "packages": [
      {
        "registryType": "nuget",
        "identifier": "TimHeuer.SampleDotnetMcpServer",
        "version": "0.1.18-beta",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "98619929-a570-46c1-8e35-4cde888731ee",
        "versionId": "b0d7e2ec-250a-42a7-bc01-198e42672eeb",
        "publishedAt": "2025-09-10T15:31:23.614864173Z",
        "updatedAt": "2025-09-10T16:00:22.19485388Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.motherduckdb/mcp-server-motherduck",
    "description": "Fast analytics and data processing with DuckDB and MotherDuck",
    "status": "active",
    "repository": {
      "url": "https://github.com/motherduckdb/mcp-server-motherduck",
      "source": "github"
    },
    "version": "0.6.4",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mcp-server-motherduck",
        "version": "0.6.4",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "description": "Transport type for MCP server",
            "default": "stdio",
            "choices": [
              "stdio",
              "sse",
              "stream"
            ],
            "type": "named",
            "name": "--transport"
          },
          {
            "description": "Port to listen on for sse and stream transport mode",
            "format": "number",
            "default": "8000",
            "type": "named",
            "name": "--port"
          },
          {
            "description": "Path to local DuckDB database file or MotherDuck database",
            "default": "md:",
            "type": "named",
            "name": "--db-path"
          },
          {
            "description": "Access token to use for MotherDuck database connections",
            "isSecret": true,
            "type": "named",
            "name": "--motherduck-token"
          },
          {
            "description": "Flag for connecting to DuckDB or MotherDuck in read-only mode",
            "type": "named",
            "name": "--read-only"
          },
          {
            "description": "Home directory for DuckDB",
            "type": "named",
            "name": "--home-dir"
          },
          {
            "description": "Flag for connecting to MotherDuck in SaaS mode (disables filesystem and write permissions for local DuckDB)",
            "type": "named",
            "name": "--saas-mode"
          },
          {
            "description": "Enable JSON responses for HTTP stream (only supported for stream transport)",
            "type": "named",
            "name": "--json-response"
          }
        ],
        "environmentVariables": [
          {
            "description": "Access token to use for MotherDuck database connections",
            "isSecret": true,
            "name": "motherduck_token"
          },
          {
            "description": "Home directory for DuckDB (used as default if --home-dir not specified)",
            "name": "HOME"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "304e5985-b5e2-4759-ac4b-cf56b86e8c64",
        "versionId": "b9848a83-605f-4cb3-a9b1-2ed5dd02dd56",
        "publishedAt": "2025-09-10T15:38:28.952824815Z",
        "updatedAt": "2025-09-10T15:38:28.952824815Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.minnas/mcp",
    "description": "Share prompts and context with your team and discover community collections.",
    "status": "active",
    "repository": {
      "url": "https://github.com/sensoris/minnas-service",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "sse",
        "url": "https://api.minnas.io/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "33e1232b-4b00-46fc-9460-452cae6bdcb5",
        "versionId": "5b990a17-1e02-4112-9d51-50e0ce0bc8bd",
        "publishedAt": "2025-09-10T15:43:19.145095272Z",
        "updatedAt": "2025-09-18T16:40:24.246590894Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.pga/pga-golf",
    "description": "PGA's official MCP Server for all things golf-related. Find a coach, play golf, improve your game.",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "0.0.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.pga.com/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "8a9528bb-8c4a-4e20-8434-264e2fd67b0f",
        "versionId": "4025acb1-1da6-40bf-bcea-e8614fabe911",
        "publishedAt": "2025-09-10T15:44:45.139319366Z",
        "updatedAt": "2025-09-10T15:44:45.139319366Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.agentailor/slimcontext-mcp-server",
    "description": "MCP Server for SlimContext - AI chat history compression tools",
    "status": "active",
    "repository": {
      "url": "https://github.com/agentailor/slimcontext-mcp-server",
      "source": "github"
    },
    "version": "0.1.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "slimcontext-mcp-server",
        "version": "0.1.1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your API key for the service",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "YOUR_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "e694708b-fee1-4070-b8cd-e008bcc5bd3e",
        "versionId": "9e289796-16e8-440e-8b01-311e7bbb64cb",
        "publishedAt": "2025-09-10T15:57:56.189103539Z",
        "updatedAt": "2025-09-16T07:56:23.189924643Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.timheuer/sampledotnetmcpserver",
    "description": "Sample .NET MCP Server",
    "repository": {
      "url": "https://github.com/timheuer/sampledotnetmcpserver",
      "source": "github"
    },
    "version": "0.1.19-beta",
    "packages": [
      {
        "registryType": "nuget",
        "identifier": "TimHeuer.SampleDotnetMcpServer",
        "version": "0.1.19-beta",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "98619929-a570-46c1-8e35-4cde888731ee",
        "versionId": "18e0107f-76d1-4655-ad09-1c17763150aa",
        "publishedAt": "2025-09-10T16:00:22.183688927Z",
        "updatedAt": "2025-09-16T22:11:37.318046537Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/smithery-ai-cookbook-python-quickstart",
    "description": "A simple MCP server built with FastMCP and python",
    "status": "active",
    "repository": {
      "url": "https://github.com/smithery-ai/smithery-cookbook",
      "source": "github",
      "subfolder": "servers/python/quickstart"
    },
    "version": "1.13.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@smithery-ai/cookbook-python-quickstart/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "5706bb0e-05a5-41cf-84d4-f2d1f88c7e0e",
        "versionId": "fb85b1a6-168c-4775-ae6b-2ab63c5506c2",
        "publishedAt": "2025-09-10T16:07:02.461934808Z",
        "updatedAt": "2025-09-10T16:07:02.461934808Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.coupler/remote-mcp-server",
    "description": "Coupler.io remote MCP server",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "0.0.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.coupler.io/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "f9ff4498-b385-4c91-8f70-31cf4ab9fe1e",
        "versionId": "975e0708-c43d-42ba-a27f-6d69f7c8e91a",
        "publishedAt": "2025-09-10T16:12:03.417415684Z",
        "updatedAt": "2025-09-10T16:12:03.417415684Z",
        "isLatest": true
      }
    }
  },
  {
    "name": "io.github.ruvnet/claude-flow",
    "description": "AI orchestration with hive-mind swarms, neural networks, and 87 MCP tools for enterprise dev.",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "2.0.0-alpha.104",
    "packages": [
      {
        "registryType": "npm",
        "identifier": "claude-flow",
        "version": "2.0.0-alpha.104",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "8362811b-c6cc-401d-92d9-6288295e9104",
        "versionId": "d04e69ef-3bd3-4216-8145-928c3c775ee8",
        "publishedAt": "2025-09-10T16:20:48.985187906Z",
        "updatedAt": "2025-09-10T16:46:39.972611608Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.ruvnet/flow-nexus",
    "description": "Cloud-powered AI platform with multi-agent swarms, sandboxes, and workflow automation",
    "status": "active",
    "repository": {
      "url": "https://github.com/ruvnet/flow-nexus",
      "source": "github"
    },
    "version": "0.1.121",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "flow-nexus",
        "version": "0.1.121",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "API key for Flow Nexus authentication",
            "format": "string",
            "isSecret": true,
            "name": "FLOW_NEXUS_API_KEY"
          },
          {
            "description": "Base URL for Flow Nexus API",
            "format": "string",
            "name": "FLOW_NEXUS_BASE_URL"
          },
          {
            "description": "E2B API key for sandbox creation",
            "format": "string",
            "isSecret": true,
            "name": "E2B_API_KEY"
          },
          {
            "description": "Anthropic API key for Claude integration",
            "format": "string",
            "isSecret": true,
            "name": "ANTHROPIC_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b3bb56af-1134-4509-8d39-6e0ea641e4f1",
        "versionId": "2052b35f-4321-4d32-88b9-0c4ca09771a0",
        "publishedAt": "2025-09-10T16:22:10.934865687Z",
        "updatedAt": "2025-09-10T16:22:10.934865687Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.rfdez/pvpc-mcp-server",
    "description": "Fetch the Voluntary Price for the Small Consumer (PVPC) published daily by Red Eléctrica.",
    "status": "active",
    "repository": {
      "url": "https://github.com/rfdez/pvpc-mcp-server",
      "source": "github"
    },
    "version": "3.2.2",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@rfdez/pvpc-mcp-server",
        "version": "3.2.2",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "description": "Use stdio transport type for MCP server",
            "value": "stdio",
            "type": "named",
            "name": "--transport"
          },
          {
            "description": "ESIOS API key for authentication",
            "isRequired": true,
            "isSecret": true,
            "type": "named",
            "name": "--api-key"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@rfdez/pvpc-mcp-server",
        "version": "3.2.2",
        "runtimeHint": "npx",
        "transport": {
          "type": "streamable-http",
          "url": "http://127.0.0.1:8080/mcp",
          "headers": [
            {
              "description": "ESIOS API key for authentication",
              "isRequired": true,
              "isSecret": true,
              "name": "X-API-Key"
            }
          ]
        },
        "packageArguments": [
          {
            "description": "Use HTTP transport type for MCP server",
            "value": "http",
            "type": "named",
            "name": "--transport"
          },
          {
            "description": "Port for HTTP transport",
            "default": "8080",
            "type": "named",
            "name": "--port"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "9c2d3dad-6914-4484-b9e2-2393f397e1cf",
        "versionId": "511f2dc8-4b9d-4e80-a0eb-4abb26a36c74",
        "publishedAt": "2025-09-10T16:28:04.867936223Z",
        "updatedAt": "2025-09-10T16:53:23.925845807Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "dev.rostro/rostro",
    "description": "Turn any LLM multimodal; generate images, voices, videos, 3D models, music, and more.",
    "status": "active",
    "repository": {
      "url": "https://github.com/francis-ros/rostro-mcp-server",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://proto.rostro.dev/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "ad9fa350-fafb-4e58-a075-a28c9d358ed3",
        "versionId": "48f54e2e-d42d-4182-9598-351aa48f7a0c",
        "publishedAt": "2025-09-10T16:44:28.57398885Z",
        "updatedAt": "2025-09-10T16:44:28.57398885Z",
        "isLatest": true
      },
      "io.modelcontextprotocol.registry/publisher-provided": {
        "build_info": {
          "commit": "f7e8d9c2b1a0",
          "deployment_id": "remote-fs-deploy-456",
          "region": "us-west-2",
          "timestamp": "2023-12-05T08:45:00Z"
        },
        "tool": "cloud-deployer",
        "version": "2.4.0"
      }
    }
  },
  {
    "name": "io.github.ruvnet/claude-flow",
    "description": "AI orchestration with hive-mind swarms, neural networks, and 87 MCP tools for enterprise dev.",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "2.0.0-alpha.105",
    "packages": [
      {
        "registryType": "npm",
        "identifier": "claude-flow",
        "version": "2.0.0-alpha.105",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "8362811b-c6cc-401d-92d9-6288295e9104",
        "versionId": "aca46879-069c-4052-99a4-b6941bc6fb26",
        "publishedAt": "2025-09-10T16:46:39.96638146Z",
        "updatedAt": "2025-09-10T16:55:33.075242785Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.ignission/mcp",
    "description": "TikTok video data analytics and content strategy tools",
    "status": "active",
    "repository": {
      "url": "https://github.com/ignission-io/mcp",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.ignission.io/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "83c33312-203b-4245-a0d8-94f9a453b4fa",
        "versionId": "d544bbcc-44e2-4774-b097-e886b50dd022",
        "publishedAt": "2025-09-10T16:49:33.978580087Z",
        "updatedAt": "2025-09-10T16:49:33.978580087Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.rfdez/pvpc-mcp-server",
    "description": "Retrieve daily PVPC electricity tariffs for 2.0 TD consumers, published by Red Eléctrica.",
    "status": "active",
    "repository": {
      "url": "https://github.com/rfdez/pvpc-mcp-server",
      "source": "github"
    },
    "version": "3.2.3",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@rfdez/pvpc-mcp-server",
        "version": "3.2.3",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "description": "Use stdio transport type for MCP server",
            "value": "stdio",
            "type": "named",
            "name": "--transport"
          },
          {
            "description": "ESIOS API key for authentication",
            "isRequired": true,
            "isSecret": true,
            "type": "named",
            "name": "--api-key"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@rfdez/pvpc-mcp-server",
        "version": "3.2.3",
        "runtimeHint": "npx",
        "transport": {
          "type": "streamable-http",
          "url": "http://127.0.0.1:8080/mcp",
          "headers": [
            {
              "description": "ESIOS API key for authentication",
              "isRequired": true,
              "isSecret": true,
              "name": "X-API-Key"
            }
          ]
        },
        "packageArguments": [
          {
            "description": "Use HTTP transport type for MCP server",
            "value": "http",
            "type": "named",
            "name": "--transport"
          },
          {
            "description": "Port for HTTP transport",
            "default": "8080",
            "type": "named",
            "name": "--port"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "9c2d3dad-6914-4484-b9e2-2393f397e1cf",
        "versionId": "f9fca6a5-fbdc-4dbe-b28c-ff352d059d7b",
        "publishedAt": "2025-09-10T16:53:23.880648467Z",
        "updatedAt": "2025-09-10T16:53:23.880648467Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.ruvnet/claude-flow",
    "description": "AI orchestration with hive-mind swarms, neural networks, and 87 MCP tools for enterprise dev.",
    "status": "active",
    "repository": {
      "url": "https://github.com/ruvnet/claude-flow",
      "source": "github"
    },
    "version": "2.0.0-alpha.106",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "claude-flow",
        "version": "2.0.0-alpha.106",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Anthropic API key for Claude AI models",
            "format": "string",
            "isSecret": true,
            "name": "ANTHROPIC_API_KEY"
          },
          {
            "description": "Operation mode: development, production, or test",
            "format": "string",
            "name": "CLAUDE_FLOW_MODE"
          },
          {
            "description": "Path for persistent memory storage",
            "format": "string",
            "name": "CLAUDE_FLOW_MEMORY_PATH"
          },
          {
            "description": "Maximum number of concurrent agents",
            "format": "string",
            "name": "CLAUDE_FLOW_MAX_AGENTS"
          },
          {
            "description": "MCP server port",
            "format": "string",
            "name": "CLAUDE_FLOW_PORT"
          },
          {
            "description": "GitHub personal access token for repository operations",
            "format": "string",
            "isSecret": true,
            "name": "GITHUB_TOKEN"
          },
          {
            "description": "Flow Nexus cloud platform API key",
            "format": "string",
            "isSecret": true,
            "name": "FLOW_NEXUS_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "8362811b-c6cc-401d-92d9-6288295e9104",
        "versionId": "9623b70e-af1d-48ac-8338-e37ef96ca8cf",
        "publishedAt": "2025-09-10T16:55:33.070739114Z",
        "updatedAt": "2025-09-10T16:59:34.223138386Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/rfdez-pvpc-mcp-server",
    "description": "Retrieve daily PVPC electricity tariffs for 2.0 TD consumers, published by Red Eléctrica.",
    "status": "active",
    "repository": {
      "url": "https://github.com/rfdez/pvpc-mcp-server",
      "source": "github"
    },
    "version": "3.2.3",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@rfdez/pvpc-mcp-server/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "351f53a0-7d2d-40aa-adeb-a203878ff560",
        "versionId": "24646991-b0ea-4ad2-b588-37034ff85880",
        "publishedAt": "2025-09-10T16:57:17.590562136Z",
        "updatedAt": "2025-09-10T16:57:17.590562136Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.ruvnet/claude-flow",
    "description": "AI orchestration with hive-mind swarms, neural networks, and 87 MCP tools for enterprise dev.",
    "status": "active",
    "repository": {
      "url": "https://github.com/ruvnet/claude-flow",
      "source": "github",
      "id": "854513237"
    },
    "version": "2.0.0-alpha.107",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "claude-flow",
        "version": "2.0.0-alpha.107",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Anthropic API key for Claude AI models",
            "format": "string",
            "isSecret": true,
            "name": "ANTHROPIC_API_KEY"
          },
          {
            "description": "Operation mode: development, production, or test",
            "format": "string",
            "name": "CLAUDE_FLOW_MODE"
          },
          {
            "description": "Path for persistent memory storage",
            "format": "string",
            "name": "CLAUDE_FLOW_MEMORY_PATH"
          },
          {
            "description": "Maximum number of concurrent agents",
            "format": "string",
            "name": "CLAUDE_FLOW_MAX_AGENTS"
          },
          {
            "description": "MCP server port",
            "format": "string",
            "name": "CLAUDE_FLOW_PORT"
          },
          {
            "description": "GitHub personal access token for repository operations",
            "format": "string",
            "isSecret": true,
            "name": "GITHUB_TOKEN"
          },
          {
            "description": "Flow Nexus cloud platform API key",
            "format": "string",
            "isSecret": true,
            "name": "FLOW_NEXUS_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "8362811b-c6cc-401d-92d9-6288295e9104",
        "versionId": "5db5281e-f8b9-49a8-bf3d-b15b911f634a",
        "publishedAt": "2025-09-10T16:59:34.218265771Z",
        "updatedAt": "2025-09-10T16:59:34.218265771Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/kwp-lab-rss-reader-mcp",
    "description": "Track and browse RSS feeds with ease. Fetch the latest entries from any feed URL and extract full…",
    "status": "active",
    "repository": {
      "url": "https://github.com/kwp-lab/rss-reader-mcp",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@kwp-lab/rss-reader-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "54da6e94-f93f-428a-b621-c78b20a29b93",
        "versionId": "7f80c7e7-1906-4315-a639-9a82089224b2",
        "publishedAt": "2025-09-10T17:02:25.896522471Z",
        "updatedAt": "2025-09-10T17:02:25.896522471Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/CollectiveSpend-collectivespend-smithery-mcp",
    "description": "Connect CollectiveSpend with Xero to manage contacts. Retrieve, create, and update contact records…",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@CollectiveSpend/collectivespend-smithery-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "3c97db05-6df2-4da1-87d1-c5d105b6a792",
        "versionId": "e9fd4b99-b11b-481e-8b72-3a3348f0ca2b",
        "publishedAt": "2025-09-10T17:03:02.996324887Z",
        "updatedAt": "2025-09-10T17:03:02.996324887Z",
        "isLatest": true
      }
    }
  },
  {
    "name": "io.github.ruvnet/ruv-swarm",
    "description": "Neural network swarm orchestration with WebAssembly acceleration and MCP integration",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.18",
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "ed5d3336-d432-45a4-93c3-4274d45f82ea",
        "versionId": "0a9cda7f-2b73-4839-844b-6582f335de42",
        "publishedAt": "2025-09-10T17:15:32.69690433Z",
        "updatedAt": "2025-09-10T17:21:34.92137012Z",
        "isLatest": false
      }
    }
  },
  {
    "name": "io.github.ruvnet/ruv-swarm",
    "description": "Neural network swarm orchestration with WebAssembly acceleration and MCP integration",
    "repository": {
      "url": "https://github.com/ruvnet/ruv-FANN",
      "source": "github",
      "subfolder": "ruv-swarm"
    },
    "version": "1.0.19",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "ruv-swarm",
        "version": "1.0.19",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Log level for ruv-swarm operations",
            "format": "string",
            "default": "info",
            "choices": [
              "debug",
              "info",
              "warn",
              "error"
            ],
            "name": "RUV_SWARM_LOG_LEVEL"
          },
          {
            "description": "Database path for persistence storage",
            "format": "string",
            "name": "RUV_SWARM_DB_PATH"
          },
          {
            "description": "Enable WebAssembly SIMD optimizations",
            "format": "boolean",
            "default": "true",
            "choices": [
              "true",
              "false"
            ],
            "name": "RUV_SWARM_ENABLE_SIMD"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "ed5d3336-d432-45a4-93c3-4274d45f82ea",
        "versionId": "160a7800-734c-43ab-84ba-81d2f04c042d",
        "publishedAt": "2025-09-10T17:21:34.916674805Z",
        "updatedAt": "2025-09-10T17:21:34.916674805Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/kesslerio-attio-mcp-server",
    "description": "Enable AI assistants to interact directly with your Attio CRM data through natural language querie…",
    "status": "active",
    "repository": {
      "url": "https://github.com/kesslerio/attio-mcp-server",
      "source": "github"
    },
    "version": "0.2.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@kesslerio/attio-mcp-server/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c51d51d3-40b1-40ff-bf9f-d7564e1c3872",
        "versionId": "fca4551c-4c86-485f-a548-9263a147effb",
        "publishedAt": "2025-09-10T17:52:23.110357722Z",
        "updatedAt": "2025-09-10T17:52:23.110357722Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.ryanbaumann/platform-ai",
    "description": "Google Maps Platform Code Assist MCP",
    "status": "active",
    "repository": {
      "url": "https://github.com/googlemaps/platform-ai",
      "source": "github"
    },
    "version": "0.2.0",
    "packages": [
      {
        "registryType": "npm",
        "identifier": "@googlemaps/code-assist-mcp",
        "version": "0.2.0",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "cbcbdd1a-d310-451f-9843-c83edf658b11",
        "versionId": "7b66d3bf-72fa-4832-87fa-c80a60668aae",
        "publishedAt": "2025-09-10T17:56:34.808006126Z",
        "updatedAt": "2025-09-10T17:56:34.808006126Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.zine/mcp",
    "description": "Your memory, everywhere AI goes. Build knowledge once, access it via MCP anywhere.",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://www.zine.ai/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "4ebda2a7-88c7-4ff1-8333-09bca54fecbf",
        "versionId": "11139d6c-3cd1-43a3-bedf-94c30ba8b55b",
        "publishedAt": "2025-09-10T18:02:28.773521652Z",
        "updatedAt": "2025-09-10T18:02:28.773521652Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/PabloLec-keyprobe-mcp",
    "description": "Audit certificates and keystores to surface expiry risks, weak algorithms, and misconfigurations.…",
    "status": "active",
    "repository": {
      "url": "https://github.com/PabloLec/KeyProbe-MCP",
      "source": "github"
    },
    "version": "1.13.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@PabloLec/keyprobe-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "771d6227-76a6-49f4-9aeb-de301d6a9439",
        "versionId": "14b6f291-19f8-4bfc-9e64-82cc728c7708",
        "publishedAt": "2025-09-10T18:08:11.479456255Z",
        "updatedAt": "2025-09-10T18:08:11.479456255Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "info.mosaique/mcp",
    "description": "Search and list latest international news (sources, comments, knowledge graph).",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.mosaique.info",
        "headers": [
          {
            "description": "API key for authentication",
            "isRequired": true,
            "isSecret": true,
            "name": "X-API-Key"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "3fc514ab-456b-4fbf-8a29-e9c37af00ad7",
        "versionId": "999c8e2e-e96b-460c-9e98-f90a7603145c",
        "publishedAt": "2025-09-10T18:15:03.198216658Z",
        "updatedAt": "2025-09-10T18:15:03.198216658Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/sachicali-discordmcp-suite",
    "description": "Control your Discord community: send/read messages, manage channels and forums, and handle webhook…",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.2.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@sachicali/discordmcp-suite/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "cb845f6c-2635-484a-baaa-59da84b7963d",
        "versionId": "79ba496b-2c62-45ca-8fd7-2f00f259c6d2",
        "publishedAt": "2025-09-10T18:19:06.20151699Z",
        "updatedAt": "2025-09-10T18:19:06.20151699Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.peek/mcp",
    "description": "Build travel itineraries with Peek's 300k+ experiences. Search, details, and availability.",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "0.1.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.peek.com"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "f5a3b348-99db-403f-802e-b8647339f119",
        "versionId": "0aaf5507-40c0-4780-b24f-5d36c4f851ad",
        "publishedAt": "2025-09-10T18:22:01.353357685Z",
        "updatedAt": "2025-09-10T18:22:01.353357685Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/smithery-ai-github",
    "description": "Access the GitHub API, enabling file operations, repository management, search functionality, and…",
    "status": "active",
    "repository": {
      "url": "https://github.com/smithery-ai/mcp-servers",
      "source": "github",
      "subfolder": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@smithery-ai/github/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "f5bd4398-46bd-4f1a-b6e2-7a175ce401d5",
        "versionId": "467b0011-9334-4913-8a5f-bf597ea09179",
        "publishedAt": "2025-09-10T18:22:12.93052822Z",
        "updatedAt": "2025-09-10T18:22:12.93052822Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/smithery-notion",
    "description": "A Notion workspace is a collaborative environment where teams can organize work, manage projects,…",
    "status": "active",
    "repository": {
      "url": "https://github.com/smithery-ai/mcp-servers",
      "source": "github",
      "subfolder": "notion"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@smithery/notion/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "e6bcbeb4-84b4-4cba-b0fc-c4e910e6d117",
        "versionId": "21d4f4da-932c-4f65-8b5f-9cc4e24b7406",
        "publishedAt": "2025-09-10T18:26:59.341637458Z",
        "updatedAt": "2025-09-10T18:26:59.341637458Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.dockersamples/mcp-docker-release-information",
    "description": "MCP server providing Docker Desktop release notes and security information.",
    "status": "active",
    "repository": {
      "url": "https://github.com/dockersamples/mcp-docker-release-information",
      "source": "github"
    },
    "version": "0.3.0",
    "packages": [
      {
        "registryType": "oci",
        "identifier": "dockersamples/mcp-docker-release-information",
        "version": "0.3.0",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "fe7a5c36-265f-4e7b-a3ad-ef2c4c95f241",
        "versionId": "71de5a2a-6cfb-4250-a196-f93080ecc860",
        "publishedAt": "2025-09-10T18:54:52.764339069Z",
        "updatedAt": "2025-09-10T18:54:52.764339069Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.spences10/mcp-sqlite-tools",
    "description": "MCP server for local SQLite database operations",
    "status": "active",
    "repository": {
      "url": "https://github.com/spences10/mcp-sqlite-tools",
      "source": "github"
    },
    "version": "0.0.11",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-sqlite-tools",
        "version": "0.0.11",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "7650c939-7113-4dc9-a03d-54d191d03139",
        "versionId": "2a4159ec-d44c-4b6b-85c5-67aa9d054fa0",
        "publishedAt": "2025-09-10T19:01:31.903922632Z",
        "updatedAt": "2025-09-10T19:01:31.903922632Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.xorrkaz/cml-mcp",
    "description": "An MCP server that provides access to common Cisco Modeling Labs (CML) operations.",
    "status": "active",
    "repository": {
      "url": "https://github.com/xorrkaz/cml-mcp",
      "source": "github"
    },
    "version": "0.8.3",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "cml-mcp",
        "version": "0.8.3",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "URL for the CML Server",
            "isRequired": true,
            "format": "string",
            "name": "CML_URL"
          },
          {
            "description": "Username for CML authentication",
            "isRequired": true,
            "format": "string",
            "name": "CML_USERNAME"
          },
          {
            "description": "Password for CML authentication",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "CML_PASSWORD"
          },
          {
            "description": "Username for authentication to devices running in CML",
            "format": "string",
            "name": "PYATS_USERNAME"
          },
          {
            "description": "Password for authentication to devices running in CML",
            "format": "string",
            "isSecret": true,
            "name": "PYATS_PASSWORD"
          },
          {
            "description": "Enable password for authentication to devices running in CML",
            "format": "string",
            "isSecret": true,
            "name": "PYATS_AUTH_PASS"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "bd0c41d1-2209-4c3f-8602-d40900053217",
        "versionId": "63412105-c23a-4c00-9651-fc721fb12539",
        "publishedAt": "2025-09-10T19:14:35.862874767Z",
        "updatedAt": "2025-09-14T14:57:56.312035195Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.enigma/enigma-mcp-server",
    "description": "An MCP server that provides access to trusted data about business identity and activity",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0-build1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.enigma.com/http"
      },
      {
        "type": "streamable-http",
        "url": "https://mcp.enigma.com/http-key",
        "headers": [
          {
            "description": "Token of Enigma API key. Used to enable authentication without presenting the user with an oAuth login.",
            "isRequired": true,
            "isSecret": true,
            "name": "x-api-key"
          }
        ]
      },
      {
        "type": "sse",
        "url": "https://mcp.enigma.com/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "2a1822b0-c0d6-414c-9ee2-ea1851f35f28",
        "versionId": "b5c49bdf-07bc-478b-9048-23590f4052fb",
        "publishedAt": "2025-09-10T19:23:14.035830574Z",
        "updatedAt": "2025-09-10T19:23:14.035830574Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/brave",
    "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
    "status": "active",
    "repository": {
      "url": "https://github.com/brave/brave-search-mcp-server",
      "source": "github"
    },
    "version": "1.3.7",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/brave/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "72fbc728-2894-4a60-aaf5-44d616ddd249",
        "versionId": "2ad4f9a6-1c40-4839-948a-9749d9435395",
        "publishedAt": "2025-09-10T19:25:38.948771647Z",
        "updatedAt": "2025-09-12T14:23:41.796186943Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.spences10/mcp-omnisearch",
    "description": "MCP server for integrating Omnisearch with LLMs",
    "status": "active",
    "repository": {
      "url": "https://github.com/spences10/mcp-omnisearch",
      "source": "github"
    },
    "version": "0.0.15",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-omnisearch",
        "version": "0.0.15",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "573a18a8-3a1e-494b-a88d-dff1af7226e8",
        "versionId": "b9e152e0-8f25-4edb-96be-81e19075dbe6",
        "publishedAt": "2025-09-10T19:32:04.459621013Z",
        "updatedAt": "2025-09-10T19:32:04.459621013Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.railwayapp/mcp-server",
    "description": "Official Railway MCP server",
    "status": "active",
    "repository": {
      "url": "https://github.com/railwayapp/railway-mcp-server",
      "source": "github"
    },
    "version": "0.1.5",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@railway/mcp-server",
        "version": "0.1.5",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "12a26f79-9d5d-41a3-a4c4-a1e855f3545f",
        "versionId": "27d9860e-1449-4ff1-ab18-7adb02c09159",
        "publishedAt": "2025-09-10T20:31:27.714450245Z",
        "updatedAt": "2025-09-10T20:31:27.714450245Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/smithery-toolbox",
    "description": "Toolbox dynamically routes to all MCPs in the Smithery registry based on your agent's need. When a…",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@smithery/toolbox/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "35c6a9c3-9439-440a-9d97-b5d539c08b9d",
        "versionId": "292995df-7000-4eda-9cdb-2048ac93e8c4",
        "publishedAt": "2025-09-10T20:39:40.188723394Z",
        "updatedAt": "2025-09-10T20:39:40.188723394Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/smithery-ai-slack",
    "description": "Enable interaction with Slack workspaces. Supports subscribing to Slack events through Resources.",
    "status": "active",
    "repository": {
      "url": "https://github.com/smithery-ai/mcp-servers",
      "source": "github",
      "subfolder": "slack"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@smithery-ai/slack/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b5fd9e9c-2aa1-4927-8d68-051719257c39",
        "versionId": "87df9cc3-6c2b-40c4-8087-7644b05f005d",
        "publishedAt": "2025-09-10T20:56:36.643850073Z",
        "updatedAt": "2025-09-10T20:56:36.643850073Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/docfork-mcp",
    "description": "@latest documentation and code examples to 9000+ libraries for LLMs and AI code editors in a singl…",
    "status": "active",
    "repository": {
      "url": "https://github.com/docfork/docfork-mcp",
      "source": "github"
    },
    "version": "0.6.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@docfork/mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "3bbe0c48-41f7-4742-83d1-045499bef360",
        "versionId": "2d44fea0-9779-4e2b-b37f-fb8c4fd42e6e",
        "publishedAt": "2025-09-10T21:06:07.509501146Z",
        "updatedAt": "2025-09-12T18:25:16.141869963Z",
        "isLatest": false
      }
    }
  },
  {
    "name": "travel.kismet/mcp-server",
    "description": "Semantic hotel search with real-time availability and price comparison for Kismet Travel",
    "repository": {
      "url": "https://github.com/kismet-tech/kismet-travel-mcp-v2",
      "source": "github"
    },
    "version": "0.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.kismet.travel/mcp"
      },
      {
        "type": "sse",
        "url": "https://mcp.kismet.travel/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "4d5090dc-7402-4f9a-ad8d-ce6e020c3263",
        "versionId": "67a1944e-1574-44f0-8165-f434ae3a141b",
        "publishedAt": "2025-09-10T22:00:17.761143256Z",
        "updatedAt": "2025-09-10T22:00:17.761143256Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.toolprint/hypertool-mcp",
    "description": "Dynamically expose tools from proxied servers based on an Agent Persona",
    "status": "active",
    "repository": {
      "url": "https://github.com/toolprint/hypertool-mcp",
      "source": "github"
    },
    "version": "0.0.42",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@toolprint/hypertool-mcp",
        "version": "0.0.42",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "d748c549-14ef-4930-9dca-7d751b3fb73b",
        "versionId": "8177937a-2aa9-4956-8578-5e07976a1e25",
        "publishedAt": "2025-09-10T22:05:20.655840343Z",
        "updatedAt": "2025-09-10T22:05:20.655840343Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.koki-develop/esa-mcp-server",
    "description": "A Model Context Protocol (MCP) server for esa.io",
    "status": "active",
    "repository": {
      "url": "https://github.com/koki-develop/esa-mcp-server.git",
      "source": "github"
    },
    "version": "0.3.2",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@koki-develop/esa-mcp-server",
        "version": "0.3.2",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your esa team",
            "isRequired": true,
            "format": "string",
            "name": "ESA_TEAM"
          },
          {
            "description": "Your esa personal access token",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "ESA_ACCESS_TOKEN"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c328b976-a7a4-4195-a736-ea281a6c5695",
        "versionId": "60eaa6b1-e687-49a0-a783-95e6033bc0c6",
        "publishedAt": "2025-09-11T00:37:16.035462939Z",
        "updatedAt": "2025-09-11T00:37:16.035462939Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/CryptoCultCurt-appfolio-mcp-server",
    "description": "Provide seamless access to Appfolio Property Manager Reporting API through a standardized MCP serv…",
    "status": "active",
    "repository": {
      "url": "https://github.com/CryptoCultCurt/appfolio-mcp-server",
      "source": "github"
    },
    "version": "1.0.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@CryptoCultCurt/appfolio-mcp-server/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "0f143383-471c-4fcd-87b3-6e81e77f7873",
        "versionId": "fd5f5556-3f1d-46a1-8b5d-90f1f3d66078",
        "publishedAt": "2025-09-11T00:42:54.55597845Z",
        "updatedAt": "2025-09-11T00:42:54.55597845Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.indragiek/uniprof",
    "description": "Universal CPU profiler designed for humans and AI agents",
    "status": "active",
    "repository": {
      "url": "https://github.com/indragiek/uniprof",
      "source": "github"
    },
    "version": "0.3.4",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "uniprof",
        "version": "0.3.4",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "value": "mcp",
            "type": "positional"
          },
          {
            "value": "run",
            "type": "positional"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "8c32fd44-3a81-4866-9f18-4b7af91690e0",
        "versionId": "14b08127-6083-4132-a35f-34eb832f08c4",
        "publishedAt": "2025-09-11T00:59:36.873368238Z",
        "updatedAt": "2025-09-11T00:59:36.873368238Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.mcpcap/mcpcap",
    "description": "An MCP server for analyzing PCAP files.",
    "status": "active",
    "repository": {
      "url": "https://github.com/mcpcap/mcpcap",
      "source": "github"
    },
    "version": "0.4.3",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mcpcap",
        "version": "0.4.3",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "1a77c0fe-c133-468d-aad0-52c60574d088",
        "versionId": "2aa61ac7-1ddc-4b02-9493-2bf42458130c",
        "publishedAt": "2025-09-11T01:00:19.713725403Z",
        "updatedAt": "2025-09-11T01:06:15.729222586Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.mcpcap/mcpcap",
    "description": "An MCP server for analyzing PCAP files.",
    "status": "active",
    "repository": {
      "url": "https://github.com/mcpcap/mcpcap",
      "source": "github"
    },
    "version": "0.4.4",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mcpcap",
        "version": "0.4.4",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "1a77c0fe-c133-468d-aad0-52c60574d088",
        "versionId": "fc7be6d0-3fb9-4f63-9858-86a62c456a15",
        "publishedAt": "2025-09-11T01:06:15.722886488Z",
        "updatedAt": "2025-09-12T01:41:27.484537348Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.huoshuiai42/huoshui-pdf-translator",
    "description": "An MCP server that provides PDF translation service",
    "status": "active",
    "repository": {
      "url": "https://github.com/huoshuiai42/huoshui-pdf-translator",
      "source": "github"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "huoshui-pdf-translator",
        "version": "1.0.0",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "de9cd8bd-e47a-40f7-bb79-8b8fa227a7f4",
        "versionId": "7499cd69-6bca-46dd-9b27-57bc69cceab6",
        "publishedAt": "2025-09-11T01:31:51.354566076Z",
        "updatedAt": "2025-09-11T01:31:51.354566076Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.huoshuiai42/huoshui-fetch",
    "description": "An MCP server that provides tools for fetching, converting, and extracting data from web pages.",
    "status": "active",
    "repository": {
      "url": "https://github.com/huoshuiai42/huoshui-fetch",
      "source": "github"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "huoshui-fetch",
        "version": "1.0.0",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "71b6a637-4169-43d5-9ff5-bf34c27f6030",
        "versionId": "32d74c21-60c3-4dde-afe7-4ade73371301",
        "publishedAt": "2025-09-11T01:33:53.944848968Z",
        "updatedAt": "2025-09-11T01:33:53.944848968Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.huoshuiai42/huoshui-file-converter",
    "description": "An MCP server that provides document format conversion",
    "status": "active",
    "repository": {
      "url": "https://github.com/huoshuiai42/huoshui-file-converter",
      "source": "github"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "huoshui-file-converter",
        "version": "1.0.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your workding directory",
            "format": "string",
            "name": "HUOSHUI_WORKING_DIR"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "22ffe7fe-3f25-49a2-a109-11d8b51227b7",
        "versionId": "f1820b4a-0c7f-4198-b15c-bbc316af3429",
        "publishedAt": "2025-09-11T01:34:28.334413427Z",
        "updatedAt": "2025-09-11T01:34:28.334413427Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.huoshuiai42/huoshui-pdf-converter",
    "description": "An MCP server that provides PDF file conversion",
    "status": "active",
    "repository": {
      "url": "https://github.com/huoshuiai42/huoshui-pdf-converter",
      "source": "github"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "huoshui-pdf-converter",
        "version": "1.0.0",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "f70f6219-ec6f-4df8-9458-b621fe94e8af",
        "versionId": "c2c0a8ed-6ad8-42fd-97d8-5da83965d302",
        "publishedAt": "2025-09-11T01:34:53.40476072Z",
        "updatedAt": "2025-09-11T01:34:53.40476072Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.cr7258/elasticsearch-mcp-server",
    "description": "MCP server for interacting with Elasticsearch",
    "status": "active",
    "repository": {
      "url": "https://github.com/cr7258/elasticsearch-mcp-server",
      "source": "github"
    },
    "version": "2.0.12",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "elasticsearch-mcp-server",
        "version": "2.0.12",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Comma-separated list of Elasticsearch hosts (e.g., https://localhost:9200)",
            "format": "string",
            "default": "https://localhost:9200",
            "name": "ELASTICSEARCH_HOSTS"
          },
          {
            "description": "API key for Elasticsearch or Elastic Cloud authentication (recommended)",
            "format": "string",
            "isSecret": true,
            "name": "ELASTICSEARCH_API_KEY"
          },
          {
            "description": "Username for basic authentication (alternative to API key)",
            "format": "string",
            "name": "ELASTICSEARCH_USERNAME"
          },
          {
            "description": "Password for basic authentication (used with ELASTICSEARCH_USERNAME)",
            "format": "string",
            "isSecret": true,
            "name": "ELASTICSEARCH_PASSWORD"
          },
          {
            "description": "Whether to verify SSL certificates (true/false)",
            "format": "boolean",
            "default": "false",
            "name": "ELASTICSEARCH_VERIFY_CERTS"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "736191c3-915d-4643-b4c0-6dda9bef9bff",
        "versionId": "6e44548a-ef55-4303-86aa-eaf8807c7dab",
        "publishedAt": "2025-09-11T02:48:54.493070641Z",
        "updatedAt": "2025-09-11T03:19:12.600102971Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.cr7258/elasticsearch-mcp-server",
    "description": "MCP server for interacting with Elasticsearch",
    "status": "active",
    "repository": {
      "url": "https://github.com/cr7258/elasticsearch-mcp-server",
      "source": "github"
    },
    "version": "2.0.14",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "elasticsearch-mcp-server",
        "version": "2.0.14",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Comma-separated list of Elasticsearch hosts (e.g., https://localhost:9200)",
            "format": "string",
            "default": "https://localhost:9200",
            "name": "ELASTICSEARCH_HOSTS"
          },
          {
            "description": "API key for Elasticsearch or Elastic Cloud authentication (recommended)",
            "format": "string",
            "isSecret": true,
            "name": "ELASTICSEARCH_API_KEY"
          },
          {
            "description": "Username for basic authentication (alternative to API key)",
            "format": "string",
            "name": "ELASTICSEARCH_USERNAME"
          },
          {
            "description": "Password for basic authentication (used with ELASTICSEARCH_USERNAME)",
            "format": "string",
            "isSecret": true,
            "name": "ELASTICSEARCH_PASSWORD"
          },
          {
            "description": "Whether to verify SSL certificates (true/false)",
            "format": "boolean",
            "default": "false",
            "name": "ELASTICSEARCH_VERIFY_CERTS"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "736191c3-915d-4643-b4c0-6dda9bef9bff",
        "versionId": "3ace42d4-426f-4aed-bb97-1ef46d6cdcb5",
        "publishedAt": "2025-09-11T03:19:12.574630083Z",
        "updatedAt": "2025-09-15T14:34:34.785294588Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/sasabasara-where_is_my_bus_mcp",
    "description": "Get real-time NYC bus arrivals, live vehicle locations, and service alerts. Plan trips between any…",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "2.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@sasabasara/where_is_my_bus_mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "41c56cad-c283-459d-a0cf-9b2782569a6d",
        "versionId": "5cf0cf74-f9f5-4c6d-84a2-59529a8a445a",
        "publishedAt": "2025-09-11T03:53:53.151653448Z",
        "updatedAt": "2025-09-11T03:53:53.151653448Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.henilcalagiya/mcp-apple-notes",
    "description": "MCP server for Apple Notes integration using AppleScript with full CRUD operations",
    "status": "active",
    "repository": {
      "url": "https://github.com/henilcalagiya/mcp-apple-notes",
      "source": "github"
    },
    "version": "0.1.2",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mcp-apple-notes",
        "version": "0.1.2",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "612b3ba8-e026-4bf7-a6e8-24441c68b46a",
        "versionId": "fe025150-d0bd-42e5-8c5f-3ea6ec61db33",
        "publishedAt": "2025-09-11T05:36:33.726309509Z",
        "updatedAt": "2025-09-11T05:36:33.726309509Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/hithereiamaliff-mcp-datagovmy",
    "description": "This MCP server provides seamless access to Malaysia's government open data, including datasets, w…",
    "status": "active",
    "repository": {
      "url": "https://github.com/hithereiamaliff/mcp-datagovmy",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@hithereiamaliff/mcp-datagovmy/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "65a8cfef-3d35-45b6-a1b4-d9b93b639ef9",
        "versionId": "2eff9885-def0-4f46-84df-d1a4ae2cd697",
        "publishedAt": "2025-09-11T05:56:30.066840479Z",
        "updatedAt": "2025-09-11T05:56:30.066840479Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.henilcalagiya/google-sheets-mcp",
    "description": "Powerful tools for automating Google Sheets using Model Context Protocol (MCP)",
    "status": "active",
    "repository": {
      "url": "https://github.com/henilcalagiya/google-sheets-mcp",
      "source": "github"
    },
    "version": "0.1.6",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "google-sheets-mcp",
        "version": "0.1.6",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "86a4cb67-7331-47cd-8231-0068272c149d",
        "versionId": "7bf7e778-039a-4420-b96b-c614bef2f879",
        "publishedAt": "2025-09-11T05:56:37.073750488Z",
        "updatedAt": "2025-09-11T05:56:37.073750488Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.falkordb/QueryWeaver",
    "description": "An MCP server for Text2SQL: transforms natural language into SQL using graph schema understanding.",
    "status": "active",
    "repository": {
      "url": "https://github.com/FalkorDB/QueryWeaver",
      "source": "github"
    },
    "version": "0.0.11",
    "packages": [
      {
        "registryType": "oci",
        "registryBaseUrl": "https://docker.io",
        "identifier": "falkordb/queryweaver",
        "version": "0.0.11",
        "transport": {
          "type": "streamable-http",
          "url": "https://localhost:5000/mcp"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "fbb3daa9-af8e-4bde-834f-6d8a0b0aad96",
        "versionId": "7128a4ba-390a-458f-b95a-46c72c7a0b81",
        "publishedAt": "2025-09-11T06:54:10.018880049Z",
        "updatedAt": "2025-09-11T06:54:10.018880049Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.imbenrabi/financial-modeling-prep-mcp-server",
    "description": "MCP server for Financial Modeling Prep API with 250+ financial data tools",
    "status": "active",
    "repository": {
      "url": "https://github.com/imbenrabi/Financial-Modeling-Prep-MCP-Server",
      "source": "github",
      "id": "988409529"
    },
    "version": "2.4.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "financial-modeling-prep-mcp-server",
        "version": "2.4.0",
        "runtimeHint": "npx",
        "transport": {
          "type": "streamable-http",
          "url": "https://financial-modeling-prep-mcp-server-production.up.railway.app/mcp"
        },
        "packageArguments": [
          {
            "description": "Financial Modeling Prep API access token",
            "format": "string",
            "type": "named",
            "name": "--fmp-token"
          },
          {
            "description": "Port number for HTTP server mode",
            "format": "number",
            "type": "named",
            "name": "--port"
          },
          {
            "description": "Enable dynamic tool discovery mode",
            "format": "boolean",
            "type": "named",
            "name": "--dynamic-tool-discovery"
          },
          {
            "description": "Comma-separated list of tool sets to load",
            "format": "string",
            "type": "named",
            "name": "--fmp-tool-sets"
          }
        ],
        "environmentVariables": [
          {
            "description": "Financial Modeling Prep API access token",
            "format": "string",
            "isSecret": true,
            "name": "FMP_ACCESS_TOKEN"
          },
          {
            "description": "Port number for HTTP server mode",
            "format": "number",
            "name": "PORT"
          },
          {
            "description": "Enable dynamic tool discovery mode",
            "format": "boolean",
            "name": "DYNAMIC_TOOL_DISCOVERY"
          },
          {
            "description": "Comma-separated list of tool sets to load",
            "format": "string",
            "name": "FMP_TOOL_SETS"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "daa52088-0263-4021-8208-270d479bdd0a",
        "versionId": "f6b2f17e-e856-4a38-ae94-bba78d25fbb7",
        "publishedAt": "2025-09-11T08:26:14.672007798Z",
        "updatedAt": "2025-09-11T12:44:51.220271633Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.dubuqingfeng/gitlab-mcp-server",
    "description": "GitLab MCP (Model Context Protocol) server for AI agents",
    "status": "active",
    "repository": {
      "url": "https://github.com/dubuqingfeng/gitlab-mcp-server",
      "source": "github"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@dubuqingfeng/gitlab-mcp-server",
        "version": "2.0.12",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your API key for the service",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "YOUR_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "0afec94a-7743-46bd-8a5e-f4a0580fb0ca",
        "versionId": "f0e93c38-849c-4cb5-baee-04077afc48ea",
        "publishedAt": "2025-09-11T09:34:47.415483452Z",
        "updatedAt": "2025-09-11T09:41:43.917858507Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.dubuqingfeng/gitlab-mcp-server",
    "description": "GitLab MCP (Model Context Protocol) server for AI agents",
    "status": "active",
    "repository": {
      "url": "https://github.com/dubuqingfeng/gitlab-mcp-server",
      "source": "github"
    },
    "version": "1.0.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@dubuqingfeng/gitlab-mcp-server",
        "version": "2.0.12",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your API key for the gitlab",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "GITLAB_TOKEN"
          },
          {
            "description": "Gitlab URL",
            "format": "string",
            "name": "GITLAB_URL"
          },
          {
            "description": "Lark 机器人 Webhook URL",
            "format": "string",
            "isSecret": true,
            "name": "LARK_WEBHOOK_URL"
          },
          {
            "description": "可选：签名密钥（如果机器人启用了签名验证）",
            "format": "string",
            "isSecret": true,
            "name": "LARK_SECRET_KEY"
          },
          {
            "description": "可选：是否启用通知，默认为 true",
            "format": "boolean",
            "name": "LARK_ENABLE_NOTIFICATION"
          },
          {
            "description": "可选：通知模式 - gitlab_only(仅GitLab)、lark_only(仅Lark)、both(两者都发)，默认为 gitlab_only",
            "format": "string",
            "name": "GITLAB_NOTE_MODE"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "0afec94a-7743-46bd-8a5e-f4a0580fb0ca",
        "versionId": "fbae7b01-59cc-4777-a9e6-22b171703fe7",
        "publishedAt": "2025-09-11T09:41:43.896888413Z",
        "updatedAt": "2025-09-11T09:41:43.896888413Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/jirispilka-actors-mcp-server",
    "description": "Greet anyone by name with friendly, personalized messages. Explore the origin of Hello, World thro…",
    "status": "active",
    "repository": {
      "url": "https://github.com/jirispilka/actors-mcp-server",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@jirispilka/actors-mcp-server/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "eff88937-76bb-4470-bfe7-889b87e7afb3",
        "versionId": "983ebbb0-1365-44c9-9832-edafca128508",
        "publishedAt": "2025-09-11T11:59:13.452963424Z",
        "updatedAt": "2025-09-11T11:59:13.452963424Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.arielbk/anki-mcp",
    "description": "MCP server for integrating with Anki flashcards through conversational AI",
    "status": "active",
    "repository": {
      "url": "https://github.com/arielbk/anki-mcp",
      "source": "github"
    },
    "version": "0.3.2",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@arielbk/anki-mcp",
        "version": "0.3.2",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a5238d4c-bc86-462b-b440-ec133bc3c680",
        "versionId": "584c8dd5-4a8c-4a9a-a8a2-2ef350e576a7",
        "publishedAt": "2025-09-11T12:16:49.682389389Z",
        "updatedAt": "2025-09-11T12:16:49.682389389Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.mfukushim/map-traveler-mcp",
    "description": "Virtual traveler library for MCP",
    "status": "active",
    "repository": {
      "url": "https://github.com/mfukushim/map-traveler-mcp",
      "source": "github"
    },
    "version": "0.1.4",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@mfukushim/map-traveler-mcp",
        "version": "0.1.4",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "[Map] Google Map API key",
            "format": "string",
            "isSecret": true,
            "name": "MT_GOOGLE_MAP_KEY"
          },
          {
            "description": "[Image.gemini] Gemini Image Api key",
            "format": "string",
            "isSecret": true,
            "name": "MT_GEMINI_IMAGE_KEY"
          },
          {
            "description": "[Image.gemini] Number of retries when generating Gemini images Default: 0",
            "format": "string",
            "name": "MT_MAX_RETRY_GEMINI"
          },
          {
            "description": "[Image.gemini] Character reference image uri (file:// or https://) when generating Gemini image. Multiple settings can be made by separating them with the '|'. When multiple settings are made, they will be selected randomly.",
            "format": "string",
            "name": "MT_AVATAR_IMAGE_URI"
          },
          {
            "description": "[Map.etc] Optional: Map API custom endpoint. Example: direction=https://xxxx,places=https://yyyy ",
            "format": "string",
            "name": "MT_MAP_API_URL"
          },
          {
            "description": "[Map] Optional:Scale of travel time on real roads duration. default 4",
            "format": "string",
            "name": "MT_TIME_SCALE"
          },
          {
            "description": "[db.local] db save path: e.g. %USERPROFILE%/Desktop/traveler.sqlite ,$HOME/traveler.sqlite ",
            "format": "string",
            "name": "MT_SQLITE_PATH"
          },
          {
            "description": "[db.api] Turso sqlite API URL",
            "format": "string",
            "name": "MT_TURSO_URL"
          },
          {
            "description": "[db.api] Turso sqlite API access token",
            "format": "string",
            "isSecret": true,
            "name": "MT_TURSO_TOKEN"
          },
          {
            "description": "[rembg.local] absolute path of the installed rembg cli",
            "format": "string",
            "name": "MT_REMBG_PATH"
          },
          {
            "description": "[rembg.api] withoutbg.com rembg API URL",
            "format": "string",
            "name": "MT_REMBG_URL"
          },
          {
            "description": "[rembg.api] withoutbg.com rembg API key",
            "format": "string",
            "isSecret": true,
            "name": "MT_REMBG_WO_KEY"
          },
          {
            "description": "[Image.pixAi] pixAi API key",
            "format": "string",
            "isSecret": true,
            "name": "MT_PIXAI_KEY"
          },
          {
            "description": "[Image.sd] Stability.ai image generation API key",
            "format": "string",
            "isSecret": true,
            "name": "MT_SD_KEY"
          },
          {
            "description": "[Image.pixAi] Optional: pixAi ModelId, if not set use default model 1648918127446573124 ",
            "format": "string",
            "name": "MT_PIXAI_MODEL_ID"
          },
          {
            "description": "[Image.local.ComfyUi] Option: Generate image using ComfyUI API at specified URL. Example: http://192.168.1.100:8188",
            "format": "string",
            "name": "MT_COMFY_URL"
          },
          {
            "description": "[Image.local.ComfyUi] Optional: Path to API workflow file when using text to image with ComfyUI. If not specified: assets/comfy/t2i_sample.json",
            "format": "string",
            "name": "MT_COMFY_WORKFLOW_T2I"
          },
          {
            "description": "[Image.local.ComfyUi] Optional: Path of API workflow file when image to image in ComfyUI. If not specified: assets/comfy/i2i_sample.json",
            "format": "string",
            "name": "MT_COMFY_WORKFLOW_I2I"
          },
          {
            "description": "[Image.local.ComfyUi] Optional: Variable values to send to the workflow via comfyUI API",
            "format": "string",
            "name": "MT_COMFY_PARAMS"
          },
          {
            "description": "[Image] Optional: Fixed avatar generation prompt. You will no longer be able to change your avatar during conversations.",
            "format": "string",
            "name": "MT_FIXED_MODEL_PROMPT"
          },
          {
            "description": "[Image] Optional: Acceptable avatar image area ratio. default 0.042",
            "format": "string",
            "name": "MT_BODY_AREA_RATIO"
          },
          {
            "description": "[Image] Optional: Acceptable avatar image aspect ratios. default 1.5~2.3",
            "format": "string",
            "name": "MT_BODY_HW_RATIO"
          },
          {
            "description": "[Image] Optional: Avatar composite window horizontal ratio. default 0.5",
            "format": "string",
            "name": "MT_BODY_WINDOW_RATIO_W"
          },
          {
            "description": "[Image] Optional: Avatar composite window aspect ratio. default 0.75",
            "format": "string",
            "name": "MT_BODY_WINDOW_RATIO_H"
          },
          {
            "description": "[Sns.Bs] Bluesky sns registration address",
            "format": "string",
            "name": "MT_BS_ID"
          },
          {
            "description": "[Sns.Bs] bluesky sns password",
            "format": "string",
            "isSecret": true,
            "name": "MT_BS_PASS"
          },
          {
            "description": "[Sns.Bs] bluesky sns handle name: e.g. xxxxxxxx.bsky.social ",
            "format": "string",
            "name": "MT_BS_HANDLE"
          },
          {
            "description": "[etc] Optional: Directly filter the tools to be used. All are available if not specified. e.g. tips,set_traveler_location",
            "format": "string",
            "name": "MT_FILTER_TOOLS"
          },
          {
            "description": "[etc] Option: Specify whether the movement mode is 'realtime' or 'skip'. default realtime",
            "format": "string",
            "name": "MT_MOVE_MODE"
          },
          {
            "description": "[Image] Option: Output image width (pixels) Default is 512",
            "format": "string",
            "name": "MT_IMAGE_WIDTH"
          },
          {
            "description": "[Image] Options: 'true' = do not output image, not specified = output image if possible, default is not specified",
            "format": "string",
            "name": "MT_NO_IMAGE"
          },
          {
            "description": "[Image] Option: 'true' = Output StreetView image as is without avatar superimposition. Not specified = Superimpose avatar image. Default is not specified.",
            "format": "string",
            "name": "MT_NO_AVATAR"
          },
          {
            "description": "[Sns] Optional: Specify the feed tag when posting to SNS (#required, 15 characters or more) Default is #geo_less_traveler",
            "format": "string",
            "name": "MT_FEED_TAG"
          },
          {
            "description": "[Streamable-http] Maximum number of sessions when using Streamable-http",
            "format": "string",
            "name": "MT_MAX_SESSIONS"
          },
          {
            "description": "[Streamable-http] Session TTL when using Streamable-http",
            "format": "string",
            "name": "MT_SESSION_TTL_MS"
          },
          {
            "description": "[Streamable-http] Service TTL when using Streamable-http",
            "format": "string",
            "name": "MT_SERVICE_TTL_MS"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "700a297c-8d86-4f69-889c-7d3c1b20b7cf",
        "versionId": "25d413a1-8cc0-491e-bfdd-cb759305516b",
        "publishedAt": "2025-09-11T12:17:16.508389545Z",
        "updatedAt": "2025-09-11T12:17:16.508389545Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.imbenrabi/financial-modeling-prep-mcp-server",
    "description": "MCP server for Financial Modeling Prep API with 250+ financial data tools",
    "status": "active",
    "repository": {
      "url": "https://github.com/imbenrabi/Financial-Modeling-Prep-MCP-Server",
      "source": "github",
      "id": "988409529"
    },
    "version": "2.5.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "financial-modeling-prep-mcp-server",
        "version": "2.5.1",
        "runtimeHint": "npx",
        "transport": {
          "type": "streamable-http",
          "url": "https://financial-modeling-prep-mcp-server-production.up.railway.app/mcp"
        },
        "packageArguments": [
          {
            "description": "Financial Modeling Prep API access token",
            "format": "string",
            "type": "named",
            "name": "--fmp-token"
          },
          {
            "description": "Port number for HTTP server mode",
            "format": "number",
            "type": "named",
            "name": "--port"
          },
          {
            "description": "Enable dynamic tool discovery mode",
            "format": "boolean",
            "type": "named",
            "name": "--dynamic-tool-discovery"
          },
          {
            "description": "Comma-separated list of tool sets to load",
            "format": "string",
            "type": "named",
            "name": "--fmp-tool-sets"
          }
        ],
        "environmentVariables": [
          {
            "description": "Financial Modeling Prep API access token",
            "format": "string",
            "isSecret": true,
            "name": "FMP_ACCESS_TOKEN"
          },
          {
            "description": "Port number for HTTP server mode",
            "format": "number",
            "name": "PORT"
          },
          {
            "description": "Enable dynamic tool discovery mode",
            "format": "boolean",
            "name": "DYNAMIC_TOOL_DISCOVERY"
          },
          {
            "description": "Comma-separated list of tool sets to load",
            "format": "string",
            "name": "FMP_TOOL_SETS"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "daa52088-0263-4021-8208-270d479bdd0a",
        "versionId": "74573935-5dac-4879-a567-9ecaa3256200",
        "publishedAt": "2025-09-11T12:44:51.14737572Z",
        "updatedAt": "2025-09-11T12:44:51.14737572Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/pythondev-pro-egw_writings_mcp_server",
    "description": "Search Ellen G. White’s writings by keyword to surface relevant quotations. Retrieve exact passage…",
    "status": "active",
    "repository": {
      "url": "https://github.com/pythondev-pro/egw_writings_mcp_server",
      "source": "github"
    },
    "version": "1.12.4",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@pythondev-pro/egw_writings_mcp_server/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "cfa49893-4e64-430d-8ea1-d3af4f8379f9",
        "versionId": "c0a8366b-7531-4a2d-990e-6ba630cd3712",
        "publishedAt": "2025-09-11T12:48:16.278544327Z",
        "updatedAt": "2025-09-11T12:48:16.278544327Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.pshivapr/selenium-mcp",
    "description": "Selenium Tools for MCP",
    "status": "active",
    "repository": {
      "url": "https://github.com/pshivapr/selenium-mcp",
      "source": "github"
    },
    "version": "0.4.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "selenium-webdriver-mcp",
        "version": "0.4.1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your API key for the service",
            "format": "string",
            "isSecret": true,
            "name": "YOUR_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "e6648a72-6a2f-4b64-991e-4be3ed59ed3c",
        "versionId": "0f9ce6bc-c6b5-4901-ba87-ac6dbf3bbc25",
        "publishedAt": "2025-09-11T13:43:51.350537778Z",
        "updatedAt": "2025-09-11T13:43:51.350537778Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/DynamicEndpoints-powershell-exec-mcp-server",
    "description": "Execute PowerShell commands securely with controlled timeouts and input validation. Retrieve syste…",
    "status": "active",
    "repository": {
      "url": "https://github.com/DynamicEndpoints/PowerShell-Exec-MCP-Server",
      "source": "github"
    },
    "version": "1.13.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@DynamicEndpoints/powershell-exec-mcp-server/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "694dc50d-499b-49bb-8b78-b44f65ab48c3",
        "versionId": "703df496-b98b-4069-94b3-077fe6c1afae",
        "publishedAt": "2025-09-11T13:54:30.703394885Z",
        "updatedAt": "2025-09-11T13:54:30.703394885Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/DynamicEndpoints-autogen_mcp",
    "description": "Create and manage AI agents that collaborate and solve problems through natural language interacti…",
    "status": "active",
    "repository": {
      "url": "https://github.com/DynamicEndpoints/Autogen_MCP",
      "source": "github"
    },
    "version": "0.3.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@DynamicEndpoints/autogen_mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "7250756b-9312-48f8-a2e2-b92f7b6268c7",
        "versionId": "8d07348b-fc98-4ddd-8fa3-31502600c39c",
        "publishedAt": "2025-09-11T13:57:38.185529674Z",
        "updatedAt": "2025-09-11T13:57:38.185529674Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/DynamicEndpoints-m365-core-mcp",
    "description": "*Updated June 17th 2025** Manage your Microsoft 365 services effortlessly. Create and manage distr…",
    "status": "active",
    "repository": {
      "url": "https://github.com/DynamicEndpoints/m365-core-mcp",
      "source": "github"
    },
    "version": "1.1.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@DynamicEndpoints/m365-core-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "d2836d1a-c050-43b6-b896-0c426ee83103",
        "versionId": "df7356a1-098a-49c7-b14c-a816cad55978",
        "publishedAt": "2025-09-11T13:58:16.278260728Z",
        "updatedAt": "2025-09-11T13:58:16.278260728Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "garden.stanislav.svelte-llm/svelte-llm-mcp",
    "description": "An MCP server that provides access to Svelte 5 and SvelteKit documentation",
    "status": "active",
    "repository": {
      "url": "https://github.com/khromov/svelte-llm-mcp",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://svelte-llm.stanislav.garden/mcp/mcp"
      },
      {
        "type": "sse",
        "url": "https://svelte-llm.stanislav.garden/mcp/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "ceb541f5-8e46-4f9d-ad55-e68ae484875f",
        "versionId": "058b0ef7-4f48-4bab-a29f-00c43e88baca",
        "publishedAt": "2025-09-11T15:24:28.061183844Z",
        "updatedAt": "2025-09-11T15:24:28.061183844Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.leshchenko1979/fast-mcp-telegram",
    "description": "Telegram MCP server with search and messaging capabilities",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "0.4.4",
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a1a4d761-5635-480b-b636-4b6fef3c9a77",
        "versionId": "a31f1b64-c682-4771-a4a8-76b0a9d96ec9",
        "publishedAt": "2025-09-11T16:40:10.557651314Z",
        "updatedAt": "2025-09-15T08:03:29.365893275Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/arjunkmrm-lta-mcp",
    "description": "Provide real-time transportation data including bus arrivals, train service alerts, carpark availa…",
    "status": "active",
    "repository": {
      "url": "https://github.com/arjunkmrm/lta-mcp",
      "source": "github"
    },
    "version": "0.1.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@arjunkmrm/lta-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c11e357b-2b62-4fc7-a6ba-16214082ee0e",
        "versionId": "bdbc5988-0d10-4957-8c87-45678bf5d404",
        "publishedAt": "2025-09-11T16:52:48.059122135Z",
        "updatedAt": "2025-09-11T16:52:48.059122135Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.morinokami/astro-mcp",
    "description": "MCP server to support Astro project development",
    "status": "active",
    "repository": {
      "url": "https://github.com/morinokami/astro-mcp",
      "source": "github"
    },
    "version": "0.4.2",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "astro-mcp",
        "version": "0.4.2",
        "transport": {
          "type": "sse",
          "url": "http://localhost:4321/__mcp/sse"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "565323c9-db80-4e1b-a79e-f21ae950e9a7",
        "versionId": "e7e2ee65-c9b0-436b-b709-cd909c24f25e",
        "publishedAt": "2025-09-11T17:37:51.51070648Z",
        "updatedAt": "2025-09-11T17:37:51.51070648Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.jkakar/recipe-mcp",
    "description": "Generate and remix recipes using cookwith.co",
    "status": "active",
    "repository": {
      "url": "https://github.com/blaideinc/recipe-mcp",
      "source": "github"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@cookwith/recipe-mcp",
        "version": "1.0.1",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c3b3c3c7-4e0d-4529-bc19-85c18239baf4",
        "versionId": "ad491a05-3439-4f9b-ac52-d3801bdffba4",
        "publishedAt": "2025-09-11T18:11:49.433940965Z",
        "updatedAt": "2025-09-11T18:27:40.596727222Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.timeslope/timeslope-mcp",
    "description": "Equip AI with tools for researching economic data from Federal Reserve Economic Data (FRED).",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "0.1.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.timeslope.com/mcp",
        "headers": [
          {
            "description": "Authorization Bearer header containing API key or OAuth token",
            "isRequired": true,
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "66353cf7-acae-4942-8828-0f7615f3a31c",
        "versionId": "d0551f52-173b-4443-8125-a58153f8f82e",
        "publishedAt": "2025-09-11T18:16:25.262687063Z",
        "updatedAt": "2025-09-11T18:16:25.262687063Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.OpenCageData/opencage-geocoding-mcp",
    "description": "MCP server for OpenCage geocoding API",
    "status": "active",
    "repository": {
      "url": "https://github.com/OpenCageData/opencage-geocoding-mcp",
      "source": "github"
    },
    "version": "1.0.3",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@opencage/mcp-opencage-server",
        "version": "1.0.3",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your API key for the service",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "YOUR_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "dfbaac20-a659-45a2-b3e9-dcafb70c703f",
        "versionId": "a953ea94-b7e7-415c-8766-33c4d5b64b4d",
        "publishedAt": "2025-09-11T18:24:40.318380733Z",
        "updatedAt": "2025-09-11T18:24:40.318380733Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.jkakar/recipe-mcp",
    "description": "Generate and remix recipes using cookwith.co",
    "status": "active",
    "repository": {
      "url": "https://github.com/blaideinc/recipe-mcp",
      "source": "github"
    },
    "version": "1.0.2",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@cookwith/recipe-mcp",
        "version": "1.0.2",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c3b3c3c7-4e0d-4529-bc19-85c18239baf4",
        "versionId": "2735b14b-33d9-43d1-905f-1166e419ed82",
        "publishedAt": "2025-09-11T18:27:40.577812923Z",
        "updatedAt": "2025-09-11T18:30:58.534722167Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.jkakar/recipe-mcp",
    "description": "Generate and remix recipes using cookwith.co",
    "status": "active",
    "repository": {
      "url": "https://github.com/blaideinc/recipe-mcp",
      "source": "github"
    },
    "version": "1.0.4",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@cookwith/recipe-mcp",
        "version": "1.0.4",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c3b3c3c7-4e0d-4529-bc19-85c18239baf4",
        "versionId": "1742332b-fc04-4efd-ad35-64d5ef1a1227",
        "publishedAt": "2025-09-11T18:33:51.803815048Z",
        "updatedAt": "2025-09-11T18:33:51.803815048Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/hithereiamaliff-mcp-nextcloud",
    "description": "A comprehensive Model Context Protocol (MCP) server that enables AI assistants to interact with yo…",
    "status": "active",
    "repository": {
      "url": "https://github.com/hithereiamaliff/mcp-nextcloud",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@hithereiamaliff/mcp-nextcloud/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a5f6a595-3a74-421b-beac-721d59d609ca",
        "versionId": "e1318fc8-1005-4014-928e-5b82595773a9",
        "publishedAt": "2025-09-11T18:40:25.891251629Z",
        "updatedAt": "2025-09-11T18:40:25.891251629Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/zwldarren-akshare-one-mcp",
    "description": "Provide access to Chinese stock market data including historical prices, real-time data, news, and…",
    "status": "active",
    "repository": {
      "url": "https://github.com/zwldarren/akshare-one-mcp",
      "source": "github"
    },
    "version": "1.14.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@zwldarren/akshare-one-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "7def3fc1-33a9-45bc-b17b-81126c448a27",
        "versionId": "b54429bf-2285-4bc9-bd62-ec79299fc34b",
        "publishedAt": "2025-09-11T19:15:39.848820116Z",
        "updatedAt": "2025-09-11T19:15:39.848820116Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.notion/mcp",
    "description": "Official Notion MCP server",
    "status": "active",
    "repository": {
      "url": "https://github.com/makenotion/notion-next",
      "source": "github",
      "subfolder": "src/cloudflare-mcp"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.notion.com/mcp"
      },
      {
        "type": "sse",
        "url": "https://mcp.notion.com/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "18044703-a51d-4947-9112-9aff34f8f7a2",
        "versionId": "ad85ae5f-c107-4d47-b2c1-af82a1a9a7af",
        "publishedAt": "2025-09-11T22:19:32.446786781Z",
        "updatedAt": "2025-09-11T22:25:50.746839158Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.notion/mcp",
    "description": "Official Notion MCP server",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.notion.com/mcp"
      },
      {
        "type": "sse",
        "url": "https://mcp.notion.com/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "18044703-a51d-4947-9112-9aff34f8f7a2",
        "versionId": "fb955a62-b750-4145-926a-824b47307d13",
        "publishedAt": "2025-09-11T22:25:50.737872147Z",
        "updatedAt": "2025-09-11T22:25:50.737872147Z",
        "isLatest": true
      }
    }
  },
  {
    "name": "io.github.jkakar/cookwith-mcp",
    "description": "AI-powered recipe generation and transformation tools by Cookwith",
    "repository": {
      "url": "https://github.com/blaideinc/cookwith-mcp",
      "source": "github"
    },
    "version": "1.0.0",
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "ad9ef150-dd99-4913-b5f4-3769ff823300",
        "versionId": "03c1834c-c917-43f5-a8aa-787996969f4f",
        "publishedAt": "2025-09-11T23:27:56.196697697Z",
        "updatedAt": "2025-09-12T19:23:45.415878267Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.shinpr/mcp-image",
    "description": "AI image generation MCP server using Nano Banana with intelligent prompt enhancement",
    "status": "active",
    "repository": {
      "url": "https://github.com/shinpr/mcp-image",
      "source": "github"
    },
    "version": "0.2.3",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-image",
        "version": "0.2.3",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Google Gemini API key for image generation (get from https://aistudio.google.com/apikey)",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "GEMINI_API_KEY"
          },
          {
            "description": "Absolute path to directory where generated images will be saved (defaults to ./output)",
            "format": "string",
            "name": "IMAGE_OUTPUT_DIR"
          },
          {
            "description": "Set to 'true' to disable automatic prompt optimization and use direct prompts",
            "format": "boolean",
            "name": "SKIP_PROMPT_ENHANCEMENT"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "eb6f1af1-5834-412c-8d10-75dc6edfc6f9",
        "versionId": "96cb8c0c-c096-4fa3-bc84-2e34a14f4f81",
        "publishedAt": "2025-09-12T00:28:17.174731889Z",
        "updatedAt": "2025-09-12T00:28:17.174731889Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/Aman-Amith-Shastry-scientific_computation_mcp",
    "description": "This MCP server enables users to perform scientific computations regarding linear algebra and vect…",
    "status": "active",
    "repository": {
      "url": "https://github.com/Aman-Amith-Shastry/scientific_computation_mcp",
      "source": "github"
    },
    "version": "1.13.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@Aman-Amith-Shastry/scientific_computation_mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "41f4e655-f368-4219-b79c-b0098dd1fc67",
        "versionId": "a8f1ddcb-c162-4a50-8295-74ffbfbf76a7",
        "publishedAt": "2025-09-12T01:14:07.078270174Z",
        "updatedAt": "2025-09-12T01:14:07.078270174Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.mickymultani/crypto-bytes",
    "description": "Crypto Bytes MCP Server",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "0.1.1",
    "packages": [
      {
        "registryType": "pypi",
        "identifier": "crypto_bytes_mcp_server",
        "version": "0.1.1",
        "runtimeHint": "python",
        "transport": {
          "type": "stdio"
        },
        "runtimeArguments": [
          {
            "value": "-m",
            "type": "positional"
          },
          {
            "value": "crypto_bytes_mcp_server",
            "type": "positional"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "09a9a6ad-fb32-4dc2-8eed-9b2efcb342b6",
        "versionId": "7e37fcc2-e95f-4f4e-a104-b7c617fbf3dc",
        "publishedAt": "2025-09-12T01:24:42.862303085Z",
        "updatedAt": "2025-09-12T01:24:42.862303085Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.mcpcap/mcpcap",
    "description": "An MCP server for analyzing PCAP files.",
    "status": "active",
    "repository": {
      "url": "https://github.com/mcpcap/mcpcap",
      "source": "github"
    },
    "version": "0.5.2",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mcpcap",
        "version": "0.4.4",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "1a77c0fe-c133-468d-aad0-52c60574d088",
        "versionId": "f181c9a0-74c1-44b2-841c-fa0561074d1d",
        "publishedAt": "2025-09-12T01:41:27.474864739Z",
        "updatedAt": "2025-09-12T01:50:59.06860546Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.mcpcap/mcpcap",
    "description": "An MCP server for analyzing PCAP files.",
    "status": "active",
    "repository": {
      "url": "https://github.com/mcpcap/mcpcap",
      "source": "github"
    },
    "version": "0.5.3",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mcpcap",
        "version": "0.4.4",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "1a77c0fe-c133-468d-aad0-52c60574d088",
        "versionId": "5f655162-becc-41bc-b9f6-959e3611e138",
        "publishedAt": "2025-09-12T01:50:59.054896721Z",
        "updatedAt": "2025-09-12T01:53:51.97863881Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.mcpcap/mcpcap",
    "description": "An MCP server for analyzing PCAP files.",
    "status": "active",
    "repository": {
      "url": "https://github.com/mcpcap/mcpcap",
      "source": "github"
    },
    "version": "0.5.4",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mcpcap",
        "version": "0.4.4",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "1a77c0fe-c133-468d-aad0-52c60574d088",
        "versionId": "6f1c2c5d-192b-4964-919f-d2850f383aa2",
        "publishedAt": "2025-09-12T01:53:51.972295258Z",
        "updatedAt": "2025-09-12T01:55:40.789431661Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.mcpcap/mcpcap",
    "description": "An MCP server for analyzing PCAP files.",
    "status": "active",
    "repository": {
      "url": "https://github.com/mcpcap/mcpcap",
      "source": "github"
    },
    "version": "0.5.5",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mcpcap",
        "version": "0.4.4",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "1a77c0fe-c133-468d-aad0-52c60574d088",
        "versionId": "b3f3ce4a-be05-4483-ace1-854555225f00",
        "publishedAt": "2025-09-12T01:55:40.782813803Z",
        "updatedAt": "2025-09-12T02:03:43.967160658Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.mcpcap/mcpcap",
    "description": "An MCP server for analyzing PCAP files.",
    "status": "active",
    "repository": {
      "url": "https://github.com/mcpcap/mcpcap",
      "source": "github"
    },
    "version": "0.5.6",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mcpcap",
        "version": "0.4.4",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "1a77c0fe-c133-468d-aad0-52c60574d088",
        "versionId": "ec8a6ef0-99ae-4c1d-a83b-23f5c793af0f",
        "publishedAt": "2025-09-12T02:03:43.941695432Z",
        "updatedAt": "2025-09-12T04:24:04.029498004Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.domdomegg/time-mcp-pypi",
    "description": "Get the current UTC time in RFC 3339 format.",
    "status": "active",
    "repository": {
      "url": "https://github.com/domdomegg/time-mcp-pypi.git",
      "source": "github"
    },
    "version": "1.0.6",
    "packages": [
      {
        "registryType": "pypi",
        "identifier": "time-mcp-pypi",
        "version": "1.0.6",
        "runtimeHint": "python",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "5edcfca6-43c2-4859-a7a5-19e0f2d17ef3",
        "versionId": "cc123f69-0820-4c87-b304-99e82175a541",
        "publishedAt": "2025-09-12T02:14:45.618237925Z",
        "updatedAt": "2025-09-12T02:14:45.618237925Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.domdomegg/time-mcp-nuget",
    "description": "Get the current UTC time in RFC 3339 format.",
    "status": "active",
    "repository": {
      "url": "https://github.com/domdomegg/time-mcp-nuget.git",
      "source": "github"
    },
    "version": "1.0.8",
    "packages": [
      {
        "registryType": "nuget",
        "identifier": "TimeMcpServer",
        "version": "1.0.8",
        "runtimeHint": "dnx",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "648002ec-8d7c-4112-862d-9e8cc114c178",
        "versionId": "542b567a-17c2-4a09-905b-313d6ead48d7",
        "publishedAt": "2025-09-12T02:58:39.843958183Z",
        "updatedAt": "2025-09-12T02:58:39.843958183Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.domdomegg/airtable-mcp-server",
    "description": "Read and write access to Airtable database schemas, tables, and records.",
    "status": "active",
    "repository": {
      "url": "https://github.com/domdomegg/airtable-mcp-server.git",
      "source": "github"
    },
    "version": "1.7.3",
    "packages": [
      {
        "registryType": "npm",
        "identifier": "airtable-mcp-server",
        "version": "1.7.3",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Airtable personal access token (e.g., pat123.abc123). Create at https://airtable.com/create/tokens/new with scopes: schema.bases:read, data.records:read, and optionally schema.bases:write and data.records:write.",
            "isRequired": true,
            "isSecret": true,
            "name": "AIRTABLE_API_KEY"
          }
        ]
      },
      {
        "registryType": "oci",
        "identifier": "domdomegg/airtable-mcp-server",
        "version": "1.7.3",
        "runtimeHint": "docker",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Airtable personal access token (e.g., pat123.abc123). Create at https://airtable.com/create/tokens/new with scopes: schema.bases:read, data.records:read, and optionally schema.bases:write and data.records:write.",
            "isRequired": true,
            "isSecret": true,
            "name": "AIRTABLE_API_KEY"
          }
        ]
      },
      {
        "registryType": "mcpb",
        "identifier": "https://github.com/domdomegg/airtable-mcp-server/releases/download/v1.7.3/airtable-mcp-server.mcpb",
        "version": "1.7.3",
        "fileSha256": "0f28a9129cfebd262dfb77854c872355d21401bb3e056575b3027081f5d570ca",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c4d153eb-b252-4e8e-832b-fe3684fe47ec",
        "versionId": "a9ab84c2-d56e-4bf2-8dc2-ad725fdb8d27",
        "publishedAt": "2025-09-12T03:19:04.49211253Z",
        "updatedAt": "2025-09-12T03:19:04.49211253Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.scorecard/mcp",
    "description": "MCP server providing access to the Scorecard API to evaluate and optimize LLM systems.",
    "status": "active",
    "repository": {
      "url": "https://github.com/scorecard-ai/scorecard-node",
      "source": "github"
    },
    "version": "2.1.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "scorecard-ai-mcp",
        "version": "2.1.1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Scorecard API key for authentication. Get your API key from https://app.scorecard.io/settings",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "SCORECARD_API_KEY"
          }
        ]
      }
    ],
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.scorecard.io/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "0ea5c5ff-6a19-454d-a596-e0753501f0fd",
        "versionId": "17f67eb6-fd05-4299-b453-ec64f85b2c50",
        "publishedAt": "2025-09-12T04:07:55.578778925Z",
        "updatedAt": "2025-09-12T04:07:55.578778925Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.mcpcap/mcpcap",
    "description": "An MCP server for analyzing PCAP files.",
    "status": "active",
    "repository": {
      "url": "https://github.com/mcpcap/mcpcap",
      "source": "github"
    },
    "version": "0.5.7",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mcpcap",
        "version": "0.4.4",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "1a77c0fe-c133-468d-aad0-52c60574d088",
        "versionId": "221fc588-c202-4bdf-ad8a-8b5843e604f7",
        "publishedAt": "2025-09-12T04:24:04.024827907Z",
        "updatedAt": "2025-09-12T04:28:40.56365786Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.mcpcap/mcpcap",
    "description": "An MCP server for analyzing PCAP files.",
    "status": "active",
    "repository": {
      "url": "https://github.com/mcpcap/mcpcap",
      "source": "github"
    },
    "version": "0.5.8",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mcpcap",
        "version": "0.4.4",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "1a77c0fe-c133-468d-aad0-52c60574d088",
        "versionId": "c29777b7-3957-42a7-8000-d675c0ecb2b2",
        "publishedAt": "2025-09-12T04:28:40.558477428Z",
        "updatedAt": "2025-09-12T04:48:10.705163493Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.mcpcap/mcpcap",
    "description": "An MCP server for analyzing PCAP files.",
    "status": "active",
    "repository": {
      "url": "https://github.com/mcpcap/mcpcap",
      "source": "github"
    },
    "version": "0.5.9",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mcpcap",
        "version": "0.4.4",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "1a77c0fe-c133-468d-aad0-52c60574d088",
        "versionId": "83673f9d-7093-4f48-b57c-34f21f774802",
        "publishedAt": "2025-09-12T04:48:10.687272107Z",
        "updatedAt": "2025-09-12T05:10:59.819863662Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.mcpcap/mcpcap",
    "description": "An MCP server for analyzing PCAP files.",
    "status": "active",
    "repository": {
      "url": "https://github.com/mcpcap/mcpcap",
      "source": "github"
    },
    "version": "0.5.10",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mcpcap",
        "version": "0.4.4",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "1a77c0fe-c133-468d-aad0-52c60574d088",
        "versionId": "119ac356-7e94-4445-98e3-49ecea76cf07",
        "publishedAt": "2025-09-12T05:10:59.806509357Z",
        "updatedAt": "2025-09-18T00:54:49.018200576Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.xkelxmc/uranium-mcp",
    "description": "MCP for Uranium NFT tools to mint, list, and manage digital assets on the permaweb.",
    "status": "active",
    "repository": {
      "url": "https://github.com/xkelxmc/uranium-mcp",
      "source": "github"
    },
    "version": "1.0.8",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "uranium-tools-mcp",
        "version": "1.0.8",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "You can generate an API key from your Uranium account settings: https://portal.uranium.pro/dashboard/profile/api-keys",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "URANIUM_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a597359c-d5cd-47bf-ae08-bb7a01d796c7",
        "versionId": "8296f9ff-65ab-431a-8368-d348330ec141",
        "publishedAt": "2025-09-12T06:37:08.768329657Z",
        "updatedAt": "2025-09-12T06:40:04.125900265Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.xkelxmc/uranium-mcp",
    "description": "MCP for Uranium NFT tools to mint, list, and manage digital assets on the permaweb.",
    "status": "active",
    "repository": {
      "url": "https://github.com/xkelxmc/uranium-mcp",
      "source": "github"
    },
    "version": "1.0.9",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "uranium-tools-mcp",
        "version": "1.0.9",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "You can generate an API key from your Uranium account settings: https://portal.uranium.pro/dashboard/profile/api-keys",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "URANIUM_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a597359c-d5cd-47bf-ae08-bb7a01d796c7",
        "versionId": "83791fdd-0f24-4050-800c-0eb432e14022",
        "publishedAt": "2025-09-12T06:40:04.121499157Z",
        "updatedAt": "2025-09-12T06:40:04.121499157Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.variflight/variflight-mcp",
    "description": "VariFlight's official MCP server provides tools to query flight, weather, comfort, and fare data.",
    "status": "active",
    "repository": {
      "url": "https://github.com/variflight/variflight-mcp",
      "source": "github"
    },
    "version": "1.0.2",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@variflight-ai/variflight-mcp",
        "version": "1.0.1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your API key for the service",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "VARIFLIGHT_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "314291ab-1ff5-4c6b-9879-9a236748c272",
        "versionId": "5f80b1e5-5b3b-437a-99dc-c743cae8a2c7",
        "publishedAt": "2025-09-12T07:06:18.904080025Z",
        "updatedAt": "2025-09-12T07:06:18.904080025Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.IvanMurzak/Unity-MCP",
    "description": "Make 3D games in Unity Engine with AI. MCP Server + Plugin for Unity Editor and Unity games.",
    "status": "active",
    "repository": {
      "url": "https://github.com/IvanMurzak/Unity-MCP",
      "source": "github",
      "subfolder": "Unity-MCP-Server"
    },
    "version": "0.17.0",
    "packages": [
      {
        "registryType": "oci",
        "registryBaseUrl": "https://docker.io",
        "identifier": "ivanmurzakdev/unity-mcp-server",
        "version": "0.17.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Client -> Server <- Plugin connection port (default: 8080)",
            "format": "number",
            "name": "UNITY_MCP_PORT"
          },
          {
            "description": "Plugin -> Server connection timeout (ms) (default: 10000)",
            "format": "number",
            "name": "UNITY_MCP_PLUGIN_TIMEOUT"
          },
          {
            "description": "Client -> Server transport type: stdio or http (default: http)",
            "format": "string",
            "default": "stdio",
            "name": "UNITY_MCP_CLIENT_TRANSPORT"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "bad1e418-76f1-4842-82e7-5b036c57da38",
        "versionId": "9c344d55-866d-4aad-8caa-5d08fa1ac54d",
        "publishedAt": "2025-09-12T10:14:26.342754989Z",
        "updatedAt": "2025-09-12T11:41:26.342442162Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.IvanMurzak/Unity-MCP",
    "description": "Make 3D games in Unity Engine with AI. MCP Server + Plugin for Unity Editor and Unity games.",
    "status": "active",
    "repository": {
      "url": "https://github.com/IvanMurzak/Unity-MCP",
      "source": "github",
      "subfolder": "Unity-MCP-Server"
    },
    "version": "0.17.1",
    "packages": [
      {
        "registryType": "oci",
        "registryBaseUrl": "https://docker.io",
        "identifier": "ivanmurzakdev/unity-mcp-server",
        "version": "0.17.1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Client -> Server <- Plugin connection port (default: 8080)",
            "format": "number",
            "name": "UNITY_MCP_PORT"
          },
          {
            "description": "Plugin -> Server connection timeout (ms) (default: 10000)",
            "format": "number",
            "name": "UNITY_MCP_PLUGIN_TIMEOUT"
          },
          {
            "description": "Client -> Server transport type: stdio or http (default: http)",
            "format": "string",
            "default": "stdio",
            "name": "UNITY_MCP_CLIENT_TRANSPORT"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "bad1e418-76f1-4842-82e7-5b036c57da38",
        "versionId": "e2adcc04-ca22-44d7-9fb6-a095d6f78bef",
        "publishedAt": "2025-09-12T11:41:26.282067118Z",
        "updatedAt": "2025-09-12T11:41:26.282067118Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.burningion/video-editing-mcp",
    "description": "MCP Server for Video Jungle - Analyze, Search, Generate, and Edit Videos",
    "status": "active",
    "repository": {
      "url": "https://github.com/burningion/video-editing-mcp",
      "source": "github"
    },
    "version": "1.0.1",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "video-editor-mcp",
        "version": "1.0.1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Video Jungle API Key (found at https://www.video-jungle.com/user/settings)",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "VJ_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "456da657-9a02-4b87-9e16-4eee6db55092",
        "versionId": "bbf32ba9-5e10-40ed-ba62-186b509b87c5",
        "publishedAt": "2025-09-12T12:58:23.949572999Z",
        "updatedAt": "2025-09-12T12:58:23.949572999Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/fengyinxia-jimeng-mcp",
    "description": "Create images and videos from prompts, with options for image mixing, reference images, and start/…",
    "status": "active",
    "repository": {
      "url": "https://github.com/fengyinxia/jimeng-mcp",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@fengyinxia/jimeng-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "1421db43-87bc-46b4-a587-99d203ebaf4f",
        "versionId": "b6c1667c-b54f-4fdf-80cf-3185aa22cc0a",
        "publishedAt": "2025-09-12T13:13:51.71154341Z",
        "updatedAt": "2025-09-12T13:13:51.71154341Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.augee99/mcp-weather",
    "description": "An MCP server that provides [describe what your server does]",
    "status": "active",
    "repository": {
      "url": "https://github.com/augee99/mcp-weather",
      "source": "github"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mcp-weather-augee99",
        "version": "0.1.0",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "2df85161-93f2-44e0-b0e3-c2dcfa8ce275",
        "versionId": "5289430f-1a42-4a32-a130-7dd851f9a378",
        "publishedAt": "2025-09-12T13:24:44.527456713Z",
        "updatedAt": "2025-09-12T13:24:44.527456713Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ch.martinelli/jooq-mcp",
    "description": "An MCP server that provides access to the jOOQ documentation",
    "status": "active",
    "repository": {
      "url": "https://github.com/martinellich/jooq-mcp",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "sse",
        "url": "https://jooq-mcp.martinelli.ch/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "912ef6fa-adcf-405b-a27d-ab1807b18aad",
        "versionId": "4bb00657-4481-44a5-be50-27f6382d0dd2",
        "publishedAt": "2025-09-12T13:41:08.40707085Z",
        "updatedAt": "2025-09-12T13:41:08.40707085Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/brave",
    "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
    "status": "active",
    "repository": {
      "url": "https://github.com/brave/brave-search-mcp-server",
      "source": "github"
    },
    "version": "2.0.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/brave/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "72fbc728-2894-4a60-aaf5-44d616ddd249",
        "versionId": "e1990434-a6a0-47f9-834d-d59cee7d8efb",
        "publishedAt": "2025-09-12T14:23:41.666711561Z",
        "updatedAt": "2025-09-19T09:07:32.533724187Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.teamwork/mcp",
    "description": "The Teamwork.com official MCP server helps teams efficiently manage client projects with AI.",
    "status": "active",
    "repository": {
      "url": "https://github.com/teamwork/mcp",
      "source": "github"
    },
    "version": "1.2.4",
    "packages": [
      {
        "registryType": "oci",
        "registryBaseUrl": "https://docker.io",
        "identifier": "teamwork/mcp",
        "version": "v1.2.4",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "TW_MCP_BEARER_TOKEN"
          },
          {
            "description": "Choose log output format between 'text' or 'json'. Default is 'text'.",
            "format": "string",
            "name": "TW_MCP_LOG_FORMAT"
          },
          {
            "description": "Choose log level between 'debug', 'info', 'warn' or 'error'. Default is 'info'.",
            "format": "string",
            "name": "TW_MCP_LOG_LEVEL"
          }
        ]
      }
    ],
    "remotes": [
      {
        "type": "sse",
        "url": "https://mcp.ai.teamwork.com",
        "headers": [
          {
            "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
            "isRequired": true,
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      },
      {
        "type": "streamable-http",
        "url": "https://mcp.ai.teamwork.com",
        "headers": [
          {
            "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
            "isRequired": true,
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "8e1daf12-8a74-4718-93ec-86b05728241d",
        "versionId": "45c8d51d-6b71-4f8c-aecd-733f1fc60d75",
        "publishedAt": "2025-09-12T15:06:41.256512883Z",
        "updatedAt": "2025-09-15T12:27:37.741620698Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.hellocoop/admin-mcp",
    "description": "Model Context Protocol (MCP) for Hellō Admin API.",
    "status": "active",
    "repository": {
      "url": "https://github.com/hellocoop/admin-mcp",
      "source": "github"
    },
    "version": "1.5.7",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@hellocoop/admin-mcp",
        "version": "1.5.7",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "1fd23ac3-08e5-4a18-8512-fdce9c88f99f",
        "versionId": "e347bd04-44d1-4492-a2a2-657e75782db2",
        "publishedAt": "2025-09-12T15:07:41.224545153Z",
        "updatedAt": "2025-09-12T15:07:41.224545153Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.joelverhagen/Knapcode.SampleMcpServer",
    "description": "A sample MCP server using the MCP C# SDK. Generates random numbers and random weather.",
    "repository": {
      "url": "https://github.com/joelverhagen/Knapcode.SampleMcpServer.git",
      "source": "github"
    },
    "version": "0.7.0-beta",
    "packages": [
      {
        "registryType": "nuget",
        "registryBaseUrl": "https://api.nuget.org",
        "identifier": "Knapcode.SampleMcpServer",
        "version": "0.7.0-beta",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "value": "mcp",
            "type": "positional",
            "valueHint": "mcp"
          },
          {
            "value": "start",
            "type": "positional",
            "valueHint": "start"
          }
        ],
        "environmentVariables": [
          {
            "value": "{weather_choices}",
            "variables": {
              "weather_choices": {
                "description": "Comma separated list of weather descriptions to randomly select.",
                "isRequired": true
              }
            },
            "name": "WEATHER_CHOICES"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "16498a6c-38c5-45d4-83b2-977bdef88d80",
        "versionId": "30080003-fbcd-4552-b40e-a1c192d1f412",
        "publishedAt": "2025-09-12T15:42:35.512389899Z",
        "updatedAt": "2025-09-12T15:42:35.512389899Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.joelverhagen.mcp/Knapcode.SampleMcpServer",
    "description": "A sample MCP server using the MCP C# SDK. Generates random numbers and random weather.",
    "repository": {
      "url": "https://github.com/joelverhagen/Knapcode.SampleMcpServer.git",
      "source": "github"
    },
    "version": "0.7.0-beta",
    "packages": [
      {
        "registryType": "nuget",
        "registryBaseUrl": "https://api.nuget.org",
        "identifier": "Knapcode.SampleMcpServer",
        "version": "0.7.0-beta",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "value": "mcp",
            "type": "positional",
            "valueHint": "mcp"
          },
          {
            "value": "start",
            "type": "positional",
            "valueHint": "start"
          }
        ],
        "environmentVariables": [
          {
            "value": "{weather_choices}",
            "variables": {
              "weather_choices": {
                "description": "Comma separated list of weather descriptions to randomly select.",
                "isRequired": true
              }
            },
            "name": "WEATHER_CHOICES"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "4b516701-57e7-41dc-95a4-eebf8b37ff58",
        "versionId": "0670bddb-8db1-41dd-b5c4-0957401e29b7",
        "publishedAt": "2025-09-12T15:58:51.492613035Z",
        "updatedAt": "2025-09-12T15:58:51.492613035Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.p1va/symbols",
    "description": "MCP server to read, inspect and troubleshoot codebase symbols",
    "status": "active",
    "repository": {
      "url": "https://github.com/p1va/symbols",
      "source": "github"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@p1va/symbols",
        "version": "0.0.10",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "d827a965-33bc-4262-87df-98ca6eac9a12",
        "versionId": "95837ebe-5fcd-4692-8020-5920d760d47c",
        "publishedAt": "2025-09-12T16:29:27.100278154Z",
        "updatedAt": "2025-09-12T16:29:27.100278154Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.augmnt/augments-mcp-server",
    "description": "Augments MCP Server - A comprehensive framework documentation provider for Claude Code",
    "status": "active",
    "repository": {
      "url": "https://github.com/augmnt/augments-mcp-server",
      "source": "github"
    },
    "version": "1.0.1",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "augments-mcp-server",
        "version": "1.0.1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your API key for the service",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "YOUR_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c76dece6-08e7-4a57-af81-2e6209f8e884",
        "versionId": "09f7ad69-47d4-444a-86c5-499a993a408f",
        "publishedAt": "2025-09-12T16:36:52.743796173Z",
        "updatedAt": "2025-09-12T16:52:50.977430499Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.augmnt/augments-mcp-server",
    "description": "Augments MCP Server - A comprehensive framework documentation provider for Claude Code",
    "status": "active",
    "repository": {
      "url": "https://github.com/augmnt/augments-mcp-server",
      "source": "github"
    },
    "version": "1.0.2",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "augments-mcp-server",
        "version": "1.0.2",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c76dece6-08e7-4a57-af81-2e6209f8e884",
        "versionId": "19c65252-d9f4-4e5c-9a87-b57990b03b5e",
        "publishedAt": "2025-09-12T16:52:50.968512218Z",
        "updatedAt": "2025-09-12T16:52:50.968512218Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.kirbah/mcp-youtube",
    "description": "YouTube MCP server for token-optimized, structured data using the YouTube Data API v3.",
    "status": "active",
    "repository": {
      "url": "https://github.com/kirbah/mcp-youtube",
      "source": "github"
    },
    "version": "0.2.6",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@kirbah/mcp-youtube",
        "version": "0.2.6",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "YouTube Data API v3 key",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "YOUTUBE_API_KEY"
          },
          {
            "description": "MongoDB connection string for caching",
            "format": "string",
            "isSecret": true,
            "name": "MDB_MCP_CONNECTION_STRING"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a3813f05-35d7-43db-91b6-2380417e81b7",
        "versionId": "0319ba85-54bd-44eb-97a7-58ee04d05b6e",
        "publishedAt": "2025-09-12T17:28:32.237060053Z",
        "updatedAt": "2025-09-12T17:28:32.237060053Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/fitaf-ai-fitaf-ai-mcp",
    "description": "Manage workouts, nutrition, goals, and progress across the FitAF platform. Connect wearables, sync…",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@fitaf-ai/fitaf-ai-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "22efc6f6-1167-45ae-8587-89820ef8079c",
        "versionId": "dee80ba3-a6f1-4bc0-bac5-7a3c3d4c5597",
        "publishedAt": "2025-09-12T17:59:11.653728452Z",
        "updatedAt": "2025-09-12T17:59:11.653728452Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/docfork-mcp",
    "description": "@latest documentation and code examples to 9000+ libraries for LLMs and AI code editors in a singl…",
    "status": "active",
    "repository": {
      "url": "https://github.com/docfork/docfork-mcp",
      "source": "github"
    },
    "version": "0.7.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@docfork/mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "3bbe0c48-41f7-4742-83d1-045499bef360",
        "versionId": "77b25763-8cce-444e-9914-939596568922",
        "publishedAt": "2025-09-12T18:25:16.049646725Z",
        "updatedAt": "2025-09-12T18:25:16.049646725Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.wonderwhy-er/desktop-commander",
    "description": "MCP server for terminal commands, file operations, and process management",
    "status": "active",
    "repository": {
      "url": "https://github.com/wonderwhy-er/DesktopCommanderMCP",
      "source": "github"
    },
    "version": "0.2.14",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@wonderwhy-er/desktop-commander",
        "version": "0.2.14",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "70b472c6-0bf2-44b2-97fc-be12bfc3cdca",
        "versionId": "490703ba-12b3-48d8-81ef-056010280a9a",
        "publishedAt": "2025-09-12T19:05:34.284609703Z",
        "updatedAt": "2025-09-18T13:15:52.412827978Z",
        "isLatest": false
      }
    }
  },
  {
    "name": "io.github.jkakar/cookwith-mcp",
    "description": "AI-powered recipe generation and transformation tools by Cookwith",
    "repository": {
      "url": "https://github.com/blaideinc/cookwith-mcp",
      "source": "github"
    },
    "version": "1.0.1",
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "ad9ef150-dd99-4913-b5f4-3769ff823300",
        "versionId": "2483b5fd-74cb-482a-8d83-364b07fc6a2b",
        "publishedAt": "2025-09-12T19:23:45.409934957Z",
        "updatedAt": "2025-09-12T19:27:49.34612908Z",
        "isLatest": false
      }
    }
  },
  {
    "name": "io.github.jkakar/cookwith-mcp",
    "description": "AI-powered recipe generation and transformation tools by Cookwith",
    "repository": {
      "url": "https://github.com/blaideinc/cookwith-mcp",
      "source": "github"
    },
    "version": "1.0.2",
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "ad9ef150-dd99-4913-b5f4-3769ff823300",
        "versionId": "5c7b580d-19dc-45c3-957f-303efdd1f4b7",
        "publishedAt": "2025-09-12T19:27:49.340445667Z",
        "updatedAt": "2025-09-12T19:27:49.340445667Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/fitaf-ai-fitaf-mcp",
    "description": "Track workouts, nutrition, body metrics, habits, and SMART goals with insights and trends. Connect…",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@fitaf-ai/fitaf-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "40878ab8-8373-4113-8040-fc62619053d4",
        "versionId": "45dd171d-1cc6-4868-a6a3-e56dab5185ce",
        "publishedAt": "2025-09-12T20:09:50.974662926Z",
        "updatedAt": "2025-09-12T20:09:50.974662926Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.browserbase/mcp-server-browserbase",
    "description": "MCP server for AI web browser automation using Browserbase and Stagehand",
    "status": "active",
    "repository": {
      "url": "https://github.com/browserbase/mcp-server-browserbase",
      "source": "github"
    },
    "version": "2.1.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@browserbasehq/mcp-server-browserbase",
        "version": "2.1.1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your Browserbase API key",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "BROWSERBASE_API_KEY"
          },
          {
            "description": "Your Browserbase Project ID",
            "isRequired": true,
            "format": "string",
            "name": "BROWSERBASE_PROJECT_ID"
          },
          {
            "description": "Your Gemini API key (default model)",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "GEMINI_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b6b21715-f68c-4714-9282-b892957865c6",
        "versionId": "0d63e37e-b288-4914-9b84-b88c4897e832",
        "publishedAt": "2025-09-12T21:10:44.068065305Z",
        "updatedAt": "2025-09-12T21:10:44.068065305Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.isamu/mulmocast-vision",
    "description": "Easy and stylish presentation slide generator.",
    "status": "active",
    "repository": {
      "url": "https://github.com/receptron/mulmocast-vision",
      "source": "github"
    },
    "version": "1.0.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mulmocast-vision",
        "version": "1.0.1",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "7c35ddbb-8891-4f3d-bd6e-91bf9357da83",
        "versionId": "5473ea29-7534-4d74-ad1d-5b8185114052",
        "publishedAt": "2025-09-12T21:46:16.168898479Z",
        "updatedAt": "2025-09-12T21:46:16.168898479Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.joelverhagen/Knapcode.SampleMcpServer/aot",
    "description": "A sample MCP server using the MCP C# SDK. Generates random numbers and random weather.",
    "repository": {
      "url": "https://github.com/joelverhagen/Knapcode.SampleMcpServer.git",
      "source": "github"
    },
    "version": "0.8.0-beta",
    "packages": [
      {
        "registryType": "nuget",
        "registryBaseUrl": "https://api.nuget.org",
        "identifier": "Knapcode.SampleMcpServer",
        "version": "0.8.0-beta",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "value": "mcp",
            "type": "positional",
            "valueHint": "mcp"
          },
          {
            "value": "start",
            "type": "positional",
            "valueHint": "start"
          }
        ],
        "environmentVariables": [
          {
            "value": "{weather_choices}",
            "variables": {
              "weather_choices": {
                "description": "Comma separated list of weather descriptions to randomly select.",
                "isRequired": true
              }
            },
            "name": "WEATHER_CHOICES"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "3a07295a-b552-42d7-a4b7-3f2ca6c588f6",
        "versionId": "86667e38-34da-44eb-a0ce-e34112fd98c6",
        "publishedAt": "2025-09-12T21:54:51.656512708Z",
        "updatedAt": "2025-09-12T21:54:51.656512708Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.saucelabs-sample-test-frameworks/sauce-api-mcp",
    "description": "An open-source MCP server that provides LLM access to the Sauce Labs API",
    "status": "active",
    "repository": {
      "url": "https://github.com/saucelabs/sauce-api-mcp",
      "source": "github"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "sauce-api-mcp",
        "version": "1.0.1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "value": "<sauce-user-name>",
            "name": "SAUCE_USERNAME"
          },
          {
            "value": "<sauce-access-key>",
            "name": "SAUCE_ACCESS_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "8b7288a5-d7e6-4139-9ad8-fcb85c1a20df",
        "versionId": "bb04de05-3784-4641-a864-e8eb37b1a901",
        "publishedAt": "2025-09-12T22:36:40.555152268Z",
        "updatedAt": "2025-09-12T22:36:40.555152268Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/hustcc-mcp-mermaid",
    "description": "Generate dynamic Mermaid diagrams and charts with AI assistance. Customize styles and export diagr…",
    "status": "active",
    "repository": {
      "url": "https://github.com/hustcc/mcp-mermaid",
      "source": "github"
    },
    "version": "0.1.3",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@hustcc/mcp-mermaid/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c9040f9c-9d06-4bff-8628-414f6e078979",
        "versionId": "19e98005-9ca2-4eca-84a9-6af3a8c689d0",
        "publishedAt": "2025-09-13T06:08:16.370383217Z",
        "updatedAt": "2025-09-13T06:08:16.370383217Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.yuna0x0/anilist-mcp",
    "description": "AniList MCP server for accessing AniList API data",
    "status": "active",
    "repository": {
      "url": "https://github.com/yuna0x0/anilist-mcp",
      "source": "github"
    },
    "version": "1.3.2",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "anilist-mcp",
        "version": "1.3.2",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "AniList API token for authenticated requests",
            "format": "string",
            "isSecret": true,
            "name": "ANILIST_TOKEN"
          }
        ]
      },
      {
        "registryType": "oci",
        "registryBaseUrl": "https://docker.io",
        "identifier": "yuna0x0/anilist-mcp",
        "version": "1.3.2",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "AniList API token for authenticated requests",
            "format": "string",
            "isSecret": true,
            "name": "ANILIST_TOKEN"
          }
        ]
      },
      {
        "registryType": "mcpb",
        "identifier": "https://github.com/yuna0x0/anilist-mcp/releases/download/v1.3.2/anilist-mcp-1.3.2.mcpb",
        "version": "1.3.2",
        "fileSha256": "5d6c9d0b6a420ccdb884ac982e9e1f8140be856012c157e85ab5bacb78a013c8",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "AniList API token for authenticated requests",
            "format": "string",
            "isSecret": true,
            "name": "ANILIST_TOKEN"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "6bdae0fa-dff2-4ae3-82f9-03710c1ffb86",
        "versionId": "4198dc87-4f6b-4470-8d35-691ad9c34771",
        "publishedAt": "2025-09-13T07:42:46.258254946Z",
        "updatedAt": "2025-09-13T07:58:52.384172296Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.yuna0x0/anilist-mcp",
    "description": "AniList MCP server for accessing AniList API data",
    "status": "active",
    "repository": {
      "url": "https://github.com/yuna0x0/anilist-mcp",
      "source": "github"
    },
    "version": "1.3.3",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "anilist-mcp",
        "version": "1.3.3",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "AniList API token for authenticated requests",
            "format": "string",
            "isSecret": true,
            "name": "ANILIST_TOKEN"
          }
        ]
      },
      {
        "registryType": "oci",
        "registryBaseUrl": "https://docker.io",
        "identifier": "yuna0x0/anilist-mcp",
        "version": "1.3.3",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "AniList API token for authenticated requests",
            "format": "string",
            "isSecret": true,
            "name": "ANILIST_TOKEN"
          }
        ]
      },
      {
        "registryType": "mcpb",
        "identifier": "https://github.com/yuna0x0/anilist-mcp/releases/download/v1.3.3/anilist-mcp-1.3.3.mcpb",
        "version": "1.3.3",
        "fileSha256": "17f509167680edc3923940b31853fe2b27bbae1d5ab9b071525a4260704006ec",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "AniList API token for authenticated requests",
            "format": "string",
            "isSecret": true,
            "name": "ANILIST_TOKEN"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "6bdae0fa-dff2-4ae3-82f9-03710c1ffb86",
        "versionId": "096d4f24-45f6-4a52-906f-5e7c13e69765",
        "publishedAt": "2025-09-13T07:58:52.37605769Z",
        "updatedAt": "2025-09-21T13:14:02.759136115Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.yuna0x0/hackmd-mcp",
    "description": "A Model Context Protocol server for integrating HackMD's note-taking platform with AI assistants.",
    "status": "active",
    "repository": {
      "url": "https://github.com/yuna0x0/hackmd-mcp",
      "source": "github"
    },
    "version": "1.4.2",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "hackmd-mcp",
        "version": "1.4.2",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your HackMD API token for API authentication",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "HACKMD_API_TOKEN"
          },
          {
            "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
            "format": "string",
            "default": "https://api.hackmd.io/v1",
            "name": "HACKMD_API_URL"
          }
        ]
      },
      {
        "registryType": "oci",
        "registryBaseUrl": "https://docker.io",
        "identifier": "yuna0x0/hackmd-mcp",
        "version": "1.4.2",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your HackMD API token for API authentication",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "HACKMD_API_TOKEN"
          },
          {
            "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
            "format": "string",
            "default": "https://api.hackmd.io/v1",
            "name": "HACKMD_API_URL"
          }
        ]
      },
      {
        "registryType": "mcpb",
        "identifier": "https://github.com/yuna0x0/hackmd-mcp/releases/download/v1.4.2/hackmd-mcp-1.4.2.mcpb",
        "version": "1.4.2",
        "fileSha256": "7b6ee105271d8595e3e5a0a3e4f9075ab3a2b7b373f529f4c3e99d1f93dead62",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your HackMD API token for API authentication",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "HACKMD_API_TOKEN"
          },
          {
            "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
            "format": "string",
            "default": "https://api.hackmd.io/v1",
            "name": "HACKMD_API_URL"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "e679729a-74ca-4b31-a7f5-80cddd5fa24d",
        "versionId": "93c43441-0cd8-4fad-b46d-28887997e1d2",
        "publishedAt": "2025-09-13T08:20:45.650204026Z",
        "updatedAt": "2025-09-15T03:10:53.114708285Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/yuna0x0-anilist-mcp",
    "description": "Access and interact with anime and manga data seamlessly. Retrieve detailed information about your…",
    "status": "active",
    "repository": {
      "url": "https://github.com/yuna0x0/anilist-mcp",
      "source": "github"
    },
    "version": "1.3.3",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@yuna0x0/anilist-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "bd7f3260-8768-49b4-be09-19cd13793ba2",
        "versionId": "35516102-2530-4e9f-9c13-4e613c3375f3",
        "publishedAt": "2025-09-13T08:34:23.401483403Z",
        "updatedAt": "2025-09-13T08:34:23.401483403Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/yuna0x0-hackmd-mcp",
    "description": "Interact with your HackMD notes and teams seamlessly. Manage your notes, view reading history, and…",
    "status": "active",
    "repository": {
      "url": "https://github.com/yuna0x0/hackmd-mcp",
      "source": "github"
    },
    "version": "1.4.2",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@yuna0x0/hackmd-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a85afd07-0178-49e6-b962-178f24839d99",
        "versionId": "d300fcf6-437a-444d-ac42-f7e55f9d5380",
        "publishedAt": "2025-09-13T08:37:37.613854961Z",
        "updatedAt": "2025-09-15T03:33:42.700252156Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.vfarcic/dot-ai",
    "description": "AI-powered development platform for Kubernetes deployments and intelligent automation",
    "status": "active",
    "repository": {
      "url": "https://github.com/vfarcic/dot-ai",
      "source": "github"
    },
    "version": "0.90.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@vfarcic/dot-ai",
        "version": "0.90.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Anthropic API key for Claude AI integration (required for deployments)",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "ANTHROPIC_API_KEY"
          },
          {
            "description": "OpenAI API key for embeddings (patterns, policies, capabilities)",
            "format": "string",
            "isSecret": true,
            "name": "OPENAI_API_KEY"
          },
          {
            "description": "Qdrant Vector DB URL for patterns, policies, and capabilities storage",
            "format": "string",
            "default": "http://localhost:6333",
            "name": "QDRANT_URL"
          },
          {
            "description": "Qdrant API key for authentication",
            "format": "string",
            "isSecret": true,
            "name": "QDRANT_API_KEY"
          },
          {
            "description": "Path to kubeconfig file for Kubernetes access",
            "format": "string",
            "name": "KUBECONFIG"
          },
          {
            "description": "Session storage directory for workflow persistence",
            "format": "string",
            "name": "DOT_AI_SESSION_DIR"
          },
          {
            "description": "Enable debug logging",
            "format": "string",
            "name": "DEBUG_DOT_AI"
          },
          {
            "description": "Documentation file pattern for discovery",
            "format": "string",
            "name": "DOT_AI_DOC_PATTERN"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "6836138f-2ad2-4feb-8043-ea425ecb0d71",
        "versionId": "0d69f0ab-96b0-454a-96b5-60aeaaa4fbbc",
        "publishedAt": "2025-09-13T10:28:59.278154953Z",
        "updatedAt": "2025-09-13T10:28:59.278154953Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.b1ff/atlassian-dc-mcp-bitbucket",
    "description": "MCP server for Atlassian Bitbucket Data Center - interact with repositories and code",
    "status": "active",
    "repository": {
      "url": "https://github.com/b1ff/atlassian-dc-mcp",
      "source": "github"
    },
    "version": "0.9.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@atlassian-dc-mcp/bitbucket",
        "version": "0.9.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Bitbucket host domain (e.g. your-instance.atlassian.net)",
            "format": "string",
            "name": "BITBUCKET_HOST"
          },
          {
            "description": "Bitbucket API base path (alternative to BITBUCKET_HOST)",
            "format": "string",
            "name": "BITBUCKET_API_BASE_PATH"
          },
          {
            "description": "Bitbucket Personal Access Token or API token",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "BITBUCKET_API_TOKEN"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "632bfe48-4b52-4ef4-a266-c82075a80f1a",
        "versionId": "e14d142c-7c8d-4231-b0f0-0a1dbf2357b6",
        "publishedAt": "2025-09-13T11:37:20.709225306Z",
        "updatedAt": "2025-09-13T13:17:33.583855205Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.b1ff/atlassian-dc-mcp-confluence",
    "description": "MCP server for Atlassian Confluence Data Center - access and manage content",
    "status": "active",
    "repository": {
      "url": "https://github.com/b1ff/atlassian-dc-mcp",
      "source": "github"
    },
    "version": "0.9.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@atlassian-dc-mcp/confluence",
        "version": "0.9.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Confluence host domain (e.g. your-instance.atlassian.net)",
            "format": "string",
            "name": "CONFLUENCE_HOST"
          },
          {
            "description": "Confluence API base path (alternative to CONFLUENCE_HOST)",
            "format": "string",
            "name": "CONFLUENCE_API_BASE_PATH"
          },
          {
            "description": "Confluence Personal Access Token or API token",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "CONFLUENCE_API_TOKEN"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b6e7826e-d1cb-43c9-8c12-391ed0538937",
        "versionId": "52318e0f-56de-406f-8558-4fd4e638060e",
        "publishedAt": "2025-09-13T11:40:42.156626724Z",
        "updatedAt": "2025-09-13T13:17:33.205675704Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.b1ff/atlassian-dc-mcp-jira",
    "description": "MCP server for Atlassian Jira Data Center - search, view, and create issues",
    "status": "active",
    "repository": {
      "url": "https://github.com/b1ff/atlassian-dc-mcp",
      "source": "github"
    },
    "version": "0.9.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@atlassian-dc-mcp/jira",
        "version": "0.9.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Jira host domain (e.g. your-instance.atlassian.net)",
            "format": "string",
            "name": "JIRA_HOST"
          },
          {
            "description": "Jira API base path (alternative to JIRA_HOST)",
            "format": "string",
            "name": "JIRA_API_BASE_PATH"
          },
          {
            "description": "Jira Personal Access Token or API token",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "JIRA_API_TOKEN"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "775c0931-3153-4181-bada-77b597b58221",
        "versionId": "94c0be03-60cf-45e3-9f6e-db4ad643f243",
        "publishedAt": "2025-09-13T11:40:51.735988794Z",
        "updatedAt": "2025-09-13T13:17:32.83365354Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/smithery-ai-cookbook-ts-smithery-cli",
    "description": "A simple Typescript MCP server built using the official MCP Typescript SDK and smithery/cli. This…",
    "status": "active",
    "repository": {
      "url": "https://github.com/smithery-ai/smithery-cookbook",
      "source": "github",
      "subfolder": "servers/typescript/migrate_stdio_to_http/server_with_smithery_cli"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@smithery-ai/cookbook-ts-smithery-cli/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "794aa361-eb55-40c4-8f4c-1be4a8a1c047",
        "versionId": "2aaa0953-917f-43d5-bbe3-d4c99688a86b",
        "publishedAt": "2025-09-13T12:45:28.964187978Z",
        "updatedAt": "2025-09-13T12:45:28.964187978Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.b1ff/atlassian-dc-mcp-jira",
    "description": "MCP server for Atlassian Jira Data Center - search, view, and create issues",
    "status": "active",
    "repository": {
      "url": "https://github.com/b1ff/atlassian-dc-mcp",
      "source": "github"
    },
    "version": "0.9.7",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@atlassian-dc-mcp/jira",
        "version": "0.9.7",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Jira host domain (e.g. your-instance.atlassian.net)",
            "format": "string",
            "name": "JIRA_HOST"
          },
          {
            "description": "Jira API base path (alternative to JIRA_HOST)",
            "format": "string",
            "name": "JIRA_API_BASE_PATH"
          },
          {
            "description": "Jira Personal Access Token or API token",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "JIRA_API_TOKEN"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "775c0931-3153-4181-bada-77b597b58221",
        "versionId": "7c414dfb-e7f1-4456-b296-0fd9f6cfc2ad",
        "publishedAt": "2025-09-13T13:17:32.827442866Z",
        "updatedAt": "2025-09-13T13:18:50.721430383Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.b1ff/atlassian-dc-mcp-confluence",
    "description": "MCP server for Atlassian Confluence Data Center - access and manage content",
    "status": "active",
    "repository": {
      "url": "https://github.com/b1ff/atlassian-dc-mcp",
      "source": "github"
    },
    "version": "0.9.7",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@atlassian-dc-mcp/confluence",
        "version": "0.9.7",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Confluence host domain (e.g. your-instance.atlassian.net)",
            "format": "string",
            "name": "CONFLUENCE_HOST"
          },
          {
            "description": "Confluence API base path (alternative to CONFLUENCE_HOST)",
            "format": "string",
            "name": "CONFLUENCE_API_BASE_PATH"
          },
          {
            "description": "Confluence Personal Access Token or API token",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "CONFLUENCE_API_TOKEN"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b6e7826e-d1cb-43c9-8c12-391ed0538937",
        "versionId": "a77e222c-d64a-4cd2-a44a-b4e46bdcbfed",
        "publishedAt": "2025-09-13T13:17:33.200471952Z",
        "updatedAt": "2025-09-13T13:18:50.974154729Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.b1ff/atlassian-dc-mcp-bitbucket",
    "description": "MCP server for Atlassian Bitbucket Data Center - interact with repositories and code",
    "status": "active",
    "repository": {
      "url": "https://github.com/b1ff/atlassian-dc-mcp",
      "source": "github"
    },
    "version": "0.9.7",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@atlassian-dc-mcp/bitbucket",
        "version": "0.9.7",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Bitbucket host domain (e.g. your-instance.atlassian.net)",
            "format": "string",
            "name": "BITBUCKET_HOST"
          },
          {
            "description": "Bitbucket API base path (alternative to BITBUCKET_HOST)",
            "format": "string",
            "name": "BITBUCKET_API_BASE_PATH"
          },
          {
            "description": "Bitbucket Personal Access Token or API token",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "BITBUCKET_API_TOKEN"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "632bfe48-4b52-4ef4-a266-c82075a80f1a",
        "versionId": "d8bd9e48-abc3-47b9-b08b-3840ecb838c5",
        "publishedAt": "2025-09-13T13:17:33.579913494Z",
        "updatedAt": "2025-09-13T13:18:51.365304119Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.b1ff/atlassian-dc-mcp-jira",
    "description": "MCP server for Atlassian Jira Data Center - search, view, and create issues",
    "status": "active",
    "repository": {
      "url": "https://github.com/b1ff/atlassian-dc-mcp",
      "source": "github"
    },
    "version": "0.9.8",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@atlassian-dc-mcp/jira",
        "version": "0.9.8",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Jira host domain (e.g. your-instance.atlassian.net)",
            "format": "string",
            "name": "JIRA_HOST"
          },
          {
            "description": "Jira API base path (alternative to JIRA_HOST)",
            "format": "string",
            "name": "JIRA_API_BASE_PATH"
          },
          {
            "description": "Jira Personal Access Token or API token",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "JIRA_API_TOKEN"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "775c0931-3153-4181-bada-77b597b58221",
        "versionId": "f7dc49e8-f522-49ef-8c83-ac14a51f5989",
        "publishedAt": "2025-09-13T13:18:50.716321679Z",
        "updatedAt": "2025-09-13T13:29:18.034212935Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.b1ff/atlassian-dc-mcp-confluence",
    "description": "MCP server for Atlassian Confluence Data Center - access and manage content",
    "status": "active",
    "repository": {
      "url": "https://github.com/b1ff/atlassian-dc-mcp",
      "source": "github"
    },
    "version": "0.9.8",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@atlassian-dc-mcp/confluence",
        "version": "0.9.8",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Confluence host domain (e.g. your-instance.atlassian.net)",
            "format": "string",
            "name": "CONFLUENCE_HOST"
          },
          {
            "description": "Confluence API base path (alternative to CONFLUENCE_HOST)",
            "format": "string",
            "name": "CONFLUENCE_API_BASE_PATH"
          },
          {
            "description": "Confluence Personal Access Token or API token",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "CONFLUENCE_API_TOKEN"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b6e7826e-d1cb-43c9-8c12-391ed0538937",
        "versionId": "5b9f4081-5b9b-4790-81e8-0e4003f87912",
        "publishedAt": "2025-09-13T13:18:50.968631388Z",
        "updatedAt": "2025-09-13T13:29:18.545408762Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.b1ff/atlassian-dc-mcp-bitbucket",
    "description": "MCP server for Atlassian Bitbucket Data Center - interact with repositories and code",
    "status": "active",
    "repository": {
      "url": "https://github.com/b1ff/atlassian-dc-mcp",
      "source": "github"
    },
    "version": "0.9.8",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@atlassian-dc-mcp/bitbucket",
        "version": "0.9.8",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Bitbucket host domain (e.g. your-instance.atlassian.net)",
            "format": "string",
            "name": "BITBUCKET_HOST"
          },
          {
            "description": "Bitbucket API base path (alternative to BITBUCKET_HOST)",
            "format": "string",
            "name": "BITBUCKET_API_BASE_PATH"
          },
          {
            "description": "Bitbucket Personal Access Token or API token",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "BITBUCKET_API_TOKEN"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "632bfe48-4b52-4ef4-a266-c82075a80f1a",
        "versionId": "8f91d610-22eb-4116-9fb7-413af6d27c0a",
        "publishedAt": "2025-09-13T13:18:51.361262856Z",
        "updatedAt": "2025-09-13T13:29:18.892466109Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.b1ff/atlassian-dc-mcp-jira",
    "description": "MCP server for Atlassian Jira Data Center - search, view, and create issues",
    "status": "active",
    "repository": {
      "url": "https://github.com/b1ff/atlassian-dc-mcp",
      "source": "github"
    },
    "version": "0.9.9",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@atlassian-dc-mcp/jira",
        "version": "0.9.9",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Jira host domain (e.g. your-instance.atlassian.net)",
            "format": "string",
            "name": "JIRA_HOST"
          },
          {
            "description": "Jira API base path (alternative to JIRA_HOST)",
            "format": "string",
            "name": "JIRA_API_BASE_PATH"
          },
          {
            "description": "Jira Personal Access Token or API token",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "JIRA_API_TOKEN"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "775c0931-3153-4181-bada-77b597b58221",
        "versionId": "580738da-9f8f-426c-a690-03e6784e2000",
        "publishedAt": "2025-09-13T13:29:18.029022573Z",
        "updatedAt": "2025-09-13T13:29:18.029022573Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.b1ff/atlassian-dc-mcp-confluence",
    "description": "MCP server for Atlassian Confluence Data Center - access and manage content",
    "status": "active",
    "repository": {
      "url": "https://github.com/b1ff/atlassian-dc-mcp",
      "source": "github"
    },
    "version": "0.9.9",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@atlassian-dc-mcp/confluence",
        "version": "0.9.9",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Confluence host domain (e.g. your-instance.atlassian.net)",
            "format": "string",
            "name": "CONFLUENCE_HOST"
          },
          {
            "description": "Confluence API base path (alternative to CONFLUENCE_HOST)",
            "format": "string",
            "name": "CONFLUENCE_API_BASE_PATH"
          },
          {
            "description": "Confluence Personal Access Token or API token",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "CONFLUENCE_API_TOKEN"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b6e7826e-d1cb-43c9-8c12-391ed0538937",
        "versionId": "2117fb24-f585-49b9-aa0e-e1633980e5ac",
        "publishedAt": "2025-09-13T13:29:18.54035901Z",
        "updatedAt": "2025-09-13T13:29:18.54035901Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.b1ff/atlassian-dc-mcp-bitbucket",
    "description": "MCP server for Atlassian Bitbucket Data Center - interact with repositories and code",
    "status": "active",
    "repository": {
      "url": "https://github.com/b1ff/atlassian-dc-mcp",
      "source": "github"
    },
    "version": "0.9.9",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@atlassian-dc-mcp/bitbucket",
        "version": "0.9.9",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Bitbucket host domain (e.g. your-instance.atlassian.net)",
            "format": "string",
            "name": "BITBUCKET_HOST"
          },
          {
            "description": "Bitbucket API base path (alternative to BITBUCKET_HOST)",
            "format": "string",
            "name": "BITBUCKET_API_BASE_PATH"
          },
          {
            "description": "Bitbucket Personal Access Token or API token",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "BITBUCKET_API_TOKEN"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "632bfe48-4b52-4ef4-a266-c82075a80f1a",
        "versionId": "3ea9d856-0c93-4fcd-9d83-ede67968a5f4",
        "publishedAt": "2025-09-13T13:29:18.888401856Z",
        "updatedAt": "2025-09-13T13:29:18.888401856Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.himorishige/hatago-mcp-hub",
    "description": "Unified MCP Hub for managing multiple Model Context Protocol servers",
    "status": "active",
    "repository": {
      "url": "https://github.com/himorishige/hatago-mcp-hub",
      "source": "github"
    },
    "version": "0.0.12",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@himorishige/hatago-mcp-hub",
        "version": "0.0.12",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "27980499-f44a-453a-8b3c-6450b5c0947b",
        "versionId": "a7fef886-c01c-4752-877e-b0da11049d3d",
        "publishedAt": "2025-09-13T13:55:18.531630059Z",
        "updatedAt": "2025-09-13T14:40:04.494030232Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.himorishige/hatago-mcp-hub",
    "description": "Unified MCP Hub for managing multiple Model Context Protocol servers",
    "status": "active",
    "repository": {
      "url": "https://github.com/himorishige/hatago-mcp-hub",
      "source": "github"
    },
    "version": "0.0.13",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@himorishige/hatago-mcp-hub",
        "version": "0.0.13",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "27980499-f44a-453a-8b3c-6450b5c0947b",
        "versionId": "94cfdee1-6a62-4d40-8bf4-dab7646d4548",
        "publishedAt": "2025-09-13T14:40:04.386322089Z",
        "updatedAt": "2025-09-14T07:53:18.719599831Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.gradion-ai/ipybox",
    "description": "An MCP server for sandboxed Python code execution with IPython and Docker, and file transfer.",
    "status": "active",
    "repository": {
      "url": "https://github.com/gradion-ai/ipybox",
      "source": "github"
    },
    "version": "0.6.3",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "ipybox",
        "version": "0.6.3",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "2310a088-c5ba-429e-84b2-82d92622023b",
        "versionId": "489daf00-1b61-4a8d-a421-5aa1e4058360",
        "publishedAt": "2025-09-13T14:43:00.869172467Z",
        "updatedAt": "2025-09-14T09:27:10.09472192Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.cmpxchg16/mcp-ethical-hacking",
    "description": "An MCP server that provides LinkedIn & Reddit data",
    "status": "active",
    "repository": {
      "url": "https://github.com/cmpxchg16/mcp-ethical-hacking",
      "source": "github"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "mcpb",
        "identifier": "https://github.com/cmpxchg16/mcp-ethical-hacking/releases/download/v1.0.0/server.mcpb",
        "version": "1.0.0",
        "fileSha256": "fe333e598595000ae021bd27117db32ec69af6987f507ba7a63c90638ff633ce",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "ebe9848e-d092-4007-88bc-09b67823681b",
        "versionId": "3dc93eed-43b9-4a3d-9ed2-c40a39084e56",
        "publishedAt": "2025-09-13T16:13:29.782164285Z",
        "updatedAt": "2025-09-15T11:11:03.326685721Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/morosss-sdfsdf",
    "description": "Find academic papers across major sources like arXiv, PubMed, bioRxiv, and more. Download PDFs whe…",
    "status": "active",
    "repository": {
      "url": "https://github.com/morosss/sdfsdf",
      "source": "github"
    },
    "version": "1.14.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@morosss/sdfsdf/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "22b3dc31-3039-45bf-9033-10d401c10bb6",
        "versionId": "7bc56184-ea78-465a-863c-76c9fe7e48a8",
        "publishedAt": "2025-09-13T17:26:11.858999857Z",
        "updatedAt": "2025-09-13T17:26:11.858999857Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "dev.augments/mcp",
    "description": "Augments MCP Server - A comprehensive framework documentation provider for Claude Code",
    "status": "active",
    "repository": {
      "url": "https://github.com/augmnt/augments-mcp-server",
      "source": "github"
    },
    "version": "2.0.2",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "augments-mcp-server",
        "version": "2.0.2",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.augments.dev/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "16c71293-26ff-48b3-b2aa-bb481f2f27c5",
        "versionId": "e9991cfc-6b4d-40bf-ab93-1a03567afdb4",
        "publishedAt": "2025-09-13T19:11:59.363394215Z",
        "updatedAt": "2025-09-13T19:11:59.363394215Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/plainyogurt21-sec-edgar-mcp",
    "description": "Provide AI assistants with real-time access to official SEC EDGAR filings and financial data. Enab…",
    "status": "active",
    "repository": {
      "url": "https://github.com/plainyogurt21/sec-edgar-mcp",
      "source": "github"
    },
    "version": "1.14.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@plainyogurt21/sec-edgar-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "eb1e35b7-1b58-4236-a861-544e7c7e35f3",
        "versionId": "aa5b856a-de58-4023-b828-489a606c4fba",
        "publishedAt": "2025-09-13T21:20:44.610657663Z",
        "updatedAt": "2025-09-13T21:20:44.610657663Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/Danushkumar-V-mcp-discord",
    "description": "An MCP server that integrates with Discord to provide AI-powered features.",
    "status": "active",
    "repository": {
      "url": "https://github.com/Danushkumar-V/mcp-discord",
      "source": "github"
    },
    "version": "1.2.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@Danushkumar-V/mcp-discord/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "0e45649f-58fd-4a9e-a707-943a46fbe688",
        "versionId": "b946c91b-b9b9-49af-b32a-f47f20484a85",
        "publishedAt": "2025-09-13T22:54:39.805524875Z",
        "updatedAt": "2025-09-13T22:54:39.805524875Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/mjucius-cozi_mcp",
    "description": "Manage your family's calendars and lists in Cozi. View, create, and update appointments; organize…",
    "status": "active",
    "repository": {
      "url": "https://github.com/mjucius/cozi_mcp",
      "source": "github"
    },
    "version": "1.14.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@mjucius/cozi_mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "ebe0ea3c-061c-4882-a3e5-f9fc4d9a2710",
        "versionId": "11664738-d823-4b8e-9ea6-092e8aa450b8",
        "publishedAt": "2025-09-13T23:46:02.266315306Z",
        "updatedAt": "2025-09-13T23:46:02.266315306Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "net.nymbo/tools",
    "description": "Remote MCP server: fetch, search, Python, TTS, memory, image, video.",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "sse",
        "url": "https://mcp.nymbo.net/gradio_api/mcp/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "4ab22cda-40f6-4ac1-95eb-dc96474ae75f",
        "versionId": "251bf0dd-c4b0-4889-a9e1-447bd23d3d36",
        "publishedAt": "2025-09-13T23:56:21.830662858Z",
        "updatedAt": "2025-09-13T23:56:21.830662858Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.shawndurrani/mcp-merchant",
    "description": "Search-only commerce MCP server backed by Stripe (test)",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "0.1.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-merchant",
        "version": "0.1.1",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Stripe secret key (test mode)",
            "isRequired": true,
            "isSecret": true,
            "name": "STRIPE_SECRET_KEY"
          },
          {
            "description": "Max products to cache",
            "default": "100",
            "name": "PRODUCT_LIMIT"
          },
          {
            "description": "Catalog refresh interval in seconds",
            "default": "600",
            "name": "REFRESH_INTERVAL_SEC"
          }
        ]
      }
    ],
    "remotes": [
      {
        "type": "sse",
        "url": "https://mcp.shawndurrani.ai/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "8681fb6c-725d-4896-b15e-1088ffe74743",
        "versionId": "24a55245-1997-4508-bb34-05d67c9795ad",
        "publishedAt": "2025-09-14T02:22:00.475570659Z",
        "updatedAt": "2025-09-16T22:54:28.465114324Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/arjunkmrm-ahoy",
    "description": "Send friendly, personalized greetings by name. Switch to a playful pirate voice for themed salutat…",
    "status": "active",
    "repository": {
      "url": "https://github.com/arjunkmrm/ahoy",
      "source": "github"
    },
    "version": "1.13.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@arjunkmrm/ahoy/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a835b54b-4d1d-4eb1-98c5-4c7d2b0e0f50",
        "versionId": "c372a906-9758-46ce-8211-602c545dffc3",
        "publishedAt": "2025-09-14T03:11:31.224722296Z",
        "updatedAt": "2025-09-14T03:11:31.224722296Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/demomagic-duckchain-mcp",
    "description": "Explore blockchain data across addresses, tokens, blocks, and transactions. Investigate any transa…",
    "status": "active",
    "repository": {
      "url": "https://github.com/demomagic/duckchain-mcp",
      "source": "github"
    },
    "version": "1.13.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@demomagic/duckchain-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "2b01388b-f99b-4501-8653-f87b23a77aca",
        "versionId": "857bf329-eeca-4c11-aeb9-2f82f5a1fa24",
        "publishedAt": "2025-09-14T05:32:58.075993678Z",
        "updatedAt": "2025-09-14T05:32:58.075993678Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.formulahendry/mcp-server-mcp-registry",
    "description": "MCP Server for MCP Registry to discover and search for available MCP servers in the registry",
    "status": "active",
    "repository": {
      "url": "https://github.com/formulahendry/mcp-server-mcp-registry",
      "source": "github"
    },
    "version": "0.1.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-server-mcp-registry",
        "version": "0.1.0",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "4cd7a1b2-8d29-4cb1-924c-f421b1638441",
        "versionId": "7881f8bf-ec94-417d-9f01-45771faaba17",
        "publishedAt": "2025-09-14T07:16:07.571743009Z",
        "updatedAt": "2025-09-14T07:16:07.571743009Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.himorishige/hatago-mcp-hub",
    "description": "Unified MCP Hub for managing multiple Model Context Protocol servers",
    "status": "active",
    "repository": {
      "url": "https://github.com/himorishige/hatago-mcp-hub",
      "source": "github"
    },
    "version": "0.0.14",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@himorishige/hatago-mcp-hub",
        "version": "0.0.14",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "27980499-f44a-453a-8b3c-6450b5c0947b",
        "versionId": "6e30b2bc-f0e2-4725-89f4-458932232c12",
        "publishedAt": "2025-09-14T07:53:18.713900781Z",
        "updatedAt": "2025-09-14T10:38:58.014142407Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.gradion-ai/ipybox",
    "description": "An MCP server for sandboxed Python code execution with IPython and Docker, and file transfer.",
    "status": "active",
    "repository": {
      "url": "https://github.com/gradion-ai/ipybox",
      "source": "github"
    },
    "version": "0.6.3-p1",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "ipybox",
        "version": "0.6.3-p1",
        "runtimeHint": "uvx",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "description": "Required MCP server subcommand",
            "isRequired": true,
            "value": "mcp",
            "type": "positional"
          },
          {
            "description": "Directory allowed for host filesystem operations",
            "type": "named",
            "name": "--allowed-dir",
            "isRepeated": true,
            "valueHint": "directory_path"
          },
          {
            "description": "Domain, IP address, or CIDR range allowed for outbound network access",
            "type": "named",
            "name": "--allowed-domain",
            "isRepeated": true,
            "valueHint": "domain_or_ip"
          },
          {
            "description": "Docker image tag to use",
            "type": "named",
            "name": "--container-tag",
            "valueHint": "docker_image_tag"
          },
          {
            "description": "Environment variable for container (KEY=VALUE format)",
            "type": "named",
            "name": "--container-env-var",
            "isRepeated": true,
            "valueHint": "env_var"
          },
          {
            "description": "Path to file containing container environment variables",
            "type": "named",
            "name": "--container-env-file",
            "valueHint": "file_path"
          },
          {
            "description": "Bind mount for container (host_path:container_path format)",
            "type": "named",
            "name": "--container-bind",
            "isRepeated": true,
            "valueHint": "bind_mount"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "2310a088-c5ba-429e-84b2-82d92622023b",
        "versionId": "1e90334c-ebe1-4973-afe7-68b76da27b52",
        "publishedAt": "2025-09-14T08:06:30.959441839Z",
        "updatedAt": "2025-09-14T08:06:30.959441839Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.gradion-ai/ipybox",
    "description": "An MCP server for sandboxed Python code execution with IPython and Docker, and file transfer.",
    "status": "active",
    "repository": {
      "url": "https://github.com/gradion-ai/ipybox",
      "source": "github"
    },
    "version": "auto",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "ipybox",
        "version": "auto",
        "runtimeHint": "uvx",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "description": "Required MCP server subcommand",
            "isRequired": true,
            "value": "mcp",
            "type": "positional"
          },
          {
            "description": "Directory allowed for host filesystem operations",
            "type": "named",
            "name": "--allowed-dir",
            "isRepeated": true,
            "valueHint": "directory_path"
          },
          {
            "description": "Domain, IP address, or CIDR range allowed for outbound network access",
            "type": "named",
            "name": "--allowed-domain",
            "isRepeated": true,
            "valueHint": "domain_or_ip"
          },
          {
            "description": "Docker image tag to use",
            "type": "named",
            "name": "--container-tag",
            "valueHint": "docker_image_tag"
          },
          {
            "description": "Environment variable for container (KEY=VALUE format)",
            "type": "named",
            "name": "--container-env-var",
            "isRepeated": true,
            "valueHint": "env_var"
          },
          {
            "description": "Path to file containing container environment variables",
            "type": "named",
            "name": "--container-env-file",
            "valueHint": "file_path"
          },
          {
            "description": "Bind mount for container (host_path:container_path format)",
            "type": "named",
            "name": "--container-bind",
            "isRepeated": true,
            "valueHint": "bind_mount"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "2310a088-c5ba-429e-84b2-82d92622023b",
        "versionId": "0963e3d3-30f2-4ed3-bf44-4941546f2690",
        "publishedAt": "2025-09-14T08:07:06.940202842Z",
        "updatedAt": "2025-09-14T08:07:06.940202842Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.gradion-ai/ipybox",
    "description": "An MCP server for sandboxed Python code execution with IPython and Docker, and file transfer.",
    "status": "active",
    "repository": {
      "url": "https://github.com/gradion-ai/ipybox",
      "source": "github"
    },
    "version": "0.6.3-p2",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "ipybox",
        "version": "0.6.3-p2",
        "runtimeHint": "uvx",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "description": "Required MCP server subcommand",
            "isRequired": true,
            "value": "mcp",
            "type": "positional"
          },
          {
            "description": "Directory allowed for host filesystem operations",
            "type": "named",
            "name": "--allowed-dir",
            "isRepeated": true,
            "valueHint": "directory_path"
          },
          {
            "description": "Domain, IP address, or CIDR range allowed for outbound network access",
            "type": "named",
            "name": "--allowed-domain",
            "isRepeated": true,
            "valueHint": "domain_or_ip"
          },
          {
            "description": "Docker image tag to use",
            "type": "named",
            "name": "--container-tag",
            "valueHint": "docker_image_tag"
          },
          {
            "description": "Environment variable for container (KEY=VALUE format)",
            "type": "named",
            "name": "--container-env-var",
            "isRepeated": true,
            "valueHint": "env_var"
          },
          {
            "description": "Path to file containing container environment variables",
            "type": "named",
            "name": "--container-env-file",
            "valueHint": "file_path"
          },
          {
            "description": "Bind mount for container (host_path:container_path format)",
            "type": "named",
            "name": "--container-bind",
            "isRepeated": true,
            "valueHint": "bind_mount"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "2310a088-c5ba-429e-84b2-82d92622023b",
        "versionId": "89da352b-cb6c-4940-89bd-45b58a4740d3",
        "publishedAt": "2025-09-14T08:12:36.178778068Z",
        "updatedAt": "2025-09-14T08:12:36.178778068Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.cyanheads/mcp-ts-template",
    "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
    "status": "active",
    "repository": {
      "url": "https://github.com/cyanheads/mcp-ts-template",
      "source": "github"
    },
    "version": "2.0.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-ts-template",
        "version": "2.0.1",
        "runtimeHint": "bun",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "value": "run",
            "type": "positional"
          },
          {
            "value": "start:stdio",
            "type": "positional"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-ts-template",
        "version": "2.0.1",
        "runtimeHint": "bun",
        "transport": {
          "type": "streamable-http",
          "url": "http://localhost:3010/mcp"
        },
        "packageArguments": [
          {
            "value": "run",
            "type": "positional"
          },
          {
            "value": "start:http",
            "type": "positional"
          }
        ],
        "environmentVariables": [
          {
            "description": "The port to run the HTTP server on.",
            "format": "string",
            "default": "3010",
            "name": "MCP_HTTP_PORT"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b1a7bd6b-21e2-4cd8-8531-37dddc5fa3f4",
        "versionId": "b0d0defb-6cdd-43ea-bcef-6db41f3906f6",
        "publishedAt": "2025-09-14T09:08:13.356523069Z",
        "updatedAt": "2025-09-14T10:06:30.730167416Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.gradion-ai/ipybox",
    "description": "An MCP server for sandboxed Python code execution with IPython and Docker, and file transfer.",
    "status": "active",
    "repository": {
      "url": "https://github.com/gradion-ai/ipybox",
      "source": "github"
    },
    "version": "0.6.5",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "ipybox",
        "version": "0.6.5",
        "runtimeHint": "uvx",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "description": "Required MCP server subcommand",
            "isRequired": true,
            "value": "mcp",
            "type": "positional"
          },
          {
            "description": "Directory allowed for host filesystem operations",
            "type": "named",
            "name": "--allowed-dir",
            "isRepeated": true,
            "valueHint": "directory_path"
          },
          {
            "description": "Domain, IP address, or CIDR range allowed for outbound network access",
            "type": "named",
            "name": "--allowed-domain",
            "isRepeated": true,
            "valueHint": "domain_or_ip"
          },
          {
            "description": "Docker image tag to use",
            "type": "named",
            "name": "--container-tag",
            "valueHint": "docker_image_tag"
          },
          {
            "description": "Environment variable for container (KEY=VALUE format)",
            "type": "named",
            "name": "--container-env-var",
            "isRepeated": true,
            "valueHint": "env_var"
          },
          {
            "description": "Path to file containing container environment variables",
            "type": "named",
            "name": "--container-env-file",
            "valueHint": "file_path"
          },
          {
            "description": "Bind mount for container (host_path:container_path format)",
            "type": "named",
            "name": "--container-bind",
            "isRepeated": true,
            "valueHint": "bind_mount"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "2310a088-c5ba-429e-84b2-82d92622023b",
        "versionId": "7ee8d214-db7f-450d-93c7-c941d8196e03",
        "publishedAt": "2025-09-14T09:27:10.026612503Z",
        "updatedAt": "2025-09-14T09:57:57.966657748Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.gradion-ai/ipybox",
    "description": "An MCP server for sandboxed Python code execution with IPython and Docker, and file transfer.",
    "status": "active",
    "repository": {
      "url": "https://github.com/gradion-ai/ipybox",
      "source": "github"
    },
    "version": "0.6.6",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "ipybox",
        "version": "0.6.6",
        "runtimeHint": "uvx",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "description": "Required MCP server subcommand",
            "isRequired": true,
            "value": "mcp",
            "type": "positional"
          },
          {
            "description": "Directory allowed for host filesystem operations",
            "type": "named",
            "name": "--allowed-dir",
            "isRepeated": true,
            "valueHint": "directory_path"
          },
          {
            "description": "Domain, IP address, or CIDR range allowed for outbound network access",
            "type": "named",
            "name": "--allowed-domain",
            "isRepeated": true,
            "valueHint": "domain_or_ip"
          },
          {
            "description": "Docker image tag to use",
            "type": "named",
            "name": "--container-tag",
            "valueHint": "docker_image_tag"
          },
          {
            "description": "Environment variable for container (KEY=VALUE format)",
            "type": "named",
            "name": "--container-env-var",
            "isRepeated": true,
            "valueHint": "env_var"
          },
          {
            "description": "Path to file containing container environment variables",
            "type": "named",
            "name": "--container-env-file",
            "valueHint": "file_path"
          },
          {
            "description": "Bind mount for container (host_path:container_path format)",
            "type": "named",
            "name": "--container-bind",
            "isRepeated": true,
            "valueHint": "bind_mount"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "2310a088-c5ba-429e-84b2-82d92622023b",
        "versionId": "aa8580fa-a837-4ca7-83b3-181bed182529",
        "publishedAt": "2025-09-14T09:57:57.864977026Z",
        "updatedAt": "2025-09-14T09:57:57.864977026Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.cyanheads/mcp-ts-template",
    "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
    "status": "active",
    "repository": {
      "url": "https://github.com/cyanheads/mcp-ts-template",
      "source": "github"
    },
    "version": "2.0.2",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-ts-template",
        "version": "2.0.1",
        "runtimeHint": "bun",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "value": "run",
            "type": "positional"
          },
          {
            "value": "start:stdio",
            "type": "positional"
          }
        ],
        "environmentVariables": [
          {
            "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
            "format": "string",
            "default": "info",
            "name": "MCP_LOG_LEVEL"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-ts-template",
        "version": "2.0.1",
        "runtimeHint": "bun",
        "transport": {
          "type": "streamable-http",
          "url": "http://localhost:3010/mcp"
        },
        "packageArguments": [
          {
            "value": "run",
            "type": "positional"
          },
          {
            "value": "start:http",
            "type": "positional"
          }
        ],
        "environmentVariables": [
          {
            "description": "The port to run the HTTP server on.",
            "format": "string",
            "default": "3010",
            "name": "MCP_HTTP_PORT"
          },
          {
            "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
            "format": "string",
            "default": "none",
            "name": "MCP_AUTH_MODE"
          },
          {
            "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
            "format": "string",
            "default": "info",
            "name": "MCP_LOG_LEVEL"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b1a7bd6b-21e2-4cd8-8531-37dddc5fa3f4",
        "versionId": "a0bcd673-292a-4ba3-8dbc-eaf2ff92e7fc",
        "publishedAt": "2025-09-14T10:06:30.723296411Z",
        "updatedAt": "2025-09-15T13:43:27.500265535Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.himorishige/hatago-mcp-hub",
    "description": "Unified MCP Hub for managing multiple Model Context Protocol servers",
    "status": "active",
    "repository": {
      "url": "https://github.com/himorishige/hatago-mcp-hub",
      "source": "github"
    },
    "version": "0.0.15",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@himorishige/hatago-mcp-hub",
        "version": "0.0.15",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "27980499-f44a-453a-8b3c-6450b5c0947b",
        "versionId": "2f4d81e5-6933-4117-882b-105c9f0e0da5",
        "publishedAt": "2025-09-14T10:38:58.007599947Z",
        "updatedAt": "2025-09-14T14:57:18.60721393Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/faithk7-gmail-mcp",
    "description": "Manage Gmail messages, threads, labels, drafts, and settings from your workflows. Send and organiz…",
    "status": "active",
    "repository": {
      "url": "https://github.com/faithk7/gmail-mcp",
      "source": "github"
    },
    "version": "1.7.4",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@faithk7/gmail-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "8b9fdc45-5231-49ec-8790-36c3708802e7",
        "versionId": "bf89e9e0-a6aa-417a-9295-ac03d9493dd3",
        "publishedAt": "2025-09-14T13:42:20.13425818Z",
        "updatedAt": "2025-09-14T13:42:20.13425818Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/BadRooBot-my_test_mcp",
    "description": "Get current weather for any city and create images from your prompts. Streamline planning, reports…",
    "status": "active",
    "repository": {
      "url": "https://github.com/BadRooBot/python_mcp",
      "source": "github"
    },
    "version": "1.14.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@BadRooBot/my_test_mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "16063a2a-8092-4380-90b1-aeeab2d44b8f",
        "versionId": "62033d66-b83d-4f62-a294-a2c212cb06e6",
        "publishedAt": "2025-09-14T14:25:46.09449626Z",
        "updatedAt": "2025-09-14T14:25:46.09449626Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.himorishige/hatago-mcp-hub",
    "description": "Unified MCP Hub for managing multiple Model Context Protocol servers",
    "status": "active",
    "repository": {
      "url": "https://github.com/himorishige/hatago-mcp-hub",
      "source": "github"
    },
    "version": "0.0.16",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@himorishige/hatago-mcp-hub",
        "version": "0.0.16",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "27980499-f44a-453a-8b3c-6450b5c0947b",
        "versionId": "cf1ae9e0-e572-47a9-961b-21c516bb7606",
        "publishedAt": "2025-09-14T14:57:18.596180971Z",
        "updatedAt": "2025-09-14T14:57:18.596180971Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.xorrkaz/cml-mcp",
    "description": "An MCP server that provides access to common Cisco Modeling Labs (CML) operations.",
    "status": "active",
    "repository": {
      "url": "https://github.com/xorrkaz/cml-mcp",
      "source": "github"
    },
    "version": "0.8.4",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "cml-mcp",
        "version": "0.8.4",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "URL for the CML Server",
            "isRequired": true,
            "format": "string",
            "name": "CML_URL"
          },
          {
            "description": "Username for CML authentication",
            "isRequired": true,
            "format": "string",
            "name": "CML_USERNAME"
          },
          {
            "description": "Password for CML authentication",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "CML_PASSWORD"
          },
          {
            "description": "Username for authentication to devices running in CML",
            "format": "string",
            "name": "PYATS_USERNAME"
          },
          {
            "description": "Password for authentication to devices running in CML",
            "format": "string",
            "isSecret": true,
            "name": "PYATS_PASSWORD"
          },
          {
            "description": "Enable password for authentication to devices running in CML",
            "format": "string",
            "isSecret": true,
            "name": "PYATS_AUTH_PASS"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "bd0c41d1-2209-4c3f-8602-d40900053217",
        "versionId": "add45668-2a60-42e1-aed8-09a9f957c589",
        "publishedAt": "2025-09-14T14:57:56.266090296Z",
        "updatedAt": "2025-09-19T15:45:51.337482291Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/Hint-Services-obsidian-github-mcp",
    "description": "Connect AI assistants to your GitHub-hosted Obsidian vault to seamlessly access, search, and analy…",
    "status": "active",
    "repository": {
      "url": "https://github.com/Hint-Services/obsidian-github-mcp",
      "source": "github"
    },
    "version": "0.4.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@Hint-Services/obsidian-github-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c9e39fea-5497-439f-aa32-70fe07bfeba4",
        "versionId": "86a34c13-67d8-4c36-9b29-47fee0e72635",
        "publishedAt": "2025-09-14T15:20:36.371442208Z",
        "updatedAt": "2025-09-14T15:20:36.371442208Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/aryankeluskar-poke-video-mcp",
    "description": "Search your Flashback video library with natural language to instantly find relevant moments. Get…",
    "status": "active",
    "repository": {
      "url": "https://github.com/aryankeluskar/poke-video-mcp",
      "source": "github"
    },
    "version": "1.14.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@aryankeluskar/poke-video-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "662c7dac-4f01-4eab-919b-8ba09361e5e4",
        "versionId": "a1ca2e8c-20e7-44f7-a0ad-eb2aef2faf78",
        "publishedAt": "2025-09-14T17:42:05.006813829Z",
        "updatedAt": "2025-09-14T17:42:05.006813829Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/BigVik193-reddit-user-mcp",
    "description": "Browse and manage Reddit posts, comments, and threads. Fetch user activity, explore hot/new/rising…",
    "status": "active",
    "repository": {
      "url": "https://github.com/BigVik193/reddit-user-mcp",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@BigVik193/reddit-user-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "e730a80f-42db-4f18-bed0-da3f63542ecf",
        "versionId": "80990c6c-9b96-4c8c-ad64-0cc19f78bc8d",
        "publishedAt": "2025-09-14T21:19:18.649080266Z",
        "updatedAt": "2025-09-14T21:19:18.649080266Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/BigVik193-reddit-ads-mcp-test",
    "description": "Manage Reddit advertising end-to-end: browse ad accounts and payment methods, and organize campaig…",
    "status": "active",
    "repository": {
      "url": "https://github.com/BigVik193/reddit-ads-mcp",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@BigVik193/reddit-ads-mcp-test/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "1e2003ca-fb08-47cb-965d-8dd591f715f7",
        "versionId": "36b0da99-4b6f-4d12-b60f-b66950d8600d",
        "publishedAt": "2025-09-14T21:38:57.98433852Z",
        "updatedAt": "2025-09-14T21:38:57.98433852Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/slhad-aha-mcp",
    "description": "A TypeScript MCP server for Home Assistant, enabling programmatic management of entities, automati…",
    "status": "active",
    "repository": {
      "url": "https://github.com/slhad/aha-mcp",
      "source": "github"
    },
    "version": "0.1.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@slhad/aha-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "cb323720-734b-4ab5-bfa8-ae77a814a1ba",
        "versionId": "dc884dc5-6e28-4fc8-9ae7-d3374c803288",
        "publishedAt": "2025-09-14T21:53:54.664725619Z",
        "updatedAt": "2025-09-14T21:53:54.664725619Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/BigVik193-reddit-ads-mcp",
    "description": "Manage Reddit advertising across accounts, campaigns, ad groups, posts, and ads. List accounts, fu…",
    "status": "active",
    "repository": {
      "url": "https://github.com/BigVik193/reddit-ads-mcp",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@BigVik193/reddit-ads-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a2b19133-66ab-4184-a31f-90b39887825f",
        "versionId": "455556b3-fce2-42d7-87f5-4fa1ed3db5e1",
        "publishedAt": "2025-09-14T22:00:51.726310747Z",
        "updatedAt": "2025-09-14T22:00:51.726310747Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/BigVik193-reddit-ads-mcp-api",
    "description": "Manage Reddit advertising end to end across accounts, funding methods, campaigns, ad groups, and a…",
    "status": "active",
    "repository": {
      "url": "https://github.com/BigVik193/reddit-ads-mcp-api",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@BigVik193/reddit-ads-mcp-api/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "5273d75a-196d-4940-a35f-22578fe839d5",
        "versionId": "92fb64f2-8006-4551-bb6d-ed2b87b65887",
        "publishedAt": "2025-09-14T22:40:30.852738154Z",
        "updatedAt": "2025-09-14T22:40:30.852738154Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.kkjdaniel/bgg-mcp",
    "description": "BoardGameGeek MCP server providing access to BGG API data through standardized tools",
    "status": "active",
    "repository": {
      "url": "https://github.com/kkjdaniel/bgg-mcp",
      "source": "github"
    },
    "version": "1.3.2",
    "packages": [
      {
        "registryType": "oci",
        "registryBaseUrl": "https://docker.io",
        "identifier": "kdaniel/bgg-mcp",
        "version": "1.3.2",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your BoardGameGeek username for references such as ME or MY in prompts",
            "format": "string",
            "name": "BGG_USERNAME"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "5a801dcc-96ae-47cf-ae55-0be14ade1d94",
        "versionId": "868fcbf0-a0d5-40fc-ab05-90150f408d12",
        "publishedAt": "2025-09-15T00:05:40.274408146Z",
        "updatedAt": "2025-09-16T01:51:47.036829827Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/cpretzinger-ai-assistant-simple",
    "description": "UPDATED 9/1/2025! NEW TOOLS! Use the Redis Stream tools with n8n MCP Client Node for use anywhere!…",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@cpretzinger/ai-assistant-simple/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "19ef2899-58cb-4184-bcd5-43f04db4cc85",
        "versionId": "51513004-36e9-4683-88d3-91221c43d2f3",
        "publishedAt": "2025-09-15T00:26:36.144735854Z",
        "updatedAt": "2025-09-15T00:26:36.144735854Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.yuna0x0/hackmd-mcp",
    "description": "A Model Context Protocol server for integrating HackMD's note-taking platform with AI assistants.",
    "status": "active",
    "repository": {
      "url": "https://github.com/yuna0x0/hackmd-mcp",
      "source": "github"
    },
    "version": "1.5.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "hackmd-mcp",
        "version": "1.5.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your HackMD API token for API authentication",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "HACKMD_API_TOKEN"
          },
          {
            "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
            "format": "string",
            "default": "https://api.hackmd.io/v1",
            "name": "HACKMD_API_URL"
          }
        ]
      },
      {
        "registryType": "oci",
        "registryBaseUrl": "https://docker.io",
        "identifier": "yuna0x0/hackmd-mcp",
        "version": "1.5.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your HackMD API token for API authentication",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "HACKMD_API_TOKEN"
          },
          {
            "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
            "format": "string",
            "default": "https://api.hackmd.io/v1",
            "name": "HACKMD_API_URL"
          }
        ]
      },
      {
        "registryType": "mcpb",
        "identifier": "https://github.com/yuna0x0/hackmd-mcp/releases/download/v1.5.0/hackmd-mcp-1.5.0.mcpb",
        "version": "1.5.0",
        "fileSha256": "6035e3082ffaf5627e1293a2c8a5d7f42496010431c9b026859dae3bbaa9ce38",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your HackMD API token for API authentication",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "HACKMD_API_TOKEN"
          },
          {
            "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
            "format": "string",
            "default": "https://api.hackmd.io/v1",
            "name": "HACKMD_API_URL"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "e679729a-74ca-4b31-a7f5-80cddd5fa24d",
        "versionId": "a793348b-c4ba-457a-aa80-6b7269adc4ce",
        "publishedAt": "2025-09-15T03:10:52.965842649Z",
        "updatedAt": "2025-09-21T14:08:58.295677993Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.shawndurrani/mcp-registry",
    "description": "Search the public MCP Registry; discover servers and copy SSE URLs.",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "0.1.0",
    "remotes": [
      {
        "type": "sse",
        "url": "https://mcp-registry.shawndurrani.ai/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "195ea7e4-8fce-4575-b2c1-8b266ba67149",
        "versionId": "8fc6704f-44b1-4c4b-9046-40bf54316419",
        "publishedAt": "2025-09-15T03:11:16.637453593Z",
        "updatedAt": "2025-09-15T04:01:11.068068105Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/yuna0x0-hackmd-mcp",
    "description": "Interact with your HackMD notes and teams seamlessly. Manage your notes, view reading history, and…",
    "status": "active",
    "repository": {
      "url": "https://github.com/yuna0x0/hackmd-mcp",
      "source": "github"
    },
    "version": "1.5.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@yuna0x0/hackmd-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a85afd07-0178-49e6-b962-178f24839d99",
        "versionId": "7a139c10-a255-4de8-a17a-0046fa3916ae",
        "publishedAt": "2025-09-15T03:33:42.649641272Z",
        "updatedAt": "2025-09-15T03:33:42.649641272Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/blbl147-xhs-mcp",
    "description": "搜索笔记、浏览首页推荐、查看笔记内容与评论，并发表你的评论。直接在工作流中与小红书内容互动，高效跟进话题。",
    "status": "active",
    "repository": {
      "url": "https://github.com/blbl147/xhs-mcp",
      "source": "github"
    },
    "version": "1.6.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@blbl147/xhs-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "3d8cb7cd-324f-44ef-a2a1-3ff6c505466a",
        "versionId": "5c567ecc-775d-4b1d-b990-1b14ec02ffe8",
        "publishedAt": "2025-09-15T03:34:24.676762516Z",
        "updatedAt": "2025-09-15T03:34:24.676762516Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.shawndurrani/mcp-registry",
    "description": "Search the public MCP Registry; discover servers and copy SSE URLs.",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "0.1.1",
    "remotes": [
      {
        "type": "sse",
        "url": "https://mcp-registry.shawndurrani.ai/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "195ea7e4-8fce-4575-b2c1-8b266ba67149",
        "versionId": "64bd1c4f-bbc1-4909-b49a-5d7f1d4efe33",
        "publishedAt": "2025-09-15T04:01:11.057921329Z",
        "updatedAt": "2025-09-15T04:20:53.740529471Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.shawndurrani/mcp-registry",
    "description": "Search the public MCP Registry; discover servers and copy SSE URLs.",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "0.1.2",
    "remotes": [
      {
        "type": "sse",
        "url": "https://mcp-registry.shawndurrani.ai/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "195ea7e4-8fce-4575-b2c1-8b266ba67149",
        "versionId": "ef42161e-89a0-45f2-8daf-3c1ffb9e9eaf",
        "publishedAt": "2025-09-15T04:20:53.726246251Z",
        "updatedAt": "2025-09-16T23:02:09.747665936Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.karanb192/reddit-buddy-mcp",
    "description": "Reddit MCP server - browse posts, search content, analyze users.",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.6-test.4",
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "9b13d420-4d1e-424e-9af2-bc9336c12892",
        "versionId": "65e223a4-8b55-42c4-91df-7b2460240d71",
        "publishedAt": "2025-09-15T06:34:25.789411405Z",
        "updatedAt": "2025-09-15T07:27:45.804628309Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.leshchenko1979/fast-mcp-telegram",
    "description": "Telegram MCP server with search and messaging capabilities",
    "status": "active",
    "repository": {
      "url": "https://github.com/leshchenko1979/fast-mcp-telegram",
      "source": "github"
    },
    "version": "0.4.5",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "fast-mcp-telegram",
        "version": "0.4.4",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Telegram API ID (from https://my.telegram.org/apps)",
            "isRequired": true,
            "name": "API_ID"
          },
          {
            "description": "Telegram API Hash (from https://my.telegram.org/apps)",
            "isRequired": true,
            "isSecret": true,
            "name": "API_HASH"
          },
          {
            "description": "Server mode: stdio (local), http-no-auth (dev), http-auth (prod)",
            "default": "stdio",
            "choices": [
              "stdio",
              "http-no-auth",
              "http-auth"
            ],
            "name": "SERVER_MODE"
          },
          {
            "description": "Custom session directory (defaults to ~/.config/fast-mcp-telegram/)",
            "name": "SESSION_DIR"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a1a4d761-5635-480b-b636-4b6fef3c9a77",
        "versionId": "40ab6512-9c86-4a99-b057-84887e27b0a2",
        "publishedAt": "2025-09-15T08:03:29.248076221Z",
        "updatedAt": "2025-09-17T14:08:48.78146357Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.cmpxchg16/mcp-ethical-hacking",
    "description": "An MCP server that provides LinkedIn & Reddit data",
    "status": "active",
    "repository": {
      "url": "https://github.com/cmpxchg16/mcp-ethical-hacking",
      "source": "github"
    },
    "version": "1.1.0",
    "packages": [
      {
        "registryType": "mcpb",
        "identifier": "https://github.com/cmpxchg16/mcp-ethical-hacking/releases/download/v1.0.0/server.mcpb",
        "version": "1.1.0",
        "fileSha256": "fe333e598595000ae021bd27117db32ec69af6987f507ba7a63c90638ff633ce",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "ebe9848e-d092-4007-88bc-09b67823681b",
        "versionId": "08854c3d-f63f-4e09-b762-3703e6af752b",
        "publishedAt": "2025-09-15T11:11:03.268175466Z",
        "updatedAt": "2025-09-15T12:55:00.139476327Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.snyk/mcp",
    "description": "Easily find and fix security issues in your applications leveraging Snyk platform capabilities.",
    "status": "active",
    "repository": {
      "url": "https://github.com/snyk/snyk-ls",
      "source": "github",
      "subfolder": "mcp_extension"
    },
    "version": "1.1299.1",
    "packages": [
      {
        "registryType": "npm",
        "identifier": "snyk",
        "version": "1.1299.1",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "value": "mcp",
            "type": "positional"
          },
          {
            "value": "stdio",
            "type": "named",
            "name": "-t"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "1302015a-5b8c-4b50-ab63-58c4c04648d3",
        "versionId": "1208b4cd-51b9-4f90-a3d0-520ed037bc4d",
        "publishedAt": "2025-09-24T13:33:59.9152605Z",
        "updatedAt": "2025-09-24T13:33:59.9152605Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/neverinfamous-memory-journal-mcp",
    "description": "A MCP server built for developers enabling Git based project management with project and personal…",
    "status": "active",
    "repository": {
      "url": "https://github.com/neverinfamous/memory-journal-mcp",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@neverinfamous/memory-journal-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "04da7ca4-7f41-4cdb-98e5-12c4f7a5bd12",
        "versionId": "cf109d3d-025a-4fad-82ce-701c2741df50",
        "publishedAt": "2025-09-15T03:39:21.908030323Z",
        "updatedAt": "2025-09-15T03:39:21.908030323Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.dynatrace-oss/Dynatrace-mcp",
    "description": "Model Context Protocol server for Dynatrace - access logs, events, metrics from Dynatrace via MCP.",
    "status": "active",
    "repository": {
      "url": "https://github.com/dynatrace-oss/Dynatrace-mcp",
      "source": "github"
    },
    "version": "0.6.0-rc.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@dynatrace-oss/dynatrace-mcp-server",
        "version": "0.6.0-rc.1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your Dynatrace Platform Token",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "DT_PLATFORM_TOKEN"
          },
          {
            "description": "The URL of your Dynatrace environment (e.g. 'https://abc12345.apps.dynatrace.com')",
            "format": "string",
            "name": "DT_ENVIRONMENT"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "d7b297de-f1e3-4ea7-979e-291bff370620",
        "versionId": "b5557497-4ef1-4ae1-a7af-08ebce3f5870",
        "publishedAt": "2025-09-15T11:13:59.272010592Z",
        "updatedAt": "2025-09-18T08:07:03.507178909Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.jepto/mcp",
    "description": "Jepto MCP server that provides access to client knowledgebase & analytics for connected data sources",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.jepto.com"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "65f5a97d-f50e-40b9-a13f-ca1c7f16f262",
        "versionId": "06fd2413-e1aa-4b5e-83c1-6dbfdba84c74",
        "publishedAt": "2025-09-15T11:36:02.956033052Z",
        "updatedAt": "2025-09-15T11:36:02.956033052Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/ctaylor86-mcp-video-download-server",
    "description": "Connect your video workflows to cloud storage. Organize and access video assets across projects wi…",
    "status": "active",
    "repository": {
      "url": "https://github.com/ctaylor86/mcp-video-download-server",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@ctaylor86/mcp-video-download-server/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "3322d4c3-80c5-4fce-b75d-828287df297f",
        "versionId": "6f36c75d-1776-443a-b9d9-ed6f45dd1f88",
        "publishedAt": "2025-09-15T11:45:18.173946266Z",
        "updatedAt": "2025-09-15T11:45:18.173946266Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.teamwork/mcp",
    "description": "The Teamwork.com official MCP server helps teams efficiently manage client projects with AI.",
    "status": "active",
    "repository": {
      "url": "https://github.com/teamwork/mcp",
      "source": "github"
    },
    "version": "1.3.0",
    "packages": [
      {
        "registryType": "oci",
        "registryBaseUrl": "https://docker.io",
        "identifier": "teamwork/mcp",
        "version": "v1.3.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "TW_MCP_BEARER_TOKEN"
          },
          {
            "description": "Choose log output format between 'text' or 'json'. Default is 'text'.",
            "format": "string",
            "name": "TW_MCP_LOG_FORMAT"
          },
          {
            "description": "Choose log level between 'debug', 'info', 'warn' or 'error'. Default is 'info'.",
            "format": "string",
            "name": "TW_MCP_LOG_LEVEL"
          }
        ]
      }
    ],
    "remotes": [
      {
        "type": "sse",
        "url": "https://mcp.ai.teamwork.com",
        "headers": [
          {
            "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
            "isRequired": true,
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      },
      {
        "type": "streamable-http",
        "url": "https://mcp.ai.teamwork.com",
        "headers": [
          {
            "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
            "isRequired": true,
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "8e1daf12-8a74-4718-93ec-86b05728241d",
        "versionId": "498f3840-d628-416f-bccd-db23adaf4700",
        "publishedAt": "2025-09-15T12:27:37.668500509Z",
        "updatedAt": "2025-09-17T18:13:49.787673531Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.antvis/mcp-server-chart",
    "description": "A Model Context Protocol server for generating charts using AntV.",
    "status": "active",
    "repository": {
      "url": "https://github.com/antvis/mcp-server-chart",
      "source": "github"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@antv/mcp-server-chart",
        "version": "0.9.0-beta.1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Custom chart generation service URL for private deployment",
            "format": "string",
            "default": "https://antv-studio.alipay.com/api/gpt-vis",
            "name": "VIS_REQUEST_SERVER"
          },
          {
            "description": "Service identifier for chart generation records",
            "format": "string",
            "isSecret": true,
            "name": "SERVICE_ID"
          },
          {
            "description": "Comma-separated list of tool names to disable",
            "format": "string",
            "name": "DISABLED_TOOLS"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "48c5b241-51ea-42a7-88a7-5c92f6fd3f7a",
        "versionId": "6c33e594-e211-4c48-94d6-2b7d2d1b834d",
        "publishedAt": "2025-09-15T12:44:26.492264006Z",
        "updatedAt": "2025-09-15T12:44:26.492264006Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.cmpxchg16/mcp-ethical-hacking",
    "description": "An MCP server that provides LinkedIn & Reddit data",
    "status": "active",
    "repository": {
      "url": "https://github.com/cmpxchg16/mcp-ethical-hacking",
      "source": "github"
    },
    "version": "1.2.0",
    "packages": [
      {
        "registryType": "mcpb",
        "identifier": "https://github.com/cmpxchg16/mcp-ethical-hacking/releases/download/v1.0.0/server.mcpb",
        "version": "1.2.0",
        "fileSha256": "294365cbf53a602df093e3757e6a31cca6c50dd6af343fefa4a528ab869d24a0",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "ebe9848e-d092-4007-88bc-09b67823681b",
        "versionId": "fa434ba2-0704-4420-859e-2a5aa9fa14d9",
        "publishedAt": "2025-09-15T12:55:00.133512333Z",
        "updatedAt": "2025-09-15T12:56:52.963416323Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.cmpxchg16/mcp-ethical-hacking",
    "description": "An MCP server that provides LinkedIn & Reddit data",
    "status": "active",
    "repository": {
      "url": "https://github.com/cmpxchg16/mcp-ethical-hacking",
      "source": "github"
    },
    "version": "1.3.0",
    "packages": [
      {
        "registryType": "mcpb",
        "identifier": "https://github.com/cmpxchg16/mcp-ethical-hacking/releases/download/v1.3.0/server.mcpb",
        "version": "1.3.0",
        "fileSha256": "294365cbf53a602df093e3757e6a31cca6c50dd6af343fefa4a528ab869d24a0",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "ebe9848e-d092-4007-88bc-09b67823681b",
        "versionId": "3ba865b1-cea7-4427-851b-f5ab05a6ace1",
        "publishedAt": "2025-09-15T12:56:52.957978875Z",
        "updatedAt": "2025-09-16T04:55:02.308871938Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.cyanheads/git-mcp-server",
    "description": "Comprehensive Git MCP server enabling native git tools including clone, commit, worktree, & more.",
    "status": "active",
    "repository": {
      "url": "https://github.com/cyanheads/git-mcp-server",
      "source": "github"
    },
    "version": "2.3.3",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@cyanheads/git-mcp-server",
        "version": "2.3.3",
        "runtimeHint": "node",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "value": "dist/index.js",
            "type": "positional"
          }
        ],
        "environmentVariables": [
          {
            "description": "Specifies the transport mechanism for the server.",
            "isRequired": true,
            "format": "string",
            "default": "stdio",
            "name": "MCP_TRANSPORT_TYPE"
          },
          {
            "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
            "format": "string",
            "default": "info",
            "name": "MCP_LOG_LEVEL"
          },
          {
            "description": "Set to 'true' to enable GPG/SSH signing for commits made via the git_commit tool.",
            "format": "string",
            "default": "false",
            "name": "GIT_SIGN_COMMITS"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@cyanheads/git-mcp-server",
        "version": "2.3.3",
        "runtimeHint": "node",
        "transport": {
          "type": "streamable-http",
          "url": "http://127.0.0.1:3015/mcp"
        },
        "packageArguments": [
          {
            "value": "dist/index.js",
            "type": "positional"
          }
        ],
        "environmentVariables": [
          {
            "description": "Specifies the transport mechanism for the server.",
            "isRequired": true,
            "format": "string",
            "default": "http",
            "name": "MCP_TRANSPORT_TYPE"
          },
          {
            "description": "The port to run the HTTP server on.",
            "format": "string",
            "default": "3015",
            "name": "MCP_HTTP_PORT"
          },
          {
            "description": "The host interface for the HTTP server.",
            "format": "string",
            "default": "127.0.0.1",
            "name": "MCP_HTTP_HOST"
          },
          {
            "description": "The HTTP endpoint path for MCP requests.",
            "format": "string",
            "default": "/mcp",
            "name": "MCP_HTTP_ENDPOINT_PATH"
          },
          {
            "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
            "format": "string",
            "default": "none",
            "name": "MCP_AUTH_STRATEGY"
          },
          {
            "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
            "format": "string",
            "default": "info",
            "name": "MCP_LOG_LEVEL"
          },
          {
            "description": "Set to 'true' to enable GPG/SSH signing for commits made via the git_commit tool.",
            "format": "string",
            "default": "false",
            "name": "GIT_SIGN_COMMITS"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "69052f97-2b99-4ab4-9d81-0de12a92b966",
        "versionId": "ab48df60-848e-4f96-b5d0-9fa505deb331",
        "publishedAt": "2025-09-15T12:59:07.492836786Z",
        "updatedAt": "2025-09-26T16:34:39.113582577Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.cyanheads/pubmed-mcp-server",
    "description": "Comprehensive PubMed MCP Server to search, retrieve, and analyze biomedical literature from NCBI.",
    "status": "active",
    "repository": {
      "url": "https://github.com/cyanheads/pubmed-mcp-server",
      "source": "github"
    },
    "version": "1.4.4",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@cyanheads/pubmed-mcp-server",
        "version": "1.4.4",
        "runtimeHint": "node",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "value": "dist/index.js",
            "type": "positional"
          }
        ],
        "environmentVariables": [
          {
            "description": "Specifies the transport mechanism for the server.",
            "isRequired": true,
            "format": "string",
            "default": "stdio",
            "name": "MCP_TRANSPORT_TYPE"
          },
          {
            "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
            "format": "string",
            "default": "info",
            "name": "MCP_LOG_LEVEL"
          },
          {
            "description": "Your NCBI API key for higher rate limits.",
            "format": "string",
            "name": "NCBI_API_KEY"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@cyanheads/pubmed-mcp-server",
        "version": "1.4.4",
        "runtimeHint": "node",
        "transport": {
          "type": "streamable-http",
          "url": "http://localhost:3017/mcp"
        },
        "packageArguments": [
          {
            "value": "dist/index.js",
            "type": "positional"
          }
        ],
        "environmentVariables": [
          {
            "description": "Specifies the transport mechanism for the server.",
            "isRequired": true,
            "format": "string",
            "default": "http",
            "name": "MCP_TRANSPORT_TYPE"
          },
          {
            "description": "The host for the HTTP server.",
            "format": "string",
            "default": "localhost",
            "name": "MCP_HTTP_HOST"
          },
          {
            "description": "The port for the HTTP server.",
            "format": "string",
            "default": "3017",
            "name": "MCP_HTTP_PORT"
          },
          {
            "description": "The endpoint path for MCP requests.",
            "format": "string",
            "default": "/mcp",
            "name": "MCP_HTTP_ENDPOINT_PATH"
          },
          {
            "description": "Authentication mode: 'none', 'jwt', or 'oauth'.",
            "format": "string",
            "default": "none",
            "name": "MCP_AUTH_MODE"
          },
          {
            "description": "Sets the minimum log level (e.g., 'debug', 'info', 'warn').",
            "format": "string",
            "default": "info",
            "name": "MCP_LOG_LEVEL"
          },
          {
            "description": "Your NCBI API key for higher rate limits.",
            "format": "string",
            "name": "NCBI_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "3330804b-b80f-4333-93ae-c578e7848b26",
        "versionId": "cee0c5a8-9a97-455d-91c4-14135d905e43",
        "publishedAt": "2025-09-15T13:34:11.145838692Z",
        "updatedAt": "2025-09-15T13:34:11.145838692Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.cyanheads/mcp-ts-template",
    "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
    "status": "active",
    "repository": {
      "url": "https://github.com/cyanheads/mcp-ts-template",
      "source": "github"
    },
    "version": "2.0.3",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-ts-template",
        "version": "2.0.2",
        "runtimeHint": "bun",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "value": "run",
            "type": "positional"
          },
          {
            "value": "start:stdio",
            "type": "positional"
          }
        ],
        "environmentVariables": [
          {
            "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
            "format": "string",
            "default": "info",
            "name": "MCP_LOG_LEVEL"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-ts-template",
        "version": "2.0.2",
        "runtimeHint": "bun",
        "transport": {
          "type": "streamable-http",
          "url": "http://localhost:3010/mcp"
        },
        "packageArguments": [
          {
            "value": "run",
            "type": "positional"
          },
          {
            "value": "start:http",
            "type": "positional"
          }
        ],
        "environmentVariables": [
          {
            "description": "The port to run the HTTP server on.",
            "format": "string",
            "default": "3010",
            "name": "MCP_HTTP_PORT"
          },
          {
            "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
            "format": "string",
            "default": "none",
            "name": "MCP_AUTH_MODE"
          },
          {
            "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
            "format": "string",
            "default": "info",
            "name": "MCP_LOG_LEVEL"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b1a7bd6b-21e2-4cd8-8531-37dddc5fa3f4",
        "versionId": "93bdbdfb-3c54-4757-bebf-3a0041945d68",
        "publishedAt": "2025-09-15T13:43:27.494335026Z",
        "updatedAt": "2025-09-26T00:34:47.321289042Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.cr7258/elasticsearch-mcp-server",
    "description": "MCP server for interacting with Elasticsearch",
    "status": "active",
    "repository": {
      "url": "https://github.com/cr7258/elasticsearch-mcp-server",
      "source": "github"
    },
    "version": "2.0.15",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "elasticsearch-mcp-server",
        "version": "2.0.15",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Comma-separated list of Elasticsearch hosts (e.g., https://localhost:9200)",
            "format": "string",
            "default": "https://localhost:9200",
            "name": "ELASTICSEARCH_HOSTS"
          },
          {
            "description": "API key for Elasticsearch or Elastic Cloud authentication (recommended)",
            "format": "string",
            "isSecret": true,
            "name": "ELASTICSEARCH_API_KEY"
          },
          {
            "description": "Username for basic authentication (alternative to API key)",
            "format": "string",
            "name": "ELASTICSEARCH_USERNAME"
          },
          {
            "description": "Password for basic authentication (used with ELASTICSEARCH_USERNAME)",
            "format": "string",
            "isSecret": true,
            "name": "ELASTICSEARCH_PASSWORD"
          },
          {
            "description": "Whether to verify SSL certificates (true/false)",
            "format": "boolean",
            "default": "false",
            "name": "ELASTICSEARCH_VERIFY_CERTS"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "736191c3-915d-4643-b4c0-6dda9bef9bff",
        "versionId": "302ebbc8-8b7f-4952-9706-7ad2ade5fd38",
        "publishedAt": "2025-09-15T14:34:34.758628029Z",
        "updatedAt": "2025-09-15T14:34:34.758628029Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.ritzademo/acme-todo",
    "description": "An MCP server for a simple todo list",
    "status": "active",
    "repository": {
      "url": "https://github.com/ritza-co/acme-todo",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.ritzademo.com/mcp/ritza-rzx-our91"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "56249c55-9d56-473d-a5ba-9ccc9c956d5d",
        "versionId": "86d5e960-a135-427a-ab53-046209080b2e",
        "publishedAt": "2025-09-15T16:48:08.379170462Z",
        "updatedAt": "2025-09-15T16:48:08.379170462Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/MetehanGZL-pokemcp",
    "description": "Provide detailed Pokémon data and information through a standardized MCP interface. Enable LLMs an…",
    "status": "active",
    "repository": {
      "url": "https://github.com/MetehanGZL/PokeMCP",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@MetehanGZL/pokemcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "67952a30-96dc-43c9-95d0-f4e9604d8863",
        "versionId": "ace42071-ecbd-472a-9738-a4701d427aef",
        "publishedAt": "2025-09-15T17:56:16.252320146Z",
        "updatedAt": "2025-09-15T17:56:16.252320146Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.supabase/mcp",
    "description": "MCP server for interacting with the Supabase platform",
    "status": "active",
    "repository": {
      "url": "https://github.com/supabase-community/supabase-mcp",
      "source": "github",
      "subfolder": "packages/mcp-server-supabase"
    },
    "version": "0.5.4",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@supabase/mcp-server-supabase",
        "version": "0.5.4",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        },
        "runtimeArguments": [
          {
            "description": "Supabase project reference ID",
            "format": "string",
            "type": "named",
            "name": "--project-ref"
          },
          {
            "description": "Enable read-only mode",
            "format": "boolean",
            "type": "named",
            "name": "--read-only"
          },
          {
            "description": "Comma-separated list of features to enable",
            "format": "string",
            "type": "named",
            "name": "--features"
          },
          {
            "description": "Custom API URL",
            "format": "string",
            "type": "named",
            "name": "--api-url"
          }
        ],
        "environmentVariables": [
          {
            "description": "Personal access token for Supabase API",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "SUPABASE_ACCESS_TOKEN"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b7c21a79-6a4a-42e2-a194-944a1d1ed9f7",
        "versionId": "1f03f6b8-4a9d-45b3-9f7c-704390897d0b",
        "publishedAt": "2025-09-15T20:35:36.816470801Z",
        "updatedAt": "2025-09-18T21:32:17.517420898Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.agilitycms/mcp-server",
    "description": "An MCP server that provides access to Agility CMS.  See https://mcp.agilitycms.com for more details.",
    "status": "active",
    "repository": {
      "url": "https://github.com/agility/agility-mcp-server",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.agilitycms.com/api/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "41d78708-a8ad-459b-9dd4-d7fd1824c6bc",
        "versionId": "c0d0e773-8e78-437f-a9d5-b417e26aa3fa",
        "publishedAt": "2025-09-15T21:00:43.348780132Z",
        "updatedAt": "2025-09-15T21:00:43.348780132Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.SnowLeopard-AI/bigquery-mcp",
    "description": "A SnowLeopardAI-managed MCP server that provides access to Google BigQuery data.",
    "status": "active",
    "repository": {
      "url": "https://github.com/SnowLeopard-AI/bigquery-mcp",
      "source": "github"
    },
    "version": "0.1.0",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "sl-bigquery-mcp",
        "version": "0.1.8",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "891420b0-24b0-4cce-86d4-5ac33d255aa4",
        "versionId": "fc1a3aad-1f9b-4a33-9a96-3f19509d4419",
        "publishedAt": "2025-09-15T22:35:28.327511086Z",
        "updatedAt": "2025-09-15T22:35:28.327511086Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.getclockwise/clockwise-mcp",
    "description": "An MCP server for managing your calendar, via Clockwise",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.getclockwise.com/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "0f879882-e77f-4b37-8fda-ed0a58934871",
        "versionId": "b3c4cf45-bfc9-44b2-8b0f-d2b07f801567",
        "publishedAt": "2025-09-15T23:12:29.67036488Z",
        "updatedAt": "2025-09-15T23:12:29.67036488Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/kkjdaniel-bgg-mcp",
    "description": "BGG MCP provides access to the BoardGameGeek API through the Model Context Protocol, enabling retr…",
    "status": "active",
    "repository": {
      "url": "https://github.com/kkjdaniel/bgg-mcp",
      "source": "github"
    },
    "version": "1.3.2",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@kkjdaniel/bgg-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "6ddafd3a-8aa7-4df5-ae80-3f94e86d2d05",
        "versionId": "f25aa5fa-263a-4662-885d-35f2ea58fcb5",
        "publishedAt": "2025-09-16T00:14:29.642755949Z",
        "updatedAt": "2025-09-16T00:14:29.642755949Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/lineex-pubmed-mcp-smithery",
    "description": "Search PubMed with precision using keyword and journal filters and smart sorting. Uncover MeSH ter…",
    "status": "active",
    "repository": {
      "url": "https://github.com/lineex/pubmed-mcp-smithery",
      "source": "github"
    },
    "version": "1.14.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@lineex/pubmed-mcp-smithery/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c6aea640-d696-4be9-b86f-5e789e46d166",
        "versionId": "c477c6e2-388e-43a1-892d-250cbf90120c",
        "publishedAt": "2025-09-16T01:10:37.458958533Z",
        "updatedAt": "2025-09-16T01:10:37.458958533Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.kkjdaniel/bgg-mcp",
    "description": "BoardGameGeek MCP server providing access to BGG API data through standardized tools",
    "status": "active",
    "repository": {
      "url": "https://github.com/kkjdaniel/bgg-mcp",
      "source": "github"
    },
    "version": "1.4.0",
    "packages": [
      {
        "registryType": "oci",
        "registryBaseUrl": "https://docker.io",
        "identifier": "kdaniel/bgg-mcp",
        "version": "1.4.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your BoardGameGeek username for references such as ME or MY in prompts",
            "format": "string",
            "name": "BGG_USERNAME"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "5a801dcc-96ae-47cf-ae55-0be14ade1d94",
        "versionId": "dcdafe42-5317-4d98-bdaf-c66382fb0d7d",
        "publishedAt": "2025-09-16T01:51:47.021731658Z",
        "updatedAt": "2025-09-16T01:51:47.021731658Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.cmpxchg16/mcp-ethical-hacking",
    "description": "An MCP server that provides LinkedIn & Reddit data",
    "status": "active",
    "repository": {
      "url": "https://github.com/cmpxchg16/mcp-ethical-hacking",
      "source": "github"
    },
    "version": "1.4.0",
    "packages": [
      {
        "registryType": "mcpb",
        "identifier": "https://github.com/cmpxchg16/mcp-ethical-hacking/releases/download/v1.4.0/server.mcpb",
        "version": "1.4.0",
        "fileSha256": "5e4f25e7f21b62974861f055cff90c1aef80d3b8bd1f32e05db744d1cbd67605",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "ebe9848e-d092-4007-88bc-09b67823681b",
        "versionId": "5197fe61-3f7f-45dd-9c93-2f43dd37787d",
        "publishedAt": "2025-09-16T04:55:02.185050652Z",
        "updatedAt": "2025-09-16T04:55:02.185050652Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/ImRonAI-mcp-server-browserbase",
    "description": "Automate cloud browsers to navigate websites, interact with elements, and extract structured data.…",
    "status": "active",
    "repository": {
      "url": "https://github.com/ImRonAI/mcp-server-browserbase",
      "source": "github"
    },
    "version": "2.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@ImRonAI/mcp-server-browserbase/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "8295f72e-c2f2-4629-b6cb-15ce0b6ee3c8",
        "versionId": "31e8d9b1-e043-4594-8ccc-6cd7b829fa6c",
        "publishedAt": "2025-09-16T06:05:33.453618608Z",
        "updatedAt": "2025-09-16T06:05:33.453618608Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/Kim-soung-won-mcp-smithery-exam",
    "description": "Craft quick, personalized greetings by name. Generate ready-to-use greeting prompts for a consiste…",
    "status": "active",
    "repository": {
      "url": "https://github.com/Kim-soung-won/mcp-smithery-exam",
      "source": "github"
    },
    "version": "1.14.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@Kim-soung-won/mcp-smithery-exam/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "cd52d87a-57d0-4124-b420-78052f5e723e",
        "versionId": "61190782-7594-4290-a23b-555aeabbf9fb",
        "publishedAt": "2025-09-16T06:32:38.498461921Z",
        "updatedAt": "2025-09-16T06:32:38.498461921Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.p1va/symbols",
    "description": "MCP server to read, inspect and troubleshoot codebase symbols",
    "status": "active",
    "repository": {
      "url": "https://github.com/p1va/symbols",
      "source": "github"
    },
    "version": "0.0.11",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@p1va/symbols",
        "version": "0.0.11",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "d827a965-33bc-4262-87df-98ca6eac9a12",
        "versionId": "4a8da115-afef-47ee-af61-c4fbd1c6b0c4",
        "publishedAt": "2025-09-16T07:43:34.104606016Z",
        "updatedAt": "2025-09-16T07:43:34.104606016Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.agentailor/slimcontext-mcp-server",
    "description": "MCP Server for SlimContext - AI chat history compression tools",
    "status": "active",
    "repository": {
      "url": "https://github.com/agentailor/slimcontext-mcp-server",
      "source": "github"
    },
    "version": "0.1.2",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "slimcontext-mcp-server",
        "version": "0.1.2",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "e694708b-fee1-4070-b8cd-e008bcc5bd3e",
        "versionId": "92f5d42d-76de-461d-bbc0-51316831f6a9",
        "publishedAt": "2025-09-16T07:56:23.181995741Z",
        "updatedAt": "2025-09-16T07:56:23.181995741Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.p1va/symbols",
    "description": "MCP server to read, inspect and troubleshoot codebase symbols",
    "status": "active",
    "repository": {
      "url": "https://github.com/p1va/symbols",
      "source": "github"
    },
    "version": "0.0.12",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@p1va/symbols",
        "version": "0.0.12",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "d827a965-33bc-4262-87df-98ca6eac9a12",
        "versionId": "2f7c96af-4749-405b-9721-8e2651ff347b",
        "publishedAt": "2025-09-16T10:02:42.424531594Z",
        "updatedAt": "2025-09-16T10:02:42.424531594Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/yuhuison-mediawiki-mcp-server-auth",
    "description": "Connect to your MediaWiki using simple credentials and manage content without OAuth. Search, read,…",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@yuhuison/mediawiki-mcp-server-auth/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "0cc8d877-87d6-432c-9e4e-26ac831de2a8",
        "versionId": "576220c7-0d51-4d02-bcc6-26c7917a366f",
        "publishedAt": "2025-09-16T11:19:24.929803426Z",
        "updatedAt": "2025-09-16T11:19:24.929803426Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.p1va/symbols",
    "description": "MCP server to read, inspect and troubleshoot codebase symbols",
    "status": "active",
    "repository": {
      "url": "https://github.com/p1va/symbols",
      "source": "github"
    },
    "version": "0.0.13",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@p1va/symbols",
        "version": "0.0.13",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "d827a965-33bc-4262-87df-98ca6eac9a12",
        "versionId": "40fe13aa-29cb-4524-9230-6878bfde553b",
        "publishedAt": "2025-09-16T12:14:32.125980136Z",
        "updatedAt": "2025-09-16T12:14:32.125980136Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/IlyaGusev-academia_mcp",
    "description": "Search arXiv and ACL Anthology, retrieve citations and references, and browse web sources to accel…",
    "status": "active",
    "repository": {
      "url": "https://github.com/IlyaGusev/academia_mcp",
      "source": "github"
    },
    "version": "1.14.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@IlyaGusev/academia_mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "d90a11a0-b7d5-4ce7-a2a0-9ff324c32d15",
        "versionId": "99be110f-d865-4733-88b2-97fc2f9750de",
        "publishedAt": "2025-09-16T12:14:42.162775887Z",
        "updatedAt": "2025-09-16T12:14:42.162775887Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.containers/kubernetes-mcp-server",
    "description": "An MCP server that provides [describe what your server does]",
    "status": "active",
    "repository": {
      "url": "https://github.com/containers/kubernetes-mcp-server",
      "source": "github"
    },
    "version": "1.0.0",
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "bcee55b5-2316-4f92-8b66-db907496714b",
        "versionId": "8858e484-2e5e-4166-b39f-7f1002fa27a4",
        "publishedAt": "2025-09-16T13:06:55.742929857Z",
        "updatedAt": "2025-09-16T13:06:55.742929857Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.containers/kubernetes-mcp-server",
    "description": "A Model Context Protocol (MCP) server for Kubernetes and OpenShift",
    "status": "active",
    "repository": {
      "url": "https://github.com/containers/kubernetes-mcp-server",
      "source": "github"
    },
    "version": "0.0.50",
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "bcee55b5-2316-4f92-8b66-db907496714b",
        "versionId": "00636d73-03c1-4107-a591-84b271cd1646",
        "publishedAt": "2025-09-16T13:14:05.094878294Z",
        "updatedAt": "2025-09-16T13:14:05.094878294Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.nerfels/mind-map",
    "description": "Experimental code intelligence platform for Claude Code with AST parsing and context analysis",
    "status": "active",
    "repository": {
      "url": "https://github.com/nerfels/mind-map",
      "source": "github"
    },
    "version": "1.12.13",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mind-map-mcp",
        "version": "1.12.13",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Project root directory for MCP to analyze (optional - uses current working directory if not specified)",
            "format": "string",
            "name": "MCP_PROJECT_ROOT"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "adf4c7de-c80e-4ddf-8d60-178266570f18",
        "versionId": "3b9a8107-0e4f-4b30-b1af-004ba2e5db16",
        "publishedAt": "2025-09-16T16:29:26.08179909Z",
        "updatedAt": "2025-09-16T16:29:26.08179909Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.dba-i/mssql-dba",
    "description": "An MCP server that provides [describe what your server does]",
    "status": "active",
    "repository": {
      "url": "https://github.com/dba-i/mssql-dba",
      "source": "github"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mssql-dba",
        "version": "1.0.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your API key for the service",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "YOUR_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "faf601ec-41a1-4c62-af8d-b81461383e9c",
        "versionId": "27519bf0-ff62-4be2-8806-6d0c9c7cd079",
        "publishedAt": "2025-09-16T16:43:44.243434061Z",
        "updatedAt": "2025-09-16T16:43:44.243434061Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/browserbasehq-mcp-browserbase",
    "description": "Provides cloud browser automation capabilities using Stagehand and Browserbase, enabling LLMs to i…",
    "status": "active",
    "repository": {
      "url": "https://github.com/browserbase/mcp-server-browserbase",
      "source": "github"
    },
    "version": "2.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@browserbasehq/mcp-browserbase/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "1c32a561-afc2-44be-bedf-1618da2447fe",
        "versionId": "b35a6287-b91e-4a86-9eaa-776fc7d272dc",
        "publishedAt": "2025-09-16T17:17:18.587291714Z",
        "updatedAt": "2025-09-16T17:17:18.587291714Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.lapfelix/xcodemcp",
    "description": "Control Xcode directly via JXA for build, test, debug operations with XCLogParser integration",
    "status": "active",
    "repository": {
      "url": "https://github.com/lapfelix/XcodeMCP",
      "source": "github"
    },
    "version": "2.1.2",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "xcodemcp",
        "version": "2.1.2",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "f3976f2e-7a54-4d1f-97de-4bce9fb901a2",
        "versionId": "3c4fd086-a0bc-46f9-9f71-cb3709dacf33",
        "publishedAt": "2025-09-16T18:37:57.587730906Z",
        "updatedAt": "2025-09-18T03:19:27.899606094Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/Kryptoskatt-mcp-server",
    "description": "Enable AI assistants to interact seamlessly with the DefiLlama API by translating MCP tool calls i…",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "0.1.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@Kryptoskatt/mcp-server/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "99e3a9ea-0f34-4ae6-acfc-0fb3e821b058",
        "versionId": "2b930666-203a-431f-838e-34c408c93126",
        "publishedAt": "2025-09-16T19:42:06.349266762Z",
        "updatedAt": "2025-09-17T10:41:17.53656895Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/lukaskostka99-marketing-miner-mcp",
    "description": "Discover high-impact keyword ideas across Central and Eastern European and English markets. Analyz…",
    "status": "active",
    "repository": {
      "url": "https://github.com/lukaskostka99/marketing-miner-mcp",
      "source": "github"
    },
    "version": "1.14.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@lukaskostka99/marketing-miner-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "7232380d-710a-45a3-b503-8c3e86cf7414",
        "versionId": "8438de75-ed65-4fbe-9e3e-9570a9f8370d",
        "publishedAt": "2025-09-16T19:53:18.718565229Z",
        "updatedAt": "2025-09-16T19:53:18.718565229Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.explorium/mcp-explorium",
    "description": "Access live company and contact data from Explorium's AgentSource B2B platform.",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "sse",
        "url": "https://mcp-github-registry.explorium.ai/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "95e159dd-b738-4281-bd49-9935baf3a10f",
        "versionId": "6ad19c69-c96e-4efa-ad6f-4c347f477dd5",
        "publishedAt": "2025-09-16T21:06:15.352228609Z",
        "updatedAt": "2025-09-16T21:06:15.352228609Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "so.jinko/jinko-mcp",
    "description": "Jinko is a travel MCP server that provides hotel search and booking capabilities.",
    "status": "active",
    "repository": {
      "url": "https://github.com/jinkoso/jinko-mcp",
      "source": "github"
    },
    "version": "0.0.27",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp-remote.jinko.so/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a5376b7b-ca2b-45fe-bea4-4daf76b59096",
        "versionId": "62db1a40-2f62-4fc8-97b5-b03186d26b28",
        "publishedAt": "2025-09-16T21:19:26.720481714Z",
        "updatedAt": "2025-09-16T21:19:26.720481714Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.cloudflare.mcp/mcp",
    "description": "Cloudflare MCP servers",
    "status": "active",
    "repository": {
      "url": "https://github.com/cloudflare/mcp-server-cloudflare",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://docs.mcp.cloudflare.com/mcp"
      },
      {
        "type": "streamable-http",
        "url": "https://observability.mcp.cloudflare.com/mcp",
        "headers": [
          {
            "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
            "isSecret": true,
            "name": "Authentication"
          }
        ]
      },
      {
        "type": "streamable-http",
        "url": "https://bindings.mcp.cloudflare.com/mcp",
        "headers": [
          {
            "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
            "isSecret": true,
            "name": "Authentication"
          }
        ]
      },
      {
        "type": "streamable-http",
        "url": "https://builds.mcp.cloudflare.com/mcp",
        "headers": [
          {
            "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
            "isSecret": true,
            "name": "Authentication"
          }
        ]
      },
      {
        "type": "streamable-http",
        "url": "https://radar.mcp.cloudflare.com/mcp",
        "headers": [
          {
            "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
            "isSecret": true,
            "name": "Authentication"
          }
        ]
      },
      {
        "type": "streamable-http",
        "url": "https://containers.mcp.cloudflare.com/mcp",
        "headers": [
          {
            "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
            "isSecret": true,
            "name": "Authentication"
          }
        ]
      },
      {
        "type": "streamable-http",
        "url": "https://browser.mcp.cloudflare.com/mcp",
        "headers": [
          {
            "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
            "isSecret": true,
            "name": "Authentication"
          }
        ]
      },
      {
        "type": "streamable-http",
        "url": "https://logs.mcp.cloudflare.com/mcp",
        "headers": [
          {
            "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
            "isSecret": true,
            "name": "Authentication"
          }
        ]
      },
      {
        "type": "streamable-http",
        "url": "https://ai-gateway.mcp.cloudflare.com/mcp",
        "headers": [
          {
            "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
            "isSecret": true,
            "name": "Authentication"
          }
        ]
      },
      {
        "type": "streamable-http",
        "url": "https://autorag.mcp.cloudflare.com/mcp",
        "headers": [
          {
            "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
            "isSecret": true,
            "name": "Authentication"
          }
        ]
      },
      {
        "type": "streamable-http",
        "url": "https://auditlogs.mcp.cloudflare.com/mcp",
        "headers": [
          {
            "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
            "isSecret": true,
            "name": "Authentication"
          }
        ]
      },
      {
        "type": "streamable-http",
        "url": "https://dns-analytics.mcp.cloudflare.com/mcp",
        "headers": [
          {
            "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
            "isSecret": true,
            "name": "Authentication"
          }
        ]
      },
      {
        "type": "streamable-http",
        "url": "https://dex.mcp.cloudflare.com/mcp",
        "headers": [
          {
            "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
            "isSecret": true,
            "name": "Authentication"
          }
        ]
      },
      {
        "type": "streamable-http",
        "url": "https://casb.mcp.cloudflare.com/mcp",
        "headers": [
          {
            "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
            "isSecret": true,
            "name": "Authentication"
          }
        ]
      },
      {
        "type": "streamable-http",
        "url": "https://graphql.mcp.cloudflare.com/mcp",
        "headers": [
          {
            "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
            "isSecret": true,
            "name": "Authentication"
          }
        ]
      },
      {
        "type": "sse",
        "url": "https://docs.mcp.cloudflare.com/sse"
      },
      {
        "type": "sse",
        "url": "https://observability.mcp.cloudflare.com/sse",
        "headers": [
          {
            "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
            "isSecret": true,
            "name": "Authentication"
          }
        ]
      },
      {
        "type": "sse",
        "url": "https://bindings.mcp.cloudflare.com/sse",
        "headers": [
          {
            "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
            "isSecret": true,
            "name": "Authentication"
          }
        ]
      },
      {
        "type": "sse",
        "url": "https://builds.mcp.cloudflare.com/sse",
        "headers": [
          {
            "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
            "isSecret": true,
            "name": "Authentication"
          }
        ]
      },
      {
        "type": "sse",
        "url": "https://radar.mcp.cloudflare.com/sse",
        "headers": [
          {
            "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
            "isSecret": true,
            "name": "Authentication"
          }
        ]
      },
      {
        "type": "sse",
        "url": "https://containers.mcp.cloudflare.com/sse",
        "headers": [
          {
            "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
            "isSecret": true,
            "name": "Authentication"
          }
        ]
      },
      {
        "type": "sse",
        "url": "https://browser.mcp.cloudflare.com/sse",
        "headers": [
          {
            "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
            "isSecret": true,
            "name": "Authentication"
          }
        ]
      },
      {
        "type": "sse",
        "url": "https://logs.mcp.cloudflare.com/sse",
        "headers": [
          {
            "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
            "isSecret": true,
            "name": "Authentication"
          }
        ]
      },
      {
        "type": "sse",
        "url": "https://ai-gateway.mcp.cloudflare.com/sse",
        "headers": [
          {
            "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
            "isSecret": true,
            "name": "Authentication"
          }
        ]
      },
      {
        "type": "sse",
        "url": "https://autorag.mcp.cloudflare.com/sse",
        "headers": [
          {
            "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
            "isSecret": true,
            "name": "Authentication"
          }
        ]
      },
      {
        "type": "sse",
        "url": "https://auditlogs.mcp.cloudflare.com/sse",
        "headers": [
          {
            "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
            "isSecret": true,
            "name": "Authentication"
          }
        ]
      },
      {
        "type": "sse",
        "url": "https://dns-analytics.mcp.cloudflare.com/sse",
        "headers": [
          {
            "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
            "isSecret": true,
            "name": "Authentication"
          }
        ]
      },
      {
        "type": "sse",
        "url": "https://dex.mcp.cloudflare.com/sse",
        "headers": [
          {
            "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
            "isSecret": true,
            "name": "Authentication"
          }
        ]
      },
      {
        "type": "sse",
        "url": "https://casb.mcp.cloudflare.com/sse",
        "headers": [
          {
            "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
            "isSecret": true,
            "name": "Authentication"
          }
        ]
      },
      {
        "type": "sse",
        "url": "https://graphql.mcp.cloudflare.com/sse",
        "headers": [
          {
            "description": "Optional Cloudflare API key for authentication if not using OAuth. Can use User or Account owned tokens as a Bearer token.",
            "isSecret": true,
            "name": "Authentication"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "ae4bba89-5a64-4d7d-8d8d-92b9b4b4d15b",
        "versionId": "ceb6f1e9-0f6b-4668-aa74-a7308963775f",
        "publishedAt": "2025-09-16T22:06:29.987728525Z",
        "updatedAt": "2025-09-16T22:06:29.987728525Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.timheuer/sampledotnetmcpserver",
    "description": "Sample .NET MCP Server",
    "repository": {
      "url": "https://github.com/timheuer/sampledotnetmcpserver",
      "source": "github"
    },
    "version": "0.1.26-beta",
    "packages": [
      {
        "registryType": "nuget",
        "identifier": "TimHeuer.SampleDotnetMcpServer",
        "version": "0.1.26-beta",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "98619929-a570-46c1-8e35-4cde888731ee",
        "versionId": "ae385caf-a601-48d2-8ff4-eea1cbc424da",
        "publishedAt": "2025-09-16T22:11:37.310707427Z",
        "updatedAt": "2025-09-16T22:30:54.36195718Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.nickzren/opentargets",
    "description": "Open Targets MCP server for targets, diseases, drugs, variants, and evidence",
    "status": "active",
    "repository": {
      "url": "https://github.com/nickzren/opentargets-mcp",
      "source": "github",
      "id": "984363568"
    },
    "version": "0.1.0",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "opentargets-mcp",
        "version": "0.1.0",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "224e7593-863e-4ec9-8b77-ef5b6b011250",
        "versionId": "42b4e771-e8d6-4a5d-8988-0707672f922b",
        "publishedAt": "2025-09-16T22:22:05.051791975Z",
        "updatedAt": "2025-09-22T16:27:58.093087071Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.timheuer/sampledotnetmcpserver",
    "description": "Sample .NET MCP Server",
    "repository": {
      "url": "https://github.com/timheuer/sampledotnetmcpserver",
      "source": "github"
    },
    "version": "0.1.27-beta",
    "packages": [
      {
        "registryType": "nuget",
        "identifier": "TimHeuer.SampleDotnetMcpServer",
        "version": "0.1.27-beta",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "98619929-a570-46c1-8e35-4cde888731ee",
        "versionId": "bcafddd0-d2f1-4dfd-8411-433242ee6202",
        "publishedAt": "2025-09-16T22:30:54.35634821Z",
        "updatedAt": "2025-09-17T01:27:02.860023046Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/MisterSandFR-supabase-mcp-selfhosted",
    "description": "Query and manage your Supabase database directly from your workspace. Execute SQL statements, brow…",
    "status": "active",
    "repository": {
      "url": "https://github.com/MisterSandFR/Supabase-MCP-SelfHosted",
      "source": "github"
    },
    "version": "1.14.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@MisterSandFR/supabase-mcp-selfhosted/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "d07e588e-585e-44b0-a8d4-4cf7ad928ba0",
        "versionId": "de316363-fd3c-4c96-ad69-221ece1f5f67",
        "publishedAt": "2025-09-16T22:41:06.53621168Z",
        "updatedAt": "2025-09-18T14:42:06.205284803Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.shawndurrani/mcp-merchant",
    "description": "Search-only commerce MCP server backed by Stripe (test)",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "0.1.3",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-merchant",
        "version": "0.1.3",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Stripe secret key (test mode)",
            "isRequired": true,
            "isSecret": true,
            "name": "STRIPE_SECRET_KEY"
          },
          {
            "description": "Max products to cache",
            "default": "100",
            "name": "PRODUCT_LIMIT"
          },
          {
            "description": "Catalog refresh interval in seconds",
            "default": "600",
            "name": "REFRESH_INTERVAL_SEC"
          }
        ]
      }
    ],
    "remotes": [
      {
        "type": "sse",
        "url": "https://mcp.shawndurrani.ai/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "8681fb6c-725d-4896-b15e-1088ffe74743",
        "versionId": "f307b5a8-fd0a-4cf8-ac0a-8bfcecf9d6d4",
        "publishedAt": "2025-09-16T22:54:28.454307047Z",
        "updatedAt": "2025-09-16T22:54:28.454307047Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.1stdibs/1stDibs",
    "description": "MCP server for browsing and searching items on 1stDibs marketplace.",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://www.1stdibs.com/soa/mcp/"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "dc63a098-92a2-4d21-b7ce-d5cc85d3cc39",
        "versionId": "fa2dcb23-c912-4aba-8296-c65162809bbf",
        "publishedAt": "2025-09-16T23:01:22.451131743Z",
        "updatedAt": "2025-09-16T23:01:22.451131743Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.shawndurrani/mcp-registry",
    "description": "Search the public MCP Registry; discover servers and copy SSE URLs.",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "0.1.3",
    "remotes": [
      {
        "type": "sse",
        "url": "https://mcp-registry.shawndurrani.ai/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "195ea7e4-8fce-4575-b2c1-8b266ba67149",
        "versionId": "967249f6-33c1-430d-a5b2-a1064337384d",
        "publishedAt": "2025-09-16T23:02:09.73866209Z",
        "updatedAt": "2025-09-16T23:02:09.73866209Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.linxule/lotus-wisdom",
    "description": "An MCP server for problem-solving using the Lotus Sutra's wisdom framework.",
    "status": "active",
    "repository": {
      "url": "https://github.com/linxule/lotus-wisdom-mcp",
      "source": "github",
      "id": "963596268"
    },
    "version": "0.1.2",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "lotus-wisdom-mcp",
        "version": "0.1.2",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c87b3c0b-a17f-452b-ab16-ae5b399c6f75",
        "versionId": "a2e1778e-50cf-4972-a9cb-e31a89068e6f",
        "publishedAt": "2025-09-16T23:53:10.712981505Z",
        "updatedAt": "2025-09-16T23:53:10.712981505Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.timheuer/sampledotnetmcpserver",
    "description": "Sample .NET MCP Server",
    "repository": {
      "url": "https://github.com/timheuer/sampledotnetmcpserver",
      "source": "github"
    },
    "version": "0.1.28-beta",
    "packages": [
      {
        "registryType": "nuget",
        "identifier": "TimHeuer.SampleDotnetMcpServer",
        "version": "0.1.28-beta",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "98619929-a570-46c1-8e35-4cde888731ee",
        "versionId": "282edfdd-a4e5-46cb-877f-eae2ef06897c",
        "publishedAt": "2025-09-17T01:27:02.813144548Z",
        "updatedAt": "2025-09-17T01:44:26.048539235Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.timheuer/sampledotnetmcpserver",
    "description": "Sample .NET MCP Server",
    "repository": {
      "url": "https://github.com/timheuer/sampledotnetmcpserver",
      "source": "github"
    },
    "version": "0.1.30-beta",
    "packages": [
      {
        "registryType": "nuget",
        "identifier": "TimHeuer.SampleDotnetMcpServer",
        "version": "0.1.30-beta",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "98619929-a570-46c1-8e35-4cde888731ee",
        "versionId": "2de2ee3a-fc9a-4ac4-8ded-3fda14b29051",
        "publishedAt": "2025-09-17T01:44:26.040148686Z",
        "updatedAt": "2025-09-18T17:33:36.29275102Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/JMoak-chrono-mcp",
    "description": "Convert and compare dates and times across any timezone with flexible, locale-aware formatting. Ad…",
    "status": "active",
    "repository": {
      "url": "https://github.com/JMoak/chrono-mcp",
      "source": "github"
    },
    "version": "0.2.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@JMoak/chrono-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b052d258-4e6b-404f-b132-835d28c1178b",
        "versionId": "d7d98bbe-95e6-491b-af67-3646314b554a",
        "publishedAt": "2025-09-17T02:23:35.312972065Z",
        "updatedAt": "2025-09-17T02:23:35.312972065Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.mcpanalytics/analytics",
    "description": "ML statistical analysis platform for data teams",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://api.mcpanalytics.ai/auth0"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "219a2fa3-ba26-4574-9c45-44886d4ff9e8",
        "versionId": "5a8b6b36-7f28-48df-ae97-31f9a032aad5",
        "publishedAt": "2025-09-17T02:35:06.675809197Z",
        "updatedAt": "2025-09-17T02:38:18.073872009Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.mcpanalytics/analytics",
    "description": "MCP Analytics, searchable tools and reports with interactive HTML visualization",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://api.mcpanalytics.ai/auth0"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "219a2fa3-ba26-4574-9c45-44886d4ff9e8",
        "versionId": "cd5b8366-f0bb-42fd-98bb-e8e467db2554",
        "publishedAt": "2025-09-17T02:38:18.067163459Z",
        "updatedAt": "2025-09-17T03:00:38.275209785Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.mcpanalytics/analytics",
    "description": "MCP Analytics, searchable tools and reports with interactive HTML visualization",
    "repository": {
      "url": "https://github.com/embeddedlayers/mcp-analytics",
      "source": "github"
    },
    "version": "1.0.2",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://api.mcpanalytics.ai/auth0"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "219a2fa3-ba26-4574-9c45-44886d4ff9e8",
        "versionId": "73689205-75f4-4c3d-94ef-0bcee089fbaa",
        "publishedAt": "2025-09-17T03:00:38.248011994Z",
        "updatedAt": "2025-09-17T03:17:49.632449123Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.mcpanalytics/analytics",
    "description": "MCP Analytics, searchable tools and reports with interactive HTML visualization",
    "repository": {
      "url": "https://github.com/embeddedlayers/mcp-analytics",
      "source": "github"
    },
    "version": "1.0.3",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://api.mcpanalytics.ai/auth0"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "219a2fa3-ba26-4574-9c45-44886d4ff9e8",
        "versionId": "4385f929-3b4c-4d4a-993f-a59a90d4c2be",
        "publishedAt": "2025-09-17T03:17:49.595345663Z",
        "updatedAt": "2025-09-17T03:17:49.595345663Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/cc25a-openai-api-agent-project123123123",
    "description": "Look up the latest stock prices by ticker symbol across global markets. Get current price and esse…",
    "status": "active",
    "repository": {
      "url": "https://github.com/cc25a/openai-api-agent-project",
      "source": "github"
    },
    "version": "1.14.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@cc25a/openai-api-agent-project123123123/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "2e9a1e51-a18b-4599-b56e-b49e1c42c0c2",
        "versionId": "bfcc47f4-8a2f-4c3a-8767-9ab71d609fb1",
        "publishedAt": "2025-09-17T03:32:54.14301964Z",
        "updatedAt": "2025-09-17T03:32:54.14301964Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/STUzhy-py_execute_mcp",
    "description": "Run Python code in a secure sandbox without local setup. Declare inline dependencies and execute s…",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@STUzhy/py_execute_mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "00e4c372-54d8-4246-b083-f74005cab347",
        "versionId": "e7ceccf7-af99-447d-a3a6-139b1501c5b5",
        "publishedAt": "2025-09-17T04:55:34.956438187Z",
        "updatedAt": "2025-09-17T04:55:34.956438187Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.ChengJiale150/jupyter-mcp-server",
    "description": "A powerful MCP server for AI-driven Jupyter Notebook management and execution",
    "status": "active",
    "repository": {
      "url": "https://github.com/ChengJiale150/jupyter-mcp-server",
      "source": "github"
    },
    "version": "1.1.0",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "better-jupyter-mcp-server",
        "version": "1.1.0",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "5a02e87b-630f-4ee3-97b2-38de44f347c5",
        "versionId": "846f2bd9-c60c-4129-8ab2-73d5939c126b",
        "publishedAt": "2025-09-17T06:19:21.754937017Z",
        "updatedAt": "2025-09-17T06:19:21.754937017Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.jkawamoto/mcp-youtube-transcript",
    "description": "An MCP server retrieving transcripts of YouTube videos",
    "status": "active",
    "repository": {
      "url": "https://github.com/jkawamoto/mcp-youtube-transcript",
      "source": "github"
    },
    "version": "0.5.0",
    "packages": [
      {
        "registryType": "mcpb",
        "identifier": "https://github.com/jkawamoto/mcp-youtube-transcript/releases/download/v0.5.0/mcp-youtube-transcript.mcpb",
        "version": "0.5.0",
        "fileSha256": "d44842be1e8029c9eaa4412668d06825d668b4eeb645a70386b1c98ab9de49ec",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "3ea19f39-944b-44bd-8cc7-dfb2f5150768",
        "versionId": "91ce777a-4be7-4d0a-a084-ed4c5419e97d",
        "publishedAt": "2025-09-17T07:27:14.970033687Z",
        "updatedAt": "2025-09-17T08:10:03.905251986Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.jkawamoto/mcp-youtube-transcript",
    "description": "An MCP server retrieving transcripts of YouTube videos",
    "status": "active",
    "repository": {
      "url": "https://github.com/jkawamoto/mcp-youtube-transcript",
      "source": "github"
    },
    "version": "0.5.1",
    "packages": [
      {
        "registryType": "mcpb",
        "identifier": "https://github.com/jkawamoto/mcp-youtube-transcript/releases/download/v0.5.1/mcp-youtube-transcript.mcpb",
        "version": "0.5.1",
        "fileSha256": "3356e741d4dafa24b0e931e3afd773c64d503f6624338beec62885f0dde59695",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "3ea19f39-944b-44bd-8cc7-dfb2f5150768",
        "versionId": "c6fe5633-4091-4018-8fd7-57b555f568ec",
        "publishedAt": "2025-09-17T08:10:03.858868083Z",
        "updatedAt": "2025-09-17T08:10:03.858868083Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "dev.lingo/main",
    "description": "Lingo.dev MCP Server - World-class i18n implementation with ICU MessageFormat.",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.lingo.dev/main"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "f0abb5cd-c660-478b-b3a4-7325bb3ad829",
        "versionId": "8bb26bcc-ecea-433a-ac25-ad9a370a4617",
        "publishedAt": "2025-09-17T08:32:24.189924177Z",
        "updatedAt": "2025-09-17T08:32:24.189924177Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/pinion05-supabase-mcp-lite",
    "description": "Same functionality, consuming only 1/20 of the context window tokens.",
    "status": "active",
    "repository": {
      "url": "https://github.com/pinion05/supabase-mcp-lite",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@pinion05/supabase-mcp-lite/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "d2df22c5-6e10-4670-9847-4dc7ac600520",
        "versionId": "175bfcef-d334-420a-bedd-80f47cb1a53d",
        "publishedAt": "2025-09-17T09:26:34.424829695Z",
        "updatedAt": "2025-09-17T09:26:34.424829695Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.croit/mcp-croit-ceph",
    "description": "MCP server for Croit Ceph cluster management with dynamic OpenAPI tool generation",
    "status": "active",
    "repository": {
      "url": "https://github.com/croit/mcp-croit-ceph",
      "source": "github",
      "id": "1058156155"
    },
    "version": "0.2.16",
    "packages": [
      {
        "registryType": "oci",
        "registryBaseUrl": "https://docker.io",
        "identifier": "croit/mcp-croit-ceph",
        "version": "0.2.16",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Croit cluster URL (e.g., http://your-cluster.croit.io:8080)",
            "name": "CROIT_HOST"
          },
          {
            "description": "API authentication token for Croit cluster",
            "name": "CROIT_API_TOKEN"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a8786e4e-07a3-47ed-a808-52db2ada27db",
        "versionId": "36c22c9a-0448-40af-8312-2fb36b8b7cea",
        "publishedAt": "2025-09-17T09:30:42.325917413Z",
        "updatedAt": "2025-09-17T09:30:42.325917413Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.Antonytm/mcp-sitecore-server",
    "description": "A Model Context Protocol server for Sitecore",
    "status": "active",
    "repository": {
      "url": "https://github.com/Antonytm/mcp-sitecore-server",
      "source": "github"
    },
    "version": "1.3.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@antonytm/mcp-sitecore-server",
        "version": "1.3.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "name": ""
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "397fbabe-4af0-4772-84f5-d660b761255c",
        "versionId": "491dd4a6-86a5-41d9-8ab0-dafaa3e9d2d0",
        "publishedAt": "2025-09-17T16:40:08.3256487Z",
        "updatedAt": "2025-09-17T16:49:19.079089206Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/hjsh200219-pharminfo-mcp",
    "description": "Look up Korean drug ingredient and product data by HIRA component and product codes via Pilldoc. V…",
    "status": "active",
    "repository": {
      "url": "https://github.com/hjsh200219/pharminfo-mcp",
      "source": "github"
    },
    "version": "1.14.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@hjsh200219/pharminfo-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "ee0f9f6f-7232-4c68-afde-393bef2ec4de",
        "versionId": "4e8f5697-3584-407f-9988-cafe00fa8ffb",
        "publishedAt": "2025-09-17T06:55:47.401979389Z",
        "updatedAt": "2025-09-17T06:55:47.401979389Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.taurgis/sfcc-dev-mcp",
    "description": "MCP server for Salesforce B2C Commerce Cloud development assistance",
    "status": "active",
    "repository": {
      "url": "https://github.com/taurgis/sfcc-dev-mcp",
      "source": "github"
    },
    "version": "1.0.14",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "sfcc-dev-mcp",
        "version": "1.0.14",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "e3c84b64-c6e1-49dc-9ca2-8909e36ac408",
        "versionId": "d76fb4c9-af0a-4588-9de3-2dd0856ba874",
        "publishedAt": "2025-09-17T07:22:50.583895618Z",
        "updatedAt": "2025-09-17T07:22:50.583895618Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.ChiR24/unreal-engine-mcp",
    "description": "Production-ready MCP server for Unreal Engine with comprehensive game development tools",
    "repository": {
      "url": "https://github.com/ChiR24/Unreal_mcp.git",
      "source": "github"
    },
    "version": "0.2.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "unreal-engine-mcp-server",
        "version": "0.2.1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Unreal Engine host address",
            "value": "127.0.0.1",
            "name": "UE_HOST"
          },
          {
            "description": "Remote Control HTTP port",
            "value": "30010",
            "name": "UE_RC_HTTP_PORT"
          },
          {
            "description": "Remote Control WebSocket port",
            "value": "30020",
            "name": "UE_RC_WS_PORT"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "49c64feb-2e4c-406d-b39f-1236bf2212a6",
        "versionId": "831f2f8f-e1fd-42df-a72b-204364d2e08f",
        "publishedAt": "2025-09-17T08:19:12.108456567Z",
        "updatedAt": "2025-09-17T12:43:41.544322203Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.grupo-avispa/dsr_mcp_server",
    "description": "An MCP server that provides tools for interacting with Deep State Representation (DSR) graphs.",
    "status": "active",
    "repository": {
      "url": "https://github.com/grupo-avispa/dsr_mcp_server",
      "source": "github"
    },
    "version": "1.0.0",
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a7e371ee-5904-46c1-8b7f-8416cc9b5994",
        "versionId": "aba25196-788f-4923-8fc8-836533ad0745",
        "publishedAt": "2025-09-17T10:15:32.830670599Z",
        "updatedAt": "2025-09-17T10:22:23.142839077Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.grupo-avispa/dsr_mcp_server",
    "description": "An MCP server that provides tools for interacting with Deep State Representation (DSR) graphs.",
    "status": "active",
    "repository": {
      "url": "https://github.com/grupo-avispa/dsr_mcp_server",
      "source": "github"
    },
    "version": "1.0.1",
    "websiteUrl": "https://grupo-avispa.github.io/dsr_mcp_server/",
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a7e371ee-5904-46c1-8b7f-8416cc9b5994",
        "versionId": "5b031d63-c0be-4663-aa02-43a97a488467",
        "publishedAt": "2025-09-17T10:22:23.135622672Z",
        "updatedAt": "2025-09-17T10:22:23.135622672Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/Kryptoskatt-mcp-server",
    "description": "Enable AI assistants to interact seamlessly with the DefiLlama API by translating MCP tool calls i…",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@Kryptoskatt/mcp-server/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "99e3a9ea-0f34-4ae6-acfc-0fb3e821b058",
        "versionId": "902233d1-24e6-48d2-8461-d652edecdd2d",
        "publishedAt": "2025-09-17T10:41:17.40297863Z",
        "updatedAt": "2025-09-17T10:41:17.40297863Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.anyproto/anytype-mcp",
    "description": "Official MCP server for Anytype API - your encrypted, local and collaborative wiki.",
    "status": "active",
    "repository": {
      "url": "https://github.com/anyproto/anytype-mcp",
      "source": "github"
    },
    "version": "1.0.7",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@anyproto/anytype-mcp",
        "version": "1.0.7",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "JSON string of headers for Anytype API. Example: {\"Authorization\":\"Bearer <YOUR_API_KEY>\", \"Anytype-Version\":\"2025-05-20\"}",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "OPENAPI_MCP_HEADERS"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "26028bb5-46f8-4478-9948-a9213fb52ce8",
        "versionId": "24ac8760-a6df-4111-bcb6-b2d77f2c42c1",
        "publishedAt": "2025-09-17T11:42:47.920301036Z",
        "updatedAt": "2025-09-17T11:42:47.920301036Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.ChiR24/unreal-engine-mcp",
    "description": "Production-ready MCP server for Unreal Engine with comprehensive game development tools",
    "repository": {
      "url": "https://github.com/ChiR24/Unreal_mcp.git",
      "source": "github"
    },
    "version": "0.3.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "unreal-engine-mcp-server",
        "version": "0.3.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Unreal Engine host address",
            "value": "127.0.0.1",
            "name": "UE_HOST"
          },
          {
            "description": "Remote Control HTTP port",
            "value": "30010",
            "name": "UE_RC_HTTP_PORT"
          },
          {
            "description": "Remote Control WebSocket port",
            "value": "30020",
            "name": "UE_RC_WS_PORT"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "49c64feb-2e4c-406d-b39f-1236bf2212a6",
        "versionId": "ccdf5061-3cb1-4dfe-a36a-f6bbbf6c3abf",
        "publishedAt": "2025-09-17T12:43:41.483739766Z",
        "updatedAt": "2025-09-19T06:42:00.165667265Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.CursorTouch/Windows-MCP",
    "description": "An MCP Server for computer-use in Windows OS",
    "status": "active",
    "repository": {
      "url": "https://github.com/CursorTouch/Windows-MCP",
      "source": "github"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "windows_mcp",
        "version": "0.3.0",
        "runtimeHint": "uvx",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "357d625e-8b12-4ae1-8915-ee77d3dc9a38",
        "versionId": "c20de9bf-9464-472b-8dcb-32503b984d56",
        "publishedAt": "2025-09-17T13:24:08.521350318Z",
        "updatedAt": "2025-09-17T13:24:08.521350318Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.nesquikm/rubber-duck",
    "description": "An MCP server that bridges to multiple OpenAI-compatible LLMs - your AI rubber duck debugging panel",
    "status": "active",
    "repository": {
      "url": "https://github.com/nesquikm/mcp-rubber-duck",
      "source": "github"
    },
    "version": "1.1.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-rubber-duck",
        "version": "1.1.1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "OpenAI API key (starts with sk-)",
            "format": "string",
            "isSecret": true,
            "name": "OPENAI_API_KEY"
          },
          {
            "description": "Google Gemini API key",
            "format": "string",
            "isSecret": true,
            "name": "GEMINI_API_KEY"
          },
          {
            "description": "Groq API key (starts with gsk_)",
            "format": "string",
            "isSecret": true,
            "name": "GROQ_API_KEY"
          },
          {
            "description": "Default LLM provider to use",
            "format": "string",
            "name": "DEFAULT_PROVIDER"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "dbd4508f-845e-46ef-829d-505c9d3a67b4",
        "versionId": "1be3d1ef-0844-4f16-a4b9-e34e458b5485",
        "publishedAt": "2025-09-17T13:24:12.420293436Z",
        "updatedAt": "2025-09-17T13:24:12.420293436Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/pinion05-supabase-mcp-lite",
    "description": "Same functionality, consuming only 1/20 of the context window tokens.",
    "status": "active",
    "repository": {
      "url": "https://github.com/pinion05/supabase-mcp-lite",
      "source": "github"
    },
    "version": "0.0.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@pinion05/supabase-mcp-lite/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "d2df22c5-6e10-4670-9847-4dc7ac600520",
        "versionId": "5034aa1f-3534-4079-8fc5-131563ece72f",
        "publishedAt": "2025-09-17T13:24:18.881488263Z",
        "updatedAt": "2025-09-17T13:24:18.881488263Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.r-huijts/strava-mcp",
    "description": "MCP server for accessing Strava API",
    "status": "active",
    "repository": {
      "url": "https://github.com/r-huijts/strava-mcp",
      "source": "github"
    },
    "version": "1.0.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "strava-mcp-server",
        "version": "1.0.1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your Strava API client ID",
            "isRequired": true,
            "format": "string",
            "name": "STRAVA_CLIENT_ID"
          },
          {
            "description": "Your Strava API client secret",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "STRAVA_CLIENT_SECRET"
          },
          {
            "description": "Your Strava API access token",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "STRAVA_ACCESS_TOKEN"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "487c1cfc-fc8c-4487-94ba-68abf09a0e90",
        "versionId": "fce998d0-3374-49ad-ab92-a1dce675be47",
        "publishedAt": "2025-09-17T13:52:27.488577467Z",
        "updatedAt": "2025-09-17T13:52:27.488577467Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.leshchenko1979/fast-mcp-telegram",
    "description": "Telegram MCP server with search and messaging capabilities",
    "status": "active",
    "repository": {
      "url": "https://github.com/leshchenko1979/fast-mcp-telegram",
      "source": "github"
    },
    "version": "0.5.0",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "fast-mcp-telegram",
        "version": "0.5.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Telegram API ID (from https://my.telegram.org/apps)",
            "isRequired": true,
            "name": "API_ID"
          },
          {
            "description": "Telegram API Hash (from https://my.telegram.org/apps)",
            "isRequired": true,
            "isSecret": true,
            "name": "API_HASH"
          },
          {
            "description": "Server mode: stdio (local), http-no-auth (dev), http-auth (prod)",
            "default": "stdio",
            "choices": [
              "stdio",
              "http-no-auth",
              "http-auth"
            ],
            "name": "SERVER_MODE"
          },
          {
            "description": "Custom session directory (defaults to ~/.config/fast-mcp-telegram/)",
            "name": "SESSION_DIR"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a1a4d761-5635-480b-b636-4b6fef3c9a77",
        "versionId": "96a8497f-6246-4326-9394-a28ff6908fe2",
        "publishedAt": "2025-09-17T14:08:48.770808907Z",
        "updatedAt": "2025-09-17T14:08:48.770808907Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.p1va/symbols",
    "description": "MCP server to read, inspect and troubleshoot codebase symbols",
    "status": "active",
    "repository": {
      "url": "https://github.com/p1va/symbols",
      "source": "github"
    },
    "version": "0.0.14",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@p1va/symbols",
        "version": "0.0.14",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "d827a965-33bc-4262-87df-98ca6eac9a12",
        "versionId": "435db01f-5936-44ac-8165-469b1e3491b6",
        "publishedAt": "2025-09-17T14:15:12.928928281Z",
        "updatedAt": "2025-09-17T14:15:12.928928281Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.apple-rag/mcp-server",
    "description": "Apple Developer Documentation with Semantic Search, RAG, and AI reranking for MCP clients",
    "status": "active",
    "repository": {
      "url": "https://github.com/BingoWon/apple-rag-mcp",
      "source": "github"
    },
    "version": "1.1.3",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.apple-rag.com",
        "headers": [
          {
            "description": "MCP Token for authentication (optional - free tier available without token)",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "803e4dc4-c3d4-43d2-b6a3-65885c8eefb4",
        "versionId": "52c6f0fa-7114-4adc-afae-d48cfbbe97c0",
        "publishedAt": "2025-09-17T14:15:14.604093039Z",
        "updatedAt": "2025-09-17T14:41:53.299387399Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.apple-rag/mcp-server",
    "description": "Apple Developer Documentation with Semantic Search, RAG, and AI reranking for MCP clients",
    "status": "active",
    "repository": {
      "url": "https://github.com/BingoWon/apple-rag-mcp",
      "source": "github"
    },
    "version": "2.4.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.apple-rag.com",
        "headers": [
          {
            "description": "MCP Token for authentication (optional - free tier available without token)",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "803e4dc4-c3d4-43d2-b6a3-65885c8eefb4",
        "versionId": "dc27ec5b-37aa-4537-a0b2-3bc603e23e1d",
        "publishedAt": "2025-09-17T14:41:53.205694658Z",
        "updatedAt": "2025-09-17T14:43:14.562703229Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.apple-rag/mcp-server",
    "description": "Apple Developer Documentation with Semantic Search, RAG, and AI reranking for MCP clients",
    "status": "active",
    "repository": {
      "url": "https://github.com/BingoWon/apple-rag-mcp",
      "source": "github"
    },
    "version": "2.4.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.apple-rag.com",
        "headers": [
          {
            "description": "MCP Token for authentication (optional - free tier available without token)",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "803e4dc4-c3d4-43d2-b6a3-65885c8eefb4",
        "versionId": "0a5a9ada-cc20-4a8f-8cf6-78be9c377014",
        "publishedAt": "2025-09-17T14:43:14.554349016Z",
        "updatedAt": "2025-09-17T15:07:56.628066042Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.docfork/docfork-mcp",
    "description": "MCP server for Docfork",
    "status": "active",
    "repository": {
      "url": "https://github.com/docfork/docfork-mcp",
      "source": "github"
    },
    "version": "0.7.2",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "docfork",
        "version": "0.7.2",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your API key for the service",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "YOUR_API_KEY"
          }
        ]
      }
    ],
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.docfork.com/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "6dc13ffa-1930-496c-ae98-fded862d1353",
        "versionId": "a6ab98ca-2224-4dc5-b7ce-91f97c40cb56",
        "publishedAt": "2025-09-17T14:44:53.975619664Z",
        "updatedAt": "2025-09-17T14:44:53.975619664Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.abelljs/abell",
    "description": "AI tools related to Abell. Currently includes MCP of Abell",
    "status": "active",
    "repository": {
      "url": "https://github.com/abelljs/abell",
      "source": "github"
    },
    "version": "0.0.9",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "abell-ai",
        "version": "0.0.9",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "7617c5d3-5ab2-4624-844d-e8cccdaebe52",
        "versionId": "ac1b1492-c254-4727-85e5-21c7efaa26f5",
        "publishedAt": "2025-09-17T14:53:07.562174808Z",
        "updatedAt": "2025-09-17T14:53:07.562174808Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.apple-rag/mcp-server",
    "description": "Apple Developer Documentation with Semantic Search, RAG, and AI reranking for MCP clients",
    "status": "active",
    "repository": {
      "url": "https://github.com/BingoWon/apple-rag-mcp",
      "source": "github"
    },
    "version": "2.5.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.apple-rag.com",
        "headers": [
          {
            "description": "MCP Token for authentication (optional - free tier available without token)",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "803e4dc4-c3d4-43d2-b6a3-65885c8eefb4",
        "versionId": "76d4ea95-489a-41e7-8bc9-f8d3263fc913",
        "publishedAt": "2025-09-17T15:07:56.618881283Z",
        "updatedAt": "2025-09-17T15:08:38.010176491Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.apple-rag/mcp-server",
    "description": "Apple Developer Documentation with Semantic Search, RAG, and AI reranking for MCP clients",
    "status": "active",
    "repository": {
      "url": "https://github.com/BingoWon/apple-rag-mcp",
      "source": "github"
    },
    "version": "2.5.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.apple-rag.com",
        "headers": [
          {
            "description": "MCP Token for authentication (optional - free tier available without token)",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "803e4dc4-c3d4-43d2-b6a3-65885c8eefb4",
        "versionId": "f2550c4a-7aeb-4af9-93c5-8e92b0c7087e",
        "publishedAt": "2025-09-17T15:08:38.002759406Z",
        "updatedAt": "2025-09-17T15:11:26.214637982Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.apple-rag/mcp-server",
    "description": "Apple Developer Documentation with Semantic Search, RAG, and AI reranking for MCP clients",
    "status": "active",
    "repository": {
      "url": "https://github.com/BingoWon/apple-rag-mcp",
      "source": "github"
    },
    "version": "2.5.2",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.apple-rag.com",
        "headers": [
          {
            "description": "MCP Token for authentication (optional - free tier available without token)",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "803e4dc4-c3d4-43d2-b6a3-65885c8eefb4",
        "versionId": "9ef1c5fc-0d30-4038-b8c0-93f9aaffd1b2",
        "publishedAt": "2025-09-17T15:11:26.206910319Z",
        "updatedAt": "2025-09-17T15:13:14.51544383Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.apple-rag/mcp-server",
    "description": "Apple Developer Documentation with Semantic Search, RAG, and AI reranking for MCP clients",
    "status": "active",
    "repository": {
      "url": "https://github.com/BingoWon/apple-rag-mcp",
      "source": "github"
    },
    "version": "2.6.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.apple-rag.com",
        "headers": [
          {
            "description": "MCP Token for authentication (optional - free tier available without token)",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "803e4dc4-c3d4-43d2-b6a3-65885c8eefb4",
        "versionId": "e07e5ac4-de2c-4e3e-bdf6-637c2cad0f34",
        "publishedAt": "2025-09-17T15:13:14.508375885Z",
        "updatedAt": "2025-09-20T13:08:19.358042928Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.karanb192/reddit-mcp-buddy",
    "description": "Reddit MCP server - browse posts, search content, analyze users.",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.1.0",
    "packages": [
      {
        "registryType": "npm",
        "identifier": "reddit-mcp-buddy",
        "version": "1.1.0",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "bc98ac4e-cb60-435b-a426-f18a6b1c0076",
        "versionId": "1cbefa81-a37b-45ad-bca6-cefce39cad21",
        "publishedAt": "2025-09-17T15:39:49.253376736Z",
        "updatedAt": "2025-09-20T10:45:00.302258169Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.Antonytm/mcp-sitecore-server",
    "description": "A Model Context Protocol server for Sitecore",
    "status": "active",
    "repository": {
      "url": "https://github.com/Antonytm/mcp-sitecore-server",
      "source": "github"
    },
    "version": "1.3.2",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@antonytm/mcp-sitecore-server",
        "version": "1.3.2",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "name": ""
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "397fbabe-4af0-4772-84f5-d660b761255c",
        "versionId": "28732cec-512d-49ec-940e-832ee19277bc",
        "publishedAt": "2025-09-17T16:49:19.073211847Z",
        "updatedAt": "2025-09-17T16:49:19.073211847Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.AungMyoKyaw/betterprompt-mcp",
    "description": "MCP server for AI-enhanced prompt engineering and request conversion.",
    "status": "active",
    "repository": {
      "url": "https://github.com/AungMyoKyaw/betterprompt-mcp",
      "source": "github"
    },
    "version": "0.2.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "betterprompt-mcp",
        "version": "0.2.1",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "2720ff16-3e16-48b4-9450-f19565e8436c",
        "versionId": "b361137f-582b-4748-8f7f-eb144fd4ed2c",
        "publishedAt": "2025-09-17T17:15:50.170627394Z",
        "updatedAt": "2025-09-17T17:15:50.170627394Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.getunblocked/unblocked-mcp",
    "description": "Unblocked MCP Server",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://getunblocked.com/api/mcpsse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "75219b4c-191f-4fec-8e1f-7b4604df9c8d",
        "versionId": "88833a2c-b1b8-4a0f-ba12-43193b270796",
        "publishedAt": "2025-09-17T17:32:31.670692124Z",
        "updatedAt": "2025-09-17T17:32:31.670692124Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.teamwork/mcp",
    "description": "The Teamwork.com official MCP server helps teams efficiently manage client projects with AI.",
    "status": "active",
    "repository": {
      "url": "https://github.com/teamwork/mcp",
      "source": "github"
    },
    "version": "1.4.0",
    "packages": [
      {
        "registryType": "oci",
        "registryBaseUrl": "https://docker.io",
        "identifier": "teamwork/mcp",
        "version": "v1.4.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "TW_MCP_BEARER_TOKEN"
          },
          {
            "description": "Choose log output format between 'text' or 'json'. Default is 'text'.",
            "format": "string",
            "name": "TW_MCP_LOG_FORMAT"
          },
          {
            "description": "Choose log level between 'debug', 'info', 'warn' or 'error'. Default is 'info'.",
            "format": "string",
            "name": "TW_MCP_LOG_LEVEL"
          }
        ]
      }
    ],
    "remotes": [
      {
        "type": "sse",
        "url": "https://mcp.ai.teamwork.com",
        "headers": [
          {
            "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
            "isRequired": true,
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      },
      {
        "type": "streamable-http",
        "url": "https://mcp.ai.teamwork.com",
        "headers": [
          {
            "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
            "isRequired": true,
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "8e1daf12-8a74-4718-93ec-86b05728241d",
        "versionId": "028de86b-0027-4eb9-875b-c40b9b089215",
        "publishedAt": "2025-09-17T18:13:49.724857292Z",
        "updatedAt": "2025-09-26T17:26:33.304628511Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.human4/mcp",
    "description": "Human4AI: bridging human perception with AI agents for seamless collaborative intelligence.",
    "repository": {
      "url": "https://github.com/Human4AI/MCP",
      "source": "github"
    },
    "version": "",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://api.human4.ai/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "dd67632c-f1b8-4f39-9fde-4ce82716a8e8",
        "versionId": "5ec94c6d-6b50-42af-bdd9-895a57fe7d38",
        "publishedAt": "2025-09-17T18:51:30.428936188Z",
        "updatedAt": "2025-09-17T18:51:30.428936188Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.chris-schra/mcp-funnel",
    "description": "MCP proxy that aggregates multiple servers with tool filtering and customization",
    "status": "active",
    "repository": {
      "url": "https://github.com/chris-schra/mcp-funnel",
      "source": "github",
      "id": "1055597409",
      "subfolder": "packages/mcp"
    },
    "version": "0.0.7",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-funnel",
        "version": "0.0.6",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        },
        "runtimeArguments": [
          {
            "value": "-y",
            "type": "positional"
          }
        ],
        "packageArguments": [
          {
            "description": "Optional path to .mcp-funnel.json config file",
            "format": "filepath",
            "type": "positional",
            "valueHint": "config_path"
          }
        ],
        "environmentVariables": [
          {
            "description": "Alternative way to specify config file path",
            "format": "filepath",
            "name": "MCP_FUNNEL_CONFIG"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "1efb077e-f618-4258-8924-6e3dae14ef8b",
        "versionId": "e426621e-4c78-4d87-ac66-8cb3db910b25",
        "publishedAt": "2025-09-17T18:55:31.888644079Z",
        "updatedAt": "2025-09-17T18:55:31.888644079Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.devcycle/mcp",
    "description": "DevCycle MCP server for feature flag management",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "6.0.2",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.devcycle.com/mcp"
      },
      {
        "type": "sse",
        "url": "https://mcp.devcycle.com/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "6083a09f-1557-4e62-971f-ed2f0b692dd9",
        "versionId": "e6f3c597-90f1-42a4-ae3e-5a22662e6ac3",
        "publishedAt": "2025-09-17T19:06:43.362452757Z",
        "updatedAt": "2025-09-17T20:28:36.462391026Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "app.thoughtspot/mcp-server",
    "description": "MCP Server for ThoughtSpot - provides OAuth authentication and tools for querying data",
    "status": "active",
    "repository": {
      "url": "https://github.com/thoughtspot/mcp-server",
      "source": "github"
    },
    "version": "0.5.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://agent.thoughtspot.app/mcp"
      },
      {
        "type": "sse",
        "url": "https://agent.thoughtspot.app/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c695356d-8607-402e-b15d-651af6d3cac7",
        "versionId": "2dafc3fb-4bde-4a22-aac2-9d3dc3c78f74",
        "publishedAt": "2025-09-17T20:04:01.821026897Z",
        "updatedAt": "2025-09-17T20:14:22.510543332Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "app.thoughtspot/mcp-server",
    "description": "MCP Server for ThoughtSpot - provides OAuth authentication and tools for querying data",
    "status": "active",
    "repository": {
      "url": "https://github.com/thoughtspot/mcp-server",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://agent.thoughtspot.app/mcp"
      },
      {
        "type": "sse",
        "url": "https://agent.thoughtspot.app/sse"
      },
      {
        "type": "streamable-http",
        "url": "https://agent.thoughtspot.app/bearer/mcp",
        "headers": [
          {
            "description": "Bearer token for authentication, have the ts-host as 'token@ts-host' or as a separate 'x-ts-host' header",
            "isRequired": true,
            "isSecret": true,
            "name": "Authorization"
          },
          {
            "description": "ThoughtSpot instance URL, if not provided in the authorization header",
            "isRequired": true,
            "name": "X-TS-Host"
          }
        ]
      },
      {
        "type": "sse",
        "url": "https://agent.thoughtspot.app/bearer/sse",
        "headers": [
          {
            "description": "Bearer token for authentication, have the ts-host as 'token@ts-host' or as a separate 'x-ts-host' header",
            "isRequired": true,
            "isSecret": true,
            "name": "Authorization"
          },
          {
            "description": "ThoughtSpot instance URL, if not provided in the authorization header",
            "isRequired": true,
            "name": "X-TS-Host"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c695356d-8607-402e-b15d-651af6d3cac7",
        "versionId": "218d380f-328d-43a2-8811-1e38078fb7ab",
        "publishedAt": "2025-09-17T20:14:22.451730803Z",
        "updatedAt": "2025-09-17T20:15:17.375784438Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "app.thoughtspot/mcp-server",
    "description": "MCP Server for ThoughtSpot - provides OAuth authentication and tools for querying data",
    "status": "active",
    "repository": {
      "url": "https://github.com/thoughtspot/mcp-server",
      "source": "github"
    },
    "version": "1.0.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://agent.thoughtspot.app/mcp"
      },
      {
        "type": "sse",
        "url": "https://agent.thoughtspot.app/sse"
      },
      {
        "type": "streamable-http",
        "url": "https://agent.thoughtspot.app/bearer/mcp",
        "headers": [
          {
            "description": "Bearer token for authentication, have the ts-host as 'token@ts-host' or as a separate 'x-ts-host' header",
            "isRequired": true,
            "isSecret": true,
            "name": "Authorization"
          },
          {
            "description": "ThoughtSpot instance URL, if not provided in the authorization header",
            "name": "X-TS-Host"
          }
        ]
      },
      {
        "type": "sse",
        "url": "https://agent.thoughtspot.app/bearer/sse",
        "headers": [
          {
            "description": "Bearer token for authentication, have the ts-host as 'token@ts-host' or as a separate 'x-ts-host' header",
            "isRequired": true,
            "isSecret": true,
            "name": "Authorization"
          },
          {
            "description": "ThoughtSpot instance URL, if not provided in the authorization header",
            "name": "X-TS-Host"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c695356d-8607-402e-b15d-651af6d3cac7",
        "versionId": "2f082904-ddd0-4f6e-8d12-f655111b2bc0",
        "publishedAt": "2025-09-17T20:15:17.362824581Z",
        "updatedAt": "2025-09-17T20:15:17.362824581Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.devcycle/mcp",
    "description": "DevCycle MCP server for feature flag management",
    "repository": {
      "url": "https://github.com/DevCycleHQ/cli",
      "source": "github"
    },
    "version": "6.1.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.devcycle.com/mcp"
      },
      {
        "type": "sse",
        "url": "https://mcp.devcycle.com/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "6083a09f-1557-4e62-971f-ed2f0b692dd9",
        "versionId": "37cb7306-1433-4aae-9aa4-79eaedfb7b5a",
        "publishedAt": "2025-09-17T20:28:36.449466527Z",
        "updatedAt": "2025-09-17T20:28:36.449466527Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/exa-labs-exa-code-mcp",
    "description": "Find open-source libraries and fetch contextual code snippets by version to accelerate development…",
    "status": "active",
    "repository": {
      "url": "https://github.com/exa-labs/exa-code-mcp",
      "source": "github"
    },
    "version": "0.0.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@exa-labs/exa-code-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "bfe1540b-c084-47f5-8a9e-ca2ea85968bc",
        "versionId": "f0cb5880-9aec-40ae-8388-97f8b63d4370",
        "publishedAt": "2025-09-17T20:44:09.235886235Z",
        "updatedAt": "2025-09-17T20:44:09.235886235Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.promplate/hmr",
    "description": "Hot Module Reload (HMR) for Python with reactive programming and MCP tools",
    "repository": {
      "url": "https://github.com/promplate/pyth-on-line",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://promplate.github.io/pyth-on-line/hmr/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c15f3ef5-825c-469f-89d1-7193049d6e86",
        "versionId": "b2342344-c506-4b06-a8e3-931cb18d22ef",
        "publishedAt": "2025-09-17T20:50:30.150753217Z",
        "updatedAt": "2025-09-17T20:50:30.150753217Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "dev.promplate/hmr",
    "description": "Hot Module Reload (HMR) for Python with reactive programming and MCP tools",
    "repository": {
      "url": "https://github.com/promplate/pyth-on-line",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://pyth-on-line.promplate.dev/hmr/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c3678b28-5338-4c5a-9d44-c005c700e9a6",
        "versionId": "704ccc9a-25b1-44bf-a882-59130f6b02ab",
        "publishedAt": "2025-09-17T21:07:34.315525152Z",
        "updatedAt": "2025-09-17T21:09:37.855503018Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "dev.promplate/hmr",
    "description": "Hot Module Reload (HMR) and reactive programming for Python",
    "repository": {
      "url": "https://github.com/promplate/hmr",
      "source": "github"
    },
    "version": "1.0.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://pyth-on-line.promplate.dev/hmr/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c3678b28-5338-4c5a-9d44-c005c700e9a6",
        "versionId": "e522a3bc-d23c-4215-aacc-a5ae5c78ce5c",
        "publishedAt": "2025-09-17T21:09:37.850175971Z",
        "updatedAt": "2025-09-17T21:13:12.384420864Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "dev.promplate/hmr",
    "description": "Docs for hot-module-reload and reactive programming for Python (`hmr` on PyPI)",
    "repository": {
      "url": "https://github.com/promplate/hmr",
      "source": "github"
    },
    "version": "1.0.2",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://pyth-on-line.promplate.dev/hmr/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c3678b28-5338-4c5a-9d44-c005c700e9a6",
        "versionId": "9978940b-0d97-4ef5-a187-0d5cd56731fb",
        "publishedAt": "2025-09-17T21:13:12.376456949Z",
        "updatedAt": "2025-09-17T21:13:12.376456949Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.vercel/vercel-mcp",
    "description": "An MCP server for connecting to Vercel",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "0.0.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.vercel.com"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b0265c63-b74d-4e92-bd28-89fd55a29545",
        "versionId": "e82405a7-01da-410c-911e-1df13b446157",
        "publishedAt": "2025-09-17T21:18:23.966053956Z",
        "updatedAt": "2025-09-17T21:29:22.393251785Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.vercel/vercel-mcp",
    "description": "An MCP server for Vercel",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "0.0.2",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.vercel.com"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b0265c63-b74d-4e92-bd28-89fd55a29545",
        "versionId": "ca97ce9f-45a6-4249-a6de-d2a1797adf0f",
        "publishedAt": "2025-09-17T21:29:22.383255285Z",
        "updatedAt": "2025-09-17T21:29:22.383255285Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "trade.neglect/mcp-server",
    "description": "Full Solana DeFi coverage: launchpads, tokens, trades, and wallets, decoded at scale.",
    "status": "active",
    "repository": {
      "url": "https://github.com/609NFT/solana-mcp",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://api.neglect.trade/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c2749ea7-87d0-4d7f-8b4e-e7d687ff6500",
        "versionId": "7aa88faa-c1df-49a2-a33e-51c79f67be2b",
        "publishedAt": "2025-09-17T22:59:34.044420412Z",
        "updatedAt": "2025-09-17T22:59:34.044420412Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.8beeeaaat/touchdesigner-mcp-server",
    "description": "MCP server for TouchDesigner - Control and operate TouchDesigner projects through AI agents",
    "status": "active",
    "repository": {
      "url": "https://github.com/8beeeaaat/touchdesigner-mcp.git",
      "source": "github"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "npm",
        "identifier": "touchdesigner-mcp-server",
        "version": "1.0.0",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "265223d5-8458-45ba-8d4f-63111d94e781",
        "versionId": "6b47ce9b-df71-4a7c-a5d7-0184b5ed2da1",
        "publishedAt": "2025-09-17T23:25:24.290746074Z",
        "updatedAt": "2025-09-17T23:25:24.290746074Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.schemacrawler/schemacrawler-ai",
    "description": "Enables natural language schema queries — explore tables, keys, procedures, and get SQL help fast",
    "status": "active",
    "repository": {
      "url": "https://github.com/schemacrawler/SchemaCrawler-AI",
      "source": "github"
    },
    "version": "v16.28.1-2",
    "packages": [
      {
        "registryType": "oci",
        "registryBaseUrl": "https://docker.io",
        "identifier": "schemacrawler/schemacrawler-ai",
        "version": "v16.28.1-2",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Database user name. Can be optional depending on the database connection type.",
            "format": "string",
            "isSecret": true,
            "name": "SCHCRWLR_DATABASE_USER"
          },
          {
            "description": "Database user password. Can be optional depending on the database connection type.",
            "format": "string",
            "isSecret": true,
            "name": "SCHCRWLR_DATABASE_PASSWORD"
          },
          {
            "description": "JDBC URL for database connection. If this is provided, the server, host, port and database are not used.",
            "format": "string",
            "name": "SCHCRWLR_JDBC_URL"
          },
          {
            "description": "SchemaCrawler database plugin, for example, 'sqlserver' or 'sqlite'. Used only if the JDBC URL is not provided.",
            "format": "string",
            "name": "SCHCRWLR_SERVER"
          },
          {
            "description": "Database host. Defaults to localhost. Used only if the JDBC URL is not provided.",
            "format": "string",
            "name": "SCHCRWLR_HOST"
          },
          {
            "description": "Database port. Defaults to the default port for the server type. Used only if the JDBC URL is not provided.",
            "format": "string",
            "name": "SCHCRWLR_PORT"
          },
          {
            "description": "Database to connect to (optional). Used only if the JDBC URL is not provided.",
            "format": "string",
            "name": "SCHCRWLR_DATABASE"
          },
          {
            "description": "How much database metadata to retrieve. Values are 'minimum', 'standard', 'detailed' or 'maximum'.",
            "format": "string",
            "name": "SCHCRWLR_INFO_LEVEL"
          },
          {
            "description": "Logging verbosity level. Values are 'SEVERE', 'WARNING', 'INFO', 'CONFIG', or 'FINE'.",
            "format": "string",
            "name": "SCHCRWLR_LOG_LEVEL"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "3616e073-7a15-42cb-ae02-4c6d64c92905",
        "versionId": "db13f701-5d86-4a6f-8cb5-cf2bf7a9a182",
        "publishedAt": "2025-09-17T23:55:52.054264908Z",
        "updatedAt": "2025-09-20T13:17:42.512459486Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.balldontlie/mcp",
    "description": "MCP server for BALLDONTLIE API",
    "status": "active",
    "repository": {
      "url": "https://github.com/balldontlie-api/mcp",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.balldontlie.io/mcp",
        "headers": [
          {
            "description": "API key for authentication",
            "isRequired": true,
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "d5a785f7-4fae-4365-b408-71e79c58a387",
        "versionId": "a1338208-2314-4d5d-bf1b-073348067148",
        "publishedAt": "2025-09-18T00:33:15.822454699Z",
        "updatedAt": "2025-09-18T00:35:55.651573674Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.balldontlie/mcp",
    "description": "Provides access to live sports data and analytics from BALLDONTLIE: The Sports API",
    "status": "active",
    "repository": {
      "url": "https://github.com/balldontlie-api/mcp",
      "source": "github"
    },
    "version": "1.1.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.balldontlie.io/mcp",
        "headers": [
          {
            "description": "API key for authentication",
            "isRequired": true,
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "d5a785f7-4fae-4365-b408-71e79c58a387",
        "versionId": "7e642fa7-6eff-4415-98fd-10328586af6a",
        "publishedAt": "2025-09-18T00:35:55.642004605Z",
        "updatedAt": "2025-09-18T00:35:55.642004605Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.mcpcap/mcpcap",
    "description": "An MCP server for analyzing PCAP files.",
    "status": "active",
    "repository": {
      "url": "https://github.com/mcpcap/mcpcap",
      "source": "github"
    },
    "version": "0.6.0",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mcpcap",
        "version": "0.4.4",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "1a77c0fe-c133-468d-aad0-52c60574d088",
        "versionId": "ddb6c35f-5332-4c85-b347-ce592a9e7c74",
        "publishedAt": "2025-09-18T00:54:48.998144834Z",
        "updatedAt": "2025-09-18T00:54:48.998144834Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ci.git/mymlh-mcp-server",
    "description": "OAuth-enabled MyMLH MCP server for accessing MyMLH data.",
    "repository": {
      "url": "https://github.com/wei/mymlh-mcp-server",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mymlh-mcp.git.ci/mcp"
      },
      {
        "type": "sse",
        "url": "https://mymlh-mcp.git.ci/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a0aa174d-3e3e-4eb1-899e-706eb34ef643",
        "versionId": "87e529f5-a17d-45ef-a189-86bf64e42fb1",
        "publishedAt": "2025-09-18T01:20:01.35205977Z",
        "updatedAt": "2025-09-18T01:20:01.35205977Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.pedro-rivas/android-puppeteer-mcp",
    "description": "MCP server for Android automation with UI interaction, screenshots, and device control",
    "status": "active",
    "repository": {
      "url": "https://github.com/pedro-rivas/android-puppeteer-mcp",
      "source": "github"
    },
    "version": "1.0.1",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "android-puppeteer-mcp",
        "version": "1.0.1",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "1358a9af-ccab-47f5-8176-1892168954f0",
        "versionId": "d01babcd-d7a6-44b9-b5bd-0e0b8f6cb969",
        "publishedAt": "2025-09-18T02:09:11.965570935Z",
        "updatedAt": "2025-09-18T02:09:11.965570935Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.jkawamoto/mcp-bear",
    "description": "A MCP server for interacting with Bear note-taking software.",
    "status": "active",
    "repository": {
      "url": "https://github.com/jkawamoto/mcp-bear",
      "source": "github"
    },
    "version": "0.4.0",
    "packages": [
      {
        "registryType": "mcpb",
        "identifier": "https://github.com/jkawamoto/mcp-bear/releases/download/v0.4.0/mcp-bear.mcpb",
        "version": "0.4.0",
        "fileSha256": "f91b513cc189736035e090dd8217a866d4492a53ed094cc277b248890278554e",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Bear API token",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "BEAR_API_TOKEN"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "742b63fb-a3b4-410a-b681-d676967ddd16",
        "versionId": "e572696f-550b-4e2a-a60c-5e2339e26664",
        "publishedAt": "2025-09-18T02:53:22.271904561Z",
        "updatedAt": "2025-09-18T02:53:22.271904561Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.lapfelix/xcodemcp",
    "description": "Control Xcode directly via JXA for build, test, debug operations with XCLogParser integration",
    "status": "active",
    "repository": {
      "url": "https://github.com/lapfelix/XcodeMCP",
      "source": "github"
    },
    "version": "2.1.4",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "xcodemcp",
        "version": "2.1.4",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "f3976f2e-7a54-4d1f-97de-4bce9fb901a2",
        "versionId": "e0f2c50b-80d7-4bfd-879e-327324b4ab9f",
        "publishedAt": "2025-09-18T03:19:27.884628282Z",
        "updatedAt": "2025-09-18T03:19:27.884628282Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.tuananh/hyper-mcp",
    "description": "📦️ A fast, secure MCP server that extends its capabilities through WebAssembly plugins",
    "status": "active",
    "repository": {
      "url": "https://github.com/tuananh/hyper-mcp",
      "source": "github"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "oci",
        "registryBaseUrl": "https://docker.io",
        "identifier": "tuananh/hyper-mcp",
        "version": "v0.1.6",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "31e222fa-2ba8-4351-8649-6323c7982169",
        "versionId": "65e45248-15c4-4106-b54e-e25e3b0b749a",
        "publishedAt": "2025-09-18T04:56:15.144632543Z",
        "updatedAt": "2025-09-18T04:56:15.144632543Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.NitishGourishetty/contextual-mcp-server",
    "description": "RAG-enabled MCP server using Contextual AI. Supports single-agent and multi-agent modes.",
    "status": "active",
    "repository": {
      "url": "https://github.com/NitishGourishetty/contextual-mcp-server",
      "source": "github"
    },
    "version": "0.1.0",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "contextual-mcp-server",
        "version": "0.1.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your Contextual AI API key",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "API_KEY"
          },
          {
            "description": "Your Contextual AI agent ID (required only for single-agent mode; omit for multi-agent mode)",
            "format": "string",
            "name": "AGENT_ID"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "d405cf56-548e-419c-bad4-ccf8fdd90e52",
        "versionId": "98ca7143-bb86-4efd-a206-6d8e68c5ae3d",
        "publishedAt": "2025-09-18T06:42:30.878482398Z",
        "updatedAt": "2025-09-18T06:42:30.878482398Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/callmybot-hello-mcp-server",
    "description": "Generate quick, friendly greetings by name. Personalize salutations for any context. Explore the o…",
    "status": "active",
    "repository": {
      "url": "https://github.com/callmybot/hello-mcp-server",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@callmybot/hello-mcp-server/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a2ef84c4-253e-4f1f-abba-9a3ecb20cf2d",
        "versionId": "13e18ea1-9b63-4967-abde-7e8eac896218",
        "publishedAt": "2025-09-18T07:48:26.611267285Z",
        "updatedAt": "2025-09-18T07:48:26.611267285Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/airmang-hwpx-mcp",
    "description": "자동화하여 HWPX 문서의 로딩, 탐색, 편집, 검증을 한 번에 처리합니다. 문단·표·주석 추가, 텍스트 일괄 치환, 머리말·꼬리말 설정 등 반복 작업을 신속히 수행합니다. 기…",
    "status": "active",
    "repository": {
      "url": "https://github.com/airmang/hwpx-mcp",
      "source": "github"
    },
    "version": "1.14.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@airmang/hwpx-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "56691578-8bf7-43f5-a69e-b89ada4f687a",
        "versionId": "950bc7a1-ad16-45d1-b41e-14d41a6d4e55",
        "publishedAt": "2025-09-18T07:51:38.712980993Z",
        "updatedAt": "2025-09-18T07:51:38.712980993Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.dynatrace-oss/Dynatrace-mcp",
    "description": "Model Context Protocol server for Dynatrace - access logs, events, metrics from Dynatrace via MCP.",
    "status": "active",
    "repository": {
      "url": "https://github.com/dynatrace-oss/Dynatrace-mcp",
      "source": "github"
    },
    "version": "0.6.0-rc.2",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@dynatrace-oss/dynatrace-mcp-server",
        "version": "0.6.0-rc.1",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your Dynatrace Platform Token",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "DT_PLATFORM_TOKEN"
          },
          {
            "description": "The URL of your Dynatrace environment (e.g. 'https://abc12345.apps.dynatrace.com')",
            "isRequired": true,
            "format": "string",
            "name": "DT_ENVIRONMENT"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "d7b297de-f1e3-4ea7-979e-291bff370620",
        "versionId": "660a1645-bf53-4a1f-b32e-2cf97f607827",
        "publishedAt": "2025-09-18T08:07:03.493254127Z",
        "updatedAt": "2025-09-18T08:07:03.493254127Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/minionszyw-bazi",
    "description": "Generate BaZi charts from birth details. Explore Four Pillars, solar terms, and Luck Pillars for d…",
    "status": "active",
    "repository": {
      "url": "https://github.com/minionszyw/bazi",
      "source": "github"
    },
    "version": "1.14.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@minionszyw/bazi/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "fba076e0-91b9-4c9a-8cca-ded71a0adb61",
        "versionId": "c6a1f6a6-e9c1-47cc-a280-e67cf0015f96",
        "publishedAt": "2025-09-18T08:13:10.601277709Z",
        "updatedAt": "2025-09-18T08:13:10.601277709Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.snapcall/mcp",
    "description": "MCP Server that generate video call url",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.snapcall.io"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "af1c837f-4f14-49e1-b318-961cca038cfe",
        "versionId": "8c64bc44-f66c-4690-8470-ef2301a8b625",
        "publishedAt": "2025-09-18T08:16:15.414359799Z",
        "updatedAt": "2025-09-18T08:16:15.414359799Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.OtherVibes/mcp-as-a-judge",
    "description": "MCP as a Judge: a behavioral MCP that strengthens AI coding assistants via explicit LLM evaluations",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "0.3.2",
    "packages": [
      {
        "registryType": "pypi",
        "identifier": "mcp-as-a-judge",
        "version": "0.3.2",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "e8b7a95e-e0b7-44d1-9830-1ef945eed29d",
        "versionId": "3c57cfc7-c135-43a8-a3f5-c1c2b95fe020",
        "publishedAt": "2025-09-18T08:25:43.825449944Z",
        "updatedAt": "2025-09-18T20:23:31.617924504Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/rainbowgore-stealthee-mcp-tools",
    "description": "Spot pre-launch products before they trend. Search the web and tech sites, extract and parse pages…",
    "status": "active",
    "repository": {
      "url": "https://github.com/rainbowgore/stealthee-MCP-tools",
      "source": "github"
    },
    "version": "1.14.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@rainbowgore/stealthee-mcp-tools/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c14b315b-8010-40c2-9917-63f695accde9",
        "versionId": "b302b4d4-9e21-40b3-b3ec-72df9940b81c",
        "publishedAt": "2025-09-18T08:35:04.917712832Z",
        "updatedAt": "2025-09-18T08:35:04.917712832Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.KylinMountain/web-fetch-mcp",
    "description": "MCP server for web content fetching, summarizing, comparing, and extracting information",
    "status": "active",
    "repository": {
      "url": "https://github.com/KylinMountain/web-fetch-mcp.git",
      "source": "github"
    },
    "version": "0.1.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "web-fetch-mcp",
        "version": "0.1.1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your Gemini API key for the service",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "GEMINI_API_KEY"
          },
          {
            "description": "Your proxy for the gemini api service",
            "format": "string",
            "name": "HTTP_PROXY"
          },
          {
            "description": "Your proxy for the gemini api service",
            "format": "string",
            "name": "HTTPS_PROXY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "278a7db1-8bd6-49bf-b4c1-e8f298feee07",
        "versionId": "7a248a2b-7b8e-4d28-82c2-89d2949190dc",
        "publishedAt": "2025-09-18T09:15:43.239066581Z",
        "updatedAt": "2025-09-18T09:15:43.239066581Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/callmybot-cookbook-mcp-server",
    "description": "Count occurrences of any character in your text instantly. Specify the character and get precise c…",
    "status": "active",
    "repository": {
      "url": "https://github.com/callmybot/cookbook-mcp-server",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@callmybot/cookbook-mcp-server/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "bf62e877-0c0e-49e2-a459-36c336bca4af",
        "versionId": "86726d7d-81af-46f7-ba4a-e7c13bd0914a",
        "publishedAt": "2025-09-18T09:25:11.477138689Z",
        "updatedAt": "2025-09-18T09:25:11.477138689Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/arjunkmrm-ahoy2",
    "description": "Create friendly greetings by name, with an optional pirate tone. Explore the origin of 'Hello, Wor…",
    "status": "active",
    "repository": {
      "url": "https://github.com/arjunkmrm/ahoy",
      "source": "github"
    },
    "version": "1.13.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@arjunkmrm/ahoy2/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "d2eaf7dd-1510-4035-9779-7b4820662dbd",
        "versionId": "ca5f80fd-1eab-4967-b9a3-c921b0319446",
        "publishedAt": "2025-09-18T09:44:13.762613275Z",
        "updatedAt": "2025-09-18T09:44:13.762613275Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/adamamer20-paper-search-mcp-openai",
    "description": "Search and download academic papers from arXiv, PubMed, bioRxiv, medRxiv, Google Scholar, Semantic…",
    "status": "active",
    "repository": {
      "url": "https://github.com/adamamer20/paper-search-mcp-openai",
      "source": "github"
    },
    "version": "1.14.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@adamamer20/paper-search-mcp-openai/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "1b9d8596-bc91-4ff3-811e-e3a0d7964759",
        "versionId": "c4eee19a-f32f-4400-b996-0386fb66c46e",
        "publishedAt": "2025-09-18T10:21:35.77628635Z",
        "updatedAt": "2025-09-18T10:21:35.77628635Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/callmybot-domoticz",
    "description": "Greet anyone by name with a friendly hello. Explore the origin of 'Hello, World' for context in de…",
    "status": "active",
    "repository": {
      "url": "https://github.com/callmybot/domoticz",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@callmybot/domoticz/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "5b1fc47b-a516-4763-be65-83249e6200b5",
        "versionId": "568e596f-ed17-4d09-9812-8e3ef60e47ea",
        "publishedAt": "2025-09-18T10:31:39.650923022Z",
        "updatedAt": "2025-09-18T10:31:39.650923022Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.devopness.mcp/server",
    "description": "An MCP server that uses Devopness to allow AI Agents to provision infrastructure to any cloud",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.devopness.com/mcp/"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "bc4ee5b3-ef7a-4c6b-b1b0-f7b248a65512",
        "versionId": "4c009ed4-f329-4a34-b303-a2aa0ae88db0",
        "publishedAt": "2025-09-18T11:54:55.748612521Z",
        "updatedAt": "2025-09-18T17:29:14.634765037Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.mermaidchart/mermaid-mcp",
    "description": "MCP server for Mermaid diagram validation and rendering",
    "status": "active",
    "repository": {
      "url": "https://github.com/Mermaid-Chart/mermaid-mcp",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.mermaidchart.com/mcp"
      },
      {
        "type": "sse",
        "url": "https://mcp.mermaidchart.com/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "90e878b4-5ec0-4346-b6a8-3dcb72118aa4",
        "versionId": "77594a1a-b942-4fbc-9a03-5ef40b7bd734",
        "publishedAt": "2025-09-18T12:13:25.426328055Z",
        "updatedAt": "2025-09-18T12:13:25.426328055Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/ProfessionalWiki-mediawiki-mcp-server",
    "description": "Enable Large Language Model clients to interact seamlessly with any MediaWiki wiki. Perform action…",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "0.1.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@ProfessionalWiki/mediawiki-mcp-server/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a4d3d192-2156-470a-87b9-7b355c0332d2",
        "versionId": "828887dd-c8da-4819-9f83-91094f2452bb",
        "publishedAt": "2025-09-18T12:49:06.317403403Z",
        "updatedAt": "2025-09-18T12:49:06.317403403Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.PV-Bhat/vibe-check-mcp-server",
    "description": "Metacognitive AI agent oversight: adaptive CPI interrupts for alignment, reflection and safety",
    "status": "active",
    "repository": {
      "url": "https://github.com/PV-Bhat/vibe-check-mcp-server",
      "source": "github"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "npm",
        "identifier": "@pv-bhat/vibe-check-mcp",
        "version": "2.5.1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your API key for the service",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "YOUR_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "d1386d04-c82c-4907-ab37-8fa5ba13b21c",
        "versionId": "57df4a71-6c82-4a88-a20e-985729df0399",
        "publishedAt": "2025-09-18T12:55:25.166512222Z",
        "updatedAt": "2025-09-18T12:55:25.166512222Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.wonderwhy-er/desktop-commander",
    "description": "MCP server for terminal commands, file operations, and process management",
    "status": "active",
    "repository": {
      "url": "https://github.com/wonderwhy-er/DesktopCommanderMCP",
      "source": "github"
    },
    "version": "0.2.15",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@wonderwhy-er/desktop-commander",
        "version": "0.2.15",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "70b472c6-0bf2-44b2-97fc-be12bfc3cdca",
        "versionId": "832cd2a6-02b3-4eec-a7dc-f91e56d895da",
        "publishedAt": "2025-09-18T13:15:52.386560726Z",
        "updatedAt": "2025-09-26T16:35:30.87372225Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/sunub-obsidian-mcp-server",
    "description": "Search your Obsidian vault to quickly find notes by title or keyword, summarize related content, a…",
    "status": "active",
    "repository": {
      "url": "https://github.com/sunub/obsidian-mcp-server",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@sunub/obsidian-mcp-server/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "793edb61-30ec-4fdd-8aa1-67aa523f8f08",
        "versionId": "3d457e31-2ee0-4aae-8570-22aed58bb977",
        "publishedAt": "2025-09-18T13:40:45.500066991Z",
        "updatedAt": "2025-09-18T13:40:45.500066991Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/oxylabs-oxylabs-mcp",
    "description": "Fetch and process content from specified URLs using the Oxylabs Web Scraper API.",
    "status": "active",
    "repository": {
      "url": "https://github.com/oxylabs/oxylabs-mcp",
      "source": "github"
    },
    "version": "1.13.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@oxylabs/oxylabs-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "77090d04-1343-4096-97ae-a740eca48fcb",
        "versionId": "91636355-fc26-4f99-8fbf-fc8338772807",
        "publishedAt": "2025-09-18T14:22:20.35374233Z",
        "updatedAt": "2025-09-18T14:22:20.35374233Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.localstack/localstack-mcp-server",
    "description": "A LocalStack MCP Server providing essential tools for local cloud development & testing",
    "status": "active",
    "repository": {
      "url": "https://github.com/localstack/localstack-mcp-server",
      "source": "github"
    },
    "version": "0.1.5",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@localstack/localstack-mcp-server",
        "version": "0.1.5",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "LocalStack Auth Token (optional for Pro features)",
            "format": "string",
            "isSecret": true,
            "name": "LOCALSTACK_AUTH_TOKEN"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "3e13ffea-7049-4d98-a932-7c06dc4a8077",
        "versionId": "37f249dd-58c5-45cf-b2a1-d72f7b2b9ebb",
        "publishedAt": "2025-09-18T14:38:06.908080633Z",
        "updatedAt": "2025-09-18T14:38:06.908080633Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/MisterSandFR-supabase-mcp-selfhosted",
    "description": "Manage Supabase projects end to end across database, auth, storage, realtime, and migrations. Moni…",
    "status": "active",
    "repository": {
      "url": "https://github.com/MisterSandFR/Supabase-MCP-SelfHosted",
      "source": "github"
    },
    "version": "1.14.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@MisterSandFR/supabase-mcp-selfhosted/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "d07e588e-585e-44b0-a8d4-4cf7ad928ba0",
        "versionId": "babb48c9-0ae5-4436-b957-3fd988656ac2",
        "publishedAt": "2025-09-18T14:42:06.197814736Z",
        "updatedAt": "2025-09-18T14:42:06.197814736Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.CDataSoftware/connectcloud-mcp-server",
    "description": "MCP Server for CData Connect AI - Query, manage, and act on data from 300+ enterprise sources",
    "repository": {
      "url": "https://github.com/CDataSoftware/connectcloud-mcp-server",
      "source": "github"
    },
    "version": "",
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "fcf39163-658e-4f17-8026-fdf45d4fef88",
        "versionId": "8fba90af-050e-47dc-bbf4-c1bc36c1a097",
        "publishedAt": "2025-09-18T15:39:53.512065948Z",
        "updatedAt": "2025-09-18T15:39:53.512065948Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "app.linear/linear",
    "description": "MCP server for Linear project management and issue tracking",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "sse",
        "url": "https://mcp.linear.app/sse"
      },
      {
        "type": "streamable-http",
        "url": "https://mcp.linear.app/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "08fcd639-7510-44e0-bcd7-c6cc20345d8c",
        "versionId": "8b8bca5f-bd16-4660-be56-da38b1ed6e95",
        "publishedAt": "2025-09-18T15:51:15.598862489Z",
        "updatedAt": "2025-09-18T15:51:15.598862489Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.minnas/mcp",
    "description": "Share prompts and context with your team and discover community collections.",
    "status": "active",
    "repository": {
      "url": "https://github.com/sensoris/minnas-service",
      "source": "github"
    },
    "version": "1.1.0",
    "remotes": [
      {
        "type": "sse",
        "url": "https://api.minnas.io/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "33e1232b-4b00-46fc-9460-452cae6bdcb5",
        "versionId": "c3bda903-da17-48a7-b7ec-e2195c38e78c",
        "publishedAt": "2025-09-18T16:40:24.146729603Z",
        "updatedAt": "2025-09-18T16:40:24.146729603Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.devopness.mcp/server",
    "description": "Devopness MCP server for DevOps happiness! Empower AI Agents to deploy apps and infra, to any cloud.",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.devopness.com/mcp/"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "bc4ee5b3-ef7a-4c6b-b1b0-f7b248a65512",
        "versionId": "fcb40418-d81d-40ce-9726-7ca47af47ac1",
        "publishedAt": "2025-09-18T17:29:14.559764254Z",
        "updatedAt": "2025-09-18T17:29:14.559764254Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.timheuer/sampledotnetmcpserver",
    "description": "Sample .NET MCP Server",
    "repository": {
      "url": "https://github.com/timheuer/sampledotnetmcpserver",
      "source": "github"
    },
    "version": "0.1.41-beta",
    "packages": [
      {
        "registryType": "nuget",
        "identifier": "TimHeuer.SampleDotnetMcpServer",
        "version": "0.1.41-beta",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "98619929-a570-46c1-8e35-4cde888731ee",
        "versionId": "70624f7a-0258-4257-a032-f8524353c5e4",
        "publishedAt": "2025-09-18T17:33:36.288044849Z",
        "updatedAt": "2025-09-18T21:01:12.611343565Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.abhijitjavelin/javelin-guardrails-mcp-server",
    "description": "An MCP server that provides Javelin Standalone Guardrails",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://abhijitjavelin.github.io/javelin-guardrails-mcp-server/mcp",
        "headers": [
          {
            "description": "Javelin API key for authentication",
            "isRequired": true,
            "isSecret": true,
            "name": "x-javelin-apikey"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "4e9a9c03-d422-4646-8376-7c7995eb35fb",
        "versionId": "3cd27f25-a778-4638-a77b-49fee7d9a676",
        "publishedAt": "2025-09-18T17:34:35.233239012Z",
        "updatedAt": "2025-09-18T17:34:35.233239012Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/HARJAP-SINGH-3105-splitwise_mcp",
    "description": "Manage Splitwise balances, expenses, and groups from your workspace. Fetch friends and recent acti…",
    "status": "active",
    "repository": {
      "url": "https://github.com/HARJAP-SINGH-3105/Splitwise_MCP",
      "source": "github"
    },
    "version": "1.14.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@HARJAP-SINGH-3105/splitwise_mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "60ca3511-07eb-454b-ae71-965e370b1b9c",
        "versionId": "77bb7283-097b-4e56-8eed-46c859a4e1df",
        "publishedAt": "2025-09-18T18:42:59.47098798Z",
        "updatedAt": "2025-09-18T18:42:59.47098798Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.mux/mcp",
    "description": "The official MCP Server for the Mux API",
    "status": "active",
    "repository": {
      "url": "https://github.com/muxinc/mux-node-sdk",
      "source": "github",
      "subfolder": "packages/mcp-server"
    },
    "version": "12.8.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@mux/mcp",
        "version": "12.8.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your Mux access token ID",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "MUX_TOKEN_ID"
          },
          {
            "description": "Your Mux access token secret",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "MUX_TOKEN_SECRET"
          },
          {
            "description": "Your JWT signing key ID, for use with signed playback IDs",
            "format": "string",
            "isSecret": true,
            "name": "MUX_SIGNING_KEY"
          },
          {
            "description": "Your JWT private key, for use with signed playback IDs",
            "format": "string",
            "isSecret": true,
            "name": "MUX_PRIVATE_KEY"
          }
        ]
      }
    ],
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.mux.com",
        "headers": [
          {
            "description": "Optional basic authorization header you can include, combining your Access Token and Secret using HTTP Basic Auth. If not provided, authorization will be handled via OAuth.",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "bf008dae-4210-4bce-8621-a709bc1e67cb",
        "versionId": "89136fab-1248-4db5-aabd-a112cc45136e",
        "publishedAt": "2025-09-18T20:19:27.74268937Z",
        "updatedAt": "2025-09-18T20:19:27.74268937Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.OtherVibes/mcp-as-a-judge",
    "description": "MCP as a Judge: a behavioral MCP that strengthens AI coding assistants via explicit LLM evaluations",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "0.3.3",
    "packages": [
      {
        "registryType": "pypi",
        "identifier": "mcp-as-a-judge",
        "version": "0.3.3",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "e8b7a95e-e0b7-44d1-9830-1ef945eed29d",
        "versionId": "c5f3c013-d154-4bbf-ad6f-f68c247c3371",
        "publishedAt": "2025-09-18T20:23:31.611474327Z",
        "updatedAt": "2025-09-18T21:45:57.098844508Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.zenml-io/mcp-zenml",
    "description": "MCP server for ZenML - browse stacks, pipelines, runs, artifacts & trigger pipeline runs via API",
    "status": "active",
    "repository": {
      "url": "https://github.com/zenml-io/mcp-zenml",
      "source": "github"
    },
    "version": "1.0.4",
    "packages": [
      {
        "registryType": "oci",
        "registryBaseUrl": "https://docker.io",
        "identifier": "zenmldocker/mcp-zenml",
        "version": "1.0.4",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Base URL of your ZenML server (e.g., https://<workspace-id>-zenml.cloudinfra.zenml.io).",
            "isRequired": true,
            "format": "string",
            "name": "ZENML_STORE_URL"
          },
          {
            "description": "API key used to authenticate with your ZenML server (ideally a service account key).",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "ZENML_STORE_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "6d64bd95-ee87-476c-8bc3-a36e65cfcee2",
        "versionId": "848ff1ad-ac4a-49b6-bd19-d27710b5d4c1",
        "publishedAt": "2025-09-18T20:48:56.219551735Z",
        "updatedAt": "2025-09-18T20:48:56.219551735Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.timheuer/sampledotnetmcpserver",
    "description": "Sample .NET MCP Server",
    "repository": {
      "url": "https://github.com/timheuer/sampledotnetmcpserver",
      "source": "github"
    },
    "version": "0.1.45-beta",
    "packages": [
      {
        "registryType": "nuget",
        "identifier": "TimHeuer.SampleDotnetMcpServer",
        "version": "0.1.45-beta",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "98619929-a570-46c1-8e35-4cde888731ee",
        "versionId": "5c4aade2-e5bf-4633-b09d-5c0a795b8f16",
        "publishedAt": "2025-09-18T21:01:12.606342152Z",
        "updatedAt": "2025-09-18T21:24:07.745680383Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.timheuer/sampledotnetmcpserver",
    "description": "Sample .NET MCP Server",
    "repository": {
      "url": "https://github.com/timheuer/sampledotnetmcpserver",
      "source": "github"
    },
    "version": "0.1.46-beta",
    "packages": [
      {
        "registryType": "nuget",
        "identifier": "TimHeuer.SampleDotnetMcpServer",
        "version": "0.1.46-beta",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "98619929-a570-46c1-8e35-4cde888731ee",
        "versionId": "b9d93fa8-9d3f-474b-9f50-54c61731bd01",
        "publishedAt": "2025-09-18T21:24:07.737452346Z",
        "updatedAt": "2025-09-18T23:12:00.040130344Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.supabase/mcp",
    "description": "MCP server for interacting with the Supabase platform",
    "status": "active",
    "repository": {
      "url": "https://github.com/supabase-community/supabase-mcp",
      "source": "github",
      "subfolder": "packages/mcp-server-supabase"
    },
    "version": "0.5.5",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@supabase/mcp-server-supabase",
        "version": "0.5.5",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        },
        "runtimeArguments": [
          {
            "description": "Supabase project reference ID",
            "format": "string",
            "type": "named",
            "name": "--project-ref"
          },
          {
            "description": "Enable read-only mode",
            "format": "boolean",
            "type": "named",
            "name": "--read-only"
          },
          {
            "description": "Comma-separated list of features to enable",
            "format": "string",
            "type": "named",
            "name": "--features"
          },
          {
            "description": "Custom API URL",
            "format": "string",
            "type": "named",
            "name": "--api-url"
          }
        ],
        "environmentVariables": [
          {
            "description": "Personal access token for Supabase API",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "SUPABASE_ACCESS_TOKEN"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b7c21a79-6a4a-42e2-a194-944a1d1ed9f7",
        "versionId": "d1eeec4d-9cad-4acb-8d79-4f44332fe3f9",
        "publishedAt": "2025-09-18T21:32:17.512331682Z",
        "updatedAt": "2025-09-18T21:32:17.512331682Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.marlenezw/publish-mcp-server",
    "description": "An MCP server that helps developers publish their MCP servers to the registry",
    "status": "active",
    "repository": {
      "url": "https://github.com/marlenezw/publish-mcp-server",
      "source": "github"
    },
    "version": "0.1.2",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "publish-mcp-server",
        "version": "0.1.2",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "8ae04d6a-da1e-419e-abc9-8c36f3d1f358",
        "versionId": "41a4f7e2-45d4-413c-b9e5-23272bac4728",
        "publishedAt": "2025-09-18T21:41:33.141494993Z",
        "updatedAt": "2025-09-18T22:42:06.389511199Z",
        "isLatest": false
      }
    }
  },
  {
    "name": "io.github.OtherVibes/mcp-as-a-judge",
    "description": "MCP as a Judge: a behavioral MCP that strengthens AI coding assistants via explicit LLM evaluations",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "0.3.12",
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "e8b7a95e-e0b7-44d1-9830-1ef945eed29d",
        "versionId": "5ccbb7c4-a540-465f-8457-936802e52673",
        "publishedAt": "2025-09-18T21:45:57.092950721Z",
        "updatedAt": "2025-09-18T22:00:36.898440904Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/kodey-ai-mapwise-mcp",
    "description": "Send friendly, personalized greetings on demand. Generate quick salutations with a simple prompt.…",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@kodey-ai/mapwise-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "5f480031-7f5d-472d-a622-0e42344857f2",
        "versionId": "c5e7c259-731f-42f5-959c-b2f423acbffc",
        "publishedAt": "2025-09-18T21:55:01.522892141Z",
        "updatedAt": "2025-09-18T21:55:01.522892141Z",
        "isLatest": true
      }
    }
  },
  {
    "name": "io.github.OtherVibes/mcp-as-a-judge",
    "description": "MCP as a Judge: a behavioral MCP that strengthens AI coding assistants via explicit LLM evaluations",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "0.3.13",
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "e8b7a95e-e0b7-44d1-9830-1ef945eed29d",
        "versionId": "fe00dad0-f665-453b-a667-ff147be8ff07",
        "publishedAt": "2025-09-18T22:00:36.893962101Z",
        "updatedAt": "2025-09-18T22:05:09.298621446Z",
        "isLatest": false
      }
    }
  },
  {
    "name": "io.github.OtherVibes/mcp-as-a-judge",
    "description": "MCP as a Judge: a behavioral MCP that strengthens AI coding assistants via explicit LLM evaluations",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "0.3.14",
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "e8b7a95e-e0b7-44d1-9830-1ef945eed29d",
        "versionId": "f0660545-d885-4892-a54a-f86134e56047",
        "publishedAt": "2025-09-18T22:05:09.292804039Z",
        "updatedAt": "2025-09-20T10:35:19.813843542Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.marlenezw/publish-mcp-server",
    "description": "An MCP server that helps developers publish their MCP servers to the registry",
    "status": "active",
    "repository": {
      "url": "https://github.com/marlenezw/publish-mcp-server",
      "source": "github"
    },
    "version": "0.1.3",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "publish-mcp-server",
        "version": "0.1.3",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "8ae04d6a-da1e-419e-abc9-8c36f3d1f358",
        "versionId": "1357cfee-84de-4f73-b696-a06de4bd0ebf",
        "publishedAt": "2025-09-18T22:42:06.320770941Z",
        "updatedAt": "2025-09-18T22:42:06.320770941Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.jkawamoto/mcp-florence2",
    "description": "An MCP server for processing images using Florence-2",
    "status": "active",
    "repository": {
      "url": "https://github.com/jkawamoto/mcp-florence2",
      "source": "github"
    },
    "version": "0.3.2",
    "packages": [
      {
        "registryType": "mcpb",
        "identifier": "https://github.com/jkawamoto/mcp-florence2/releases/download/v0.3.2/mcp-florence2.mcpb",
        "version": "0.3.2",
        "fileSha256": "58fcb84d444c01f3d7e9a3dd3ea6fa45dc7515663141527936ee8daec2cd0f63",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "dcf30ab3-ffde-4a3f-8d36-522b9e3016e3",
        "versionId": "296598bd-aa8c-4ec5-acc8-4d57ad677139",
        "publishedAt": "2025-09-18T22:50:50.36439604Z",
        "updatedAt": "2025-09-19T00:50:28.853946312Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.timheuer/sampledotnetmcpserver",
    "description": "Sample .NET MCP Server",
    "repository": {
      "url": "https://github.com/timheuer/sampledotnetmcpserver",
      "source": "github"
    },
    "version": "0.1.47-beta",
    "packages": [
      {
        "registryType": "nuget",
        "identifier": "TimHeuer.SampleDotnetMcpServer",
        "version": "0.1.47-beta",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "98619929-a570-46c1-8e35-4cde888731ee",
        "versionId": "dceeb59c-c54e-49f0-a35a-3419c47b70c8",
        "publishedAt": "2025-09-18T23:12:00.031460414Z",
        "updatedAt": "2025-09-19T00:25:42.487558694Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.timheuer/sampledotnetmcpserver",
    "description": "Sample .NET MCP Server",
    "repository": {
      "url": "https://github.com/timheuer/sampledotnetmcpserver",
      "source": "github"
    },
    "version": "0.1.48-beta",
    "packages": [
      {
        "registryType": "nuget",
        "identifier": "TimHeuer.SampleDotnetMcpServer",
        "version": "0.1.48-beta",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "98619929-a570-46c1-8e35-4cde888731ee",
        "versionId": "67f917af-19d6-4db5-9d79-2405fd168689",
        "publishedAt": "2025-09-19T00:25:42.425081591Z",
        "updatedAt": "2025-09-19T16:03:41.846198999Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.jkawamoto/mcp-florence2",
    "description": "An MCP server for processing images using Florence-2",
    "status": "active",
    "repository": {
      "url": "https://github.com/jkawamoto/mcp-florence2",
      "source": "github"
    },
    "version": "0.3.3",
    "packages": [
      {
        "registryType": "mcpb",
        "identifier": "https://github.com/jkawamoto/mcp-florence2/releases/download/v0.3.3/mcp-florence2.mcpb",
        "version": "0.3.3",
        "fileSha256": "4e176c58148fde7ef8a548b5ba2ca5d6b4a2f496fb3ab3b84c7329e1c732147b",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "dcf30ab3-ffde-4a3f-8d36-522b9e3016e3",
        "versionId": "b6d97b5e-f822-4f10-b6fe-1c5d2210e3aa",
        "publishedAt": "2025-09-19T00:50:28.842922547Z",
        "updatedAt": "2025-09-19T00:50:28.842922547Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.Lyellr88/marm-mcp-server",
    "description": "Universal MCP Server with advanced AI memory capabilities and semantic search.",
    "repository": {
      "url": "https://github.com/Lyellr88/MARM-Systems",
      "source": "github"
    },
    "version": "2.2.1",
    "packages": [
      {
        "registryType": "pypi",
        "identifier": "marm-mcp-server",
        "version": "2.2.1",
        "transport": {
          "type": "stdio"
        }
      },
      {
        "registryType": "oci",
        "identifier": "lyellr88/marm-mcp-server",
        "version": "2.2.1",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "73eda8a1-8138-43c0-ac0e-5f953d1d304e",
        "versionId": "0760bf55-1b79-4018-9d07-b1344286092e",
        "publishedAt": "2025-09-19T01:23:00.859132392Z",
        "updatedAt": "2025-09-19T04:27:24.541089113Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/alphago2580-naramarketmcp",
    "description": "Access Korea’s G2B procurement and Nara Market data for bid notices, awards, contracts, statistics…",
    "status": "active",
    "repository": {
      "url": "https://github.com/alphago2580/naramarketmcp",
      "source": "github"
    },
    "version": "1.14.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@alphago2580/naramarketmcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "df96996d-30f8-49ea-9012-02117777747c",
        "versionId": "25e1e4ce-1eae-45d6-9b48-0ae6ae00d59d",
        "publishedAt": "2025-09-19T02:36:55.167644104Z",
        "updatedAt": "2025-09-19T02:36:55.167644104Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.pubnub/mcp-server",
    "description": "PubNub MCP for Real-time messaging. API Access and SDK documentation.",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.104",
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "1319578e-b112-443f-9938-68f2527a10b4",
        "versionId": "d1e7a64f-300f-4506-bf0f-30e8684b857b",
        "publishedAt": "2025-09-19T02:42:31.411220651Z",
        "updatedAt": "2025-09-19T21:08:36.529344207Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/arjunkmrm-bobo",
    "description": "Send friendly, personalized greetings on command. Explore the origin of 'Hello, World' for quick c…",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.14.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@arjunkmrm/bobo/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "5abfd15e-d3d1-41ac-9a46-a46443067f4f",
        "versionId": "7faea200-7939-40a8-a809-115c22381d04",
        "publishedAt": "2025-09-19T03:28:29.60673126Z",
        "updatedAt": "2025-09-19T03:28:29.60673126Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.francisco-perez-sorrosal/cv",
    "description": "An MCP server that provides access to Francisco Perez-Sorrosal's CV",
    "status": "active",
    "repository": {
      "url": "https://github.com/francisco-perez-sorrosal/cv",
      "source": "github"
    },
    "version": "0.0.1",
    "packages": [
      {
        "registryType": "mcpb",
        "identifier": "https://github.com/francisco-perez-sorrosal/cv/releases/download/v0.0.1/fps-cv-mcp-0.0.1.mcpb",
        "version": "0.0.1",
        "fileSha256": "d01ccdbbea56702215a8015ad19c12f5681b61c1fdaeaa258c88f657a6f02bd6",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "f288d19b-848a-4e88-8c31-0911f61161f5",
        "versionId": "77a61e41-6dfd-4649-be2e-e6d69f18ba9c",
        "publishedAt": "2025-09-19T03:40:16.952878792Z",
        "updatedAt": "2025-09-19T03:40:16.952878792Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.Lyellr88/marm-mcp-server",
    "description": "Universal MCP Server with advanced AI memory capabilities and semantic search.",
    "repository": {
      "url": "https://github.com/Lyellr88/MARM-Systems",
      "source": "github"
    },
    "version": "2.2.2",
    "packages": [
      {
        "registryType": "pypi",
        "identifier": "marm-mcp-server",
        "version": "2.2.2",
        "transport": {
          "type": "stdio"
        }
      },
      {
        "registryType": "oci",
        "identifier": "lyellr88/marm-mcp-server",
        "version": "2.2.2",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "73eda8a1-8138-43c0-ac0e-5f953d1d304e",
        "versionId": "317c4867-14ab-489f-8343-b2ddaa3142a1",
        "publishedAt": "2025-09-19T04:27:24.435507407Z",
        "updatedAt": "2025-09-19T07:39:05.791392866Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.ChiR24/unreal-engine-mcp",
    "description": "Production-ready MCP server for Unreal Engine with comprehensive game development tools",
    "repository": {
      "url": "https://github.com/ChiR24/Unreal_mcp.git",
      "source": "github"
    },
    "version": "0.3.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "unreal-engine-mcp-server",
        "version": "0.3.1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Unreal Engine host address",
            "value": "127.0.0.1",
            "name": "UE_HOST"
          },
          {
            "description": "Remote Control HTTP port",
            "value": "30010",
            "name": "UE_RC_HTTP_PORT"
          },
          {
            "description": "Remote Control WebSocket port",
            "value": "30020",
            "name": "UE_RC_WS_PORT"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "49c64feb-2e4c-406d-b39f-1236bf2212a6",
        "versionId": "50c79598-1f20-41a4-8c5f-e429a69b6af9",
        "publishedAt": "2025-09-19T06:41:59.942159455Z",
        "updatedAt": "2025-09-20T06:29:35.19162833Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.Lyellr88/marm-mcp-server",
    "description": "Universal MCP Server with advanced AI memory capabilities and semantic search.",
    "repository": {
      "url": "https://github.com/Lyellr88/MARM-Systems",
      "source": "github"
    },
    "version": "2.2.3",
    "packages": [
      {
        "registryType": "pypi",
        "identifier": "marm-mcp-server",
        "version": "2.2.3",
        "transport": {
          "type": "stdio"
        }
      },
      {
        "registryType": "oci",
        "identifier": "lyellr88/marm-mcp-server",
        "version": "2.2.3",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "73eda8a1-8138-43c0-ac0e-5f953d1d304e",
        "versionId": "888a54b2-a4fb-4e79-8d29-5f6dd2d7506c",
        "publishedAt": "2025-09-19T07:39:05.720820301Z",
        "updatedAt": "2025-09-19T08:07:18.948848371Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.estruyf/vscode-demo-time",
    "description": "Enables AI assistants to interact with Demo Time and helps build presentations and demos.",
    "status": "active",
    "repository": {
      "url": "https://github.com/estruyf/vscode-demo-time",
      "source": "github"
    },
    "version": "0.0.55",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@demotime/mcp",
        "version": "0.0.55",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "20dee53d-4ec0-45dd-b5e7-fb3c71fa6352",
        "versionId": "c965417f-fe89-47ce-bbd6-914ffdac121a",
        "publishedAt": "2025-09-19T07:45:12.638193269Z",
        "updatedAt": "2025-09-19T07:45:12.638193269Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/arjunkmrm-clock",
    "description": "Check the current time instantly and explore world timezones by region. Browse available continent…",
    "status": "active",
    "repository": {
      "url": "https://github.com/arjunkmrm/clock",
      "source": "github"
    },
    "version": "1.14.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@arjunkmrm/clock/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "1aa7d4bd-c3f4-41ed-9304-87fb9cf2f637",
        "versionId": "93b96420-d875-418a-a49c-e909ef61dd03",
        "publishedAt": "2025-09-19T08:00:25.675646118Z",
        "updatedAt": "2025-09-19T08:00:25.675646118Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.Lyellr88/marm-mcp-server",
    "description": "Universal MCP Server with advanced AI memory capabilities and semantic search.",
    "repository": {
      "url": "https://github.com/Lyellr88/MARM-Systems",
      "source": "github"
    },
    "version": "2.2.4",
    "packages": [
      {
        "registryType": "pypi",
        "identifier": "marm-mcp-server",
        "version": "2.2.4",
        "transport": {
          "type": "stdio"
        }
      },
      {
        "registryType": "oci",
        "identifier": "lyellr88/marm-mcp-server",
        "version": "2.2.4",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "73eda8a1-8138-43c0-ac0e-5f953d1d304e",
        "versionId": "74d60051-d76b-4b9b-9bff-33ef5a462ee6",
        "publishedAt": "2025-09-19T08:07:18.942315795Z",
        "updatedAt": "2025-09-23T06:50:35.607631842Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/arjunkmrm-watch2",
    "description": "Get the current time in your chosen timezone. Browse available continents and regions to pick the…",
    "status": "active",
    "repository": {
      "url": "https://github.com/arjunkmrm/clock",
      "source": "github"
    },
    "version": "1.14.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@arjunkmrm/watch2/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "fbf7b938-5340-46e6-bb1c-ed9717d25ccd",
        "versionId": "3cf0b534-6629-4f4e-96d1-0cc83262fd40",
        "publishedAt": "2025-09-19T08:31:21.361327554Z",
        "updatedAt": "2025-09-19T08:31:21.361327554Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/jjlabsio-korea-stock-mcp",
    "description": "Search company disclosures and financial statements from the Korean market. Retrieve stock profile…",
    "status": "active",
    "repository": {
      "url": "https://github.com/jjlabsio/korea-stock-mcp",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@jjlabsio/korea-stock-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "7c15ce7e-7738-44d1-a12d-623c2f081975",
        "versionId": "db05e116-a497-44d3-8ac2-3f95abb70c8e",
        "publishedAt": "2025-09-19T09:01:49.012753599Z",
        "updatedAt": "2025-09-19T09:01:49.012753599Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/brave",
    "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
    "status": "active",
    "repository": {
      "url": "https://github.com/brave/brave-search-mcp-server",
      "source": "github"
    },
    "version": "2.0.3",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/brave/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "72fbc728-2894-4a60-aaf5-44d616ddd249",
        "versionId": "fa09d041-465b-4104-9854-cd897040806d",
        "publishedAt": "2025-09-19T09:07:32.526636285Z",
        "updatedAt": "2025-09-19T09:19:58.337669647Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/brave",
    "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
    "status": "active",
    "repository": {
      "url": "https://github.com/brave/brave-search-mcp-server",
      "source": "github"
    },
    "version": "2.0.4",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/brave/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "72fbc728-2894-4a60-aaf5-44d616ddd249",
        "versionId": "b31c9266-d01c-42e7-b5e7-4e003977d220",
        "publishedAt": "2025-09-19T09:19:58.329763807Z",
        "updatedAt": "2025-09-19T09:33:46.378865935Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/brave",
    "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
    "status": "active",
    "repository": {
      "url": "https://github.com/brave/brave-search-mcp-server",
      "source": "github"
    },
    "version": "2.0.5",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/brave/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "72fbc728-2894-4a60-aaf5-44d616ddd249",
        "versionId": "98827eac-a780-4744-a305-08c275b06526",
        "publishedAt": "2025-09-19T09:33:46.341429779Z",
        "updatedAt": "2025-09-19T09:40:01.090665055Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/brave",
    "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
    "status": "active",
    "repository": {
      "url": "https://github.com/brave/brave-search-mcp-server",
      "source": "github"
    },
    "version": "2.0.6",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/brave/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "72fbc728-2894-4a60-aaf5-44d616ddd249",
        "versionId": "d0cdf20e-831c-4de3-b2eb-8dad26a1e866",
        "publishedAt": "2025-09-19T09:40:01.083925747Z",
        "updatedAt": "2025-09-19T11:31:51.128068889Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.jjlabsio/korea-stock-mcp",
    "description": "MCP server for korea stock",
    "status": "active",
    "repository": {
      "url": "https://github.com/jjlabsio/korea-stock-mcp",
      "source": "github"
    },
    "version": "1.1.4",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "korea-stock-mcp",
        "version": "1.1.4",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "DART API key for the service",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "DART_API_KEY"
          },
          {
            "description": "KRX API key for the service",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "KRX_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "02439721-a2d0-48d9-88ce-98494ba8e97f",
        "versionId": "242d7040-4e0c-4736-a478-9815b9754c10",
        "publishedAt": "2025-09-19T09:51:42.286475103Z",
        "updatedAt": "2025-09-19T09:51:42.286475103Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.florentine-ai/mcp",
    "description": "MCP server for Florentine.ai - Natural language to MongoDB aggregations",
    "status": "active",
    "repository": {
      "url": "https://github.com/florentine-ai/mcp",
      "source": "github"
    },
    "version": "0.2.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@florentine-ai/mcp",
        "version": "0.1.4",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        },
        "runtimeArguments": [
          {
            "isRequired": true,
            "value": "@florentine-ai/mcp@latest",
            "type": "named",
            "name": "-y"
          }
        ],
        "packageArguments": [
          {
            "description": "The mode to run the MCP server in ('static' or 'dynamic')",
            "isRequired": true,
            "value": "static",
            "type": "named",
            "name": "--mode"
          },
          {
            "description": "Set to true to enable debug logging",
            "format": "boolean",
            "type": "named",
            "name": "--debug"
          },
          {
            "description": "The path to the log file, must be provided if debug is true",
            "format": "filepath",
            "type": "named",
            "name": "--logpath"
          }
        ],
        "environmentVariables": [
          {
            "description": "Your Florentine.ai API key, get it from https://florentine.ai/dashboard",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "FLORENTINE_TOKEN"
          },
          {
            "description": "The LLM service to use, one of 'openai', 'anthropic', 'google' or 'deepseek' (must only be provided if you did not set it in your Florentine.ai account)",
            "format": "string",
            "name": "LLM_SERVICE"
          },
          {
            "description": "Your API key for the LLM service (must only be provided if you did not set it in your Florentine.ai account)",
            "format": "string",
            "isSecret": true,
            "name": "LLM_KEY"
          },
          {
            "description": "Session ID for maintaining server-side context across requests",
            "format": "string",
            "name": "SESSION_ID"
          },
          {
            "description": "Stringified JSON array of return types for the response",
            "format": "string",
            "name": "RETURN_TYPES"
          },
          {
            "description": "Stringified JSON array of values for required inputs keys",
            "format": "string",
            "name": "REQUIRED_INPUTS"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "1c220829-98d0-47a3-8b2e-09d7d5314f02",
        "versionId": "a7001433-3351-44ed-9efc-c0597677bc94",
        "publishedAt": "2025-09-19T10:37:42.953745468Z",
        "updatedAt": "2025-09-19T10:37:42.953745468Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/brave",
    "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
    "status": "active",
    "repository": {
      "url": "https://github.com/brave/brave-search-mcp-server",
      "source": "github"
    },
    "version": "2.0.7",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/brave/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "72fbc728-2894-4a60-aaf5-44d616ddd249",
        "versionId": "4a3dfc88-8bc3-48f3-92b5-0285b455ba46",
        "publishedAt": "2025-09-19T11:31:50.983916145Z",
        "updatedAt": "2025-09-19T11:38:30.02190701Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.brave/brave-search-mcp-server",
    "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
    "status": "active",
    "repository": {
      "url": "https://github.com/brave/brave-search-mcp-server",
      "source": "github"
    },
    "version": "2.0.8",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@brave/brave-search-mcp-server",
        "version": "2.0.8",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your API key for the service",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "BRAVE_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "fe2e0e07-1466-499a-bcdd-16d07b8ccb40",
        "versionId": "309388c6-8bba-4ece-896f-e5b569597467",
        "publishedAt": "2025-09-19T11:35:34.688061767Z",
        "updatedAt": "2025-09-19T11:51:13.380613812Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/brave",
    "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
    "status": "active",
    "repository": {
      "url": "https://github.com/brave/brave-search-mcp-server",
      "source": "github"
    },
    "version": "2.0.8",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/brave/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "72fbc728-2894-4a60-aaf5-44d616ddd249",
        "versionId": "c1cf7f4d-85bc-46c9-8cad-a3e6a88c651e",
        "publishedAt": "2025-09-19T11:38:30.012331726Z",
        "updatedAt": "2025-09-19T12:13:23.265366973Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.brave/brave-search-mcp-server",
    "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
    "status": "active",
    "repository": {
      "url": "https://github.com/brave/brave-search-mcp-server",
      "source": "github"
    },
    "version": "2.0.9",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@brave/brave-search-mcp-server",
        "version": "2.0.9",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your API key for the service",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "BRAVE_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "fe2e0e07-1466-499a-bcdd-16d07b8ccb40",
        "versionId": "13d05765-2c60-453e-8f8d-2a2ecd247fe3",
        "publishedAt": "2025-09-19T11:51:13.375441364Z",
        "updatedAt": "2025-09-19T13:21:42.772286946Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/brave",
    "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
    "status": "active",
    "repository": {
      "url": "https://github.com/brave/brave-search-mcp-server",
      "source": "github"
    },
    "version": "2.0.9",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/brave/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "72fbc728-2894-4a60-aaf5-44d616ddd249",
        "versionId": "419f1f04-f00b-49a4-97d6-fb6f6a317004",
        "publishedAt": "2025-09-19T12:13:23.217247561Z",
        "updatedAt": "2025-09-19T13:27:13.291855026Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.apify/apify-mcp-server",
    "description": "Apify MCP Server providing access to thousands of web scraping and automation tools from Apify Store",
    "status": "active",
    "repository": {
      "url": "https://github.com/apify/apify-mcp-server",
      "source": "github"
    },
    "version": "0.4.10",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.apify.com/",
        "headers": [
          {
            "description": "Apify API token for authentication with Apify platform services. For example 'Bearer <apify-api-token>'",
            "isRequired": true,
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "2bc2f4cd-9894-48ac-9580-ca1ad1ceef26",
        "versionId": "36718efb-39b6-41e2-9762-1321ec57bddd",
        "publishedAt": "2025-09-19T12:42:08.357510933Z",
        "updatedAt": "2025-09-19T13:48:15.372766299Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.brave/brave-search-mcp-server",
    "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
    "status": "active",
    "repository": {
      "url": "https://github.com/brave/brave-search-mcp-server",
      "source": "github"
    },
    "version": "2.0.10",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@brave/brave-search-mcp-server",
        "version": "2.0.10",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your API key for the service",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "BRAVE_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "fe2e0e07-1466-499a-bcdd-16d07b8ccb40",
        "versionId": "0d2d9f39-6ac9-452e-b1d9-41ebc0147c5c",
        "publishedAt": "2025-09-19T13:21:42.73531992Z",
        "updatedAt": "2025-09-26T09:53:32.930134233Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/brave",
    "description": "Visit https://brave.com/search/api/ for a free API key. Search the web, local businesses, images,…",
    "status": "active",
    "repository": {
      "url": "https://github.com/brave/brave-search-mcp-server",
      "source": "github"
    },
    "version": "2.0.10",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/brave/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "72fbc728-2894-4a60-aaf5-44d616ddd249",
        "versionId": "ed9db06a-d7a9-483e-ba41-3483f3d2df54",
        "publishedAt": "2025-09-19T13:27:13.182402057Z",
        "updatedAt": "2025-09-19T13:27:13.182402057Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.apify/apify-mcp-server",
    "description": "Apify MCP server provides access to a marketplace for web scraping and data extraction tools.",
    "status": "active",
    "repository": {
      "url": "https://github.com/apify/apify-mcp-server",
      "source": "github"
    },
    "version": "0.4.15",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.apify.com/",
        "headers": [
          {
            "description": "Apify API token for authentication with Apify platform services. For example 'Bearer <apify-api-token>'",
            "isRequired": true,
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "2bc2f4cd-9894-48ac-9580-ca1ad1ceef26",
        "versionId": "489c7d6e-1b49-4d94-a36a-19bc9de45671",
        "publishedAt": "2025-09-19T13:48:15.323674338Z",
        "updatedAt": "2025-09-19T13:48:15.323674338Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/anirbanbasu-frankfurtermcp",
    "description": "A MCP server for the Frankfurter API for currency exchange rates.",
    "status": "active",
    "repository": {
      "url": "https://github.com/anirbanbasu/frankfurtermcp",
      "source": "github"
    },
    "version": "1.13.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@anirbanbasu/frankfurtermcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c829bfef-fcc0-422c-a69a-33395f38cf93",
        "versionId": "93cec244-60e4-4522-979f-3483889ee476",
        "publishedAt": "2025-09-19T14:04:07.846044351Z",
        "updatedAt": "2025-09-19T14:04:07.846044351Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/PixdataOrg-coderide",
    "description": "CodeRide eliminates the context reset cycle once and for all. Through MCP integration, it seamless…",
    "status": "active",
    "repository": {
      "url": "https://github.com/PixdataOrg/coderide-mcp",
      "source": "github"
    },
    "version": "0.9.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@PixdataOrg/coderide/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "e2724d39-2d06-4fe0-82dd-395e9bbcb659",
        "versionId": "7ddbbf27-fe42-4fc4-806c-d1859f37aa01",
        "publishedAt": "2025-09-19T14:23:37.184036464Z",
        "updatedAt": "2025-09-19T14:23:37.184036464Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.xorrkaz/cml-mcp",
    "description": "An MCP server that provides access to common Cisco Modeling Labs (CML) operations.",
    "status": "active",
    "repository": {
      "url": "https://github.com/xorrkaz/cml-mcp",
      "source": "github"
    },
    "version": "0.9.0",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "cml-mcp",
        "version": "0.9.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "URL for the CML Server",
            "isRequired": true,
            "format": "string",
            "name": "CML_URL"
          },
          {
            "description": "Username for CML authentication",
            "isRequired": true,
            "format": "string",
            "name": "CML_USERNAME"
          },
          {
            "description": "Password for CML authentication",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "CML_PASSWORD"
          },
          {
            "description": "Username for authentication to devices running in CML",
            "format": "string",
            "name": "PYATS_USERNAME"
          },
          {
            "description": "Password for authentication to devices running in CML",
            "format": "string",
            "isSecret": true,
            "name": "PYATS_PASSWORD"
          },
          {
            "description": "Enable password for authentication to devices running in CML",
            "format": "string",
            "isSecret": true,
            "name": "PYATS_AUTH_PASS"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "bd0c41d1-2209-4c3f-8602-d40900053217",
        "versionId": "ec43553f-245d-4229-9736-71609128ad5e",
        "publishedAt": "2025-09-19T15:45:51.269663071Z",
        "updatedAt": "2025-09-20T04:37:07.84640443Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.YinTokey/mcp_hackernews",
    "description": "MCP server exposing a simple Hacker News search tool (top stories).",
    "status": "active",
    "repository": {
      "url": "https://github.com/YinTokey/mcp_hackernews",
      "source": "github"
    },
    "version": "0.1.1",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mcp-hackernews",
        "version": "0.1.1",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "24a4ab76-7ab6-4151-8cbb-692e6fe7d470",
        "versionId": "40ea433f-1885-4151-a331-0f0045fab476",
        "publishedAt": "2025-09-19T15:56:39.08426801Z",
        "updatedAt": "2025-09-19T16:50:55.13033967Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.timheuer/sampledotnetmcpserver",
    "description": "Sample .NET MCP Server",
    "repository": {
      "url": "https://github.com/timheuer/sampledotnetmcpserver",
      "source": "github"
    },
    "version": "0.1.49-beta",
    "packages": [
      {
        "registryType": "nuget",
        "identifier": "TimHeuer.SampleDotnetMcpServer",
        "version": "0.1.49-beta",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "98619929-a570-46c1-8e35-4cde888731ee",
        "versionId": "419fee11-cdf7-4b4e-9dae-fdbc5bcd9844",
        "publishedAt": "2025-09-19T16:03:41.816983067Z",
        "updatedAt": "2025-09-19T21:00:37.915164645Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/pythondev-pro-egw_writings_mcp_server",
    "description": "Search Ellen G. White’s writings by topic or phrase. Retrieve exact references and passages instan…",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@pythondev-pro/egw_writings_mcp_server/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "cfa49893-4e64-430d-8ea1-d3af4f8379f9",
        "versionId": "30a55449-cad5-46aa-9596-12828d287fa8",
        "publishedAt": "2025-09-19T16:18:36.558203742Z",
        "updatedAt": "2025-09-19T16:18:36.558203742Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.make/mcp-server",
    "description": "MCP server for building, running, and managing Make automations.",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "sse",
        "url": "https://mcp.make.com/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "fbb08138-f8ab-4448-82a8-e99ff64af1ef",
        "versionId": "02056adc-cfef-41c1-9961-fbf923ef2374",
        "publishedAt": "2025-09-19T16:35:03.495242848Z",
        "updatedAt": "2025-09-19T16:35:03.495242848Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.YinTokey/mcp_hackernews",
    "description": "MCP server exposing a simple Hacker News search tool (top stories).",
    "status": "active",
    "repository": {
      "url": "https://github.com/YinTokey/mcp_hackernews",
      "source": "github"
    },
    "version": "0.1.2",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mcp-hackernews",
        "version": "0.1.2",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "24a4ab76-7ab6-4151-8cbb-692e6fe7d470",
        "versionId": "2f42d6f5-5dff-4d40-a85a-996ddca5a27f",
        "publishedAt": "2025-09-19T16:50:55.119395707Z",
        "updatedAt": "2025-09-19T20:06:35.162640348Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/zeta-chain-cli",
    "description": "Create friendly, customizable greetings for any name or audience. Break the ice in demos, onboardi…",
    "status": "active",
    "repository": {
      "url": "https://github.com/zeta-chain/cli",
      "source": "github",
      "subfolder": "src/mcp"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@zeta-chain/cli/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "2fe68c87-8503-444b-9b82-c45fdf12ccdf",
        "versionId": "6509e596-d664-4fa7-af8b-88c4e9a78b89",
        "publishedAt": "2025-09-19T16:55:43.436334161Z",
        "updatedAt": "2025-09-19T16:55:43.436334161Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.andrasfe/vulnicheck",
    "description": "HTTP MCP Server for comprehensive Python vulnerability scanning and security analysis.",
    "status": "active",
    "repository": {
      "url": "https://github.com/andrasfe/vulnicheck",
      "source": "github"
    },
    "version": "0.1.0",
    "packages": [
      {
        "registryType": "oci",
        "registryBaseUrl": "https://docker.io",
        "identifier": "andrasfe/vulnicheck",
        "version": "main",
        "transport": {
          "type": "streamable-http",
          "url": "http://localhost:3000/mcp"
        },
        "environmentVariables": [
          {
            "description": "API key for NIST National Vulnerability Database (increases rate limit from 5 to 50 requests per 30 seconds)",
            "format": "string",
            "isSecret": true,
            "name": "NVD_API_KEY"
          },
          {
            "description": "GitHub token for Advisory Database access (increases rate limit to 5000 requests per hour)",
            "format": "string",
            "isSecret": true,
            "name": "GITHUB_TOKEN"
          },
          {
            "description": "OpenAI API key for LLM-based risk assessment in MCP passthrough operations",
            "format": "string",
            "isSecret": true,
            "name": "OPENAI_API_KEY"
          },
          {
            "description": "Anthropic API key for LLM-based risk assessment (alternative to OpenAI)",
            "format": "string",
            "isSecret": true,
            "name": "ANTHROPIC_API_KEY"
          },
          {
            "description": "Port for MCP HTTP server (default: 3000)",
            "format": "number",
            "name": "MCP_PORT"
          },
          {
            "description": "Cache time-to-live in seconds for vulnerability data (default: 900)",
            "format": "number",
            "name": "CACHE_TTL"
          },
          {
            "description": "Enable HTTP-only mode with MCP client delegation (true/false, default: auto-detect)",
            "format": "string",
            "name": "VULNICHECK_HTTP_ONLY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "ded14e29-abb2-48ca-9ce8-cbe45f521f77",
        "versionId": "4c904cce-df55-4700-b291-f85739f83cc5",
        "publishedAt": "2025-09-19T18:01:49.485417802Z",
        "updatedAt": "2025-09-19T18:01:49.485417802Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.statsig/statsig-mcp-server",
    "description": "MCP server for Statsig API - interact with Statsig's feature flags, experiments, and analytics",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://api.statsig.com/v1/mcp",
        "headers": [
          {
            "description": "Statsig Console API key for authentication",
            "isRequired": true,
            "isSecret": true,
            "name": "statsig-api-key"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "2a588ed6-3191-4c57-b4b4-30922df35945",
        "versionId": "9a21fc6a-b1c6-4dcf-8030-8fad5ff3ca4c",
        "publishedAt": "2025-09-19T18:53:25.028837035Z",
        "updatedAt": "2025-09-19T18:53:25.028837035Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/blacklotusdev8-test_m",
    "description": "Greet anyone by name with a friendly hello. Scrape webpages to extract content for quick reference…",
    "status": "active",
    "repository": {
      "url": "https://github.com/blacklotusdev8/test_m",
      "source": "github"
    },
    "version": "1.14.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@blacklotusdev8/test_m/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "49357ee9-f3b2-4703-a64f-a12f563a334b",
        "versionId": "f3238a01-c19e-43a2-8bfb-de3d3878c18c",
        "publishedAt": "2025-09-19T19:12:16.602435454Z",
        "updatedAt": "2025-09-19T19:12:16.602435454Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.YinTokey/mcp_hackernews",
    "description": "MCP server exposing a simple Hacker News search tool (top stories).",
    "status": "active",
    "repository": {
      "url": "https://github.com/YinTokey/mcp_hackernews",
      "source": "github"
    },
    "version": "1.1.0",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mcp-hackernews",
        "version": "1.1.0",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "24a4ab76-7ab6-4151-8cbb-692e6fe7d470",
        "versionId": "4543a8e4-14f0-421e-973e-6589b4bd1f22",
        "publishedAt": "2025-09-19T20:06:35.10356138Z",
        "updatedAt": "2025-09-19T20:06:35.10356138Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.SonarSource/sonarqube-mcp-server",
    "description": "An MCP server that enables integration with SonarQube Server or Cloud for code quality and security.",
    "status": "active",
    "repository": {
      "url": "https://github.com/SonarSource/sonarqube-mcp-server",
      "source": "github"
    },
    "version": "0.0.8",
    "packages": [
      {
        "registryType": "oci",
        "registryBaseUrl": "https://docker.io",
        "identifier": "mcp/sonarqube",
        "version": "sha256:d9dc2f44f4f624bdc5fb5817abc74f6244dd40b2d03036380cd6253eff374ae5",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your SonarQube Server USER token",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "SONARQUBE_TOKEN"
          },
          {
            "description": "Your SonarQube Cloud organization key (if using SonarQube Cloud)",
            "format": "string",
            "isSecret": true,
            "name": "SONARQUBE_ORG"
          },
          {
            "description": "Your SonarQube Server URL (if using SonarQube Server)",
            "format": "string",
            "isSecret": true,
            "name": "SONARQUBE_URL"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "fa22170d-248a-4ebf-b6b4-2de326690a18",
        "versionId": "6f8eee32-6adb-46a4-815d-044ec557bd6b",
        "publishedAt": "2025-09-19T20:14:16.852443193Z",
        "updatedAt": "2025-09-19T20:14:16.852443193Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.timheuer/sampledotnetmcpserver",
    "description": "Sample .NET MCP Server",
    "repository": {
      "url": "https://github.com/timheuer/sampledotnetmcpserver",
      "source": "github"
    },
    "version": "0.1.53-beta",
    "packages": [
      {
        "registryType": "nuget",
        "identifier": "TimHeuer.SampleDotnetMcpServer",
        "version": "0.1.53-beta",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "98619929-a570-46c1-8e35-4cde888731ee",
        "versionId": "085cf170-4e61-449a-8fdf-18508f251382",
        "publishedAt": "2025-09-19T21:00:37.853652239Z",
        "updatedAt": "2025-09-22T16:13:17.248942811Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.pubnub/mcp-server",
    "description": "PubNub MCP for Real-time messaging. API Access and SDK documentation.",
    "status": "active",
    "repository": {
      "url": "https://github.com/pubnub/pubnub-mcp-server",
      "source": "github"
    },
    "version": "1.0.106",
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "1319578e-b112-443f-9938-68f2527a10b4",
        "versionId": "c13d8c60-bd55-4837-9f65-2eb2a95d5430",
        "publishedAt": "2025-09-19T21:08:36.523099568Z",
        "updatedAt": "2025-09-19T21:08:36.523099568Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/blockscout-mcp-server",
    "description": "Provide AI agents and automation tools with contextual access to blockchain data including balance…",
    "status": "active",
    "repository": {
      "url": "https://github.com/blockscout/mcp-server",
      "source": "github"
    },
    "version": "1.13.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@blockscout/mcp-server/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "581797d5-ac0b-453b-b82f-4280bd6aa608",
        "versionId": "12f9bf42-5702-44ee-9f39-a85d6bf7e7c1",
        "publishedAt": "2025-09-20T00:50:33.619951617Z",
        "updatedAt": "2025-09-20T00:50:33.619951617Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/pinkpixel-dev-web-scout-mcp",
    "description": "Search the web and extract clean, readable text from webpages. Process multiple URLs at once to sp…",
    "status": "active",
    "repository": {
      "url": "https://github.com/pinkpixel-dev/web-scout-mcp",
      "source": "github"
    },
    "version": "1.5.3",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@pinkpixel-dev/web-scout-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b81da317-d978-4f5f-9532-fa88b6a5799a",
        "versionId": "d5ec1a21-49f5-4bf7-b4e5-4bc8cd746213",
        "publishedAt": "2025-09-20T02:41:17.173406544Z",
        "updatedAt": "2025-09-20T03:20:23.189855739Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.tedfytw1209/mcp-server-EVEfleet",
    "description": "An MCP server that provides tools for EVE Online players to manage their fleets",
    "status": "active",
    "repository": {
      "url": "https://github.com/tedfytw1209/mcp-server-EVEfleet",
      "source": "github"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mcp-server-evefleet",
        "version": "0.1.1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your API key for the service",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "YOUR_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "540d0e52-a6cb-4d28-9377-887eca830e5d",
        "versionId": "76d8def5-54d8-478e-93ea-cfb8a7bd827a",
        "publishedAt": "2025-09-20T02:52:57.271854833Z",
        "updatedAt": "2025-09-20T03:21:10.606324721Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.GabrielaHdzMicrosoft/mcp-server",
    "description": "An MCP server that provides visual memory and context storage with knowledge graph capabilities",
    "status": "active",
    "repository": {
      "url": "https://github.com/testing9384/mcp-server",
      "source": "github"
    },
    "version": "1.0.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "visual-memory-context-server",
        "version": "1.0.1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Path to the memory.json file for knowledge graph storage",
            "format": "string",
            "name": "MEMORY_FILE_PATH"
          },
          {
            "description": "Comma-separated list of directories the server can access, or JSON array format",
            "format": "string",
            "name": "ALLOWED_DIRECTORIES"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "2d498eef-9457-47c3-9a42-75c47c70355a",
        "versionId": "9fbd370f-ab2b-446e-a141-37365aa329cd",
        "publishedAt": "2025-09-20T03:14:43.524547161Z",
        "updatedAt": "2025-09-20T03:14:43.524547161Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/pinkpixel-dev-web-scout-mcp",
    "description": "Search the web and extract clean, readable text from webpages. Process multiple URLs at once to sp…",
    "status": "active",
    "repository": {
      "url": "https://github.com/pinkpixel-dev/web-scout-mcp",
      "source": "github"
    },
    "version": "1.5.4",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@pinkpixel-dev/web-scout-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b81da317-d978-4f5f-9532-fa88b6a5799a",
        "versionId": "10f39b73-0bd7-4cad-9b8f-6321876bdb6f",
        "publishedAt": "2025-09-20T03:20:23.182803591Z",
        "updatedAt": "2025-09-20T03:40:04.425108177Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.tedfytw1209/mcp-server-EVEfleet",
    "description": "An MCP server that provides tools for EVE Online players to manage their fleets",
    "status": "active",
    "repository": {
      "url": "https://github.com/tedfytw1209/mcp-server-EVEfleet",
      "source": "github"
    },
    "version": "1.0.1",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mcp-server-evefleet",
        "version": "0.1.3",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your API key for the service",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "YOUR_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "540d0e52-a6cb-4d28-9377-887eca830e5d",
        "versionId": "470fe31e-737b-476a-b54a-fb75e5134219",
        "publishedAt": "2025-09-20T03:21:10.599411209Z",
        "updatedAt": "2025-09-20T15:35:31.256350662Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/pinkpixel-dev-web-scout-mcp",
    "description": "Search the web and extract clean, readable text from webpages. Process multiple URLs at once to sp…",
    "status": "active",
    "repository": {
      "url": "https://github.com/pinkpixel-dev/web-scout-mcp",
      "source": "github"
    },
    "version": "1.5.5",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@pinkpixel-dev/web-scout-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b81da317-d978-4f5f-9532-fa88b6a5799a",
        "versionId": "0e6f4d1f-a207-422e-a517-962c98b88c21",
        "publishedAt": "2025-09-20T03:40:04.418820494Z",
        "updatedAt": "2025-09-20T03:40:04.418820494Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.opencontext-team/mcp-server",
    "description": "An MCP server that provides visual memory and context storage with knowledge graph capabilities",
    "status": "active",
    "repository": {
      "url": "https://github.com/testing9384/mcp-server",
      "source": "github"
    },
    "version": "1.0.2",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "visual-memory-context-server",
        "version": "1.0.2",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Path to the memory.json file for knowledge graph storage",
            "format": "string",
            "name": "MEMORY_FILE_PATH"
          },
          {
            "description": "Comma-separated list of directories the server can access, or JSON array format",
            "format": "string",
            "name": "ALLOWED_DIRECTORIES"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "13f17364-c47b-4059-91e7-689c91e259fe",
        "versionId": "8490e3d4-2a0c-4a89-8f03-ebb6e24c6425",
        "publishedAt": "2025-09-20T03:43:17.852240906Z",
        "updatedAt": "2025-09-20T03:43:17.852240906Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.xorrkaz/cml-mcp",
    "description": "An MCP server that provides access to common Cisco Modeling Labs (CML) operations.",
    "status": "active",
    "repository": {
      "url": "https://github.com/xorrkaz/cml-mcp",
      "source": "github"
    },
    "version": "0.9.1",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "cml-mcp",
        "version": "0.9.1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "URL for the CML Server",
            "isRequired": true,
            "format": "string",
            "name": "CML_URL"
          },
          {
            "description": "Username for CML authentication",
            "isRequired": true,
            "format": "string",
            "name": "CML_USERNAME"
          },
          {
            "description": "Password for CML authentication",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "CML_PASSWORD"
          },
          {
            "description": "Username for authentication to devices running in CML",
            "format": "string",
            "name": "PYATS_USERNAME"
          },
          {
            "description": "Password for authentication to devices running in CML",
            "format": "string",
            "isSecret": true,
            "name": "PYATS_PASSWORD"
          },
          {
            "description": "Enable password for authentication to devices running in CML",
            "format": "string",
            "isSecret": true,
            "name": "PYATS_AUTH_PASS"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "bd0c41d1-2209-4c3f-8602-d40900053217",
        "versionId": "09bac2ad-8fbe-458f-8832-c465f2e020e7",
        "publishedAt": "2025-09-20T04:37:07.839680863Z",
        "updatedAt": "2025-09-27T13:06:49.501120766Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/anirbanbasu-pymcp",
    "description": "Primarily to be used as a template repository for developing MCP servers with FastMCP in Python, P…",
    "status": "active",
    "repository": {
      "url": "https://github.com/anirbanbasu/pymcp",
      "source": "github"
    },
    "version": "0.1.7",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@anirbanbasu/pymcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "d746b7c2-781d-4007-a303-108574ceebdc",
        "versionId": "55c2e977-4086-4058-ad5d-6f432f70a2cf",
        "publishedAt": "2025-09-20T05:41:08.153834913Z",
        "updatedAt": "2025-09-20T05:41:08.153834913Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.ChiR24/unreal-engine-mcp",
    "description": "Production-ready MCP server for Unreal Engine with comprehensive game development tools",
    "repository": {
      "url": "https://github.com/ChiR24/Unreal_mcp.git",
      "source": "github"
    },
    "version": "0.4.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "unreal-engine-mcp-server",
        "version": "0.4.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Unreal Engine host address",
            "value": "127.0.0.1",
            "name": "UE_HOST"
          },
          {
            "description": "Remote Control HTTP port",
            "value": "30010",
            "name": "UE_RC_HTTP_PORT"
          },
          {
            "description": "Remote Control WebSocket port",
            "value": "30020",
            "name": "UE_RC_WS_PORT"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "49c64feb-2e4c-406d-b39f-1236bf2212a6",
        "versionId": "443e7b8a-779a-45a3-af72-6920083bb317",
        "publishedAt": "2025-09-20T06:29:35.18499785Z",
        "updatedAt": "2025-09-28T14:25:16.432207323Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.driflyte/driflyte-mcp-server",
    "description": "Driflyte MCP server which lets AI assistants query topic-specific knowledge from web and GitHub.",
    "status": "active",
    "repository": {
      "url": "https://github.com/serkan-ozal/driflyte-mcp-server",
      "source": "github"
    },
    "version": "0.0.18",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@driflyte/mcp-server",
        "version": "0.0.18",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.driflyte.com/mcp"
      },
      {
        "type": "streamable-http",
        "url": "https://mcp.driflyte.com/openai"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "e4bf9279-bd3f-43d4-8c82-8b26d237876b",
        "versionId": "11e180e3-c035-41fa-b4e4-5866525a817a",
        "publishedAt": "2025-09-20T09:03:36.622899248Z",
        "updatedAt": "2025-09-20T16:12:47.919618105Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/ramadasmr-networkcalc-mcp",
    "description": "Look up DNS information for any domain to troubleshoot issues and gather insights. Get fast, relia…",
    "status": "active",
    "repository": {
      "url": "https://github.com/ramadasmr/networkcalc-mcp",
      "source": "github"
    },
    "version": "1.13.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@ramadasmr/networkcalc-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "492f38fe-94a3-4d61-9146-2ecc7896b017",
        "versionId": "874b81fc-3ec9-41f2-bcd0-4317bc8c1f8c",
        "publishedAt": "2025-09-20T10:10:47.321873085Z",
        "updatedAt": "2025-09-20T10:10:47.321873085Z",
        "isLatest": true
      }
    }
  },
  {
    "name": "io.github.OtherVibes/mcp-as-a-judge",
    "description": "MCP as a Judge: a behavioral MCP that strengthens AI coding assistants via explicit LLM evaluations",
    "status": "active",
    "repository": {
      "url": "https://github.com/OtherVibes/mcp-as-a-judge",
      "source": "github"
    },
    "version": "0.3.20",
    "packages": [
      {
        "registryType": "pypi",
        "identifier": "mcp-as-a-judge",
        "version": "0.3.20",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "e8b7a95e-e0b7-44d1-9830-1ef945eed29d",
        "versionId": "863d79d0-6104-4bda-ad5d-58888d8fd3b6",
        "publishedAt": "2025-09-20T10:35:19.80792562Z",
        "updatedAt": "2025-09-20T10:35:19.80792562Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.karanb192/reddit-mcp-buddy",
    "description": "Reddit MCP server - browse posts, search content, analyze users.",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.1.1",
    "packages": [
      {
        "registryType": "npm",
        "identifier": "reddit-mcp-buddy",
        "version": "1.1.1",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "bc98ac4e-cb60-435b-a426-f18a6b1c0076",
        "versionId": "5677b351-373d-4137-bc58-28f1ba0d105d",
        "publishedAt": "2025-09-20T10:45:00.297359799Z",
        "updatedAt": "2025-09-20T10:45:00.297359799Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.Synclub-tech/synclub-dxt",
    "description": "SynClub MCP Server for AI-powered comic creation with script generation and image tools",
    "status": "active",
    "repository": {
      "url": "https://github.com/Synclub-tech/Synclub-dxt",
      "source": "github"
    },
    "version": "0.6.0",
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "321cc940-43bb-4872-bb8f-69113a2801c0",
        "versionId": "fcbfdd48-ec43-41b0-b8b0-ed36c8d0436d",
        "publishedAt": "2025-09-20T11:20:51.672215792Z",
        "updatedAt": "2025-09-20T11:20:51.672215792Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.apple-rag/mcp-server",
    "description": "Apple Developer Documentation with Semantic Search, RAG, and AI reranking for MCP clients",
    "status": "active",
    "repository": {
      "url": "https://github.com/BingoWon/apple-rag-mcp",
      "source": "github"
    },
    "version": "2.7.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.apple-rag.com",
        "headers": [
          {
            "description": "MCP Token for authentication (optional - free tier available without token)",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "803e4dc4-c3d4-43d2-b6a3-65885c8eefb4",
        "versionId": "de22b67e-a889-4f97-a88f-8ae4c35c70a7",
        "publishedAt": "2025-09-20T13:08:19.344314837Z",
        "updatedAt": "2025-09-20T13:10:26.619071892Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.apple-rag/mcp-server",
    "description": "Apple Developer Documentation with Semantic Search, RAG, and AI reranking for MCP clients",
    "status": "active",
    "repository": {
      "url": "https://github.com/BingoWon/apple-rag-mcp",
      "source": "github"
    },
    "version": "2.8.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.apple-rag.com",
        "headers": [
          {
            "description": "MCP Token for authentication (optional - free tier available without token)",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "803e4dc4-c3d4-43d2-b6a3-65885c8eefb4",
        "versionId": "8b331ec6-3e77-4ea2-a187-3bfe64764aa7",
        "publishedAt": "2025-09-20T13:10:26.610215669Z",
        "updatedAt": "2025-09-21T07:40:13.398559429Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.schemacrawler/schemacrawler-ai",
    "description": "Enables natural language schema queries — explore tables, keys, procedures, and get SQL help fast",
    "status": "active",
    "repository": {
      "url": "https://github.com/schemacrawler/SchemaCrawler-AI",
      "source": "github"
    },
    "version": "v16.28.2-1",
    "packages": [
      {
        "registryType": "oci",
        "registryBaseUrl": "https://docker.io",
        "identifier": "schemacrawler/schemacrawler-ai",
        "version": "v16.28.2-1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Database user name. Can be optional depending on the database connection type.",
            "format": "string",
            "isSecret": true,
            "name": "SCHCRWLR_DATABASE_USER"
          },
          {
            "description": "Database user password. Can be optional depending on the database connection type.",
            "format": "string",
            "isSecret": true,
            "name": "SCHCRWLR_DATABASE_PASSWORD"
          },
          {
            "description": "JDBC URL for database connection. If this is provided, the server, host, port and database are not used.",
            "format": "string",
            "name": "SCHCRWLR_JDBC_URL"
          },
          {
            "description": "SchemaCrawler database plugin, for example, 'sqlserver' or 'sqlite'. Used only if the JDBC URL is not provided.",
            "format": "string",
            "name": "SCHCRWLR_SERVER"
          },
          {
            "description": "Database host. Defaults to localhost. Used only if the JDBC URL is not provided.",
            "format": "string",
            "name": "SCHCRWLR_HOST"
          },
          {
            "description": "Database port. Defaults to the default port for the server type. Used only if the JDBC URL is not provided.",
            "format": "string",
            "name": "SCHCRWLR_PORT"
          },
          {
            "description": "Database to connect to (optional). Used only if the JDBC URL is not provided.",
            "format": "string",
            "name": "SCHCRWLR_DATABASE"
          },
          {
            "description": "How much database metadata to retrieve. Values are 'minimum', 'standard', 'detailed' or 'maximum'.",
            "format": "string",
            "name": "SCHCRWLR_INFO_LEVEL"
          },
          {
            "description": "Logging verbosity level. Values are 'SEVERE', 'WARNING', 'INFO', 'CONFIG', or 'FINE'.",
            "format": "string",
            "name": "SCHCRWLR_LOG_LEVEL"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "3616e073-7a15-42cb-ae02-4c6d64c92905",
        "versionId": "ce887e38-e3cd-41e6-9823-baa601f36c7c",
        "publishedAt": "2025-09-20T13:17:42.501613163Z",
        "updatedAt": "2025-09-27T01:18:14.979887202Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.pab1it0/prometheus-mcp-server",
    "description": "MCP server for Prometheus, enabling AI assistants to query metrics and monitor system health",
    "status": "active",
    "repository": {
      "url": "https://github.com/pab1it0/prometheus-mcp-server",
      "source": "github"
    },
    "version": "1.2.6",
    "packages": [
      {
        "registryType": "oci",
        "registryBaseUrl": "https://ghcr.io",
        "identifier": "pab1it0/prometheus-mcp-server",
        "version": "1.2.6",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Prometheus server URL (e.g., http://localhost:9090)",
            "isRequired": true,
            "format": "string",
            "name": "PROMETHEUS_URL"
          },
          {
            "description": "Username for Prometheus basic authentication",
            "format": "string",
            "name": "PROMETHEUS_USERNAME"
          },
          {
            "description": "Password for Prometheus basic authentication",
            "format": "string",
            "isSecret": true,
            "name": "PROMETHEUS_PASSWORD"
          },
          {
            "description": "Bearer token for Prometheus authentication",
            "format": "string",
            "isSecret": true,
            "name": "PROMETHEUS_TOKEN"
          },
          {
            "description": "Organization ID for multi-tenant Prometheus setups",
            "format": "string",
            "name": "ORG_ID"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "e50bf758-19d5-4384-8623-dce5d3e16cf4",
        "versionId": "bd4e9779-1903-456c-b749-4c60e515240a",
        "publishedAt": "2025-09-20T14:17:36.936419738Z",
        "updatedAt": "2025-09-21T08:44:02.056360531Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/BadRooBot-test_m",
    "description": "Send quick greetings, scrape website content, and generate text or images on demand. Perform web s…",
    "status": "active",
    "repository": {
      "url": "https://github.com/BadRooBot/test_m",
      "source": "github"
    },
    "version": "1.14.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@BadRooBot/test_m/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "28fbee3c-f660-49dc-bd3b-ede557b43d37",
        "versionId": "64697990-9669-4756-87bd-3897bcf4a4be",
        "publishedAt": "2025-09-20T14:41:53.77279669Z",
        "updatedAt": "2025-09-20T14:41:53.77279669Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/magenie33-quality-dimension-generator",
    "description": "Generate tailored quality criteria and scoring guides from your task descriptions. Refine objectiv…",
    "status": "active",
    "repository": {
      "url": "https://github.com/magenie33/quality-dimension-generator",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@magenie33/quality-dimension-generator/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "fb74c0f6-fb5f-4998-a29a-1b2dcf77e1e4",
        "versionId": "b966b9e6-0904-4305-9d1e-016bfedbf891",
        "publishedAt": "2025-09-20T15:11:34.739057896Z",
        "updatedAt": "2025-09-20T15:11:34.739057896Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.tedfytw1209/mcp-server-EVEfleet",
    "description": "An MCP server that provides tools for EVE Online players to manage their fleets",
    "status": "active",
    "repository": {
      "url": "https://github.com/tedfytw1209/mcp-server-EVEfleet",
      "source": "github"
    },
    "version": "1.0.2",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mcp-server-evefleet",
        "version": "0.1.4",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your API key for the service",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "YOUR_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "540d0e52-a6cb-4d28-9377-887eca830e5d",
        "versionId": "8b40f793-31ef-49fa-9ec9-7971eaed7a2c",
        "publishedAt": "2025-09-20T15:35:31.249645791Z",
        "updatedAt": "2025-09-20T15:35:31.249645791Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/serkan-ozal-driflyte-mcp-server",
    "description": "Discover available topics and explore up-to-date, topic-tagged web content. Search to surface the…",
    "status": "active",
    "repository": {
      "url": "https://github.com/serkan-ozal/driflyte-mcp-server",
      "source": "github"
    },
    "version": "0.0.18",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@serkan-ozal/driflyte-mcp-server/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "43b05fba-bf32-46a1-aa25-56b98e372ba4",
        "versionId": "691bf732-4a78-4d55-8f3a-e0c3e9e9bb11",
        "publishedAt": "2025-09-20T15:36:42.402494299Z",
        "updatedAt": "2025-09-20T16:15:36.760974704Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.driflyte/driflyte-mcp-server",
    "description": "Driflyte MCP server which lets AI assistants query topic-specific knowledge from web and GitHub.",
    "status": "active",
    "repository": {
      "url": "https://github.com/serkan-ozal/driflyte-mcp-server",
      "source": "github"
    },
    "version": "0.0.19",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@driflyte/mcp-server",
        "version": "0.0.19",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.driflyte.com/mcp"
      },
      {
        "type": "streamable-http",
        "url": "https://mcp.driflyte.com/openai"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "e4bf9279-bd3f-43d4-8c82-8b26d237876b",
        "versionId": "d0fe6fb4-46e7-466d-b031-907f3e2a104f",
        "publishedAt": "2025-09-20T16:12:47.912694714Z",
        "updatedAt": "2025-09-21T10:31:49.276749534Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/devbrother2024-typescript-mcp-server-boilerplate",
    "description": "Kickstart development with a customizable TypeScript template featuring sample tools for greeting,…",
    "status": "active",
    "repository": {
      "url": "https://github.com/devbrother2024/typescript-mcp-server-boilerplate",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@devbrother2024/typescript-mcp-server-boilerplate/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "67692a7a-a90a-4b1f-8005-f224079d6a31",
        "versionId": "c90bf24a-325b-49d6-92ef-4a0a56a57ae4",
        "publishedAt": "2025-09-20T16:12:55.711868952Z",
        "updatedAt": "2025-09-20T16:12:55.711868952Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/serkan-ozal-driflyte-mcp-server",
    "description": "Discover available topics and explore up-to-date, topic-tagged web content. Search to surface the…",
    "status": "active",
    "repository": {
      "url": "https://github.com/serkan-ozal/driflyte-mcp-server",
      "source": "github"
    },
    "version": "0.0.19",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@serkan-ozal/driflyte-mcp-server/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "43b05fba-bf32-46a1-aa25-56b98e372ba4",
        "versionId": "93017748-959b-4b83-a1f4-55ef8109cbfd",
        "publishedAt": "2025-09-20T16:15:36.753964835Z",
        "updatedAt": "2025-09-21T10:34:38.236822672Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.Nekzus/npm-sentinel-mcp",
    "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
    "status": "active",
    "repository": {
      "url": "https://github.com/Nekzus/npm-sentinel-mcp",
      "source": "github"
    },
    "version": "1.8.2",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@nekzus/mcp-server",
        "version": "1.8.2",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "364d771b-c515-4071-805d-75513fa308ce",
        "versionId": "66ff372d-c61e-4077-9bcb-3beb1909d367",
        "publishedAt": "2025-09-20T17:55:31.190946131Z",
        "updatedAt": "2025-09-20T19:44:08.656927794Z",
        "isLatest": false
      }
    }
  },
  {
    "name": "io.github.neilberkman/clippy",
    "description": "Copy AI-generated content to macOS clipboard. Handles text, code, files & recent downloads.",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "",
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "0a5af804-e2d3-4122-8dae-9cee2fc636a8",
        "versionId": "f8aa37fe-f542-4ad6-9534-e4203d142f08",
        "publishedAt": "2025-09-20T18:52:02.074995978Z",
        "updatedAt": "2025-09-20T18:52:02.074995978Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.ubaumann/mkdocs-mcp",
    "description": "An MCP server that provides serves MkDocs as resources.",
    "status": "active",
    "repository": {
      "url": "https://github.com/ubaumann/mkdocs-mcp",
      "source": "github"
    },
    "version": "0.1.2",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mkdocs-mcp",
        "version": "0.1.2",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Path to the MkDocs project",
            "isRequired": true,
            "format": "string",
            "name": "MKDOCS_PROJECT_PATH"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "bb6084f0-c377-4ca1-901c-cfd3d952dfad",
        "versionId": "3f341d0b-0cb1-47a6-aedb-6ade17ef5135",
        "publishedAt": "2025-09-20T19:14:29.939373529Z",
        "updatedAt": "2025-09-20T19:14:29.939373529Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/Nekzus-npm-sentinel-mcp",
    "description": "Provide AI-powered real-time analysis and intelligence on NPM packages, including security, depend…",
    "status": "active",
    "repository": {
      "url": "https://github.com/Nekzus/npm-sentinel-mcp",
      "source": "github"
    },
    "version": "{{VERSION}}",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@Nekzus/npm-sentinel-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a10fab8f-cce3-42a0-b3e4-e34e2f71c41c",
        "versionId": "56e52d11-1f40-4125-97fe-abaccc9774ea",
        "publishedAt": "2025-09-20T19:40:51.557718325Z",
        "updatedAt": "2025-09-20T20:30:22.469111767Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.Nekzus/npm-sentinel-mcp",
    "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
    "status": "active",
    "repository": {
      "url": "https://github.com/Nekzus/npm-sentinel-mcp",
      "source": "github"
    },
    "version": "1.9.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@nekzus/mcp-server",
        "version": "1.9.0",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "364d771b-c515-4071-805d-75513fa308ce",
        "versionId": "42d70334-c6a7-48fa-af42-a3aa27340b97",
        "publishedAt": "2025-09-20T19:44:08.651401017Z",
        "updatedAt": "2025-09-20T21:15:29.26617904Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/Nekzus-npm-sentinel-mcp",
    "description": "Provide AI-powered real-time analysis and intelligence on NPM packages, including security, depend…",
    "status": "active",
    "repository": {
      "url": "https://github.com/Nekzus/npm-sentinel-mcp",
      "source": "github"
    },
    "version": "1.9.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@Nekzus/npm-sentinel-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a10fab8f-cce3-42a0-b3e4-e34e2f71c41c",
        "versionId": "3ba07713-0e79-4f16-86c2-7ec00756b0f8",
        "publishedAt": "2025-09-20T20:30:22.451323441Z",
        "updatedAt": "2025-09-20T21:15:59.347284446Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.Nekzus/npm-sentinel-mcp",
    "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
    "status": "active",
    "repository": {
      "url": "https://github.com/Nekzus/npm-sentinel-mcp",
      "source": "github"
    },
    "version": "1.11.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@nekzus/mcp-server",
        "version": "1.11.0",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "364d771b-c515-4071-805d-75513fa308ce",
        "versionId": "bb9ad48f-71d3-4e68-8701-43bc9eb97cc1",
        "publishedAt": "2025-09-20T21:15:29.259860449Z",
        "updatedAt": "2025-09-20T21:30:51.466951132Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/Nekzus-npm-sentinel-mcp",
    "description": "Provide AI-powered real-time analysis and intelligence on NPM packages, including security, depend…",
    "status": "active",
    "repository": {
      "url": "https://github.com/Nekzus/npm-sentinel-mcp",
      "source": "github"
    },
    "version": "1.10.2",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@Nekzus/npm-sentinel-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a10fab8f-cce3-42a0-b3e4-e34e2f71c41c",
        "versionId": "4e1fce76-3077-4378-95e1-ff0e8ec61516",
        "publishedAt": "2025-09-20T21:15:59.340300438Z",
        "updatedAt": "2025-09-20T21:32:48.552000011Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.Nekzus/npm-sentinel-mcp",
    "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
    "status": "active",
    "repository": {
      "url": "https://github.com/Nekzus/npm-sentinel-mcp",
      "source": "github"
    },
    "version": "1.11.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@nekzus/mcp-server",
        "version": "1.11.1",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "364d771b-c515-4071-805d-75513fa308ce",
        "versionId": "c1e3a2ec-14d0-4f26-acf2-7788cf47e553",
        "publishedAt": "2025-09-20T21:30:51.461180027Z",
        "updatedAt": "2025-09-20T22:17:46.118774702Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/Nekzus-npm-sentinel-mcp",
    "description": "Provide AI-powered real-time analysis and intelligence on NPM packages, including security, depend…",
    "status": "active",
    "repository": {
      "url": "https://github.com/Nekzus/npm-sentinel-mcp",
      "source": "github"
    },
    "version": "1.11.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@Nekzus/npm-sentinel-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a10fab8f-cce3-42a0-b3e4-e34e2f71c41c",
        "versionId": "aacebc3d-14c4-4be3-8b83-384359b8b260",
        "publishedAt": "2025-09-20T21:32:48.546366642Z",
        "updatedAt": "2025-09-20T22:47:38.657176821Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.Nekzus/npm-sentinel-mcp",
    "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
    "status": "active",
    "repository": {
      "url": "https://github.com/Nekzus/npm-sentinel-mcp",
      "source": "github"
    },
    "version": "1.11.2",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@nekzus/mcp-server",
        "version": "1.11.2",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "364d771b-c515-4071-805d-75513fa308ce",
        "versionId": "10d59353-ba49-44fa-91c3-bfdef4234ef6",
        "publishedAt": "2025-09-20T22:17:46.112363947Z",
        "updatedAt": "2025-09-20T22:27:49.332529599Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.Nekzus/npm-sentinel-mcp",
    "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
    "status": "active",
    "repository": {
      "url": "https://github.com/Nekzus/npm-sentinel-mcp",
      "source": "github"
    },
    "version": "1.11.3",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@nekzus/mcp-server",
        "version": "1.11.3",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "364d771b-c515-4071-805d-75513fa308ce",
        "versionId": "e4cd324d-6cde-4d10-b0bc-3588786cd689",
        "publishedAt": "2025-09-20T22:27:49.327157122Z",
        "updatedAt": "2025-09-20T22:39:33.775619052Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.Nekzus/npm-sentinel-mcp",
    "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
    "status": "active",
    "repository": {
      "url": "https://github.com/Nekzus/npm-sentinel-mcp",
      "source": "github"
    },
    "version": "1.11.4",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@nekzus/mcp-server",
        "version": "1.11.4",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "364d771b-c515-4071-805d-75513fa308ce",
        "versionId": "604c10d8-566e-4183-85cd-db3778d422bb",
        "publishedAt": "2025-09-20T22:39:33.769198195Z",
        "updatedAt": "2025-09-20T22:45:23.809566997Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.Nekzus/npm-sentinel-mcp",
    "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
    "status": "active",
    "repository": {
      "url": "https://github.com/Nekzus/npm-sentinel-mcp",
      "source": "github"
    },
    "version": "1.11.5",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@nekzus/mcp-server",
        "version": "1.11.5",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "364d771b-c515-4071-805d-75513fa308ce",
        "versionId": "4d4c0721-2d19-4f10-a916-46709c45e157",
        "publishedAt": "2025-09-20T22:45:23.804864603Z",
        "updatedAt": "2025-09-20T23:05:10.127913968Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/Nekzus-npm-sentinel-mcp",
    "description": "Provide AI-powered real-time analysis and intelligence on NPM packages, including security, depend…",
    "status": "active",
    "repository": {
      "url": "https://github.com/Nekzus/npm-sentinel-mcp",
      "source": "github"
    },
    "version": "1.11.5",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@Nekzus/npm-sentinel-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a10fab8f-cce3-42a0-b3e4-e34e2f71c41c",
        "versionId": "a001613e-8575-4e5e-821a-46da25cfe8fc",
        "publishedAt": "2025-09-20T22:47:38.649029129Z",
        "updatedAt": "2025-09-20T23:26:41.758996151Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.Nekzus/npm-sentinel-mcp",
    "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
    "status": "active",
    "repository": {
      "url": "https://github.com/Nekzus/npm-sentinel-mcp",
      "source": "github"
    },
    "version": "1.11.6",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@nekzus/mcp-server",
        "version": "1.11.6",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "364d771b-c515-4071-805d-75513fa308ce",
        "versionId": "948753e9-a047-4ef0-ae1b-050c98519b85",
        "publishedAt": "2025-09-20T23:05:10.121079979Z",
        "updatedAt": "2025-09-20T23:15:02.127730589Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.Nekzus/npm-sentinel-mcp",
    "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
    "status": "active",
    "repository": {
      "url": "https://github.com/Nekzus/npm-sentinel-mcp",
      "source": "github"
    },
    "version": "1.11.7",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@nekzus/mcp-server",
        "version": "1.11.7",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "364d771b-c515-4071-805d-75513fa308ce",
        "versionId": "dcca7eb4-abf1-45db-bfaa-fdbf661bb39a",
        "publishedAt": "2025-09-20T23:15:02.12284828Z",
        "updatedAt": "2025-09-20T23:23:20.783978986Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.Nekzus/npm-sentinel-mcp",
    "description": "NPM Sentinel MCP - AI-powered NPM package analysis for security, dependencies, and performance.",
    "status": "active",
    "repository": {
      "url": "https://github.com/Nekzus/npm-sentinel-mcp",
      "source": "github"
    },
    "version": "1.11.8",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@nekzus/mcp-server",
        "version": "1.11.8",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "364d771b-c515-4071-805d-75513fa308ce",
        "versionId": "bdf01b68-714f-43fc-95b0-0b8a50edbcc7",
        "publishedAt": "2025-09-20T23:23:20.779152666Z",
        "updatedAt": "2025-09-20T23:23:20.779152666Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/kaszek-kaszek-attio-mcp",
    "description": "Automate Attio CRM workflows with fast search and bulk operations across companies, people, deals,…",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "0.2.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@kaszek/kaszek-attio-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "8adb4b44-ff32-48b3-9c2c-0ecdff6527a0",
        "versionId": "2dcc8f42-3551-4968-9b98-fff8a5c6111d",
        "publishedAt": "2025-09-20T23:26:13.62772396Z",
        "updatedAt": "2025-09-20T23:26:13.62772396Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/Nekzus-npm-sentinel-mcp",
    "description": "Provide AI-powered real-time analysis and intelligence on NPM packages, including security, depend…",
    "status": "active",
    "repository": {
      "url": "https://github.com/Nekzus/npm-sentinel-mcp",
      "source": "github"
    },
    "version": "1.11.8",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@Nekzus/npm-sentinel-mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a10fab8f-cce3-42a0-b3e4-e34e2f71c41c",
        "versionId": "f037b08c-1a70-43fd-af0e-243190ffcc17",
        "publishedAt": "2025-09-20T23:26:41.744482233Z",
        "updatedAt": "2025-09-20T23:26:41.744482233Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/duvomike-mcp",
    "description": "Transform numbers by doubling them and adding 5. Get instant results with a clear breakdown of the…",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@duvomike/mcp/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "0b495a18-7c1c-4ddf-9345-6dd23338d345",
        "versionId": "b4258295-044b-4e99-9bb9-758b499017d3",
        "publishedAt": "2025-09-21T03:33:47.332417515Z",
        "updatedAt": "2025-09-21T03:33:47.332417515Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.Raistlin82/btp-sap-odata-to-mcp-server-optimized",
    "description": "Enterprise SAP OData to MCP Server with AI capabilities and Cloud Foundry integration",
    "status": "active",
    "repository": {
      "url": "https://github.com/Raistlin82/btp-sap-odata-to-mcp-server-optimized",
      "source": "github"
    },
    "version": "1.0.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "btp-sap-odata-to-mcp-server",
        "version": "1.0.1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "URL of the SAP Identity Authentication Service tenant",
            "isRequired": true,
            "format": "string",
            "name": "SAP_IAS_URL"
          },
          {
            "description": "Client ID for the OAuth application in IAS",
            "isRequired": true,
            "format": "string",
            "name": "SAP_IAS_CLIENT_ID"
          },
          {
            "description": "Client Secret for the OAuth application in IAS",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "SAP_IAS_CLIENT_SECRET"
          },
          {
            "description": "Name of the BTP destination used for service discovery",
            "isRequired": true,
            "format": "string",
            "name": "SAP_DESTINATION_NAME"
          },
          {
            "description": "OData discovery mode: pattern, business, whitelist, or all",
            "format": "string",
            "name": "ODATA_DISCOVERY_MODE"
          },
          {
            "description": "Comma-separated patterns to include (pattern mode)",
            "format": "string",
            "name": "ODATA_INCLUDE_PATTERNS"
          },
          {
            "description": "Comma-separated patterns to exclude (pattern mode)",
            "format": "string",
            "name": "ODATA_EXCLUDE_PATTERNS"
          },
          {
            "description": "The port on which the Express server will listen",
            "format": "string",
            "name": "PORT"
          },
          {
            "description": "The application's operating environment",
            "format": "string",
            "name": "NODE_ENV"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c1c29016-edf6-4fea-987b-c64b862d94d2",
        "versionId": "d30be744-00fd-4763-bb3f-a9d4dea1e17f",
        "publishedAt": "2025-09-21T04:33:38.866274995Z",
        "updatedAt": "2025-09-21T04:33:38.866274995Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.pkolawa/mcp-krs-poland",
    "description": "Polish National government's registry of all businesses, foundations, and other legal entities.",
    "status": "active",
    "repository": {
      "url": "https://github.com/pkolawa/mcp-krs-poland",
      "source": "github"
    },
    "version": "1.0.11",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "krs-poland-mcp-server",
        "version": "1.0.11",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "71338ebf-dc34-4aaa-a84e-0926053a07f5",
        "versionId": "2384ee5f-1c12-429b-980f-f26c38c2d6f9",
        "publishedAt": "2025-09-21T06:20:54.765527461Z",
        "updatedAt": "2025-09-21T06:20:54.765527461Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.apple-rag/mcp-server",
    "description": "Apple Developer Documentation with Semantic Search, RAG, and AI reranking for MCP clients",
    "status": "active",
    "repository": {
      "url": "https://github.com/BingoWon/apple-rag-mcp",
      "source": "github"
    },
    "version": "2.9.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.apple-rag.com",
        "headers": [
          {
            "description": "MCP Token for authentication (optional - free tier available without token)",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "803e4dc4-c3d4-43d2-b6a3-65885c8eefb4",
        "versionId": "00bfe736-db44-46f0-8528-173b960c7fc9",
        "publishedAt": "2025-09-21T07:40:13.389325937Z",
        "updatedAt": "2025-09-21T07:40:13.389325937Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.pab1it0/prometheus-mcp-server",
    "description": "MCP server for Prometheus, enabling AI assistants to query metrics and monitor system health",
    "status": "active",
    "repository": {
      "url": "https://github.com/pab1it0/prometheus-mcp-server",
      "source": "github"
    },
    "version": "1.3.0",
    "packages": [
      {
        "registryType": "oci",
        "registryBaseUrl": "https://ghcr.io",
        "identifier": "pab1it0/prometheus-mcp-server",
        "version": "1.3.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Prometheus server URL (e.g., http://localhost:9090)",
            "isRequired": true,
            "format": "string",
            "name": "PROMETHEUS_URL"
          },
          {
            "description": "Username for Prometheus basic authentication",
            "format": "string",
            "name": "PROMETHEUS_USERNAME"
          },
          {
            "description": "Password for Prometheus basic authentication",
            "format": "string",
            "isSecret": true,
            "name": "PROMETHEUS_PASSWORD"
          },
          {
            "description": "Bearer token for Prometheus authentication",
            "format": "string",
            "isSecret": true,
            "name": "PROMETHEUS_TOKEN"
          },
          {
            "description": "Organization ID for multi-tenant Prometheus setups",
            "format": "string",
            "name": "ORG_ID"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "e50bf758-19d5-4384-8623-dce5d3e16cf4",
        "versionId": "ab4c5352-d52c-4ce3-8d15-cf55697c4756",
        "publishedAt": "2025-09-21T08:44:02.039810197Z",
        "updatedAt": "2025-09-21T08:44:02.039810197Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.GoneTone/mcp-server-taiwan-weather",
    "description": "用於取得臺灣中央氣象署 API 資料的 Model Context Protocol (MCP) Server",
    "status": "active",
    "repository": {
      "url": "https://github.com/GoneTone/mcp-server-taiwan-weather",
      "source": "github"
    },
    "version": "0.1.4",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@gonetone/mcp-server-taiwan-weather",
        "version": "0.1.4",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "您的中央氣象署 API 授權碼。 請前往 https://opendata.cwa.gov.tw/user/authkey，登入後點擊 \"取得授權碼\" 取得。",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "CWA_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "318339bb-2899-4219-8445-202a05449ed6",
        "versionId": "97c78570-b874-4d3f-83bd-294e333964c0",
        "publishedAt": "2025-09-21T08:53:08.644520114Z",
        "updatedAt": "2025-09-21T08:53:08.644520114Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.driflyte/driflyte-mcp-server",
    "description": "Driflyte MCP server which lets AI assistants query topic-specific knowledge from web and GitHub.",
    "status": "active",
    "repository": {
      "url": "https://github.com/serkan-ozal/driflyte-mcp-server",
      "source": "github"
    },
    "version": "0.0.20",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@driflyte/mcp-server",
        "version": "0.0.20",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.driflyte.com/mcp"
      },
      {
        "type": "streamable-http",
        "url": "https://mcp.driflyte.com/openai"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "e4bf9279-bd3f-43d4-8c82-8b26d237876b",
        "versionId": "d9c52924-226a-4ed4-892f-c38fb1b31e71",
        "publishedAt": "2025-09-21T10:31:49.219280157Z",
        "updatedAt": "2025-09-21T10:31:49.219280157Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/serkan-ozal-driflyte-mcp-server",
    "description": "Discover available topics and explore up-to-date, topic-tagged web content. Search to surface the…",
    "status": "active",
    "repository": {
      "url": "https://github.com/serkan-ozal/driflyte-mcp-server",
      "source": "github"
    },
    "version": "0.0.20",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@serkan-ozal/driflyte-mcp-server/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "43b05fba-bf32-46a1-aa25-56b98e372ba4",
        "versionId": "e8120401-3cae-414e-a30f-7e5878b81891",
        "publishedAt": "2025-09-21T10:34:38.229628586Z",
        "updatedAt": "2025-09-21T10:34:38.229628586Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.smithery/skr-cloudify-clickup-mcp-server-new",
    "description": "Manage your ClickUp workspace by creating, updating, and organizing tasks, lists, folders, and tag…",
    "status": "active",
    "repository": {
      "url": "https://github.com/skr-cloudify/clickup-mcp-server-new",
      "source": "github"
    },
    "version": "0.8.5",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://server.smithery.ai/@skr-cloudify/clickup-mcp-server-new/mcp",
        "headers": [
          {
            "description": "Bearer token for Smithery authentication",
            "isRequired": true,
            "value": "Bearer {smithery_api_key}",
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "8804ecb7-d50a-45ca-b698-3700ebfcf4b5",
        "versionId": "9e7720d9-3476-4dbd-b063-8dc664705ba7",
        "publishedAt": "2025-09-21T11:44:55.497078792Z",
        "updatedAt": "2025-09-21T11:44:55.497078792Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.yuna0x0/anilist-mcp",
    "description": "AniList MCP server for accessing AniList API data",
    "status": "active",
    "repository": {
      "url": "https://github.com/yuna0x0/anilist-mcp",
      "source": "github"
    },
    "version": "1.3.5",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "anilist-mcp",
        "version": "1.3.5",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "AniList API token for authenticated requests",
            "format": "string",
            "isSecret": true,
            "name": "ANILIST_TOKEN"
          }
        ]
      },
      {
        "registryType": "oci",
        "registryBaseUrl": "https://ghcr.io",
        "identifier": "yuna0x0/anilist-mcp",
        "version": "1.3.5",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "AniList API token for authenticated requests",
            "format": "string",
            "isSecret": true,
            "name": "ANILIST_TOKEN"
          }
        ]
      },
      {
        "registryType": "mcpb",
        "identifier": "https://github.com/yuna0x0/anilist-mcp/releases/download/v1.3.5/anilist-mcp-1.3.5.mcpb",
        "version": "1.3.5",
        "fileSha256": "40a76d2027c01ac43c592bf14a08beed7bdc4faca1d814086d11dbd664efd24a",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "AniList API token for authenticated requests",
            "format": "string",
            "isSecret": true,
            "name": "ANILIST_TOKEN"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "6bdae0fa-dff2-4ae3-82f9-03710c1ffb86",
        "versionId": "dc28d8be-ae3d-474a-8020-a9d1646d7df1",
        "publishedAt": "2025-09-21T13:14:02.752847787Z",
        "updatedAt": "2025-09-22T00:19:27.284057916Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
    "name": "io.github.kevincogan/demo-mcp-server",
    "description": "Demo server entry for local testing",
    "status": "active",
    "repository": {
      "url": "https://github.com/kevincogan/demo-mcp-server",
      "source": "github"
    },
    "version": "1.0.2",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://kevincogan.github.io/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "78162e28-0738-46be-b2ef-b1c6469a1616",
        "versionId": "b9c67f43-e6e5-412b-b3bf-49d3ea88c530",
        "publishedAt": "2025-09-21T13:59:09.345933804Z",
        "updatedAt": "2025-09-22T08:33:07.216891447Z",
        "isLatest": false
      }
    }
  },
  {
    "name": "io.github.Skills03/scrimba-teaching",
    "description": "Interactive programming teacher using Scrimba methodology for 10x retention",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.1",
    "packages": [
      {
        "registryType": "pypi",
        "identifier": "scrimba-teaching-mcp",
        "version": "1.0.1",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "db943fb5-a144-442c-8cc3-d76be306b58b",
        "versionId": "77461ae5-c20a-404a-a539-f453bd20b6dd",
        "publishedAt": "2025-09-21T13:59:10.857936482Z",
        "updatedAt": "2025-09-21T14:14:53.546905451Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.yuna0x0/hackmd-mcp",
    "description": "A Model Context Protocol server for integrating HackMD's note-taking platform with AI assistants.",
    "status": "active",
    "repository": {
      "url": "https://github.com/yuna0x0/hackmd-mcp",
      "source": "github"
    },
    "version": "1.5.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "hackmd-mcp",
        "version": "1.5.1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your HackMD API token for API authentication",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "HACKMD_API_TOKEN"
          },
          {
            "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
            "format": "string",
            "default": "https://api.hackmd.io/v1",
            "name": "HACKMD_API_URL"
          }
        ]
      },
      {
        "registryType": "oci",
        "registryBaseUrl": "https://ghcr.io",
        "identifier": "yuna0x0/hackmd-mcp",
        "version": "1.5.1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your HackMD API token for API authentication",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "HACKMD_API_TOKEN"
          },
          {
            "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
            "format": "string",
            "default": "https://api.hackmd.io/v1",
            "name": "HACKMD_API_URL"
          }
        ]
      },
      {
        "registryType": "mcpb",
        "identifier": "https://github.com/yuna0x0/hackmd-mcp/releases/download/v1.5.1/hackmd-mcp-1.5.1.mcpb",
        "version": "1.5.1",
        "fileSha256": "a994d25dbf19fb2fd783c5daba402bf87fc5a1456e1a11acf6e729984a5524ae",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your HackMD API token for API authentication",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "HACKMD_API_TOKEN"
          },
          {
            "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
            "format": "string",
            "default": "https://api.hackmd.io/v1",
            "name": "HACKMD_API_URL"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "e679729a-74ca-4b31-a7f5-80cddd5fa24d",
        "versionId": "8a33c695-fb2c-48ea-bac7-cbf56022abc2",
        "publishedAt": "2025-09-21T14:08:58.290591646Z",
        "updatedAt": "2025-09-22T00:26:57.638290849Z",
        "isLatest": false
      }
    }
  },
  {
    "name": "io.github.Skills03/scrimba-teaching",
    "description": "Interactive programming teacher using Scrimba methodology for 10x retention",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.1.0",
    "packages": [
      {
        "registryType": "pypi",
        "identifier": "scrimba-teaching-mcp",
        "version": "1.1.0",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "db943fb5-a144-442c-8cc3-d76be306b58b",
        "versionId": "df96edec-b150-4bb4-b94a-2b58b189e307",
        "publishedAt": "2025-09-21T14:14:53.542850749Z",
        "updatedAt": "2025-09-21T14:49:14.681137791Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.wordlift/mcp-server",
    "description": "WordLift MCP Server: AI-powered content optimization and semantic analysis",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.4",
    "remotes": [
      {
        "type": "sse",
        "url": "https://mcp.wordlift.io/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "197af124-3b34-49be-ab35-e1dace2c3d09",
        "versionId": "4f349a5d-7a33-4e9d-88ed-81185bceb8fe",
        "publishedAt": "2025-09-21T14:24:47.187744796Z",
        "updatedAt": "2025-09-21T14:24:47.187744796Z",
        "isLatest": true
      }
    }
  },
  {
    "name": "io.github.Skills03/scrimba-teaching",
    "description": "Interactive programming teacher using Scrimba methodology for 10x retention",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.2.0",
    "packages": [
      {
        "registryType": "pypi",
        "identifier": "scrimba-teaching-mcp",
        "version": "1.2.0",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "db943fb5-a144-442c-8cc3-d76be306b58b",
        "versionId": "a6decd3c-fe0b-4537-b0a6-e882cfa50106",
        "publishedAt": "2025-09-21T14:49:14.675603849Z",
        "updatedAt": "2025-09-21T15:36:57.844409094Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
    "name": "io.github.Skills03/scrimba-teaching",
    "description": "Interactive programming teacher using Scrimba's methodology for 10x retention",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "2.0.0",
    "packages": [
      {
        "registryType": "pypi",
        "identifier": "scrimba-teaching-mcp",
        "version": "2.0.0",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "db943fb5-a144-442c-8cc3-d76be306b58b",
        "versionId": "7f02170b-fc62-40fe-95ac-b4d99e8a4a45",
        "publishedAt": "2025-09-21T15:36:57.834955391Z",
        "updatedAt": "2025-09-21T15:36:57.834955391Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.delorenj/mcp-server-trello",
    "description": "MCP server for Trello boards with rate limiting, type safety, and comprehensive API integration.",
    "status": "active",
    "repository": {
      "url": "https://github.com/delorenj/mcp-server-trello",
      "source": "github"
    },
    "version": "1.5.5",
    "websiteUrl": "https://delorenj.github.io/mcp-server-trello",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@delorenj/mcp-server-trello",
        "version": "1.5.5",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your Trello API key",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "TRELLO_API_KEY"
          },
          {
            "description": "Your Trello token",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "TRELLO_TOKEN"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "9b94aaa3-e02f-4538-972e-f332b1428a1d",
        "versionId": "280397f6-cca9-4a7f-8aa9-c82ec4f4518b",
        "publishedAt": "2025-09-21T23:11:11.731178823Z",
        "updatedAt": "2025-09-24T08:48:44.278992465Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.yuna0x0/anilist-mcp",
    "description": "AniList MCP server for accessing AniList API data",
    "status": "active",
    "repository": {
      "url": "https://github.com/yuna0x0/anilist-mcp",
      "source": "github"
    },
    "version": "1.3.6",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "anilist-mcp",
        "version": "1.3.6",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "AniList API token for authenticated requests",
            "format": "string",
            "isSecret": true,
            "name": "ANILIST_TOKEN"
          }
        ]
      },
      {
        "registryType": "oci",
        "registryBaseUrl": "https://ghcr.io",
        "identifier": "yuna0x0/anilist-mcp",
        "version": "1.3.6",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "AniList API token for authenticated requests",
            "format": "string",
            "isSecret": true,
            "name": "ANILIST_TOKEN"
          }
        ]
      },
      {
        "registryType": "mcpb",
        "identifier": "https://github.com/yuna0x0/anilist-mcp/releases/download/v1.3.6/anilist-mcp-1.3.6.mcpb",
        "version": "1.3.6",
        "fileSha256": "76579d74b1f94df9b6203d3a6a11385f22555f0f695dc109c1c6512a7e0c79ff",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "AniList API token for authenticated requests",
            "format": "string",
            "isSecret": true,
            "name": "ANILIST_TOKEN"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "6bdae0fa-dff2-4ae3-82f9-03710c1ffb86",
        "versionId": "91e07fb1-8ea2-40fb-bea5-fec5ca102793",
        "publishedAt": "2025-09-22T00:19:27.274230014Z",
        "updatedAt": "2025-09-22T00:19:27.274230014Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.yuna0x0/hackmd-mcp",
    "description": "A Model Context Protocol server for integrating HackMD's note-taking platform with AI assistants.",
    "status": "active",
    "repository": {
      "url": "https://github.com/yuna0x0/hackmd-mcp",
      "source": "github"
    },
    "version": "1.5.2",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "hackmd-mcp",
        "version": "1.5.2",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your HackMD API token for API authentication",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "HACKMD_API_TOKEN"
          },
          {
            "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
            "format": "string",
            "default": "https://api.hackmd.io/v1",
            "name": "HACKMD_API_URL"
          }
        ]
      },
      {
        "registryType": "oci",
        "registryBaseUrl": "https://ghcr.io",
        "identifier": "yuna0x0/hackmd-mcp",
        "version": "1.5.2",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your HackMD API token for API authentication",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "HACKMD_API_TOKEN"
          },
          {
            "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
            "format": "string",
            "default": "https://api.hackmd.io/v1",
            "name": "HACKMD_API_URL"
          }
        ]
      },
      {
        "registryType": "mcpb",
        "identifier": "https://github.com/yuna0x0/hackmd-mcp/releases/download/v1.5.2/hackmd-mcp-1.5.2.mcpb",
        "version": "1.5.2",
        "fileSha256": "85c9f9930596291f3ba9e0e5d3241cbeac4d5bcc6832845bd7c05348cc5511d5",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your HackMD API token for API authentication",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "HACKMD_API_TOKEN"
          },
          {
            "description": "Optional HackMD API URL, defaults to https://api.hackmd.io/v1",
            "format": "string",
            "default": "https://api.hackmd.io/v1",
            "name": "HACKMD_API_URL"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "e679729a-74ca-4b31-a7f5-80cddd5fa24d",
        "versionId": "7805cd90-e4d5-4446-9a63-05e56d06ae87",
        "publishedAt": "2025-09-22T00:26:57.630168405Z",
        "updatedAt": "2025-09-22T00:26:57.630168405Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
    "name": "dev.composio.rube/rube",
    "description": "Connect your AI to 500+ apps like Gmail, Slack, GitHub, and Notion with streamable HTTP transport.",
    "status": "active",
    "repository": {
      "url": "https://github.com/ComposioHQ/Rube",
      "source": "github"
    },
    "version": "0.0.2",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://rube.composio.dev/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "2a705690-7684-4f32-9c2d-05a9080c5b72",
        "versionId": "c1c6f9d2-07ef-4d93-a5e6-67ddbfbd33bb",
        "publishedAt": "2025-09-22T06:16:36.167908046Z",
        "updatedAt": "2025-09-22T06:16:36.167908046Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
    "name": "io.github.kevincogan/demo-mcp-server",
    "description": "Demo server entry for local testing",
    "status": "active",
    "repository": {
      "url": "https://github.com/kevincogan/demo-mcp-server",
      "source": "github"
    },
    "version": "1.0.3",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://kevincogan.github.io/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "78162e28-0738-46be-b2ef-b1c6469a1616",
        "versionId": "bbcdf831-c7bf-4c52-affb-3750b146a001",
        "publishedAt": "2025-09-22T08:33:07.198215918Z",
        "updatedAt": "2025-09-22T11:43:15.249644873Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.jgador/websharp",
    "description": "Search the web and extract article text for LLMs.",
    "status": "active",
    "repository": {
      "url": "https://github.com/jgador/websharp",
      "source": "github"
    },
    "version": "v0.99.0-rc2",
    "packages": [
      {
        "registryType": "oci",
        "registryBaseUrl": "https://docker.io",
        "identifier": "jessegador/websharp-mcp",
        "version": "v0.99.0-rc2",
        "transport": {
          "type": "streamable-http",
          "url": "http://localhost:8081/"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "cf9c7e3f-e774-441d-ac97-56797089e13f",
        "versionId": "551f28ac-4220-4947-9622-369fd6ea55eb",
        "publishedAt": "2025-09-22T09:09:05.052333574Z",
        "updatedAt": "2025-09-22T09:09:05.052333574Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.yifancong/rsdoctor",
    "description": "An MCP server that provides build analysis and optimization recommendations for Rspack projects.",
    "status": "active",
    "repository": {
      "url": "https://github.com/web-infra-dev/rsdoctor",
      "source": "github"
    },
    "version": "0.1.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@rsdoctor/mcp-server",
        "version": "0.1.2-beta.0",
        "runtimeHint": "node",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "7cf63a0d-c3fd-45df-ac2b-90336369660c",
        "versionId": "f98c9041-8158-4e97-92a7-f511e1a41bfb",
        "publishedAt": "2025-09-22T11:06:11.810760737Z",
        "updatedAt": "2025-09-22T11:06:11.810760737Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
    "name": "io.github.kevincogan/demo-mcp-server",
    "description": "Demo server entry for local testing",
    "status": "active",
    "repository": {
      "url": "https://github.com/kevincogan/demo-mcp-server",
      "source": "github"
    },
    "version": "1.0.4",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://kevincogan.github.io/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "78162e28-0738-46be-b2ef-b1c6469a1616",
        "versionId": "91c1fc9a-833b-4186-84f1-49b79c23f0c2",
        "publishedAt": "2025-09-22T11:43:15.242712891Z",
        "updatedAt": "2025-09-22T11:43:15.242712891Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
    "name": "io.github.kevincogan/demo-mcp-server",
    "description": "Demo server entry for local testing",
    "status": "active",
    "repository": {
      "url": "https://github.com/kevincogan/demo-mcp-server",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://kevincogan.github.io/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "78162e28-0738-46be-b2ef-b1c6469a1616",
        "versionId": "7991f104-ba2d-4e1a-8e47-ec97adbffe62",
        "publishedAt": "2025-09-22T11:58:38.187266164Z",
        "updatedAt": "2025-09-22T11:58:38.187266164Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
    "name": "io.github.kevincogan/demo-mcp-server",
    "description": "Demo server entry for local testing",
    "status": "active",
    "repository": {
      "url": "https://github.com/kevincogan/demo-mcp-server",
      "source": "github"
    },
    "version": "1.0.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://kevincogan.github.io/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "78162e28-0738-46be-b2ef-b1c6469a1616",
        "versionId": "54a3da15-1724-4507-b6ba-60f6384d8619",
        "publishedAt": "2025-09-22T11:59:44.974868968Z",
        "updatedAt": "2025-09-22T11:59:44.974868968Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.martymarkenson/postgres-connector",
    "description": "MCP server for querying PostgreSQL databases",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "npm",
        "identifier": "postgres-connector",
        "version": "1.0.0",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "5fe9408b-2370-41fb-90f9-3fce961c0968",
        "versionId": "74031b6a-9c3c-4fcb-911d-ec0337b98c70",
        "publishedAt": "2025-09-22T12:15:43.369455148Z",
        "updatedAt": "2025-09-23T12:45:22.907808337Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.smartbear/smartbear-mcp",
    "description": "MCP server for AI access to SmartBear tools, including BugSnag, Reflect, API Hub, PactFlow.",
    "status": "active",
    "repository": {
      "url": "https://github.com/SmartBear/smartbear-mcp",
      "source": "github"
    },
    "version": "0.6.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@smartbear/mcp",
        "version": "0.6.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "BugSnag auth token. Leave empty to disable BugSnag tools. Learn more: https://developer.smartbear.com/smartbear-mcp/docs/bugsnag-integration",
            "isSecret": true,
            "name": "BUGSNAG_AUTH_TOKEN"
          },
          {
            "description": "BugSnag project API key (optional; narrows interactions to a single project). Learn more: https://developer.smartbear.com/smartbear-mcp/docs/bugsnag-integration",
            "name": "BUGSNAG_PROJECT_API_KEY"
          },
          {
            "description": "Reflect API token. Leave empty to disable Reflect tools. Learn more: https://developer.smartbear.com/smartbear-mcp/docs/test-hub-integration",
            "isSecret": true,
            "name": "REFLECT_API_TOKEN"
          },
          {
            "description": "API Hub API key. Leave empty to disable API Hub tools. Learn more: https://developer.smartbear.com/smartbear-mcp/docs/api-hub-integration",
            "isSecret": true,
            "name": "API_HUB_API_KEY"
          },
          {
            "description": "PactFlow/Pact Broker base URL. Leave empty to disable Pact tools. Learn more: https://developer.smartbear.com/smartbear-mcp/docs/contract-testing-with-pactflow",
            "name": "PACT_BROKER_BASE_URL"
          },
          {
            "description": "PactFlow authentication token. Learn more: https://developer.smartbear.com/smartbear-mcp/docs/contract-testing-with-pactflow",
            "isSecret": true,
            "name": "PACT_BROKER_TOKEN"
          },
          {
            "description": "Pact Broker username (alternative to token). Learn more: https://developer.smartbear.com/smartbear-mcp/docs/contract-testing-with-pactflow",
            "name": "PACT_BROKER_USERNAME"
          },
          {
            "description": "Pact Broker password (alternative to token). Learn more: https://developer.smartbear.com/smartbear-mcp/docs/contract-testing-with-pactflow",
            "isSecret": true,
            "name": "PACT_BROKER_PASSWORD"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "6a483f7b-2acb-49e3-82ab-1a8ea387be43",
        "versionId": "fdba73cd-2ed0-4c2d-8b14-abe89267820e",
        "publishedAt": "2025-09-22T12:40:01.386189691Z",
        "updatedAt": "2025-09-22T12:40:01.386189691Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.timheuer/sampledotnetmcpserver",
    "description": "Sample .NET MCP Server",
    "status": "active",
    "repository": {
      "url": "https://github.com/timheuer/sampledotnetmcpserver",
      "source": "github"
    },
    "version": "0.1.56-beta-g9538a23d37",
    "packages": [
      {
        "registryType": "nuget",
        "registryBaseUrl": "https://api.nuget.org",
        "identifier": "TimHeuer.SampleDotnetMcpServer",
        "version": "0.1.56-beta-g9538a23d37",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "98619929-a570-46c1-8e35-4cde888731ee",
        "versionId": "75f4d79f-8e5a-4a80-a9e5-4f4dddac7693",
        "publishedAt": "2025-09-22T16:13:17.246045769Z",
        "updatedAt": "2025-09-22T17:04:35.121526999Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.nickzren/opentargets",
    "description": "Open Targets MCP server for targets, diseases, drugs, variants, and evidence",
    "status": "active",
    "repository": {
      "url": "https://github.com/nickzren/opentargets-mcp",
      "source": "github",
      "id": "984363568"
    },
    "version": "0.2.0",
    "websiteUrl": "https://nickzren.github.io/opentargets-mcp/",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "opentargets-mcp",
        "version": "0.2.0",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "224e7593-863e-4ec9-8b77-ef5b6b011250",
        "versionId": "f89004b6-43a1-45b6-9f72-ccecbe1cbbc3",
        "publishedAt": "2025-09-22T16:27:58.086742779Z",
        "updatedAt": "2025-09-22T16:27:58.086742779Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.timheuer/sampledotnetmcpserver",
    "description": "Sample .NET MCP Server",
    "status": "active",
    "repository": {
      "url": "https://github.com/timheuer/sampledotnetmcpserver",
      "source": "github"
    },
    "version": "0.1.57-beta",
    "packages": [
      {
        "registryType": "nuget",
        "registryBaseUrl": "https://api.nuget.org",
        "identifier": "TimHeuer.SampleDotnetMcpServer",
        "version": "0.1.57-beta",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "98619929-a570-46c1-8e35-4cde888731ee",
        "versionId": "55d97a83-7c7b-4baf-b70f-e1676a8b667a",
        "publishedAt": "2025-09-22T17:04:35.115505274Z",
        "updatedAt": "2025-09-22T17:04:35.115505274Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://registry.modelcontextprotocol.io/schema/mcp-server-v0.json",
    "name": "io.github.Lungshot/ninjaone",
    "description": "MCP server for NinjaONE RMM with device management, monitoring, and automation",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.2.9",
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "32389d4c-f3b8-4702-87a7-d6880ecd8bb2",
        "versionId": "13fa19a2-024f-412b-93dd-41620933bc23",
        "publishedAt": "2025-09-22T17:51:28.941427211Z",
        "updatedAt": "2025-09-22T17:51:28.941427211Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
    "name": "com.proxylink-mcp/mcp-server",
    "description": "ProxyLink MCP server for finding and booking home service professionals",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "2.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://proxylink-mcp.com"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "64947ce8-2b37-40dc-bb5b-5e1885fff32b",
        "versionId": "e2cfc1a9-8122-4a46-86f2-0fe3c9c658fa",
        "publishedAt": "2025-09-22T18:02:54.12402967Z",
        "updatedAt": "2025-09-22T18:02:54.12402967Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
    "name": "com.gibsonai/mcp",
    "description": "GibsonAI MCP server: manage your databases with natural language",
    "status": "active",
    "repository": {
      "url": "https://github.com/gibsonai/mcp",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.gibsonai.com/"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a136b4b2-643a-4374-a70f-c490b07bbf90",
        "versionId": "b74b994f-aced-4deb-b0a1-74b976056214",
        "publishedAt": "2025-09-22T18:43:05.221834159Z",
        "updatedAt": "2025-09-22T18:43:05.221834159Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.MR901/plots-mcp",
    "description": "MCP server for data visualization with Mermaid charts.",
    "status": "active",
    "repository": {
      "url": "https://github.com/MR901/plots-mcp",
      "source": "github"
    },
    "version": "0.0.1",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mcp-plots",
        "version": "0.0.1",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "bdbc2c30-2654-4e63-a034-aa20c09e8dbf",
        "versionId": "48d478fe-9fb1-4b8c-9132-3b0e3e22b2ca",
        "publishedAt": "2025-09-22T19:25:51.843169807Z",
        "updatedAt": "2025-09-22T19:25:51.843169807Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.iunera/druid-mcp-server",
    "description": "AI-powered MCP server for Apache Druid cluster management and analytic",
    "status": "active",
    "repository": {
      "url": "https://github.com/iunera/druid-mcp-server",
      "source": "github"
    },
    "version": "1.2.2",
    "packages": [
      {
        "registryType": "oci",
        "registryBaseUrl": "https://docker.io",
        "identifier": "iunera/druid-mcp-server",
        "version": "1.2.2",
        "runtimeHint": "docker",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Druid router URL for connecting to the Druid cluster",
            "format": "string",
            "name": "DRUID_ROUTER_URL"
          },
          {
            "description": "Username for Druid authentication (optional)",
            "format": "string",
            "name": "DRUID_AUTH_USERNAME"
          },
          {
            "description": "Password for Druid authentication (optional)",
            "format": "string",
            "name": "DRUID_AUTH_PASSWORD"
          },
          {
            "description": "Enable SSL/TLS support for Druid connections",
            "format": "boolean",
            "name": "DRUID_SSL_ENABLED"
          },
          {
            "description": "Skip SSL certificate verification (for development/testing only)",
            "format": "boolean",
            "name": "DRUID_SSL_SKIP_VERIFICATION"
          },
          {
            "description": "Enable read-only mode (only GET requests and SQL queries allowed)",
            "format": "boolean",
            "name": "DRUID_MCP_READONLY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c232e17d-152d-41f2-a532-85e8fa68d73e",
        "versionId": "aac509bd-d725-46a5-9533-655552ccbdb8",
        "publishedAt": "2025-09-24T07:04:32.1707733Z",
        "updatedAt": "2025-09-26T10:12:11.960195457Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.xcodebuildmcp/XcodeBuildMCP",
    "description": "XcodeBuildMCP provides tools for Xcode project management, simulator management, and app utilities.",
    "status": "active",
    "repository": {
      "url": "https://github.com/cameroncooke/XcodeBuildMCP",
      "source": "github",
      "id": "945551361"
    },
    "version": "1.14.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "xcodebuildmcp",
        "version": "1.14.1",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Enable experimental xcodemake incremental builds (true/false or 1/0).",
            "format": "boolean",
            "default": "false",
            "choices": [
              "true",
              "false",
              "1",
              "0"
            ],
            "name": "INCREMENTAL_BUILDS_ENABLED"
          },
          {
            "description": "Enable AI-powered dynamic tool discovery to load only relevant workflows.",
            "format": "boolean",
            "default": "false",
            "choices": [
              "true",
              "false"
            ],
            "name": "XCODEBUILDMCP_DYNAMIC_TOOLS"
          },
          {
            "description": "Comma-separated list of workflows to load in Static Mode (e.g., 'simulator,device,project-discovery').",
            "format": "string",
            "name": "XCODEBUILDMCP_ENABLED_WORKFLOWS"
          },
          {
            "description": "Disable Sentry error reporting (preferred flag).",
            "format": "boolean",
            "default": "false",
            "choices": [
              "true",
              "false"
            ],
            "name": "XCODEBUILDMCP_SENTRY_DISABLED"
          },
          {
            "description": "Enable verbose debug logging from the server.",
            "format": "boolean",
            "default": "false",
            "choices": [
              "true",
              "false"
            ],
            "name": "XCODEBUILDMCP_DEBUG"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "be9105fb-f8cb-4151-b6f8-21b49fd71fed",
        "versionId": "1796acca-2fb5-431d-9fd0-4f5f5be0f020",
        "publishedAt": "2025-09-22T20:19:27.621246958Z",
        "updatedAt": "2025-09-22T20:19:27.621246958Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.close/close-mcp",
    "description": "Close CRM to manage your sales pipeline. Learn more at https://close.com or https://mcp.close.com",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.1",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.close.com/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "770f5812-1f2f-46c7-bef9-e05f6d62f304",
        "versionId": "2f86faac-87bf-49e5-bcec-e439687e0923",
        "publishedAt": "2025-09-22T21:07:57.602590144Z",
        "updatedAt": "2025-09-22T21:07:57.602590144Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.findyourfivepm/mcp-server",
    "description": "Discover cities where it's currently 5PM around the world with timezone and location data.",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.2",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.findyourfivepm.com"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "53546a6e-b9a2-42c2-80e8-25de952fc608",
        "versionId": "89638680-b5e8-4024-a01a-767b19552328",
        "publishedAt": "2025-09-23T00:32:16.764241388Z",
        "updatedAt": "2025-09-23T00:32:16.764241388Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.Lyellr88/marm-mcp-server",
    "description": "Universal MCP Server with advanced AI memory capabilities and semantic search.",
    "repository": {
      "url": "https://github.com/Lyellr88/MARM-Systems",
      "source": "github"
    },
    "version": "2.2.5",
    "packages": [
      {
        "registryType": "pypi",
        "identifier": "marm-mcp-server",
        "version": "2.2.5",
        "transport": {
          "type": "stdio"
        }
      },
      {
        "registryType": "oci",
        "identifier": "lyellr88/marm-mcp-server",
        "version": "2.2.5",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "73eda8a1-8138-43c0-ac0e-5f953d1d304e",
        "versionId": "b1e95860-7055-482d-8d1e-33c2883b09ab",
        "publishedAt": "2025-09-23T06:50:35.598480679Z",
        "updatedAt": "2025-09-23T06:50:35.598480679Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.biodnd/agent-fin",
    "description": "Agent Fin: finance MCP server with market data tools",
    "repository": {
      "url": "https://github.com/markchiang/go-agents",
      "source": "github",
      "subfolder": "src/go_agents/agents/fin"
    },
    "version": "0.1.0",
    "remotes": [
      {
        "type": "sse",
        "url": "https://agent-fin.biodnd.com/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "ff2fd401-9a5b-4e68-90c2-442e8adfce1c",
        "versionId": "0a5e2f2f-3292-4617-9b0d-f48d0b1764c5",
        "publishedAt": "2025-09-23T08:26:54.846586034Z",
        "updatedAt": "2025-09-23T09:08:15.445609211Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.biodnd/agent-ip",
    "description": "Agent IP: MCP server with patents search tools",
    "repository": {
      "url": "https://github.com/markchiang/go-agents",
      "source": "github",
      "subfolder": "src/go_agents/agents/ip"
    },
    "version": "0.1.0",
    "remotes": [
      {
        "type": "sse",
        "url": "https://agent-ip.biodnd.com/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "30c71c78-e9f2-480d-969f-a352e650a85c",
        "versionId": "c5d23469-63b2-4347-8fe8-f3b14875f334",
        "publishedAt": "2025-09-23T08:27:01.316623608Z",
        "updatedAt": "2025-09-23T09:08:13.513992098Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.biodnd/agent-press",
    "description": "Agent Press: news MCP server streaming company headlines",
    "repository": {
      "url": "https://github.com/markchiang/go-agents",
      "source": "github",
      "subfolder": "src/go_agents/agents/press"
    },
    "version": "0.1.0",
    "remotes": [
      {
        "type": "sse",
        "url": "https://agent-press.biodnd.com/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "8475fdbb-a38f-4d19-95ad-00e601276b42",
        "versionId": "dc204bad-0703-4849-b42c-0ec72208bc37",
        "publishedAt": "2025-09-23T08:27:08.049032565Z",
        "updatedAt": "2025-09-23T09:08:14.848180083Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.iworkist/btcmcp",
    "description": "An MCP server that provides Bitcoin price data from Binance API",
    "status": "active",
    "repository": {
      "url": "https://github.com/iworkist/btcmcp",
      "source": "github"
    },
    "version": "0.1.2",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "btcmcp",
        "version": "0.1.2",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "00c3fbf9-d8f5-4ee9-9672-d7181c6a6026",
        "versionId": "4b81ac7a-cf9e-4960-9b82-529681ed11b1",
        "publishedAt": "2025-09-23T08:31:39.293571745Z",
        "updatedAt": "2025-09-23T08:31:39.293571745Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.GitHub30/qiita-mcp-server",
    "description": "Publish articles to Qiita via MCP tools. Minimal, fast, and focused on Qiita authoring.",
    "status": "active",
    "repository": {
      "url": "https://github.com/GitHub30/qiita-mcp-server",
      "source": "github"
    },
    "version": "0.1.0",
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "d053c612-bfe7-42a7-a52b-9a12b369fd93",
        "versionId": "e8e8917a-071d-4ac8-8a0d-6500263e5f75",
        "publishedAt": "2025-09-23T08:59:51.414173308Z",
        "updatedAt": "2025-09-23T08:59:51.414173308Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.GitHub30/zenn-mcp-server",
    "description": "MCP server that posts to Zenn.",
    "status": "active",
    "repository": {
      "url": "https://github.com/GitHub30/zenn-mcp-server",
      "source": "github"
    },
    "version": "0.1.0",
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b8d7738c-c90e-4426-94e8-9cb1cf29d458",
        "versionId": "bf0fd3c3-28a7-4e05-b631-2ea81e208dc4",
        "publishedAt": "2025-09-23T09:04:05.123481393Z",
        "updatedAt": "2025-09-23T09:04:05.123481393Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
    "name": "io.github.GitHub30/note-mcp-server",
    "description": "MCP server for note.com: create, edit and retrieve posts.",
    "status": "active",
    "repository": {
      "url": "https://github.com/GitHub30/note-mcp-server",
      "source": "github"
    },
    "version": "0.1.0",
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "955a2c36-3ce2-4ac2-a1ad-477890c3a3ea",
        "versionId": "38c744df-dcaa-4268-8375-dd4284171c79",
        "publishedAt": "2025-09-23T09:07:31.816269545Z",
        "updatedAt": "2025-09-23T09:07:31.816269545Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.biodnd/agent-ip",
    "description": "Agent IP: MCP server with patents search tools",
    "repository": {
      "url": "https://github.com/markchiang/go-agents",
      "source": "github",
      "subfolder": "src/go_agents/agents/ip"
    },
    "version": "0.1.1",
    "remotes": [
      {
        "type": "sse",
        "url": "https://agent-ip.biodnd.com/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "30c71c78-e9f2-480d-969f-a352e650a85c",
        "versionId": "f83ca744-575f-4744-a57b-516145507f31",
        "publishedAt": "2025-09-23T09:08:13.488086856Z",
        "updatedAt": "2025-09-23T09:47:07.38682109Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.biodnd/agent-press",
    "description": "Agent Press: news MCP server streaming company headlines",
    "repository": {
      "url": "https://github.com/markchiang/go-agents",
      "source": "github",
      "subfolder": "src/go_agents/agents/press"
    },
    "version": "0.1.1",
    "remotes": [
      {
        "type": "sse",
        "url": "https://agent-press.biodnd.com/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "8475fdbb-a38f-4d19-95ad-00e601276b42",
        "versionId": "078a7b91-4b4f-4caa-b696-1c1f11478b00",
        "publishedAt": "2025-09-23T09:08:14.844607103Z",
        "updatedAt": "2025-09-23T09:47:04.199964082Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.biodnd/agent-fin",
    "description": "Agent Fin: finance MCP server with market data tools",
    "repository": {
      "url": "https://github.com/markchiang/go-agents",
      "source": "github",
      "subfolder": "src/go_agents/agents/fin"
    },
    "version": "0.1.1",
    "remotes": [
      {
        "type": "sse",
        "url": "https://agent-fin.biodnd.com/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "ff2fd401-9a5b-4e68-90c2-442e8adfce1c",
        "versionId": "69e1f94e-3424-4277-b4f9-db335884708e",
        "publishedAt": "2025-09-23T09:08:15.442472279Z",
        "updatedAt": "2025-09-23T09:47:11.445953769Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.MR901/mcp-plots",
    "description": "MCP server for data visualization with Mermaid charts.",
    "status": "active",
    "repository": {
      "url": "https://github.com/MR901/mcp-plots",
      "source": "github"
    },
    "version": "0.0.2",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mcp-plots",
        "version": "0.0.2",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "04db2a27-c1ff-4897-966f-aabc0d59805d",
        "versionId": "ecb7fad3-cded-4d74-a441-def7fdb2f7ae",
        "publishedAt": "2025-09-23T09:17:58.15497417Z",
        "updatedAt": "2025-09-24T12:22:55.556924045Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.biodnd/agent-press",
    "description": "Agent Press: news MCP server streaming company headlines",
    "repository": {
      "url": "https://github.com/markchiang/go-agents",
      "source": "github",
      "subfolder": "src/go_agents/agents/press"
    },
    "version": "0.1.2",
    "remotes": [
      {
        "type": "sse",
        "url": "https://agent-press.biodnd.com/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "8475fdbb-a38f-4d19-95ad-00e601276b42",
        "versionId": "428a0bb3-7bb6-4ff0-92f6-9636a39299c9",
        "publishedAt": "2025-09-23T09:47:04.193456925Z",
        "updatedAt": "2025-09-23T09:47:04.193456925Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.biodnd/agent-ip",
    "description": "Agent IP: MCP server with patents search tools",
    "repository": {
      "url": "https://github.com/markchiang/go-agents",
      "source": "github",
      "subfolder": "src/go_agents/agents/ip"
    },
    "version": "0.1.2",
    "remotes": [
      {
        "type": "sse",
        "url": "https://agent-ip.biodnd.com/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "30c71c78-e9f2-480d-969f-a352e650a85c",
        "versionId": "01b8ec9c-fcc1-4608-89c0-02072bf95738",
        "publishedAt": "2025-09-23T09:47:07.378272466Z",
        "updatedAt": "2025-09-23T09:47:07.378272466Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.biodnd/agent-fin",
    "description": "Agent Fin: finance MCP server with market data tools",
    "repository": {
      "url": "https://github.com/markchiang/go-agents",
      "source": "github",
      "subfolder": "src/go_agents/agents/fin"
    },
    "version": "0.1.2",
    "remotes": [
      {
        "type": "sse",
        "url": "https://agent-fin.biodnd.com/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "ff2fd401-9a5b-4e68-90c2-442e8adfce1c",
        "versionId": "adc63447-c622-468a-830c-ab9c09d78b92",
        "publishedAt": "2025-09-23T09:47:11.441639121Z",
        "updatedAt": "2025-09-23T09:47:11.441639121Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.nrwl/nx-console",
    "description": "A Model Context Protocol server implementation for Nx",
    "status": "active",
    "repository": {
      "url": "https://github.com/nrwl/nx-console",
      "source": "github"
    },
    "version": "0.6.12",
    "packages": [
      {
        "registryType": "npm",
        "identifier": "nx-mcp",
        "version": "0.6.12",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "02e518c5-4348-4600-b521-7a09364276c3",
        "versionId": "bbc51e33-09d6-4830-8406-1712d1907cc1",
        "publishedAt": "2025-09-23T09:55:22.303227162Z",
        "updatedAt": "2025-09-23T09:55:22.303227162Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
    "name": "com.wix/mcp",
    "description": "A Model Context Protocol server for Wix AI tools",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "sse",
        "url": "https://mcp.wix.com/sse"
      },
      {
        "type": "streamable-http",
        "url": "https://mcp.wix.com/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "d6d85b3f-6b89-45fa-84fc-921a27c25336",
        "versionId": "e4ac4a33-ef0b-4418-a20f-a59a73df10e9",
        "publishedAt": "2025-09-23T12:39:56.865011466Z",
        "updatedAt": "2025-09-23T12:39:56.865011466Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.martymarkenson/postgres-connector",
    "description": "MCP server for querying PostgreSQL databases",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.1",
    "packages": [
      {
        "registryType": "npm",
        "identifier": "postgres-connector",
        "version": "1.0.1",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "5fe9408b-2370-41fb-90f9-3fce961c0968",
        "versionId": "d7872e0e-c300-4b3d-9f46-b5f31cf5e99e",
        "publishedAt": "2025-09-23T12:45:22.90533061Z",
        "updatedAt": "2025-09-25T21:59:51.449878022Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
    "name": "com.zomato/mcp",
    "description": "An MCP server that exposes functionalities to use Zomato's services.",
    "status": "active",
    "repository": {
      "url": "https://github.com/Zomato/mcp-server-manifest",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp-server.zomato.com/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "7dfbecab-5347-4637-ad65-532ca204651a",
        "versionId": "ecf0364f-9cb6-4346-a22c-7b30ca1750bc",
        "publishedAt": "2025-09-23T13:25:48.732532617Z",
        "updatedAt": "2025-09-23T13:25:48.732532617Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.ptyagiegnyte/egnyte-mcp-server",
    "description": "Official Egnyte MCP Server for AI integration with document search, analysis, and collaboration.",
    "status": "beta",
    "repository": {
      "url": "https://github.com/egnyte/mcp-server",
      "source": "github"
    },
    "version": "1.0.0",
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "aebeac52-43db-4514-80e0-6fdc48a065d1",
        "versionId": "f552bf3e-d293-4eee-85bb-8db8e1053ae4",
        "publishedAt": "2025-09-23T14:34:56.265623341Z",
        "updatedAt": "2025-09-23T14:34:56.265623341Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://schemas.mcp.run/server.json",
    "name": "io.github.ptyagiegnyte/egnyte-remote",
    "description": "Secure integration between AI tools and Egnyte content with search, analysis, and workflow tools.",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "cd8693ba-aa21-47fa-9fb7-d47f548c111d",
        "versionId": "78135aba-1c8b-4885-9d8f-bddaba502f3c",
        "publishedAt": "2025-09-23T15:04:02.675929524Z",
        "updatedAt": "2025-09-23T15:07:22.510126268Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://schemas.mcp.run/server.json",
    "name": "io.github.ptyagiegnyte/egnyte-remote",
    "description": "Secure integration between AI tools and Egnyte content with search, analysis, and workflow tools.",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.1",
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "cd8693ba-aa21-47fa-9fb7-d47f548c111d",
        "versionId": "e4807f9f-b3af-4e6b-b06d-70bc304bddfb",
        "publishedAt": "2025-09-23T15:07:22.504595363Z",
        "updatedAt": "2025-09-23T15:07:22.504595363Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.neverinfamous/sqlite-mcp-server",
    "description": "SQLite MCP server with 73 tools for JSONB, full-text search, geospatial, and analytics.",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "2.6.0",
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "214e2c2b-d1c1-4b5c-bb54-863a40d6d742",
        "versionId": "8c59a7e9-2250-4aa5-a353-5ba3f40cd484",
        "publishedAt": "2025-09-23T23:52:16.059130004Z",
        "updatedAt": "2025-09-23T23:52:16.059130004Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.neverinfamous/memory-journal-mcp",
    "description": "Developer project journal with Git context, semantic search, and 7 specialized tools.",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "1a2dcbd6-9de7-47c5-8f9b-0a57ae5eafd7",
        "versionId": "7e56154c-3f71-473e-becb-e02b6a52ef36",
        "publishedAt": "2025-09-24T00:24:51.574492802Z",
        "updatedAt": "2025-09-24T00:24:51.574492802Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.iunera/druid-mcp-server",
    "description": "AI-powered MCP server for Apache Druid cluster management and analytic",
    "status": "active",
    "repository": {
      "url": "https://github.com/iunera/druid-mcp-server",
      "source": "github"
    },
    "version": "1.2.1",
    "packages": [
      {
        "registryType": "oci",
        "registryBaseUrl": "https://docker.io",
        "identifier": "iunera/druid-mcp-server",
        "version": "1.2.1",
        "runtimeHint": "docker",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Druid router URL for connecting to the Druid cluster",
            "format": "string",
            "name": "DRUID_ROUTER_URL"
          },
          {
            "description": "Username for Druid authentication (optional)",
            "format": "string",
            "name": "DRUID_AUTH_USERNAME"
          },
          {
            "description": "Password for Druid authentication (optional)",
            "format": "string",
            "name": "DRUID_AUTH_PASSWORD"
          },
          {
            "description": "Enable SSL/TLS support for Druid connections",
            "format": "boolean",
            "name": "DRUID_SSL_ENABLED"
          },
          {
            "description": "Skip SSL certificate verification (for development/testing only)",
            "format": "boolean",
            "name": "DRUID_SSL_SKIP_VERIFICATION"
          },
          {
            "description": "Enable read-only mode (only GET requests and SQL queries allowed)",
            "format": "boolean",
            "name": "DRUID_MCP_READONLY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c232e17d-152d-41f2-a532-85e8fa68d73e",
        "versionId": "e167424a-6ad1-4c57-ab2d-89552a711557",
        "publishedAt": "2025-09-24T05:52:38.477091345Z",
        "updatedAt": "2025-09-24T07:04:32.175441536Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.pkolawa/krs-poland-mcp-server",
    "description": "Polish National registry of businesses and other legal entities",
    "status": "active",
    "repository": {
      "url": "https://github.com/pkolawa/krs-poland-mcp-server",
      "source": "github"
    },
    "version": "1.0.17",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "krs-poland-mcp-server",
        "version": "1.0.17",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "02f83e25-5ef7-4dd9-93d0-68c6b0805fe0",
        "versionId": "e9ab43c8-1c33-450d-9a91-f699bd2580fd",
        "publishedAt": "2025-09-24T06:35:32.426768422Z",
        "updatedAt": "2025-09-24T06:35:32.426768422Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.ChromeDevTools/chrome-devtools-mcp",
    "description": "MCP server for Chrome DevTools",
    "status": "active",
    "repository": {
      "url": "https://github.com/ChromeDevTools/chrome-devtools-mcp",
      "source": "github"
    },
    "version": "0.2.6",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "chrome-devtools-mcp",
        "version": "0.2.6",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a90d8a5b-ca0c-4e52-a82c-36027fdf7de2",
        "versionId": "0df0a91b-c0f0-4054-b53c-0472b408ba70",
        "publishedAt": "2025-09-24T08:32:44.48646114Z",
        "updatedAt": "2025-09-24T12:57:07.92042999Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.delorenj/mcp-server-trello",
    "description": "MCP server for Trello boards with rate limiting, type safety, and comprehensive API integration.",
    "status": "active",
    "repository": {
      "url": "https://github.com/delorenj/mcp-server-trello",
      "source": "github"
    },
    "version": "1.5.6",
    "websiteUrl": "https://delorenj.github.io/mcp-server-trello",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@delorenj/mcp-server-trello",
        "version": "1.5.6",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your Trello API key",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "TRELLO_API_KEY"
          },
          {
            "description": "Your Trello token",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "TRELLO_TOKEN"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "9b94aaa3-e02f-4538-972e-f332b1428a1d",
        "versionId": "ea5ea6e1-78b0-42f4-a72f-ac8d15ba7906",
        "publishedAt": "2025-09-24T08:48:44.268039725Z",
        "updatedAt": "2025-09-24T08:48:44.268039725Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.jztan/redmine-mcp-server",
    "description": "Production-ready MCP server for Redmine with security, pagination, and enterprise features",
    "status": "active",
    "repository": {
      "url": "https://github.com/jztan/redmine-mcp-server",
      "source": "github"
    },
    "version": "0.4.4",
    "packages": [
      {
        "registryType": "pypi",
        "identifier": "redmine-mcp-server",
        "version": "0.4.4",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a583b5d9-530d-4f56-97b4-d061b3aa9a2a",
        "versionId": "fb418ed4-a779-4674-8e1f-446ed0ca1659",
        "publishedAt": "2025-09-24T11:06:13.143885146Z",
        "updatedAt": "2025-09-24T12:09:39.854763279Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.jztan/redmine-mcp-server",
    "description": "Production-ready MCP server for Redmine with security, pagination, and enterprise features",
    "status": "active",
    "repository": {
      "url": "https://github.com/jztan/redmine-mcp-server",
      "source": "github"
    },
    "version": "0.4.5",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "redmine-mcp-server",
        "version": "0.4.5",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "URL of your Redmine server (e.g., https://your-redmine-server.com)",
            "isRequired": true,
            "format": "string",
            "name": "REDMINE_URL"
          },
          {
            "description": "Redmine username for authentication (alternative to API key)",
            "format": "string",
            "name": "REDMINE_USERNAME"
          },
          {
            "description": "Redmine password for authentication (alternative to API key)",
            "format": "string",
            "isSecret": true,
            "name": "REDMINE_PASSWORD"
          },
          {
            "description": "Redmine API key for authentication (alternative to username/password)",
            "format": "string",
            "isSecret": true,
            "name": "REDMINE_API_KEY"
          },
          {
            "description": "Host address for the MCP server (default: 0.0.0.0)",
            "format": "string",
            "default": "0.0.0.0",
            "name": "SERVER_HOST"
          },
          {
            "description": "Port for the MCP server (default: 8000)",
            "format": "integer",
            "default": "8000",
            "name": "SERVER_PORT"
          },
          {
            "description": "Public hostname for file download URLs (default: localhost)",
            "format": "string",
            "default": "localhost",
            "name": "PUBLIC_HOST"
          },
          {
            "description": "Public port for file download URLs (default: 8000)",
            "format": "integer",
            "default": "8000",
            "name": "PUBLIC_PORT"
          },
          {
            "description": "Directory for storing downloaded attachments (default: ./attachments)",
            "format": "string",
            "default": "./attachments",
            "name": "ATTACHMENTS_DIR"
          },
          {
            "description": "Enable automatic cleanup of expired files (default: true)",
            "format": "boolean",
            "default": "true",
            "name": "AUTO_CLEANUP_ENABLED"
          },
          {
            "description": "Interval between cleanup runs in minutes (default: 10)",
            "format": "integer",
            "default": "10",
            "name": "CLEANUP_INTERVAL_MINUTES"
          },
          {
            "description": "Default expiry time for attachments in minutes (default: 60)",
            "format": "integer",
            "default": "60",
            "name": "ATTACHMENT_EXPIRES_MINUTES"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a583b5d9-530d-4f56-97b4-d061b3aa9a2a",
        "versionId": "429e5de1-9038-4791-9b53-49a2710edfb7",
        "publishedAt": "2025-09-24T12:09:39.852727599Z",
        "updatedAt": "2025-09-24T12:09:39.852727599Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.SamYuan1990/i18n-agent-action",
    "description": "An i18n github action for language translate",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "mcp",
    "packages": [
      {
        "registryType": "oci",
        "registryBaseUrl": "https://ghcr.io",
        "identifier": "SamYuan1990/i18n-agent-action",
        "version": "mcp",
        "runtimeHint": "docker",
        "transport": {
          "type": "sse",
          "url": "https://example.com:8080/sse"
        },
        "runtimeArguments": [
          {
            "description": "Port mapping from host to container",
            "value": "8080:8080",
            "type": "named",
            "name": "-p"
          },
          {
            "description": "API key for the i18n service",
            "value": "api_key={api_key}",
            "variables": {
              "api_key": {
                "description": "Your API key for the translation service",
                "isRequired": true,
                "format": "string",
                "isSecret": true
              }
            },
            "type": "named",
            "name": "-e"
          },
          {
            "description": "Volume mount for model files",
            "value": "{models_path}:/app/models",
            "variables": {
              "models_path": {
                "description": "Path to your models directory on the host",
                "isRequired": true,
                "format": "filepath",
                "default": "/path/to/your/models"
              }
            },
            "type": "named",
            "name": "-v"
          },
          {
            "description": "Encoder model file path",
            "value": "encoder={encoder_file}",
            "variables": {
              "encoder_file": {
                "description": "Encoder model file name",
                "isRequired": true,
                "format": "string",
                "default": "/app/models/your-encoder.onnx"
              }
            },
            "type": "named",
            "name": "-e"
          },
          {
            "description": "Decoder model file path",
            "value": "decoder={decoder_file}",
            "variables": {
              "decoder_file": {
                "description": "Decoder model file name",
                "isRequired": true,
                "format": "string",
                "default": "/app/models/your-decoder.onnx"
              }
            },
            "type": "named",
            "name": "-e"
          },
          {
            "description": "Tokens model file path",
            "value": "tokens={tokens_file}",
            "variables": {
              "tokens_file": {
                "description": "Tokens model file name",
                "isRequired": true,
                "format": "string",
                "default": "/app/models/your-tokens.onnx"
              }
            },
            "type": "named",
            "name": "-e"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "26b74645-f671-4e10-b47a-751373353dc6",
        "versionId": "131fbf7d-e6c3-4059-acb0-6de5943bfe82",
        "publishedAt": "2025-09-24T12:17:46.198378149Z",
        "updatedAt": "2025-09-24T12:17:46.198378149Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.MR901/mcp-plots",
    "description": "MCP server for data visualization with Mermaid charts.",
    "status": "active",
    "repository": {
      "url": "https://github.com/MR901/mcp-plots",
      "source": "github"
    },
    "version": "0.0.3",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mcp-plots",
        "version": "0.0.2",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "04db2a27-c1ff-4897-966f-aabc0d59805d",
        "versionId": "fda11600-263f-46ad-a831-4a44439f5800",
        "publishedAt": "2025-09-24T12:22:55.555052849Z",
        "updatedAt": "2025-09-24T12:22:55.555052849Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.ChromeDevTools/chrome-devtools-mcp",
    "description": "MCP server for Chrome DevTools",
    "status": "active",
    "repository": {
      "url": "https://github.com/ChromeDevTools/chrome-devtools-mcp",
      "source": "github"
    },
    "version": "0.2.7",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "chrome-devtools-mcp",
        "version": "0.2.7",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a90d8a5b-ca0c-4e52-a82c-36027fdf7de2",
        "versionId": "35610df8-a6ad-400b-bab0-58cb21d0c5c5",
        "publishedAt": "2025-09-24T12:57:07.916238607Z",
        "updatedAt": "2025-09-25T16:53:34.191488001Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.kemalersin/fonparam-mcp",
    "description": "MCP server for FonParam API - Turkish mutual funds data",
    "status": "active",
    "repository": {
      "url": "https://github.com/kemalersin/fonparam-mcp",
      "source": "github"
    },
    "version": "1.0.4",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "fonparam-mcp",
        "version": "1.0.4",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "0e94b691-31d1-4bf6-992b-e74ff8ad8a34",
        "versionId": "6670a9a0-7f94-4153-a18f-aab0cceb5baa",
        "publishedAt": "2025-09-24T13:05:56.655094609Z",
        "updatedAt": "2025-09-24T13:05:56.655094609Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
    "name": "io.github.srikrishna235/scrimba-teaching-mcp",
    "description": "Unified MCP for Scrimba interactive programming education with visual learning",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "3.0.1",
    "packages": [
      {
        "registryType": "pypi",
        "identifier": "scrimba-teaching-mcp",
        "version": "3.0.1",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "9af8219e-a44d-4cce-a08d-8d5b8b7466fe",
        "versionId": "46761a87-81e6-4126-bc3e-4c0c35decf40",
        "publishedAt": "2025-09-24T14:46:53.165686451Z",
        "updatedAt": "2025-09-24T14:46:53.165686451Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.CodeLogicIncEngineering/codelogic-mcp-server",
    "description": "An MCP Server to utilize Codelogic's rich software dependency data in your AI programming assistant.",
    "status": "active",
    "repository": {
      "url": "https://github.com/CodeLogicIncEngineering/codelogic-mcp-server",
      "source": "github"
    },
    "version": "1.0.11",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "codelogic-mcp-server",
        "version": "1.0.11",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "url to the CodeLogic server e.g. https://myco.app.codelogic.com",
            "format": "string",
            "name": "CODELOGIC_SERVER_HOST"
          },
          {
            "description": "CodeLogic server username",
            "format": "string",
            "name": "CODELOGIC_USERNAME"
          },
          {
            "description": "CodeLogic server password",
            "format": "string",
            "name": "CODELOGIC_PASSWORD"
          },
          {
            "description": "the workspace name that your code is scanned into",
            "format": "string",
            "name": "CODELOGIC_WORKSPACE_NAME"
          },
          {
            "description": "When enabled, additional debug files such as timing_log.txt and impact_data*.json will be generated. Defaults to false",
            "format": "string",
            "name": "CODELOGIC_DEBUG_MODE"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "82f94c6f-1cd4-4226-b482-36403636e8a9",
        "versionId": "70a2407b-15d1-419e-91b2-123073c1b770",
        "publishedAt": "2025-09-24T14:54:45.047400947Z",
        "updatedAt": "2025-09-24T14:54:45.047400947Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "co.pipeboard/meta-ads-mcp",
    "description": "Facebook / Meta Ads automation with AI: analyze performance, test creatives, optimize spend.",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.11",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.pipeboard.co/meta-ads-mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "51e23615-8cdd-47f0-84d3-df448e34a4e7",
        "versionId": "1dfd25e7-717b-4f95-a6be-5c41f761baf3",
        "publishedAt": "2025-09-24T15:11:32.888511284Z",
        "updatedAt": "2025-09-24T16:14:42.455796841Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "net.todoist/mcp",
    "description": "Official Todoist MCP server for AI assistants to manage tasks, projects, and workflows.",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://ai.todoist.net/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "64292e92-8b90-4b7c-8ff0-4ccb206b35a2",
        "versionId": "d865cb7d-2de5-497a-befc-1005ba20bc55",
        "publishedAt": "2025-09-24T15:27:34.540662924Z",
        "updatedAt": "2025-09-24T15:27:34.540662924Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "co.pipeboard/meta-ads-mcp",
    "description": "Facebook / Meta Ads automation with AI: analyze performance, test creatives, optimize spend.",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.12",
    "packages": [
      {
        "registryType": "pypi",
        "identifier": "meta-ads-mcp",
        "version": "1.0.12",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.pipeboard.co/meta-ads-mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "51e23615-8cdd-47f0-84d3-df448e34a4e7",
        "versionId": "5c1fb401-9a73-4396-b243-823ebaf076af",
        "publishedAt": "2025-09-24T16:14:42.437856593Z",
        "updatedAt": "2025-09-24T16:24:17.273562755Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "co.pipeboard/meta-ads-mcp",
    "description": "Facebook / Meta Ads automation with AI: analyze performance, test creatives, optimize spend.",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.13",
    "packages": [
      {
        "registryType": "pypi",
        "identifier": "meta-ads-mcp",
        "version": "1.0.13",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.pipeboard.co/meta-ads-mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "51e23615-8cdd-47f0-84d3-df448e34a4e7",
        "versionId": "b9e12cd8-2660-4dc1-9e63-de7491c63002",
        "publishedAt": "2025-09-24T16:24:17.268236123Z",
        "updatedAt": "2025-09-24T16:24:17.268236123Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
    "name": "com.redpanda/docs-mcp",
    "description": "Get authoritative answers to questions about Redpanda.",
    "status": "active",
    "repository": {
      "url": "https://github.com/redpanda-data/docs-site",
      "source": "github",
      "subfolder": "netlify"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://docs.redpanda.com/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "2a581223-2940-486f-8905-e30db3e84951",
        "versionId": "0fb59115-b315-4b68-92db-8046316b8ba8",
        "publishedAt": "2025-09-24T16:34:00.228680722Z",
        "updatedAt": "2025-09-24T16:34:00.228680722Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.jcucci/dotnet-sherlock-mcp",
    "description": ".NET assembly introspection MCP server with advanced reflection and type analysis capabilities",
    "status": "active",
    "repository": {
      "url": "https://github.com/jcucci/dotnet-sherlock-mcp",
      "source": "github"
    },
    "version": "2.3.0",
    "packages": [
      {
        "registryType": "nuget",
        "identifier": "Sherlock.MCP.Server",
        "version": "2.3.0",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "bd0e05aa-5448-4051-a532-08accbde80de",
        "versionId": "b77cb67a-bf01-4197-b889-e7cfd4c5d094",
        "publishedAt": "2025-09-24T21:21:37.075081266Z",
        "updatedAt": "2025-09-24T21:21:37.075081266Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.blockscout/mcp-server",
    "description": "MCP server for Blockscout",
    "status": "active",
    "repository": {
      "url": "https://github.com/blockscout/mcp-server",
      "source": "github"
    },
    "version": "0.10.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.blockscout.com/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "7fcc8569-45f7-48c1-92b4-6530543951ab",
        "versionId": "def6cbcb-501b-496a-8e4d-ed6aee618938",
        "publishedAt": "2025-09-24T21:24:00.159185366Z",
        "updatedAt": "2025-09-24T21:24:00.159185366Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.vfarcic/dot-ai",
    "description": "AI-powered development platform for Kubernetes deployments and intelligent automation",
    "status": "active",
    "repository": {
      "url": "https://github.com/vfarcic/dot-ai",
      "source": "github"
    },
    "version": "0.100.0",
    "packages": [
      {
        "registryType": "npm",
        "identifier": "@vfarcic/dot-ai",
        "version": "0.100.0",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "6836138f-2ad2-4feb-8043-ea425ecb0d71",
        "versionId": "1b4d9835-1839-4365-b9bc-0b689c371247",
        "publishedAt": "2025-09-24T21:49:38.605228419Z",
        "updatedAt": "2025-09-28T16:21:23.447924914Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.blockscout/mcp-server",
    "description": "MCP server for Blockscout",
    "status": "active",
    "repository": {
      "url": "https://github.com/blockscout/mcp-server",
      "source": "github"
    },
    "version": "0.11.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.blockscout.com/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "7fcc8569-45f7-48c1-92b4-6530543951ab",
        "versionId": "08d33ec3-9bfa-4960-81e2-b6cc9068a586",
        "publishedAt": "2025-09-25T03:53:22.145545753Z",
        "updatedAt": "2025-09-25T03:53:22.145545753Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
    "name": "io.github.srikrishna235/scrimba-teaching-mcp",
    "description": "Unified MCP for Scrimba's interactive programming education with visual learning",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "3.0.2",
    "packages": [
      {
        "registryType": "pypi",
        "identifier": "scrimba-teaching-mcp",
        "version": "3.0.2",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "9af8219e-a44d-4cce-a08d-8d5b8b7466fe",
        "versionId": "5eb74f2b-f434-4da6-a776-39e53f84de1c",
        "publishedAt": "2025-09-25T05:38:56.280550336Z",
        "updatedAt": "2025-09-25T05:38:56.280550336Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
    "name": "io.github.srikrishna235/scrimba-teaching-mcp",
    "description": "Unified MCP for Scrimba's interactive programming education with visual learning",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "3.0.3",
    "packages": [
      {
        "registryType": "pypi",
        "identifier": "scrimba-teaching-mcp",
        "version": "3.0.3",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "9af8219e-a44d-4cce-a08d-8d5b8b7466fe",
        "versionId": "25fcdc11-06b9-43af-8eed-ae91b1a55bfc",
        "publishedAt": "2025-09-25T06:06:17.156574957Z",
        "updatedAt": "2025-09-25T06:06:17.156574957Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
    "name": "io.github.srikrishna235/scrimba-teaching-mcp",
    "description": "Unified MCP for Scrimba's interactive programming education with visual learning",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "3.0.4",
    "packages": [
      {
        "registryType": "pypi",
        "identifier": "scrimba-teaching-mcp",
        "version": "3.0.4",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "9af8219e-a44d-4cce-a08d-8d5b8b7466fe",
        "versionId": "f52cc34c-9795-4ebf-bdf6-bab90c769704",
        "publishedAt": "2025-09-25T06:09:38.832090704Z",
        "updatedAt": "2025-09-25T06:09:38.832090704Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "net.singular/mcp-server",
    "description": "Marketing intelligence MCP server providing campaign performance data and analytics tools.",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "sse",
        "url": "https://mcp.singular.net/mcp-server/mcp"
      },
      {
        "type": "streamable-http",
        "url": "https://mcp.singular.net/mcp-server/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "27928091-b7b8-49b8-bb67-3af637f72d11",
        "versionId": "a5675720-0a3a-4980-a736-49b8072e9c57",
        "publishedAt": "2025-09-25T09:51:48.50742604Z",
        "updatedAt": "2025-09-25T09:51:48.50742604Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.alex-feel/mcp-context-server",
    "description": "An MCP server that provides persistent multimodal context storage for LLM agents.",
    "status": "active",
    "repository": {
      "url": "https://github.com/alex-feel/mcp-context-server",
      "source": "github"
    },
    "version": "0.1.0",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mcp-context-server",
        "version": "0.1.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Log level",
            "format": "string",
            "name": "LOG_LEVEL"
          },
          {
            "description": "Maximum individual image size in megabytes",
            "format": "number",
            "name": "MAX_IMAGE_SIZE_MB"
          },
          {
            "description": "Maximum total request size in megabytes",
            "format": "number",
            "name": "MAX_TOTAL_SIZE_MB"
          },
          {
            "description": "Custom database file location path",
            "format": "string",
            "name": "DB_PATH"
          },
          {
            "description": "Maximum number of concurrent read connections in the pool",
            "format": "number",
            "name": "POOL_MAX_READERS"
          },
          {
            "description": "Maximum number of concurrent write connections in the pool",
            "format": "number",
            "name": "POOL_MAX_WRITERS"
          },
          {
            "description": "Connection timeout in seconds",
            "format": "number",
            "name": "POOL_CONNECTION_TIMEOUT_S"
          },
          {
            "description": "Idle connection timeout in seconds",
            "format": "number",
            "name": "POOL_IDLE_TIMEOUT_S"
          },
          {
            "description": "Connection health check interval in seconds",
            "format": "number",
            "name": "POOL_HEALTH_CHECK_INTERVAL_S"
          },
          {
            "description": "Maximum number of retry attempts for failed operations",
            "format": "number",
            "name": "RETRY_MAX_RETRIES"
          },
          {
            "description": "Base delay in seconds between retry attempts",
            "format": "number",
            "name": "RETRY_BASE_DELAY_S"
          },
          {
            "description": "Maximum delay in seconds between retry attempts",
            "format": "number",
            "name": "RETRY_MAX_DELAY_S"
          },
          {
            "description": "Enable random jitter in retry delays",
            "format": "boolean",
            "name": "RETRY_JITTER"
          },
          {
            "description": "Exponential backoff multiplication factor for retries",
            "format": "number",
            "name": "RETRY_BACKOFF_FACTOR"
          },
          {
            "description": "Enable SQLite foreign key constraints",
            "format": "boolean",
            "name": "SQLITE_FOREIGN_KEYS"
          },
          {
            "description": "SQLite journal mode (e.g., WAL, DELETE)",
            "format": "string",
            "name": "SQLITE_JOURNAL_MODE"
          },
          {
            "description": "SQLite synchronous mode (e.g., NORMAL, FULL, OFF)",
            "format": "string",
            "name": "SQLITE_SYNCHRONOUS"
          },
          {
            "description": "SQLite temporary storage location (e.g., MEMORY, FILE)",
            "format": "string",
            "name": "SQLITE_TEMP_STORE"
          },
          {
            "description": "SQLite memory-mapped I/O size in bytes",
            "format": "number",
            "name": "SQLITE_MMAP_SIZE"
          },
          {
            "description": "SQLite cache size (negative value for KB, positive for pages)",
            "format": "number",
            "name": "SQLITE_CACHE_SIZE"
          },
          {
            "description": "SQLite page size in bytes",
            "format": "number",
            "name": "SQLITE_PAGE_SIZE"
          },
          {
            "description": "SQLite WAL autocheckpoint threshold in pages",
            "format": "number",
            "name": "SQLITE_WAL_AUTOCHECKPOINT"
          },
          {
            "description": "SQLite busy timeout in milliseconds",
            "format": "number",
            "name": "SQLITE_BUSY_TIMEOUT_MS"
          },
          {
            "description": "SQLite WAL checkpoint mode (e.g., PASSIVE, FULL, RESTART)",
            "format": "string",
            "name": "SQLITE_WAL_CHECKPOINT"
          },
          {
            "description": "Server shutdown timeout in seconds",
            "format": "number",
            "name": "SHUTDOWN_TIMEOUT_S"
          },
          {
            "description": "Test mode shutdown timeout in seconds",
            "format": "number",
            "name": "SHUTDOWN_TIMEOUT_TEST_S"
          },
          {
            "description": "Queue operation timeout in seconds",
            "format": "number",
            "name": "QUEUE_TIMEOUT_S"
          },
          {
            "description": "Test mode queue timeout in seconds",
            "format": "number",
            "name": "QUEUE_TIMEOUT_TEST_S"
          },
          {
            "description": "Circuit breaker failure threshold before opening",
            "format": "number",
            "name": "CIRCUIT_BREAKER_FAILURE_THRESHOLD"
          },
          {
            "description": "Circuit breaker recovery timeout in seconds",
            "format": "number",
            "name": "CIRCUIT_BREAKER_RECOVERY_TIMEOUT_S"
          },
          {
            "description": "Maximum calls allowed in circuit breaker half-open state",
            "format": "number",
            "name": "CIRCUIT_BREAKER_HALF_OPEN_MAX_CALLS"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a352f0e9-bd3c-4736-90de-2dce46081c89",
        "versionId": "592e3e2a-dd9d-422c-b427-7365303b314b",
        "publishedAt": "2025-09-25T11:37:36.007594626Z",
        "updatedAt": "2025-09-28T19:00:48.080152325Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.formulahendry/code-runner",
    "description": "Code Runner MCP Server which can run code in various programming languages.",
    "status": "active",
    "repository": {
      "url": "https://github.com/formulahendry/mcp-server-code-runner",
      "source": "github"
    },
    "version": "0.1.9",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-server-code-runner",
        "version": "0.1.8",
        "transport": {
          "type": "stdio"
        }
      },
      {
        "registryType": "oci",
        "registryBaseUrl": "https://docker.io",
        "identifier": "formulahendry/mcp-server-code-runner",
        "version": "0.1.8",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b835c535-cd49-4a14-85b0-88f2aa27738d",
        "versionId": "c30f4ddd-0cda-44a9-b0e2-6720ace98111",
        "publishedAt": "2025-09-25T12:04:21.59819118Z",
        "updatedAt": "2025-09-25T12:04:21.59819118Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.driflyte/driflyte-mcp-server",
    "description": "Driflyte MCP server which lets AI assistants query topic-specific knowledge from web and GitHub.",
    "status": "active",
    "repository": {
      "url": "https://github.com/serkan-ozal/driflyte-mcp-server",
      "source": "github"
    },
    "version": "0.1.3",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@driflyte/mcp-server",
        "version": "0.1.3",
        "runtimeHint": "npx",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.driflyte.com/mcp"
      },
      {
        "type": "streamable-http",
        "url": "https://mcp.driflyte.com/openai"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "e4bf9279-bd3f-43d4-8c82-8b26d237876b",
        "versionId": "ef17379f-744b-45e4-9785-ca0048d9f4c6",
        "publishedAt": "2025-09-25T12:29:09.239297696Z",
        "updatedAt": "2025-09-25T12:29:09.239297696Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.tableall/mcp",
    "description": "Access Japan's finest Michelin-starred restaurants. Search, check availability, and browse menus.",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "sse",
        "url": "https://mcp.tableall.com/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "905c32bd-7f6a-495f-ae25-f2a1716b7ff2",
        "versionId": "68fd2769-066d-4c66-b197-45cd1c664388",
        "publishedAt": "2025-09-25T13:06:07.208445287Z",
        "updatedAt": "2025-09-25T13:06:07.208445287Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "technology.draup/api-server",
    "description": "Global labour & market data for skills, workforce, planning, stakeholders, jobs, news & profiles",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.draup.technology/mcp/",
        "headers": [
          {
            "description": "Get the API key from Draup Support (support@draup.com)",
            "isRequired": true,
            "isSecret": true,
            "name": "X-API-Key"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "df95026a-1446-48e1-b7fc-5f97736668cf",
        "versionId": "23c1cf54-2ea0-4625-aa2e-4450bf8877be",
        "publishedAt": "2025-09-25T15:32:50.991403872Z",
        "updatedAt": "2025-09-25T15:32:50.991403872Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.ChromeDevTools/chrome-devtools-mcp",
    "description": "MCP server for Chrome DevTools",
    "status": "active",
    "repository": {
      "url": "https://github.com/ChromeDevTools/chrome-devtools-mcp",
      "source": "github"
    },
    "version": "0.3.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "chrome-devtools-mcp",
        "version": "0.3.0",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a90d8a5b-ca0c-4e52-a82c-36027fdf7de2",
        "versionId": "f4ea0e52-ac79-498a-a98c-2c1a7db86913",
        "publishedAt": "2025-09-25T16:53:34.180042992Z",
        "updatedAt": "2025-09-26T14:05:58.835875611Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.fliptheweb/yazio-mcp",
    "description": "MCP server for accessing Yazio user & nutrition data (unofficial)",
    "status": "active",
    "repository": {
      "url": "https://github.com/fliptheweb/yazio-mcp",
      "source": "github"
    },
    "version": "0.0.2",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "yazio-mcp",
        "version": "0.0.2",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Yazio Username",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "YAZIO_USERNAME"
          },
          {
            "description": "Yazio Password",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "YAZIO_PASSWORD"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b28d33da-8510-4a00-aae3-a5ca0d22f9da",
        "versionId": "8c69258e-06c8-4ab1-bbc3-3690071354ed",
        "publishedAt": "2025-09-25T20:50:24.594330968Z",
        "updatedAt": "2025-09-25T21:36:08.072469665Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.fliptheweb/yazio-mcp",
    "description": "MCP server for accessing Yazio user & nutrition data (unofficial)",
    "status": "active",
    "repository": {
      "url": "https://github.com/fliptheweb/yazio-mcp",
      "source": "github"
    },
    "version": "0.0.5",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "yazio-mcp",
        "version": "0.0.5",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Yazio Username",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "YAZIO_USERNAME"
          },
          {
            "description": "Yazio Password",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "YAZIO_PASSWORD"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b28d33da-8510-4a00-aae3-a5ca0d22f9da",
        "versionId": "e87ed68b-6832-485f-9a47-8b865400c8c7",
        "publishedAt": "2025-09-25T21:36:08.066968193Z",
        "updatedAt": "2025-09-25T21:36:08.066968193Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.martymarkenson/postgres-connector",
    "description": "MCP server for querying PostgreSQL databases",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.2",
    "packages": [
      {
        "registryType": "npm",
        "identifier": "postgres-connector",
        "version": "1.0.2",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "5fe9408b-2370-41fb-90f9-3fce961c0968",
        "versionId": "65d4b8da-348a-4461-bc5b-85c8b1fcdd2d",
        "publishedAt": "2025-09-25T21:59:51.445715331Z",
        "updatedAt": "2025-09-25T21:59:51.445715331Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.cyanheads/mcp-ts-template",
    "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
    "status": "active",
    "repository": {
      "url": "https://github.com/cyanheads/mcp-ts-template",
      "source": "github"
    },
    "version": "2.1.3",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-ts-template",
        "version": "2.1.3",
        "runtimeHint": "bun",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "value": "run",
            "type": "positional"
          },
          {
            "value": "start:stdio",
            "type": "positional"
          }
        ],
        "environmentVariables": [
          {
            "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
            "format": "string",
            "default": "info",
            "name": "MCP_LOG_LEVEL"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-ts-template",
        "version": "2.1.3",
        "runtimeHint": "bun",
        "transport": {
          "type": "streamable-http",
          "url": "http://localhost:3010/mcp"
        },
        "packageArguments": [
          {
            "value": "run",
            "type": "positional"
          },
          {
            "value": "start:http",
            "type": "positional"
          }
        ],
        "environmentVariables": [
          {
            "description": "The hostname for the HTTP server.",
            "format": "string",
            "default": "127.0.0.1",
            "name": "MCP_HTTP_HOST"
          },
          {
            "description": "The port to run the HTTP server on.",
            "format": "string",
            "default": "3010",
            "name": "MCP_HTTP_PORT"
          },
          {
            "description": "The endpoint path for the MCP server.",
            "format": "string",
            "default": "/mcp",
            "name": "MCP_HTTP_ENDPOINT_PATH"
          },
          {
            "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
            "format": "string",
            "default": "none",
            "name": "MCP_AUTH_MODE"
          },
          {
            "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
            "format": "string",
            "default": "info",
            "name": "MCP_LOG_LEVEL"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b1a7bd6b-21e2-4cd8-8531-37dddc5fa3f4",
        "versionId": "f42395cc-06b2-47b9-8179-e6514b5d3c15",
        "publishedAt": "2025-09-26T00:34:47.31329374Z",
        "updatedAt": "2025-09-26T16:00:37.864917127Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.moonolgerd/game-mcp",
    "description": "Discovers and manages installed games on Windows from Steam, Epic, GOG, Xbox, and other platforms.",
    "status": "active",
    "repository": {
      "url": "https://github.com/moonolgerd/game-mcp",
      "source": "github"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "nuget",
        "registryBaseUrl": "https://api.nuget.org",
        "identifier": "GameMcpServer",
        "version": "1.0.0",
        "runtimeHint": "dnx",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "17f8d7dd-aee5-4178-8529-a539bd7f2e5d",
        "versionId": "ea99bfc2-2130-4bea-afef-1cb087e4011d",
        "publishedAt": "2025-09-26T02:51:31.883953733Z",
        "updatedAt": "2025-09-26T02:51:31.883953733Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.guanqun-yang/mcp-server-r-counter",
    "description": "A MCP Server Counting Number of r's for a Given Query",
    "status": "active",
    "repository": {
      "url": "https://github.com/guanqun-yang/mcp-server-r-counter",
      "source": "github"
    },
    "version": "0.0.3",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mcp-server-r-counter",
        "version": "0.0.3",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "d25dab7d-1a05-4679-b314-a2911998f316",
        "versionId": "72ce38fd-8465-4198-b8fd-5dc4fac8dce3",
        "publishedAt": "2025-09-26T03:25:25.186688278Z",
        "updatedAt": "2025-09-26T03:25:25.186688278Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.BenAHammond/code-auditor-mcp",
    "description": "Code Quality Auditor: Analyze code for SOLID principles, DRY violations, and more",
    "status": "active",
    "repository": {
      "url": "https://github.com/BenAHammond/code-auditor-mcp",
      "source": "github"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "code-auditor-mcp",
        "version": "1.17.1",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "da4e7c0a-854f-46b7-86ab-35564aa3069f",
        "versionId": "79ecb8eb-6d8d-4e4e-84f7-9dc334e6ce8f",
        "publishedAt": "2025-09-26T03:37:09.745161864Z",
        "updatedAt": "2025-09-27T17:09:06.208862272Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.wild-card/deepcontext",
    "description": "Advanced codebase indexing and semantic search MCP server",
    "status": "active",
    "repository": {
      "url": "https://github.com/Wildcard-Official/deepcontext",
      "source": "github"
    },
    "version": "0.1.15",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@wildcard-ai/deepcontext",
        "version": "0.1.15",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Jina AI API key for embeddings generation",
            "format": "string",
            "isSecret": true,
            "name": "JINA_API_KEY"
          },
          {
            "description": "Turbopuffer API key for vector storage",
            "format": "string",
            "isSecret": true,
            "name": "TURBOPUFFER_API_KEY"
          },
          {
            "description": "Wildcard API key for authentication",
            "format": "string",
            "isSecret": true,
            "name": "WILDCARD_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "1da9f9fc-d0ac-4297-a05e-024691f97791",
        "versionId": "31e49446-90e7-4f3c-a043-11512243977b",
        "publishedAt": "2025-09-26T03:44:16.929896103Z",
        "updatedAt": "2025-09-26T03:44:16.929896103Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "xyz.dreamtap/mcp",
    "description": "Dreamtap provides sources of inspiration to your AI to make it more creative.",
    "status": "active",
    "repository": {
      "url": "https://github.com/salexashenko/dreamtap",
      "source": "github"
    },
    "version": "0.1.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://dreamtap.xyz/mcp"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "0b59e2af-1e92-4a6d-91cf-d53b76041d07",
        "versionId": "119af48a-b211-4120-b0d0-e75cec3e205a",
        "publishedAt": "2025-09-26T04:11:38.085711256Z",
        "updatedAt": "2025-09-26T04:11:38.085711256Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.formulahendry/spec-driven-development",
    "description": "MCP Server that facilitates spec-driven development workflows, not just Vibe Coding.",
    "status": "active",
    "repository": {
      "url": "https://github.com/formulahendry/mcp-server-spec-driven-development",
      "source": "github"
    },
    "version": "0.1.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-server-spec-driven-development",
        "version": "0.1.1",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c8642940-bb9d-4325-9fa2-5eb093eece1e",
        "versionId": "5f774f6f-239b-45a6-a509-b1936e0e2422",
        "publishedAt": "2025-09-26T06:51:26.732082358Z",
        "updatedAt": "2025-09-26T06:51:26.732082358Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.brave/brave-search-mcp-server",
    "description": "Brave Search MCP Server: web results, images, videos, rich results, AI summaries, and more.",
    "status": "active",
    "repository": {
      "url": "https://github.com/brave/brave-search-mcp-server",
      "source": "github"
    },
    "version": "2.0.24",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@brave/brave-search-mcp-server",
        "version": "2.0.24",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your API key for the service",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "BRAVE_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "fe2e0e07-1466-499a-bcdd-16d07b8ccb40",
        "versionId": "0ceb28e5-5c88-4b82-b336-f17305b7802b",
        "publishedAt": "2025-09-26T09:53:32.927168719Z",
        "updatedAt": "2025-09-26T09:53:32.927168719Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.iunera/druid-mcp-server",
    "description": "AI-powered MCP server for Apache Druid cluster management and analytic",
    "status": "active",
    "repository": {
      "url": "https://github.com/iunera/druid-mcp-server",
      "source": "github"
    },
    "version": "1.3.0",
    "packages": [
      {
        "registryType": "oci",
        "registryBaseUrl": "https://docker.io",
        "identifier": "iunera/druid-mcp-server",
        "version": "1.3.0",
        "runtimeHint": "docker",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Druid router URL for connecting to the Druid cluster",
            "format": "string",
            "name": "DRUID_ROUTER_URL"
          },
          {
            "description": "Username for Druid authentication (optional)",
            "format": "string",
            "name": "DRUID_AUTH_USERNAME"
          },
          {
            "description": "Password for Druid authentication (optional)",
            "format": "string",
            "name": "DRUID_AUTH_PASSWORD"
          },
          {
            "description": "Enable SSL/TLS support for Druid connections",
            "format": "boolean",
            "name": "DRUID_SSL_ENABLED"
          },
          {
            "description": "Skip SSL certificate verification (for development/testing only)",
            "format": "boolean",
            "name": "DRUID_SSL_SKIP_VERIFICATION"
          },
          {
            "description": "Enable read-only mode (only GET requests and SQL queries allowed)",
            "format": "boolean",
            "name": "DRUID_MCP_READONLY_ENABLED"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "c232e17d-152d-41f2-a532-85e8fa68d73e",
        "versionId": "7c033a77-bdc0-4bad-9429-f0681867d7da",
        "publishedAt": "2025-09-26T10:12:11.95384206Z",
        "updatedAt": "2025-09-26T10:12:11.95384206Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.windowsforum/mcp-server",
    "description": "MCP server for WindowsForum.com with search, document retrieval, and real-time forum analytics.",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "sse",
        "url": "https://mcp.windowsforum.com"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "f9cf3fb8-4d15-4be5-a6f0-e8de8c767e62",
        "versionId": "b7a28107-65d9-4139-a093-7b19c7ab5e01",
        "publishedAt": "2025-09-26T10:44:10.416999243Z",
        "updatedAt": "2025-09-26T10:44:10.416999243Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.clappia-dev/clappia-mcp",
    "description": "An MCP server that provides integration with Clappia platform",
    "status": "active",
    "repository": {
      "url": "https://github.com/clappia-dev/clappia-mcp",
      "source": "github"
    },
    "version": "1.0.0",
    "packages": [
      {
        "registryType": "oci",
        "registryBaseUrl": "https://docker.io",
        "identifier": "okaru413/clappia-mcp",
        "version": "1.0.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Your API key for the Clappia platform",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "CLAPPIA_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "4bff99c9-1d7d-42e1-987b-7aef50507115",
        "versionId": "9ab0a049-8e8c-4bb3-8fdc-e1ff7638582a",
        "publishedAt": "2025-09-26T11:05:30.583562476Z",
        "updatedAt": "2025-09-26T11:05:30.583562476Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.pree-dew/mcp-bookmark",
    "description": "MCP Server for adding bookmarks in openai RAG",
    "status": "active",
    "repository": {
      "url": "https://github.com/pree-dew/mcp-bookmark",
      "source": "github"
    },
    "version": "0.1.1",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mcp-bookmark-server",
        "version": "0.1.1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "open ai api key",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "OPENAI_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "39628bbb-4f3d-4ff1-b12e-637f5d3d604e",
        "versionId": "dd2b7e15-a6f4-420b-bd79-2268233c4de1",
        "publishedAt": "2025-09-26T11:24:18.288443922Z",
        "updatedAt": "2025-09-28T11:22:51.467187125Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
    "name": "io.github.humanjesse/textarttools-mcp",
    "description": "Unicode text styling and ASCII art generation with 23 styles and 322+ figlet fonts",
    "status": "active",
    "repository": {
      "url": "https://github.com/humanjesse/textarttools-mcp",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "sse",
        "url": "https://humanjesse.github.io/textarttools-mcp/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "545edb94-ebae-47c7-a94c-07bd9f277113",
        "versionId": "80687d2f-9c6c-43a7-8327-b6a19c415787",
        "publishedAt": "2025-09-26T13:09:45.715940683Z",
        "updatedAt": "2025-09-26T13:09:45.715940683Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.ChromeDevTools/chrome-devtools-mcp",
    "description": "MCP server for Chrome DevTools",
    "status": "active",
    "repository": {
      "url": "https://github.com/ChromeDevTools/chrome-devtools-mcp",
      "source": "github"
    },
    "version": "0.4.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "chrome-devtools-mcp",
        "version": "0.4.0",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a90d8a5b-ca0c-4e52-a82c-36027fdf7de2",
        "versionId": "3aaae027-4007-4297-b713-5178d0c0cbfc",
        "publishedAt": "2025-09-26T14:05:58.832060814Z",
        "updatedAt": "2025-09-26T14:05:58.832060814Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.github/github-mcp-server",
    "description": "Connect AI assistants to GitHub - manage repos, issues, PRs, and workflows through natural language.",
    "status": "active",
    "repository": {
      "url": "https://github.com/github/github-mcp-server",
      "source": "github"
    },
    "version": "0.16.0",
    "packages": [
      {
        "registryType": "oci",
        "registryBaseUrl": "https://ghcr.io",
        "identifier": "github/github-mcp-server",
        "version": "0.16.0",
        "transport": {
          "type": "stdio"
        },
        "runtimeArguments": [
          {
            "description": "The runtime command to execute",
            "value": "run",
            "type": "positional"
          },
          {
            "description": "Run container in interactive mode",
            "type": "named",
            "name": "-i"
          },
          {
            "description": "Automatically remove the container when it exits",
            "type": "named",
            "name": "--rm"
          },
          {
            "description": "Set an environment variable in the runtime",
            "type": "named",
            "name": "-e"
          },
          {
            "description": "Environment variable name",
            "value": "GITHUB_PERSONAL_ACCESS_TOKEN",
            "type": "positional",
            "valueHint": "env_var_name"
          },
          {
            "description": "The container image to run",
            "value": "ghcr.io/github/github-mcp-server",
            "type": "positional",
            "valueHint": "image_name"
          }
        ],
        "environmentVariables": [
          {
            "description": "Your GitHub personal access token with appropriate scopes.",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "GITHUB_PERSONAL_ACCESS_TOKEN"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "02509d0f-a38d-41c7-a45b-af161711c61d",
        "versionId": "fcce1eb9-3ba4-4ef7-8ab8-ded46e50b74a",
        "publishedAt": "2025-09-26T15:06:49.295256276Z",
        "updatedAt": "2025-09-26T15:06:49.295256276Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.cyanheads/mcp-ts-template",
    "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
    "status": "active",
    "repository": {
      "url": "https://github.com/cyanheads/mcp-ts-template",
      "source": "github"
    },
    "version": "2.1.5",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-ts-template",
        "version": "2.1.5",
        "runtimeHint": "bun",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "value": "run",
            "type": "positional"
          },
          {
            "value": "start:stdio",
            "type": "positional"
          }
        ],
        "environmentVariables": [
          {
            "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
            "format": "string",
            "default": "info",
            "name": "MCP_LOG_LEVEL"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-ts-template",
        "version": "2.1.5",
        "runtimeHint": "bun",
        "transport": {
          "type": "streamable-http",
          "url": "http://localhost:3010/mcp"
        },
        "packageArguments": [
          {
            "value": "run",
            "type": "positional"
          },
          {
            "value": "start:http",
            "type": "positional"
          }
        ],
        "environmentVariables": [
          {
            "description": "The hostname for the HTTP server.",
            "format": "string",
            "default": "127.0.0.1",
            "name": "MCP_HTTP_HOST"
          },
          {
            "description": "The port to run the HTTP server on.",
            "format": "string",
            "default": "3010",
            "name": "MCP_HTTP_PORT"
          },
          {
            "description": "The endpoint path for the MCP server.",
            "format": "string",
            "default": "/mcp",
            "name": "MCP_HTTP_ENDPOINT_PATH"
          },
          {
            "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
            "format": "string",
            "default": "none",
            "name": "MCP_AUTH_MODE"
          },
          {
            "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
            "format": "string",
            "default": "info",
            "name": "MCP_LOG_LEVEL"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b1a7bd6b-21e2-4cd8-8531-37dddc5fa3f4",
        "versionId": "d28f6046-21eb-41c0-a679-3a51fd12e495",
        "publishedAt": "2025-09-26T16:00:37.862170934Z",
        "updatedAt": "2025-09-27T21:00:38.116997504Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.cyanheads/git-mcp-server",
    "description": "Comprehensive Git MCP server enabling native git tools including clone, commit, worktree, & more.",
    "status": "active",
    "repository": {
      "url": "https://github.com/cyanheads/git-mcp-server",
      "source": "github"
    },
    "version": "2.3.4",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@cyanheads/git-mcp-server",
        "version": "2.3.4",
        "runtimeHint": "node",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "value": "dist/index.js",
            "type": "positional"
          }
        ],
        "environmentVariables": [
          {
            "description": "Specifies the transport mechanism for the server.",
            "isRequired": true,
            "format": "string",
            "default": "stdio",
            "name": "MCP_TRANSPORT_TYPE"
          },
          {
            "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
            "format": "string",
            "default": "info",
            "name": "MCP_LOG_LEVEL"
          },
          {
            "description": "Set to 'true' to enable GPG/SSH signing for commits made via the git_commit tool.",
            "format": "string",
            "default": "false",
            "name": "GIT_SIGN_COMMITS"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@cyanheads/git-mcp-server",
        "version": "2.3.4",
        "runtimeHint": "node",
        "transport": {
          "type": "streamable-http",
          "url": "http://127.0.0.1:3015/mcp"
        },
        "packageArguments": [
          {
            "value": "dist/index.js",
            "type": "positional"
          }
        ],
        "environmentVariables": [
          {
            "description": "Specifies the transport mechanism for the server.",
            "isRequired": true,
            "format": "string",
            "default": "http",
            "name": "MCP_TRANSPORT_TYPE"
          },
          {
            "description": "The port to run the HTTP server on.",
            "format": "string",
            "default": "3015",
            "name": "MCP_HTTP_PORT"
          },
          {
            "description": "The host interface for the HTTP server.",
            "format": "string",
            "default": "127.0.0.1",
            "name": "MCP_HTTP_HOST"
          },
          {
            "description": "The HTTP endpoint path for MCP requests.",
            "format": "string",
            "default": "/mcp",
            "name": "MCP_HTTP_ENDPOINT_PATH"
          },
          {
            "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
            "format": "string",
            "default": "none",
            "name": "MCP_AUTH_STRATEGY"
          },
          {
            "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
            "format": "string",
            "default": "info",
            "name": "MCP_LOG_LEVEL"
          },
          {
            "description": "Set to 'true' to enable GPG/SSH signing for commits made via the git_commit tool.",
            "format": "string",
            "default": "false",
            "name": "GIT_SIGN_COMMITS"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "69052f97-2b99-4ab4-9d81-0de12a92b966",
        "versionId": "4262c056-422c-44a2-a545-c970216f986d",
        "publishedAt": "2025-09-26T16:34:39.110415456Z",
        "updatedAt": "2025-09-26T16:34:39.110415456Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.wonderwhy-er/desktop-commander",
    "description": "MCP server for terminal commands, file operations, and process management",
    "status": "active",
    "repository": {
      "url": "https://github.com/wonderwhy-er/DesktopCommanderMCP",
      "source": "github"
    },
    "version": "0.2.16",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@wonderwhy-er/desktop-commander",
        "version": "0.2.16",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "70b472c6-0bf2-44b2-97fc-be12bfc3cdca",
        "versionId": "d8c210c8-b0e5-4cf1-ae9a-115b8c8b2519",
        "publishedAt": "2025-09-26T16:35:30.865267972Z",
        "updatedAt": "2025-09-26T16:35:30.865267972Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.teamwork/mcp",
    "description": "The Teamwork.com official MCP server helps teams efficiently manage client projects with AI.",
    "status": "active",
    "repository": {
      "url": "https://github.com/teamwork/mcp",
      "source": "github"
    },
    "version": "1.5.2",
    "packages": [
      {
        "registryType": "oci",
        "registryBaseUrl": "https://docker.io",
        "identifier": "teamwork/mcp",
        "version": "v1.5.2",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "TW_MCP_BEARER_TOKEN"
          },
          {
            "description": "Choose log output format between 'text' or 'json'. Default is 'text'.",
            "format": "string",
            "name": "TW_MCP_LOG_FORMAT"
          },
          {
            "description": "Choose log level between 'debug', 'info', 'warn' or 'error'. Default is 'info'.",
            "format": "string",
            "name": "TW_MCP_LOG_LEVEL"
          }
        ]
      }
    ],
    "remotes": [
      {
        "type": "sse",
        "url": "https://mcp.ai.teamwork.com",
        "headers": [
          {
            "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
            "isRequired": true,
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      },
      {
        "type": "streamable-http",
        "url": "https://mcp.ai.teamwork.com",
        "headers": [
          {
            "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
            "isRequired": true,
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "8e1daf12-8a74-4718-93ec-86b05728241d",
        "versionId": "01e35e08-420f-4c65-9b53-c40a613ba77c",
        "publishedAt": "2025-09-26T17:26:33.291166144Z",
        "updatedAt": "2025-09-26T19:37:40.311230945Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.foqal/Foqal",
    "description": "Foqal turns Slack/Teams into efficient support platforms with AI-powered ticketing.",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "2.0.0",
    "websiteUrl": "https://www.foqal.io?utm_source=mcp-registry&utm_medium=registry",
    "remotes": [
      {
        "type": "sse",
        "url": "https://support.foqal.io/api/mcp/[YOUR_GENERATED_TOKEN]"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a277a0e2-e0b1-4653-a01b-f741b4f1e9b1",
        "versionId": "fcaf4ba6-5121-4a0f-b732-e5ee5851fc18",
        "publishedAt": "2025-09-26T18:36:42.976406093Z",
        "updatedAt": "2025-09-26T19:31:50.228406504Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.Snowflake-Labs/mcp",
    "description": "MCP Server for Snowflake from Snowflake Labs",
    "status": "active",
    "repository": {
      "url": "https://github.com/Snowflake-Labs/mcp",
      "source": "github"
    },
    "version": "1.3.3",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "snowflake-labs-mcp",
        "version": "1.3.3",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "description": "Path to service specification file",
            "isRequired": true,
            "type": "named",
            "name": "--service-config-file"
          },
          {
            "description": "Account identifier (e.g. xy12345.us-east-1)",
            "type": "named",
            "name": "--account"
          },
          {
            "description": "Snowflake host URL",
            "type": "named",
            "name": "--host"
          },
          {
            "description": "Username for authentication",
            "type": "named",
            "name": "--user"
          },
          {
            "description": "Password or programmatic access token",
            "type": "named",
            "name": "--password"
          },
          {
            "description": "Role to use for connection",
            "type": "named",
            "name": "--role"
          },
          {
            "description": "Warehouse to use for queries",
            "type": "named",
            "name": "--warehouse"
          },
          {
            "description": "Whether passcode is embedded in password",
            "type": "named",
            "name": "--passcode-in-password"
          },
          {
            "description": "MFA passcode for authentication",
            "type": "named",
            "name": "--passcode"
          },
          {
            "description": "Private key for key pair authentication",
            "type": "named",
            "name": "--private-key"
          },
          {
            "description": "Path to private key file",
            "type": "named",
            "name": "--private-key-file"
          },
          {
            "description": "Password for encrypted private key",
            "type": "named",
            "name": "--private-key-file-pwd"
          },
          {
            "description": "Authentication type",
            "default": "snowflake",
            "type": "named",
            "name": "--authenticator"
          },
          {
            "description": "Name of connection from connections.toml (or config.toml) file",
            "type": "named",
            "name": "--connection-name"
          },
          {
            "description": "Transport for the MCP server",
            "default": "stdio",
            "choices": [
              "stdio",
              "http",
              "sse",
              "streamable-http"
            ],
            "type": "named",
            "name": "--transport"
          },
          {
            "description": "Custom endpoint path for HTTP transports",
            "default": "/mcp",
            "type": "named",
            "name": "--endpoint"
          }
        ],
        "environmentVariables": [
          {
            "description": "Account identifier (e.g. xy12345.us-east-1)",
            "format": "string",
            "name": "SNOWFLAKE_ACCOUNT"
          },
          {
            "description": "Snowflake host URL",
            "format": "string",
            "name": "SNOWFLAKE_HOST"
          },
          {
            "description": "Username for authentication",
            "format": "string",
            "name": "SNOWFLAKE_USER"
          },
          {
            "description": "Password or programmatic access token",
            "format": "string",
            "name": "SNOWFLAKE_PASSWORD"
          },
          {
            "description": "Role to use for connection",
            "format": "string",
            "name": "SNOWFLAKE_ROLE"
          },
          {
            "description": "Warehouse to use for queries",
            "format": "string",
            "name": "SNOWFLAKE_WAREHOUSE"
          },
          {
            "description": "MFA passcode for authentication",
            "format": "string",
            "name": "SNOWFLAKE_PASSCODE"
          },
          {
            "description": "Private key for key pair authentication",
            "format": "string",
            "name": "SNOWFLAKE_PRIVATE_KEY"
          },
          {
            "description": "Path to private key file",
            "format": "string",
            "name": "SNOWFLAKE_PRIVATE_KEY_FILE"
          },
          {
            "description": "Password for encrypted private key",
            "format": "string",
            "name": "SNOWFLAKE_PRIVATE_KEY_FILE_PWD"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "cd9210af-efe4-4112-97c2-32e2a6f25813",
        "versionId": "45a95eb6-1651-44eb-85bd-cf921aa14831",
        "publishedAt": "2025-09-26T18:50:29.355753394Z",
        "updatedAt": "2025-09-26T18:50:29.355753394Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.Antonytm/mcp-all",
    "description": "A Model Context Protocol server to run other MCP servers",
    "status": "active",
    "repository": {
      "url": "https://github.com/Antonytm/mcp-all",
      "source": "github"
    },
    "version": "0.1.14",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@antonytm/mcp-all",
        "version": "0.1.14",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "name": "TRANSPORT"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@antonytm/mcp-all",
        "version": "0.1.14",
        "transport": {
          "type": "streamable-http",
          "url": "http://localhost:3001/mcp"
        },
        "environmentVariables": [
          {
            "name": "TRANSPORT"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "f88dbaa2-7e10-4957-a53b-7ed8b511d77c",
        "versionId": "af17cbca-7998-4e0d-bffb-2facd5364e76",
        "publishedAt": "2025-09-26T19:13:30.169955076Z",
        "updatedAt": "2025-09-28T10:35:40.360516651Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.sellisd/mcp-units",
    "description": "An MCP server that provides some common units conversions for cooking",
    "status": "active",
    "repository": {
      "url": "https://github.com/sellisd/mcp-units",
      "source": "github"
    },
    "version": "0.3.3",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mcp-units",
        "version": "0.3.3",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "997f7d99-a6fc-43f4-85f9-0ec32c82a5eb",
        "versionId": "c27639e0-88b6-45c9-8fcd-8b2caa82e59e",
        "publishedAt": "2025-09-26T19:21:00.556532893Z",
        "updatedAt": "2025-09-26T19:21:00.556532893Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.foqal/Foqal",
    "description": "Foqal turns Slack/Teams into efficient support platforms with AI-powered ticketing.",
    "repository": {
      "url": "https://github.com/foqal/mcp",
      "source": "github"
    },
    "version": "2.0.1",
    "websiteUrl": "https://www.foqal.io?utm_source=mcp-registry&utm_medium=registry",
    "remotes": [
      {
        "type": "sse",
        "url": "https://support.foqal.io/api/mcp/[YOUR_GENERATED_TOKEN]"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a277a0e2-e0b1-4653-a01b-f741b4f1e9b1",
        "versionId": "63e72627-e748-4df0-b7c3-69c92076e93e",
        "publishedAt": "2025-09-26T19:31:50.224662326Z",
        "updatedAt": "2025-09-26T19:31:50.224662326Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.teamwork/mcp",
    "description": "The Teamwork.com official MCP server helps teams efficiently manage client projects with AI.",
    "status": "active",
    "repository": {
      "url": "https://github.com/teamwork/mcp",
      "source": "github"
    },
    "version": "1.5.3",
    "packages": [
      {
        "registryType": "oci",
        "registryBaseUrl": "https://docker.io",
        "identifier": "teamwork/mcp",
        "version": "v1.5.3",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "TW_MCP_BEARER_TOKEN"
          },
          {
            "description": "Choose log output format between 'text' or 'json'. Default is 'text'.",
            "format": "string",
            "name": "TW_MCP_LOG_FORMAT"
          },
          {
            "description": "Choose log level between 'debug', 'info', 'warn' or 'error'. Default is 'info'.",
            "format": "string",
            "name": "TW_MCP_LOG_LEVEL"
          }
        ]
      }
    ],
    "remotes": [
      {
        "type": "sse",
        "url": "https://mcp.ai.teamwork.com",
        "headers": [
          {
            "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
            "isRequired": true,
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      },
      {
        "type": "streamable-http",
        "url": "https://mcp.ai.teamwork.com",
        "headers": [
          {
            "description": "API key generated from the Teamwork.com OAuth2 process: https://apidocs.teamwork.com/guides/teamwork/app-login-flow",
            "isRequired": true,
            "isSecret": true,
            "name": "Authorization"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "8e1daf12-8a74-4718-93ec-86b05728241d",
        "versionId": "69d324c5-4670-4fa5-814c-c016fb151341",
        "publishedAt": "2025-09-26T19:37:40.30402287Z",
        "updatedAt": "2025-09-26T19:37:40.30402287Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.spences10/mcp-turso-cloud",
    "description": "MCP server for integrating Turso with LLMs",
    "status": "active",
    "repository": {
      "url": "https://github.com/spences10/mcp-turso-cloud",
      "source": "github"
    },
    "version": "0.0.9",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-turso-cloud",
        "version": "0.0.9",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Turso Platform API token for authentication",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "TURSO_API_TOKEN"
          },
          {
            "description": "Turso organization name",
            "isRequired": true,
            "format": "string",
            "name": "TURSO_ORGANIZATION"
          },
          {
            "description": "Default database name (optional)",
            "format": "string",
            "name": "TURSO_DEFAULT_DATABASE"
          },
          {
            "description": "Token expiration time (default: 7d)",
            "format": "string",
            "name": "TOKEN_EXPIRATION"
          },
          {
            "description": "Default token permission level (default: full-access)",
            "format": "string",
            "name": "TOKEN_PERMISSION"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "6e207d30-93d4-4a85-b486-358dd6c50cc3",
        "versionId": "c9fd1a85-4447-4cac-8612-6b9d15f8329f",
        "publishedAt": "2025-09-26T21:22:07.399039955Z",
        "updatedAt": "2025-09-26T21:22:07.399039955Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.iggredible/vim-mcp",
    "description": "Connect Claude Code to Vim/Neovim - query state, execute commands, search help, record macros",
    "status": "active",
    "repository": {
      "url": "https://github.com/iggredible/vim-mcp",
      "source": "github"
    },
    "version": "0.1.2",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "vim-mcp",
        "version": "0.1.2",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "ca864f0d-6915-41cb-b140-e85aa129c987",
        "versionId": "c44d9512-b4f0-426b-b603-57c416ad9db9",
        "publishedAt": "2025-09-26T22:02:08.877551484Z",
        "updatedAt": "2025-09-26T22:02:08.877551484Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.CodeAlive-AI/codealive-mcp",
    "description": "Semantic code search and analysis from CodeAlive for AI assistants and agents.",
    "repository": {
      "url": "https://github.com/CodeAlive-AI/codealive-mcp.git",
      "source": "github"
    },
    "version": "0.3.0",
    "packages": [
      {
        "registryType": "oci",
        "registryBaseUrl": "https://ghcr.io",
        "identifier": "codealive-ai/codealive-mcp",
        "version": "0.3.0",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "48848dbc-3035-4c48-a26c-40d390ee5c3c",
        "versionId": "c03cf326-c479-4ce5-b02e-b42b8fd936bf",
        "publishedAt": "2025-09-26T22:23:43.446371147Z",
        "updatedAt": "2025-09-26T22:23:43.446371147Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.schemacrawler/schemacrawler-ai",
    "description": "Enables natural language schema queries — explore tables, keys, procedures, and get SQL help fast",
    "status": "active",
    "repository": {
      "url": "https://github.com/schemacrawler/SchemaCrawler-AI",
      "source": "github"
    },
    "version": "v16.28.3-1",
    "websiteUrl": "https://schemacrawler.github.io",
    "packages": [
      {
        "registryType": "oci",
        "registryBaseUrl": "https://docker.io",
        "identifier": "schemacrawler/schemacrawler-ai",
        "version": "v16.28.3-1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Database user name. Can be optional depending on the database connection type.",
            "format": "string",
            "isSecret": true,
            "name": "SCHCRWLR_DATABASE_USER"
          },
          {
            "description": "Database user password. Can be optional depending on the database connection type.",
            "format": "string",
            "isSecret": true,
            "name": "SCHCRWLR_DATABASE_PASSWORD"
          },
          {
            "description": "JDBC URL for database connection. If this is provided, the server, host, port and database are not used.",
            "format": "string",
            "name": "SCHCRWLR_JDBC_URL"
          },
          {
            "description": "SchemaCrawler database plugin, for example, 'sqlserver' or 'sqlite'. Used only if the JDBC URL is not provided.",
            "format": "string",
            "name": "SCHCRWLR_SERVER"
          },
          {
            "description": "Database host. Defaults to localhost. Used only if the JDBC URL is not provided.",
            "format": "string",
            "name": "SCHCRWLR_HOST"
          },
          {
            "description": "Database port. Defaults to the default port for the server type. Used only if the JDBC URL is not provided.",
            "format": "string",
            "name": "SCHCRWLR_PORT"
          },
          {
            "description": "Database to connect to (optional). Used only if the JDBC URL is not provided.",
            "format": "string",
            "name": "SCHCRWLR_DATABASE"
          },
          {
            "description": "How much database metadata to retrieve. Values are 'minimum', 'standard', 'detailed' or 'maximum'.",
            "format": "string",
            "name": "SCHCRWLR_INFO_LEVEL"
          },
          {
            "description": "Logging verbosity level. Values are 'SEVERE', 'WARNING', 'INFO', 'CONFIG', or 'FINE'.",
            "format": "string",
            "name": "SCHCRWLR_LOG_LEVEL"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "3616e073-7a15-42cb-ae02-4c6d64c92905",
        "versionId": "93a0b961-f6da-4c32-a8e9-cf2696f57499",
        "publishedAt": "2025-09-27T01:18:14.973084431Z",
        "updatedAt": "2025-09-27T01:18:14.973084431Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.textarttools/textarttools-mcp",
    "description": "Unicode text styling and ASCII art generation with 23 styles and 322+ figlet fonts",
    "status": "active",
    "repository": {
      "url": "https://github.com/humanjesse/textarttools-mcp",
      "source": "github"
    },
    "version": "1.1.0",
    "remotes": [
      {
        "type": "sse",
        "url": "https://mcp.textarttools.com/sse"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "341ff90c-b897-48d0-8b1c-4f00dd448806",
        "versionId": "ad2398c4-49cd-4780-89d4-f8bd6dc0d3c5",
        "publishedAt": "2025-09-27T01:40:48.800869916Z",
        "updatedAt": "2025-09-27T01:54:33.93695909Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "com.textarttools/textarttools-mcp",
    "description": "Unicode text styling and ASCII art generation with 23 styles and 322+ figlet fonts",
    "status": "active",
    "repository": {
      "url": "https://github.com/humanjesse/textarttools-mcp",
      "source": "github"
    },
    "version": "1.1.1",
    "remotes": [
      {
        "type": "sse",
        "url": "https://mcp.textarttools.com/"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "341ff90c-b897-48d0-8b1c-4f00dd448806",
        "versionId": "0d397f9c-ee74-4655-b69a-afee87d1d036",
        "publishedAt": "2025-09-27T01:54:33.927690661Z",
        "updatedAt": "2025-09-27T01:54:33.927690661Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.habedi/omni-lpr",
    "description": "An MCP server for automatic license plate recognition",
    "status": "active",
    "repository": {
      "url": "https://github.com/habedi/omni-lpr",
      "source": "github"
    },
    "version": "0.3.2",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "omni-lpr",
        "version": "0.3.2",
        "transport": {
          "type": "streamable-http",
          "url": "http://127.0.0.1:8000/mcp/"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "0128b7ed-e370-4fdd-8dbf-13375620ea58",
        "versionId": "b862651a-49ab-4a83-909a-c75a33a44a6e",
        "publishedAt": "2025-09-27T08:52:54.853352758Z",
        "updatedAt": "2025-09-27T08:52:54.853352758Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.TonySimonovsky/claude-code-conversation-search-mcp",
    "description": "Search Claude Code conversation history with natural language queries across all projects",
    "status": "active",
    "repository": {
      "url": "https://github.com/TonySimonovsky/claude-code-conversation-search-mcp",
      "source": "github"
    },
    "version": "1.1.3",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "claude-code-conversation-search-mcp",
        "version": "1.1.3",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "bad1e277-654e-492f-bbd9-063702fb42a2",
        "versionId": "2e60e113-3363-40a4-97d0-0ff8cbed03d8",
        "publishedAt": "2025-09-27T10:30:26.181168547Z",
        "updatedAt": "2025-09-27T10:30:26.181168547Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.xorrkaz/cml-mcp",
    "description": "An MCP server that provides access to common Cisco Modeling Labs (CML) operations.",
    "status": "active",
    "repository": {
      "url": "https://github.com/xorrkaz/cml-mcp",
      "source": "github"
    },
    "version": "0.9.2",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "cml-mcp",
        "version": "0.9.2",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "URL for the CML Server",
            "isRequired": true,
            "format": "string",
            "name": "CML_URL"
          },
          {
            "description": "Username for CML authentication",
            "isRequired": true,
            "format": "string",
            "name": "CML_USERNAME"
          },
          {
            "description": "Password for CML authentication",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "CML_PASSWORD"
          },
          {
            "description": "Username for authentication to devices running in CML",
            "format": "string",
            "name": "PYATS_USERNAME"
          },
          {
            "description": "Password for authentication to devices running in CML",
            "format": "string",
            "isSecret": true,
            "name": "PYATS_PASSWORD"
          },
          {
            "description": "Enable password for authentication to devices running in CML",
            "format": "string",
            "isSecret": true,
            "name": "PYATS_AUTH_PASS"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "bd0c41d1-2209-4c3f-8602-d40900053217",
        "versionId": "5cecd3d7-2830-490f-b3bc-ddbf8d068b24",
        "publishedAt": "2025-09-27T13:06:49.494028033Z",
        "updatedAt": "2025-09-27T19:37:16.179620263Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.BenAHammond/code-auditor-mcp",
    "description": "Code Quality Auditor: Analyze code for SOLID principles, DRY violations, and more",
    "status": "active",
    "repository": {
      "url": "https://github.com/BenAHammond/code-auditor-mcp",
      "source": "github"
    },
    "version": "1.0.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "code-auditor-mcp",
        "version": "1.17.2",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "da4e7c0a-854f-46b7-86ab-35564aa3069f",
        "versionId": "3e07d24f-a331-4344-adb5-c456dfa7c817",
        "publishedAt": "2025-09-27T17:09:06.204827689Z",
        "updatedAt": "2025-09-28T17:14:16.566731337Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.xorrkaz/cml-mcp",
    "description": "An MCP server that provides access to common Cisco Modeling Labs (CML) operations.",
    "status": "active",
    "repository": {
      "url": "https://github.com/xorrkaz/cml-mcp",
      "source": "github"
    },
    "version": "0.9.3",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "cml-mcp",
        "version": "0.9.3",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "URL for the CML Server",
            "isRequired": true,
            "format": "string",
            "name": "CML_URL"
          },
          {
            "description": "Username for CML authentication",
            "isRequired": true,
            "format": "string",
            "name": "CML_USERNAME"
          },
          {
            "description": "Password for CML authentication",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "CML_PASSWORD"
          },
          {
            "description": "Username for authentication to devices running in CML",
            "format": "string",
            "name": "PYATS_USERNAME"
          },
          {
            "description": "Password for authentication to devices running in CML",
            "format": "string",
            "isSecret": true,
            "name": "PYATS_PASSWORD"
          },
          {
            "description": "Enable password for authentication to devices running in CML",
            "format": "string",
            "isSecret": true,
            "name": "PYATS_AUTH_PASS"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "bd0c41d1-2209-4c3f-8602-d40900053217",
        "versionId": "10f4d545-ed03-4a50-97ba-3f86c3c004e5",
        "publishedAt": "2025-09-27T19:37:16.175635965Z",
        "updatedAt": "2025-09-27T19:37:16.175635965Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.cyanheads/mcp-ts-template",
    "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
    "status": "active",
    "repository": {
      "url": "https://github.com/cyanheads/mcp-ts-template",
      "source": "github"
    },
    "version": "2.1.6",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-ts-template",
        "version": "2.1.6",
        "runtimeHint": "bun",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "value": "run",
            "type": "positional"
          },
          {
            "value": "start:stdio",
            "type": "positional"
          }
        ],
        "environmentVariables": [
          {
            "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
            "format": "string",
            "default": "info",
            "name": "MCP_LOG_LEVEL"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-ts-template",
        "version": "2.1.6",
        "runtimeHint": "bun",
        "transport": {
          "type": "streamable-http",
          "url": "http://localhost:3010/mcp"
        },
        "packageArguments": [
          {
            "value": "run",
            "type": "positional"
          },
          {
            "value": "start:http",
            "type": "positional"
          }
        ],
        "environmentVariables": [
          {
            "description": "The hostname for the HTTP server.",
            "format": "string",
            "default": "127.0.0.1",
            "name": "MCP_HTTP_HOST"
          },
          {
            "description": "The port to run the HTTP server on.",
            "format": "string",
            "default": "3010",
            "name": "MCP_HTTP_PORT"
          },
          {
            "description": "The endpoint path for the MCP server.",
            "format": "string",
            "default": "/mcp",
            "name": "MCP_HTTP_ENDPOINT_PATH"
          },
          {
            "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
            "format": "string",
            "default": "none",
            "name": "MCP_AUTH_MODE"
          },
          {
            "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
            "format": "string",
            "default": "info",
            "name": "MCP_LOG_LEVEL"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b1a7bd6b-21e2-4cd8-8531-37dddc5fa3f4",
        "versionId": "fc784c91-ca4e-4301-975d-8baff615e44f",
        "publishedAt": "2025-09-27T21:00:38.108919972Z",
        "updatedAt": "2025-09-27T22:01:57.931717236Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.cyanheads/mcp-ts-template",
    "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
    "status": "active",
    "repository": {
      "url": "https://github.com/cyanheads/mcp-ts-template",
      "source": "github"
    },
    "version": "2.1.7",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-ts-template",
        "version": "2.1.7",
        "runtimeHint": "bun",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "value": "run",
            "type": "positional"
          },
          {
            "value": "start:stdio",
            "type": "positional"
          }
        ],
        "environmentVariables": [
          {
            "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
            "format": "string",
            "default": "info",
            "name": "MCP_LOG_LEVEL"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-ts-template",
        "version": "2.1.7",
        "runtimeHint": "bun",
        "transport": {
          "type": "streamable-http",
          "url": "http://localhost:3010/mcp"
        },
        "packageArguments": [
          {
            "value": "run",
            "type": "positional"
          },
          {
            "value": "start:http",
            "type": "positional"
          }
        ],
        "environmentVariables": [
          {
            "description": "The hostname for the HTTP server.",
            "format": "string",
            "default": "127.0.0.1",
            "name": "MCP_HTTP_HOST"
          },
          {
            "description": "The port to run the HTTP server on.",
            "format": "string",
            "default": "3010",
            "name": "MCP_HTTP_PORT"
          },
          {
            "description": "The endpoint path for the MCP server.",
            "format": "string",
            "default": "/mcp",
            "name": "MCP_HTTP_ENDPOINT_PATH"
          },
          {
            "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
            "format": "string",
            "default": "none",
            "name": "MCP_AUTH_MODE"
          },
          {
            "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
            "format": "string",
            "default": "info",
            "name": "MCP_LOG_LEVEL"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b1a7bd6b-21e2-4cd8-8531-37dddc5fa3f4",
        "versionId": "ca715aa0-178c-40e2-a230-5ccc4bc46a0e",
        "publishedAt": "2025-09-27T22:01:57.920713864Z",
        "updatedAt": "2025-09-28T04:06:34.163937911Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.cyanheads/mcp-ts-template",
    "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
    "status": "active",
    "repository": {
      "url": "https://github.com/cyanheads/mcp-ts-template",
      "source": "github"
    },
    "version": "2.1.8",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-ts-template",
        "version": "2.1.8",
        "runtimeHint": "bun",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "value": "run",
            "type": "positional"
          },
          {
            "value": "start:stdio",
            "type": "positional"
          }
        ],
        "environmentVariables": [
          {
            "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
            "format": "string",
            "default": "info",
            "name": "MCP_LOG_LEVEL"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-ts-template",
        "version": "2.1.8",
        "runtimeHint": "bun",
        "transport": {
          "type": "streamable-http",
          "url": "http://localhost:3010/mcp"
        },
        "packageArguments": [
          {
            "value": "run",
            "type": "positional"
          },
          {
            "value": "start:http",
            "type": "positional"
          }
        ],
        "environmentVariables": [
          {
            "description": "The hostname for the HTTP server.",
            "format": "string",
            "default": "127.0.0.1",
            "name": "MCP_HTTP_HOST"
          },
          {
            "description": "The port to run the HTTP server on.",
            "format": "string",
            "default": "3010",
            "name": "MCP_HTTP_PORT"
          },
          {
            "description": "The endpoint path for the MCP server.",
            "format": "string",
            "default": "/mcp",
            "name": "MCP_HTTP_ENDPOINT_PATH"
          },
          {
            "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
            "format": "string",
            "default": "none",
            "name": "MCP_AUTH_MODE"
          },
          {
            "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
            "format": "string",
            "default": "info",
            "name": "MCP_LOG_LEVEL"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b1a7bd6b-21e2-4cd8-8531-37dddc5fa3f4",
        "versionId": "6acf0e53-7ebf-4dbc-abcc-e4b734da4fea",
        "publishedAt": "2025-09-28T04:06:34.15123631Z",
        "updatedAt": "2025-09-28T06:10:08.965399311Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.appwrite/mcp-for-api",
    "description": "MCP (Model Context Protocol) server for Appwrite",
    "repository": {
      "url": "https://github.com/appwrite/mcp-for-api",
      "source": "github"
    },
    "version": "0.2.7",
    "packages": [
      {
        "registryType": "pypi",
        "identifier": "mcp-server-appwrite",
        "version": "0.2.7",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "12ec96fa-d730-49ef-9c01-df608cd7916b",
        "versionId": "8578d6bd-a291-4e3f-aacb-f77af6e23517",
        "publishedAt": "2025-09-28T06:08:26.629780456Z",
        "updatedAt": "2025-09-28T06:08:26.629780456Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.cyanheads/mcp-ts-template",
    "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
    "status": "active",
    "repository": {
      "url": "https://github.com/cyanheads/mcp-ts-template",
      "source": "github"
    },
    "version": "2.2.0",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-ts-template",
        "version": "2.2.0",
        "runtimeHint": "bun",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "value": "run",
            "type": "positional"
          },
          {
            "value": "start:stdio",
            "type": "positional"
          }
        ],
        "environmentVariables": [
          {
            "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
            "format": "string",
            "default": "info",
            "name": "MCP_LOG_LEVEL"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-ts-template",
        "version": "2.2.0",
        "runtimeHint": "bun",
        "transport": {
          "type": "streamable-http",
          "url": "http://localhost:3010/mcp"
        },
        "packageArguments": [
          {
            "value": "run",
            "type": "positional"
          },
          {
            "value": "start:http",
            "type": "positional"
          }
        ],
        "environmentVariables": [
          {
            "description": "The hostname for the HTTP server.",
            "format": "string",
            "default": "127.0.0.1",
            "name": "MCP_HTTP_HOST"
          },
          {
            "description": "The port to run the HTTP server on.",
            "format": "string",
            "default": "3010",
            "name": "MCP_HTTP_PORT"
          },
          {
            "description": "The endpoint path for the MCP server.",
            "format": "string",
            "default": "/mcp",
            "name": "MCP_HTTP_ENDPOINT_PATH"
          },
          {
            "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
            "format": "string",
            "default": "none",
            "name": "MCP_AUTH_MODE"
          },
          {
            "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
            "format": "string",
            "default": "info",
            "name": "MCP_LOG_LEVEL"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b1a7bd6b-21e2-4cd8-8531-37dddc5fa3f4",
        "versionId": "5bdce05b-4380-47b4-8757-65fd069c1c07",
        "publishedAt": "2025-09-28T06:10:08.960250008Z",
        "updatedAt": "2025-09-28T06:39:40.271601122Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.cyanheads/mcp-ts-template",
    "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
    "status": "active",
    "repository": {
      "url": "https://github.com/cyanheads/mcp-ts-template",
      "source": "github"
    },
    "version": "2.2.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-ts-template",
        "version": "2.2.1",
        "runtimeHint": "bun",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "value": "run",
            "type": "positional"
          },
          {
            "value": "start:stdio",
            "type": "positional"
          }
        ],
        "environmentVariables": [
          {
            "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
            "format": "string",
            "default": "info",
            "name": "MCP_LOG_LEVEL"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-ts-template",
        "version": "2.2.1",
        "runtimeHint": "bun",
        "transport": {
          "type": "streamable-http",
          "url": "http://localhost:3010/mcp"
        },
        "packageArguments": [
          {
            "value": "run",
            "type": "positional"
          },
          {
            "value": "start:http",
            "type": "positional"
          }
        ],
        "environmentVariables": [
          {
            "description": "The hostname for the HTTP server.",
            "format": "string",
            "default": "127.0.0.1",
            "name": "MCP_HTTP_HOST"
          },
          {
            "description": "The port to run the HTTP server on.",
            "format": "string",
            "default": "3010",
            "name": "MCP_HTTP_PORT"
          },
          {
            "description": "The endpoint path for the MCP server.",
            "format": "string",
            "default": "/mcp",
            "name": "MCP_HTTP_ENDPOINT_PATH"
          },
          {
            "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
            "format": "string",
            "default": "none",
            "name": "MCP_AUTH_MODE"
          },
          {
            "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
            "format": "string",
            "default": "info",
            "name": "MCP_LOG_LEVEL"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b1a7bd6b-21e2-4cd8-8531-37dddc5fa3f4",
        "versionId": "b0d0a428-be17-4510-8fff-a5ece705c9e3",
        "publishedAt": "2025-09-28T06:39:40.266650304Z",
        "updatedAt": "2025-09-28T07:49:04.525228515Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.cyanheads/mcp-ts-template",
    "description": "A production-grade TypeScript template for scalable MCP servers with built-in observability.",
    "status": "active",
    "repository": {
      "url": "https://github.com/cyanheads/mcp-ts-template",
      "source": "github"
    },
    "version": "2.2.2",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-ts-template",
        "version": "2.2.2",
        "runtimeHint": "bun",
        "transport": {
          "type": "stdio"
        },
        "packageArguments": [
          {
            "value": "run",
            "type": "positional"
          },
          {
            "value": "start:stdio",
            "type": "positional"
          }
        ],
        "environmentVariables": [
          {
            "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
            "format": "string",
            "default": "info",
            "name": "MCP_LOG_LEVEL"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "mcp-ts-template",
        "version": "2.2.2",
        "runtimeHint": "bun",
        "transport": {
          "type": "streamable-http",
          "url": "http://localhost:3010/mcp"
        },
        "packageArguments": [
          {
            "value": "run",
            "type": "positional"
          },
          {
            "value": "start:http",
            "type": "positional"
          }
        ],
        "environmentVariables": [
          {
            "description": "The hostname for the HTTP server.",
            "format": "string",
            "default": "127.0.0.1",
            "name": "MCP_HTTP_HOST"
          },
          {
            "description": "The port to run the HTTP server on.",
            "format": "string",
            "default": "3010",
            "name": "MCP_HTTP_PORT"
          },
          {
            "description": "The endpoint path for the MCP server.",
            "format": "string",
            "default": "/mcp",
            "name": "MCP_HTTP_ENDPOINT_PATH"
          },
          {
            "description": "Authentication mode to use: 'none', 'jwt', or 'oauth'.",
            "format": "string",
            "default": "none",
            "name": "MCP_AUTH_MODE"
          },
          {
            "description": "Sets the minimum log level for output (e.g., 'debug', 'info', 'warn').",
            "format": "string",
            "default": "info",
            "name": "MCP_LOG_LEVEL"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b1a7bd6b-21e2-4cd8-8531-37dddc5fa3f4",
        "versionId": "d7d6429a-6d79-47c0-aef1-3b3de9d0e52e",
        "publishedAt": "2025-09-28T07:49:04.520080836Z",
        "updatedAt": "2025-09-28T07:49:04.520080836Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.Antonytm/mcp-all",
    "description": "A Model Context Protocol server to run other MCP servers",
    "status": "active",
    "repository": {
      "url": "https://github.com/Antonytm/mcp-all",
      "source": "github"
    },
    "version": "0.1.15",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@antonytm/mcp-all",
        "version": "0.1.15",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "name": "TRANSPORT"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@antonytm/mcp-all",
        "version": "0.1.15",
        "transport": {
          "type": "streamable-http",
          "url": "http://localhost:3001/mcp"
        },
        "environmentVariables": [
          {
            "name": "TRANSPORT"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "f88dbaa2-7e10-4957-a53b-7ed8b511d77c",
        "versionId": "546e8ec9-7644-4320-a1be-f155a9f708c5",
        "publishedAt": "2025-09-28T10:35:40.355497357Z",
        "updatedAt": "2025-09-28T10:52:04.657619344Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.Antonytm/mcp-all",
    "description": "A Model Context Protocol server to run other MCP servers",
    "status": "active",
    "repository": {
      "url": "https://github.com/Antonytm/mcp-all",
      "source": "github"
    },
    "version": "0.1.16",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@antonytm/mcp-all",
        "version": "0.1.16",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "name": "TRANSPORT"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@antonytm/mcp-all",
        "version": "0.1.16",
        "transport": {
          "type": "streamable-http",
          "url": "http://localhost:3001/mcp"
        },
        "environmentVariables": [
          {
            "name": "TRANSPORT"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "f88dbaa2-7e10-4957-a53b-7ed8b511d77c",
        "versionId": "9c8a62af-693f-4973-8c74-f4312909d15e",
        "publishedAt": "2025-09-28T10:52:04.655522188Z",
        "updatedAt": "2025-09-28T14:22:22.428848156Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.pree-dew/mcp-bookmark",
    "description": "MCP Server for adding bookmarks in openai RAG",
    "status": "active",
    "repository": {
      "url": "https://github.com/pree-dew/mcp-bookmark",
      "source": "github"
    },
    "version": "0.1.2",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mcp-bookmark-server",
        "version": "0.1.2",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "open ai api key",
            "isRequired": true,
            "format": "string",
            "isSecret": true,
            "name": "OPENAI_API_KEY"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "39628bbb-4f3d-4ff1-b12e-637f5d3d604e",
        "versionId": "40e00464-732e-4294-919a-5848dbc02e2e",
        "publishedAt": "2025-09-28T11:22:51.456626554Z",
        "updatedAt": "2025-09-28T11:22:51.456626554Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.catchmetrics.mcp/rum-analytics",
    "description": "RUM platform for web performance analytics, Core Web Vitals, and third-party script monitoring.",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.catchmetrics.io"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "ff7c9bcb-6d5f-4905-92f8-0b78e6eadc13",
        "versionId": "4036ff51-b972-4908-9c40-28d57ef856e8",
        "publishedAt": "2025-09-28T14:07:41.275679768Z",
        "updatedAt": "2025-09-28T14:07:41.275679768Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.Antonytm/mcp-all",
    "description": "A Model Context Protocol server to run other MCP servers",
    "status": "active",
    "repository": {
      "url": "https://github.com/Antonytm/mcp-all",
      "source": "github"
    },
    "version": "0.1.17",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@antonytm/mcp-all",
        "version": "0.1.17",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "name": "TRANSPORT"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@antonytm/mcp-all",
        "version": "0.1.17",
        "transport": {
          "type": "streamable-http",
          "url": "http://localhost:3001/mcp"
        },
        "environmentVariables": [
          {
            "name": "TRANSPORT"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "f88dbaa2-7e10-4957-a53b-7ed8b511d77c",
        "versionId": "95739328-9298-4a7e-9f72-629c1ab7180f",
        "publishedAt": "2025-09-28T14:22:22.424885172Z",
        "updatedAt": "2025-09-28T15:27:54.814083034Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.ChiR24/unreal-engine-mcp",
    "description": "MCP server for Unreal Engine 5 with 13 tools for game development automation.",
    "repository": {
      "url": "https://github.com/ChiR24/Unreal_mcp.git",
      "source": "github"
    },
    "version": "0.4.4",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "unreal-engine-mcp-server",
        "version": "0.4.4",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Unreal Engine host address (default: 127.0.0.1)",
            "value": "127.0.0.1",
            "name": "UE_HOST"
          },
          {
            "description": "Remote Control HTTP port (default: 30010)",
            "value": "30010",
            "name": "UE_RC_HTTP_PORT"
          },
          {
            "description": "Remote Control WebSocket port (default: 30020)",
            "value": "30020",
            "name": "UE_RC_WS_PORT"
          },
          {
            "description": "Logging level: debug, info, warn, error (default: info)",
            "value": "info",
            "name": "LOG_LEVEL"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "49c64feb-2e4c-406d-b39f-1236bf2212a6",
        "versionId": "26258423-f704-45e0-9860-bf30959a598f",
        "publishedAt": "2025-09-28T14:25:16.428438294Z",
        "updatedAt": "2025-09-28T14:25:16.428438294Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.Antonytm/mcp-all",
    "description": "A Model Context Protocol server to run other MCP servers",
    "status": "active",
    "repository": {
      "url": "https://github.com/Antonytm/mcp-all",
      "source": "github"
    },
    "version": "0.1.19",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@antonytm/mcp-all",
        "version": "0.1.19",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "name": "TRANSPORT"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@antonytm/mcp-all",
        "version": "0.1.19",
        "transport": {
          "type": "streamable-http",
          "url": "http://localhost:3001/mcp"
        },
        "environmentVariables": [
          {
            "name": "TRANSPORT"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "f88dbaa2-7e10-4957-a53b-7ed8b511d77c",
        "versionId": "bcb806ba-05a7-4b8a-b23b-d6b1b41c6114",
        "publishedAt": "2025-09-28T15:27:54.805308465Z",
        "updatedAt": "2025-09-28T15:38:53.939531929Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.Antonytm/mcp-all",
    "description": "A Model Context Protocol server to run other MCP servers",
    "status": "active",
    "repository": {
      "url": "https://github.com/Antonytm/mcp-all",
      "source": "github"
    },
    "version": "0.1.20",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@antonytm/mcp-all",
        "version": "0.1.20",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "name": "TRANSPORT"
          }
        ]
      },
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@antonytm/mcp-all",
        "version": "0.1.20",
        "transport": {
          "type": "streamable-http",
          "url": "http://localhost:3001/mcp"
        },
        "environmentVariables": [
          {
            "name": "TRANSPORT"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "f88dbaa2-7e10-4957-a53b-7ed8b511d77c",
        "versionId": "353eebd1-4f4e-4af0-8cff-7dfbe1286b3b",
        "publishedAt": "2025-09-28T15:38:53.930886789Z",
        "updatedAt": "2025-09-28T15:38:53.930886789Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.vfarcic/dot-ai",
    "description": "AI-powered development platform for Kubernetes deployments and intelligent automation",
    "status": "active",
    "repository": {
      "url": "https://github.com/vfarcic/dot-ai",
      "source": "github"
    },
    "version": "0.101.0",
    "packages": [
      {
        "registryType": "npm",
        "identifier": "@vfarcic/dot-ai",
        "version": "0.101.0",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "6836138f-2ad2-4feb-8043-ea425ecb0d71",
        "versionId": "843f4035-2bf4-43f5-901b-d11cf9e29822",
        "publishedAt": "2025-09-28T16:21:23.441889888Z",
        "updatedAt": "2025-09-28T16:21:23.441889888Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.BenAHammond/code-auditor-mcp",
    "description": "Code Quality Auditor: Analyze code for SOLID principles, DRY violations, and more",
    "status": "active",
    "repository": {
      "url": "https://github.com/BenAHammond/code-auditor-mcp",
      "source": "github"
    },
    "version": "1.0.2",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "code-auditor-mcp",
        "version": "1.17.3",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "da4e7c0a-854f-46b7-86ab-35564aa3069f",
        "versionId": "62a06c91-e521-4077-bac0-8a8746034cbb",
        "publishedAt": "2025-09-28T17:14:16.560687443Z",
        "updatedAt": "2025-09-28T23:04:51.330531739Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.alex-feel/mcp-context-server",
    "description": "An MCP server that provides persistent multimodal context storage for LLM agents.",
    "status": "active",
    "repository": {
      "url": "https://github.com/alex-feel/mcp-context-server",
      "source": "github"
    },
    "version": "0.2.0",
    "packages": [
      {
        "registryType": "pypi",
        "registryBaseUrl": "https://pypi.org",
        "identifier": "mcp-context-server",
        "version": "0.2.0",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Log level",
            "format": "string",
            "name": "LOG_LEVEL"
          },
          {
            "description": "Maximum individual image size in megabytes",
            "format": "number",
            "name": "MAX_IMAGE_SIZE_MB"
          },
          {
            "description": "Maximum total request size in megabytes",
            "format": "number",
            "name": "MAX_TOTAL_SIZE_MB"
          },
          {
            "description": "Custom database file location path",
            "format": "string",
            "name": "DB_PATH"
          },
          {
            "description": "Maximum number of concurrent read connections in the pool",
            "format": "number",
            "name": "POOL_MAX_READERS"
          },
          {
            "description": "Maximum number of concurrent write connections in the pool",
            "format": "number",
            "name": "POOL_MAX_WRITERS"
          },
          {
            "description": "Connection timeout in seconds",
            "format": "number",
            "name": "POOL_CONNECTION_TIMEOUT_S"
          },
          {
            "description": "Idle connection timeout in seconds",
            "format": "number",
            "name": "POOL_IDLE_TIMEOUT_S"
          },
          {
            "description": "Connection health check interval in seconds",
            "format": "number",
            "name": "POOL_HEALTH_CHECK_INTERVAL_S"
          },
          {
            "description": "Maximum number of retry attempts for failed operations",
            "format": "number",
            "name": "RETRY_MAX_RETRIES"
          },
          {
            "description": "Base delay in seconds between retry attempts",
            "format": "number",
            "name": "RETRY_BASE_DELAY_S"
          },
          {
            "description": "Maximum delay in seconds between retry attempts",
            "format": "number",
            "name": "RETRY_MAX_DELAY_S"
          },
          {
            "description": "Enable random jitter in retry delays",
            "format": "boolean",
            "name": "RETRY_JITTER"
          },
          {
            "description": "Exponential backoff multiplication factor for retries",
            "format": "number",
            "name": "RETRY_BACKOFF_FACTOR"
          },
          {
            "description": "Enable SQLite foreign key constraints",
            "format": "boolean",
            "name": "SQLITE_FOREIGN_KEYS"
          },
          {
            "description": "SQLite journal mode (e.g., WAL, DELETE)",
            "format": "string",
            "name": "SQLITE_JOURNAL_MODE"
          },
          {
            "description": "SQLite synchronous mode (e.g., NORMAL, FULL, OFF)",
            "format": "string",
            "name": "SQLITE_SYNCHRONOUS"
          },
          {
            "description": "SQLite temporary storage location (e.g., MEMORY, FILE)",
            "format": "string",
            "name": "SQLITE_TEMP_STORE"
          },
          {
            "description": "SQLite memory-mapped I/O size in bytes",
            "format": "number",
            "name": "SQLITE_MMAP_SIZE"
          },
          {
            "description": "SQLite cache size (negative value for KB, positive for pages)",
            "format": "number",
            "name": "SQLITE_CACHE_SIZE"
          },
          {
            "description": "SQLite page size in bytes",
            "format": "number",
            "name": "SQLITE_PAGE_SIZE"
          },
          {
            "description": "SQLite WAL autocheckpoint threshold in pages",
            "format": "number",
            "name": "SQLITE_WAL_AUTOCHECKPOINT"
          },
          {
            "description": "SQLite busy timeout in milliseconds",
            "format": "number",
            "name": "SQLITE_BUSY_TIMEOUT_MS"
          },
          {
            "description": "SQLite WAL checkpoint mode (e.g., PASSIVE, FULL, RESTART)",
            "format": "string",
            "name": "SQLITE_WAL_CHECKPOINT"
          },
          {
            "description": "Server shutdown timeout in seconds",
            "format": "number",
            "name": "SHUTDOWN_TIMEOUT_S"
          },
          {
            "description": "Test mode shutdown timeout in seconds",
            "format": "number",
            "name": "SHUTDOWN_TIMEOUT_TEST_S"
          },
          {
            "description": "Queue operation timeout in seconds",
            "format": "number",
            "name": "QUEUE_TIMEOUT_S"
          },
          {
            "description": "Test mode queue timeout in seconds",
            "format": "number",
            "name": "QUEUE_TIMEOUT_TEST_S"
          },
          {
            "description": "Circuit breaker failure threshold before opening",
            "format": "number",
            "name": "CIRCUIT_BREAKER_FAILURE_THRESHOLD"
          },
          {
            "description": "Circuit breaker recovery timeout in seconds",
            "format": "number",
            "name": "CIRCUIT_BREAKER_RECOVERY_TIMEOUT_S"
          },
          {
            "description": "Maximum calls allowed in circuit breaker half-open state",
            "format": "number",
            "name": "CIRCUIT_BREAKER_HALF_OPEN_MAX_CALLS"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "a352f0e9-bd3c-4736-90de-2dce46081c89",
        "versionId": "21fce873-ecf6-4706-b66f-d8b98009dde2",
        "publishedAt": "2025-09-28T19:00:48.072789641Z",
        "updatedAt": "2025-09-28T19:00:48.072789641Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "ai.klavis/strata",
    "description": "MCP server for progressive tool usage at any scale (see https://klavis.ai)",
    "status": "active",
    "repository": {
      "url": "https://github.com/Klavis-AI/klavis",
      "source": "github"
    },
    "version": "1.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://strata.klavis.ai/mcp/"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "9451d58d-fb97-4fd9-918e-585feeb663a7",
        "versionId": "16bd89ae-3cc6-45be-abeb-bc15be8dc87d",
        "publishedAt": "2025-09-28T19:13:44.307076494Z",
        "updatedAt": "2025-09-28T19:13:44.307076494Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.CodeCraftersLLC/local-voice-mcp",
    "description": "Give your MCP clients the ability to speak by running local voice models using Chatterbox TTS",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "0.1.5",
    "packages": [
      {
        "registryType": "npm",
        "identifier": "@codecraftersllc/local-voice-mcp",
        "version": "0.1.5",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "65855b9a-02f2-4d4b-b7bd-2331a6200b8a",
        "versionId": "09bf92d8-67cb-4dd7-b041-aa9d7b8909c8",
        "publishedAt": "2025-09-28T21:11:08.235551638Z",
        "updatedAt": "2025-09-28T21:11:08.235551638Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.flarco/sling-cli",
    "description": "Sling CLI MCP server for data pipeline and replication management",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.4.24",
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "b0be8bf2-c3a0-4db1-91a2-69f6cb3473d0",
        "versionId": "bafa676c-5113-443c-a63c-cebb9693b329",
        "publishedAt": "2025-09-28T21:44:03.912575371Z",
        "updatedAt": "2025-09-28T21:44:03.912575371Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.slingdata/sling-cli",
    "description": "Sling CLI MCP server for data pipeline and replication management",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.4.24",
    "packages": [
      {
        "registryType": "pypi",
        "identifier": "sling",
        "version": "1.4.23.post1",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "d15ace18-8e69-4e21-a342-796e44cf5489",
        "versionId": "16b64bd4-09b7-4f5a-a3c2-7dd083f68b65",
        "publishedAt": "2025-09-28T22:21:25.744436024Z",
        "updatedAt": "2025-09-28T22:25:06.473721364Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.slingdata/sling-cli",
    "description": "Sling CLI MCP server for data pipeline and replication management",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.4.23",
    "packages": [
      {
        "registryType": "pypi",
        "identifier": "sling",
        "version": "1.4.23.post1",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "d15ace18-8e69-4e21-a342-796e44cf5489",
        "versionId": "68f5df6e-25c0-42f0-94c8-cead12bcbafb",
        "publishedAt": "2025-09-28T22:21:47.749151944Z",
        "updatedAt": "2025-09-28T22:21:47.749151944Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.slingdata/sling-cli",
    "description": "Sling CLI MCP server for querying any database, running data pipelines and managing replications",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "1.4.25",
    "packages": [
      {
        "registryType": "pypi",
        "identifier": "sling",
        "version": "1.4.23.post1",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "d15ace18-8e69-4e21-a342-796e44cf5489",
        "versionId": "ed634f22-9084-4fab-9e7f-0549100f7163",
        "publishedAt": "2025-09-28T22:25:06.471640891Z",
        "updatedAt": "2025-09-28T22:25:06.471640891Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json",
    "name": "app.zenable/zenable",
    "description": "Zenable cleans up sloppy AI code and prevents vulnerabilities with deterministic guardrails",
    "status": "active",
    "repository": {
      "url": "",
      "source": ""
    },
    "version": "2.0.0",
    "remotes": [
      {
        "type": "streamable-http",
        "url": "https://mcp.zenable.app/"
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "06d38121-a76a-47ba-9827-dc181b7cc167",
        "versionId": "7502e7f9-cbb8-45c2-bc58-3161fb8b2f6b",
        "publishedAt": "2025-09-28T22:41:39.99661585Z",
        "updatedAt": "2025-09-28T22:41:39.99661585Z",
        "isLatest": true
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.BenAHammond/code-auditor-mcp",
    "description": "Code Quality Auditor: Analyze code for SOLID principles, DRY violations, and more",
    "status": "active",
    "repository": {
      "url": "https://github.com/BenAHammond/code-auditor-mcp",
      "source": "github"
    },
    "version": "1.0.3",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "code-auditor-mcp",
        "version": "1.17.4",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "da4e7c0a-854f-46b7-86ab-35564aa3069f",
        "versionId": "b9d37bed-a586-4c23-b846-2d02c6ee8190",
        "publishedAt": "2025-09-28T23:04:51.324391164Z",
        "updatedAt": "2025-09-29T01:21:09.062792598Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.BenAHammond/code-auditor-mcp",
    "description": "Code Quality Auditor: Analyze code for SOLID principles, DRY violations, and more",
    "status": "active",
    "repository": {
      "url": "https://github.com/BenAHammond/code-auditor-mcp",
      "source": "github"
    },
    "version": "1.0.4",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "code-auditor-mcp",
        "version": "1.17.5",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "da4e7c0a-854f-46b7-86ab-35564aa3069f",
        "versionId": "22ff7a09-ecaa-4322-a847-1768bcf94c56",
        "publishedAt": "2025-09-29T01:21:09.057133123Z",
        "updatedAt": "2025-09-29T02:41:50.241153466Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.antvis/mcp-server-chart",
    "description": "A Model Context Protocol server for generating charts using AntV.",
    "status": "active",
    "repository": {
      "url": "https://github.com/antvis/mcp-server-chart",
      "source": "github"
    },
    "version": "0.9.0-beta.1",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "@antv/mcp-server-chart",
        "version": "0.9.0-beta.1",
        "transport": {
          "type": "stdio"
        },
        "environmentVariables": [
          {
            "description": "Custom chart generation service URL for private deployment",
            "format": "string",
            "default": "https://antv-studio.alipay.com/api/gpt-vis",
            "name": "VIS_REQUEST_SERVER"
          },
          {
            "description": "Service identifier for chart generation records",
            "format": "string",
            "isSecret": true,
            "name": "SERVICE_ID"
          },
          {
            "description": "Comma-separated list of tool names to disable",
            "format": "string",
            "name": "DISABLED_TOOLS"
          }
        ]
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "48c5b241-51ea-42a7-88a7-5c92f6fd3f7a",
        "versionId": "620cd12a-6e28-4390-8f71-d57405b00fd8",
        "publishedAt": "2025-09-29T02:21:18.645027333Z",
        "updatedAt": "2025-09-29T02:21:18.645027333Z",
        "isLatest": false
      }
    }
  },
  {
    "$schema": "https://static.modelcontextprotocol.io/schemas/2025-09-16/server.schema.json",
    "name": "io.github.BenAHammond/code-auditor-mcp",
    "description": "Code Quality Auditor: Analyze code for SOLID principles, DRY violations, and more",
    "status": "active",
    "repository": {
      "url": "https://github.com/BenAHammond/code-auditor-mcp",
      "source": "github"
    },
    "version": "1.0.5",
    "packages": [
      {
        "registryType": "npm",
        "registryBaseUrl": "https://registry.npmjs.org",
        "identifier": "code-auditor-mcp",
        "version": "1.18.0",
        "transport": {
          "type": "stdio"
        }
      }
    ],
    "_meta": {
      "io.modelcontextprotocol.registry/official": {
        "serverId": "da4e7c0a-854f-46b7-86ab-35564aa3069f",
        "versionId": "1c1d5f17-ee72-4e2f-9e4e-02ff6546cca0",
        "publishedAt": "2025-09-29T02:41:50.23206487Z",
        "updatedAt": "2025-09-29T02:41:50.23206487Z",
        "isLatest": true
      }
    }
  }
]